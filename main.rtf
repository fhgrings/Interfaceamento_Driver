{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1046{\fonttbl{\f0\fnil Consolas;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red63\green127\blue95;\red127\green0\blue85;\red0\green0\blue0;\red42\green0\blue255;\red0\green80\blue50;\red0\green0\blue192;\red224\green224\blue224;}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\cf1\f0\fs20\lang22 /* USER CODE BEGIN Header */\cf0\par
\cf1 /**\cf0\par
\cf1  ******************************************************************************\cf0\par
\cf1  * @file           : main.c\cf0\par
\cf1  * @brief          : Main program body\cf0\par
\cf1  ******************************************************************************\cf0\par
\cf1  * @attention\cf0\par
\cf1  *\cf0\par
\cf1  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.\cf0\par
\cf1  * All rights reserved.</center></h2>\cf0\par
\cf1  *\cf0\par
\cf1  * This software component is licensed by ST under BSD 3-Clause license,\cf0\par
\cf1  * the "License"; You may not use this file except in compliance with the\cf0\par
\cf1  * License. You may obtain a copy of the License at:\cf0\par
\cf1  *                        opensource.org/licenses/BSD-3-Clause\cf0\par
\cf1  *\cf0\par
\cf1  ******************************************************************************\cf0\par
\cf1  */\cf0\par
\cf1 /* USER CODE END Header */\cf0\par
\par
\cf1 /* Includes ------------------------------------------------------------------*/\cf0\par
\cf2\b #include\cf3\b0  \cf4 "main.h"\cf0\par
\par
\cf1 /* Private includes ----------------------------------------------------------*/\cf0\par
\cf1 /* USER CODE BEGIN Includes */\cf0\par
\par
\cf2\ul\b #include\cf3\b0  \cf4 <string.h>\cf0\ulnone\par
\par
\cf1 /* USER CODE END Includes */\cf0\par
\par
\cf1 /* Private typedef -----------------------------------------------------------*/\cf0\par
\cf1 /* USER CODE BEGIN PTD */\cf0\par
\par
\cf1 /* USER CODE END PTD */\cf0\par
\par
\cf1 /* Private define ------------------------------------------------------------*/\cf0\par
\cf1 /* USER CODE BEGIN PD */\cf0\par
\par
\cf1 /* USER CODE END PD */\cf0\par
\par
\cf1 /* Private macro -------------------------------------------------------------*/\cf0\par
\cf1 /* USER CODE BEGIN PM */\cf0\par
\par
\cf1 /* USER CODE END PM */\cf0\par
\par
\cf1 /* Private variables ---------------------------------------------------------*/\cf0\par
\cf5 TIM_HandleTypeDef\cf3  htim3;\cf0\par
\par
\cf5 UART_HandleTypeDef\cf3  huart2;\cf0\par
\par
\cf1 /* USER CODE BEGIN PV */\cf0\par
\par
\cf1 /* USER CODE END PV */\cf0\par
\par
\cf1 /* Private function prototypes -----------------------------------------------*/\cf0\par
\cf2\b void\cf3\b0  \b SystemClock_Config\b0 (\cf2\b void\cf3\b0 );\cf0\par
\cf2\b static\cf3\b0  \cf2\b void\cf3\b0  \b MX_GPIO_Init\b0 (\cf2\b void\cf3\b0 );\cf0\par
\cf2\b static\cf3\b0  \cf2\b void\cf3\b0  \b MX_TIM3_Init\b0 (\cf2\b void\cf3\b0 );\cf0\par
\cf2\b static\cf3\b0  \cf2\b void\cf3\b0  \b MX_USART2_UART_Init\b0 (\cf2\b void\cf3\b0 );\cf0\par
\cf1 /* USER CODE BEGIN PFP */\cf0\par
\cf3 uint8_t Buffer[50] = \cf4 "\ul teste\ulnone "\cf3 ;\cf0\par
\cf3 uint8_t timer[8] = \cf4 "\ul teste\ulnone  Timer"\cf3 ;\cf0\par
\par
\par
\par
\cf2\b int\cf3\b0  second = 0;\cf0\par
\cf2\b int\cf3\b0  minute = 0;\cf0\par
\cf2\b int\cf3\b0  hour = 0;\cf0\par
\cf1 /* USER CODE END PFP */\cf0\par
\par
\cf1 /* Private user code ---------------------------------------------------------*/\cf0\par
\cf1 /* USER CODE BEGIN 0 */\cf0\par
\par
\cf1 /* USER CODE END 0 */\cf0\par
\par
\cf1 /**\cf0\par
\cf1   * @brief  The application entry point.\cf0\par
\cf1   * @\ul retval\ulnone  \ul int\cf0\ulnone\par
\cf1   */\cf0\par
\cf2\b int\cf3\b0  \b main\b0 (\cf2\b void\cf3\b0 )\cf0\par
\cf3\{\cf0\par
\cf3   \cf1 /* USER CODE BEGIN 1 */\cf0\par
\par
\cf3   \cf1 /* USER CODE END 1 */\cf0\par
\cf3   \cf0\par
\par
\cf3   \cf1 /* MCU Configuration--------------------------------------------------------*/\cf0\par
\par
\cf3   \cf1 /* Reset of all peripherals, Initializes the Flash interface and the \ul Systick\ulnone . */\cf0\par
\cf3   HAL_Init();\cf0\par
\par
\cf3   \cf1 /* USER CODE BEGIN \ul Init\ulnone  */\cf0\par
\par
\cf3   \cf1 /* USER CODE END \ul Init\ulnone  */\cf0\par
\par
\cf3   \cf1 /* Configure the system clock */\cf0\par
\cf3   SystemClock_Config();\cf0\par
\par
\cf3   \cf1 /* USER CODE BEGIN SysInit */\cf0\par
\par
\cf3   \cf1 /* USER CODE END SysInit */\cf0\par
\par
\cf3   \cf1 /* Initialize all configured peripherals */\cf0\par
\cf3   MX_GPIO_Init();\cf0\par
\cf3   MX_TIM3_Init();\cf0\par
\cf3   MX_USART2_UART_Init();\cf0\par
\cf3   \cf1 /* USER CODE BEGIN 2 */\cf0\par
\par
\cf3   \cf1 /* USER CODE END 2 */\cf0\par
\par
\cf3   \cf1 /* Infinite loop */\cf0\par
\cf3   \cf1 /* USER CODE BEGIN WHILE */\cf0\par
\cf3\tab\cf2\b while\cf3\b0  (1) \{\cf0\par
\cf3     \cf1 /* USER CODE END WHILE */\cf0\par
\par
\cf3     \cf1 /* USER CODE BEGIN 3 */\cf0\par
\par
\cf3\tab\tab HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, \cf6\i GPIO_PIN_RESET\cf3\i0 );\cf0\par
\cf3\tab\tab HAL_Delay(500);\cf0\par
\cf3\tab\tab HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);\cf0\par
\cf3\tab\tab HAL_Delay(500);\cf0\par
\par
\par
\cf3\tab\tab\cf1 //SPRINTF(buffer, "\ul variavel\ulnone , %d", \ul variavel\ulnone )\cf0\par
\par
\cf3\tab\tab itoa(hour,Buffer, 10);\cf0\par
\cf3\tab\tab sprintf(timer + strlen(timer), Buffer);\cf0\par
\par
\cf3\tab\tab sprintf(timer + strlen(timer), \cf4 ":"\cf3 );\cf0\par
\par
\cf3\tab\tab itoa(minute, Buffer, 10);\cf0\par
\cf3\tab\tab sprintf(timer + strlen(timer), Buffer);\cf0\par
\par
\par
\cf3\tab\tab sprintf(timer + strlen(timer), \cf4 ":"\cf3 );\cf0\par
\par
\cf3\tab\tab itoa(second, Buffer, 10);\cf0\par
\cf3\tab\tab sprintf(timer + strlen(timer), Buffer);\cf0\par
\par
\cf3\tab\tab\cf2\b if\cf3\b0  (HAL_UART_Transmit(&huart2, (uint8_t*) timer, 8, 100) != \cf6\i HAL_OK\cf3\i0 ) \{\cf0\par
\cf3\tab\tab\tab Error_Handler();\cf0\par
\cf3\tab\tab\}\cf0\par
\par
\cf3\tab\tab minute ++;\cf0\par
\par
\par
\cf3\tab\tab HAL_Delay(100);\cf0\par
\cf3\tab\}\cf0\par
\cf3   \cf1 /* USER CODE END 3 */\cf0\par
\cf3\}\cf0\par
\par
\cf1 /**\cf0\par
\cf1   * @brief System Clock Configuration\cf0\par
\cf1   * @\ul retval\ulnone  None\cf0\par
\cf1   */\cf0\par
\cf2\b void\cf3\b0  \b SystemClock_Config\b0 (\cf2\b void\cf3\b0 )\cf0\par
\cf3\{\cf0\par
\cf3   \cf5 RCC_OscInitTypeDef\cf3  RCC_OscInitStruct = \{0\};\cf0\par
\cf3   \cf5 RCC_ClkInitTypeDef\cf3  RCC_ClkInitStruct = \{0\};\cf0\par
\par
\cf3   \cf1 /** Initializes the CPU, AHB and APB busses clocks \cf0\par
\cf1   */\cf0\par
\cf3   RCC_OscInitStruct.\cf6 OscillatorType\cf3  = RCC_OSCILLATORTYPE_HSI;\cf0\par
\cf3   RCC_OscInitStruct.\cf6 HSIState\cf3  = RCC_HSI_ON;\cf0\par
\cf3   RCC_OscInitStruct.\cf6 HSICalibrationValue\cf3  = RCC_HSICALIBRATION_DEFAULT;\cf0\par
\cf3   RCC_OscInitStruct.\cf6 PLL\cf3 .\cf6 PLLState\cf3  = RCC_PLL_ON;\cf0\par
\cf3   RCC_OscInitStruct.\cf6 PLL\cf3 .\cf6 PLLSource\cf3  = RCC_PLLSOURCE_HSI;\cf0\par
\cf3   RCC_OscInitStruct.\cf6 PLL\cf3 .\cf6 PLLMUL\cf3  = RCC_PLL_MUL16;\cf0\par
\cf3   \cf2\b if\cf3\b0  (HAL_RCC_OscConfig(&RCC_OscInitStruct) != \cf6\i HAL_OK\cf3\i0 )\cf0\par
\cf3   \{\cf0\par
\cf3     Error_Handler();\cf0\par
\cf3   \}\cf0\par
\cf3   \cf1 /** Initializes the CPU, AHB and APB busses clocks \cf0\par
\cf1   */\cf0\par
\cf3   RCC_ClkInitStruct.\cf6 ClockType\cf3  = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\cf0\par
\cf3                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\cf0\par
\cf3   RCC_ClkInitStruct.\cf6 SYSCLKSource\cf3  = RCC_SYSCLKSOURCE_PLLCLK;\cf0\par
\cf3   RCC_ClkInitStruct.\cf6 AHBCLKDivider\cf3  = RCC_SYSCLK_DIV1;\cf0\par
\cf3   RCC_ClkInitStruct.\cf6 APB1CLKDivider\cf3  = RCC_HCLK_DIV2;\cf0\par
\cf3   RCC_ClkInitStruct.\cf6 APB2CLKDivider\cf3  = RCC_HCLK_DIV1;\cf0\par
\par
\cf3   \cf2\b if\cf3\b0  (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != \cf6\i HAL_OK\cf3\i0 )\cf0\par
\cf3   \{\cf0\par
\cf3     Error_Handler();\cf0\par
\cf3   \}\cf0\par
\cf3\}\cf0\par
\par
\cf1 /**\cf0\par
\cf1   * @brief TIM3 Initialization Function\cf0\par
\cf1   * @\ul param\ulnone  None\cf0\par
\cf1   * @\ul retval\ulnone  None\cf0\par
\cf1   */\cf0\par
\cf2\b static\cf3\b0  \cf2\b void\cf3\b0  \b MX_TIM3_Init\b0 (\cf2\b void\cf3\b0 )\cf0\par
\cf3\{\cf0\par
\par
\cf3   \cf1 /* USER CODE BEGIN TIM3_Init 0 */\cf0\par
\par
\cf3   \cf1 /* USER CODE END TIM3_Init 0 */\cf0\par
\par
\cf3   \cf5 TIM_ClockConfigTypeDef\cf3  sClockSourceConfig = \{0\};\cf0\par
\cf3   TIM_MasterConfigTypeDef sMasterConfig = \{0\};\cf0\par
\par
\cf3   \cf1 /* USER CODE BEGIN TIM3_Init 1 */\cf0\par
\par
\cf3   \cf1 /* USER CODE END TIM3_Init 1 */\cf0\par
\cf3   htim3.\cf6 Instance\cf3  = TIM3;\cf0\par
\cf3   htim3.\cf6 Init\cf3 .\cf6 Prescaler\cf3  = 64000;\cf0\par
\cf3   htim3.\cf6 Init\cf3 .\cf6 CounterMode\cf3  = TIM_COUNTERMODE_UP;\cf0\par
\cf3   htim3.\cf6 Init\cf3 .\cf6 Period\cf3  = 1000;\cf0\par
\cf3   htim3.\cf6 Init\cf3 .\cf6 ClockDivision\cf3  = TIM_CLOCKDIVISION_DIV1;\cf0\par
\cf3   htim3.\cf6 Init\cf3 .\cf6 AutoReloadPreload\cf3  = TIM_AUTORELOAD_PRELOAD_DISABLE;\cf0\par
\cf3   \cf2\b if\cf3\b0  (HAL_TIM_Base_Init(&htim3) != \cf6\i HAL_OK\cf3\i0 )\cf0\par
\cf3   \{\cf0\par
\cf3     Error_Handler();\cf0\par
\cf3   \}\cf0\par
\cf3   sClockSourceConfig.\cf6 ClockSource\cf3  = TIM_CLOCKSOURCE_INTERNAL;\cf0\par
\cf3   \cf2\b if\cf3\b0  (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != \cf6\i HAL_OK\cf3\i0 )\cf0\par
\cf3   \{\cf0\par
\cf3     Error_Handler();\cf0\par
\cf3   \}\cf0\par
\cf3   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;\cf0\par
\cf3   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\cf0\par
\cf3   \cf2\b if\cf3\b0  (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != \cf6\i HAL_OK\cf3\i0 )\cf0\par
\cf3   \{\cf0\par
\cf3     Error_Handler();\cf0\par
\cf3   \}\cf0\par
\cf3   \cf1 /* USER CODE BEGIN TIM3_Init 2 */\cf0\par
\par
\cf3   \cf1 /* USER CODE END TIM3_Init 2 */\cf0\par
\par
\cf3\}\cf0\par
\par
\cf1 /**\cf0\par
\cf1   * @brief USART2 Initialization Function\cf0\par
\cf1   * @\ul param\ulnone  None\cf0\par
\cf1   * @\ul retval\ulnone  None\cf0\par
\cf1   */\cf0\par
\cf2\b static\cf3\b0  \cf2\b void\cf3\b0  \b MX_USART2_UART_Init\b0 (\cf2\b void\cf3\b0 )\cf0\par
\cf3\{\cf0\par
\par
\cf3   \cf1 /* USER CODE BEGIN USART2_Init 0 */\cf0\par
\par
\cf3   \cf1 /* USER CODE END USART2_Init 0 */\cf0\par
\par
\cf3   \cf1 /* USER CODE BEGIN USART2_Init 1 */\cf0\par
\par
\cf3   \cf1 /* USER CODE END USART2_Init 1 */\cf0\par
\cf3   huart2.\cf6 Instance\cf3  = USART2;\cf0\par
\cf3   huart2.\cf6 Init\cf3 .\cf6 BaudRate\cf3  = 115200;\cf0\par
\cf3   huart2.\cf6 Init\cf3 .\cf6 WordLength\cf3  = UART_WORDLENGTH_8B;\cf0\par
\cf3   huart2.\cf6 Init\cf3 .\cf6 StopBits\cf3  = UART_STOPBITS_1;\cf0\par
\cf3   huart2.\cf6 Init\cf3 .\cf6 Parity\cf3  = UART_PARITY_NONE;\cf0\par
\cf3   huart2.\cf6 Init\cf3 .\cf6 Mode\cf3  = UART_MODE_TX_RX;\cf0\par
\cf3   huart2.\cf6 Init\cf3 .\cf6 HwFlowCtl\cf3  = UART_HWCONTROL_NONE;\cf0\par
\cf3   huart2.\cf6 Init\cf3 .\cf6 OverSampling\cf3  = UART_OVERSAMPLING_16;\cf0\par
\cf3   huart2.\cf6 Init\cf3 .\cf6 OneBitSampling\cf3  = UART_ONE_BIT_SAMPLE_DISABLE;\cf0\par
\cf3   huart2.\cf6 AdvancedInit\cf3 .\cf6 AdvFeatureInit\cf3  = UART_ADVFEATURE_NO_INIT;\cf0\par
\cf3   \cf2\b if\cf3\b0  (HAL_UART_Init(&huart2) != \cf6\i HAL_OK\cf3\i0 )\cf0\par
\cf3   \{\cf0\par
\cf3     Error_Handler();\cf0\par
\cf3   \}\cf0\par
\cf3   \cf1 /* USER CODE BEGIN USART2_Init 2 */\cf0\par
\par
\cf3   \cf1 /* USER CODE END USART2_Init 2 */\cf0\par
\par
\cf3\}\cf0\par
\par
\cf1 /**\cf0\par
\cf1   * @brief GPIO Initialization Function\cf0\par
\cf1   * @\ul param\ulnone  None\cf0\par
\cf1   * @\ul retval\ulnone  None\cf0\par
\cf1   */\cf0\par
\cf2\b static\cf3\b0  \cf2\b void\cf3\b0  \b MX_GPIO_Init\b0 (\cf2\b void\cf3\b0 )\cf0\par
\cf3\{\cf0\par
\cf3   \cf5 GPIO_InitTypeDef\cf3  GPIO_InitStruct = \{0\};\cf0\par
\par
\cf3   \cf1 /* GPIO Ports Clock Enable */\cf0\par
\cf3   \ul __HAL_RCC_GPIOC_CLK_ENABLE()\ulnone ;\cf0\par
\cf3   \ul __HAL_RCC_GPIOF_CLK_ENABLE()\ulnone ;\cf0\par
\cf3   \ul __HAL_RCC_GPIOA_CLK_ENABLE()\ulnone ;\cf0\par
\cf3   \ul __HAL_RCC_GPIOB_CLK_ENABLE()\ulnone ;\cf0\par
\par
\cf3   \cf1 /*Configure GPIO pin Output Level */\cf0\par
\cf3   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, \cf6\i GPIO_PIN_RESET\cf3\i0 );\cf0\par
\par
\cf3   \cf1 /*Configure GPIO pin : B1_Pin */\cf0\par
\cf3   GPIO_InitStruct.\cf6 Pin\cf3  = B1_Pin;\cf0\par
\cf3   GPIO_InitStruct.\cf6 Mode\cf3  = GPIO_MODE_IT_FALLING;\cf0\par
\cf3   GPIO_InitStruct.\cf6 Pull\cf3  = GPIO_NOPULL;\cf0\par
\cf3   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);\cf0\par
\par
\cf3   \cf1 /*Configure GPIO pin : LD2_Pin */\cf0\par
\cf3   GPIO_InitStruct.\cf6 Pin\cf3  = LD2_Pin;\cf0\par
\cf3   GPIO_InitStruct.\cf6 Mode\cf3  = GPIO_MODE_OUTPUT_PP;\cf0\par
\cf3   GPIO_InitStruct.\cf6 Pull\cf3  = GPIO_NOPULL;\cf0\par
\cf3   GPIO_InitStruct.\cf6 Speed\cf3  = GPIO_SPEED_FREQ_LOW;\cf0\par
\cf3   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);\cf0\par
\par
\cf3\}\cf0\par
\par
\cf1 /* USER CODE BEGIN 4 */\cf0\par
\par
\cf1 /* USER CODE END 4 */\cf0\par
\par
\cf1 /**\cf0\par
\cf1   * @brief  This function is executed in case of error occurrence.\cf0\par
\cf1   * @\ul retval\ulnone  None\cf0\par
\cf1   */\cf0\par
\cf2\b void\cf3\b0  \b Error_Handler\b0 (\cf2\b void\cf3\b0 )\cf0\par
\cf3\{\cf0\par
\cf3   \cf1 /* USER CODE BEGIN Error_Handler_Debug */\cf0\par
\cf3\tab\cf1 /* User can add his own implementation to report the HAL error return state */\cf0\par
\par
\cf3   \cf1 /* USER CODE END Error_Handler_Debug */\cf0\par
\cf3\}\cf0\par
\par
\cf2\highlight7\b #ifdef\cf3\b0   USE_FULL_ASSERT\cf0\highlight0\par
\cf1\highlight7 /**\cf0\highlight0\par
\cf1\highlight7   * @brief  Reports the name of the source file and the source line number\cf0\highlight0\par
\cf1\highlight7   *         where the assert_param error has occurred.\cf0\highlight0\par
\cf1\highlight7   * @\ul param\ulnone   file: pointer to the source file name\cf0\highlight0\par
\cf1\highlight7   * @\ul param\ulnone   line: assert_param error line source number\cf0\highlight0\par
\cf1\highlight7   * @\ul retval\ulnone  None\cf0\highlight0\par
\cf1\highlight7   */\cf0\highlight0\par
\cf2\highlight7\b void\cf3\b0  assert_failed(\cf2\b char\cf3\b0  *file, uint32_t line)\cf0\highlight0\par
\cf3\highlight7\{ \cf0\highlight0\par
\cf3\highlight7   \cf1 /* USER CODE BEGIN 6 */\cf0\highlight0\par
\cf3\highlight7   \cf1 /* User can add his own implementation to report the file name and line number,\cf0\highlight0\par
\cf1\highlight7      \ul tex\ulnone : \ul printf\ulnone ("Wrong parameters value: file %s on line %d\\r\\n", file, line) */\cf0\highlight0\par
\cf3\highlight7   \cf1 /* USER CODE END 6 */\cf0\highlight0\par
\cf3\highlight7\}\cf0\highlight0\par
\cf2\highlight7\b #endif\cf3\b0  \cf1 /* USE_FULL_ASSERT */\cf0\highlight0\par
\par
\cf1 /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/\cf0\par
\f1\fs22\par
}
 