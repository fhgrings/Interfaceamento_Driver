
MultiProgramacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005750  08005750  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005750  08005750  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005750  08005750  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016bc  20000074  080057cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001730  080057cc  00021730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a44  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000279e  00000000  00000000  00032ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  00035288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  00035de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d96f  00000000  00000000  00036840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8fc  00000000  00000000  000541af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a39bc  00000000  00000000  0005eaab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102467  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  001024e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005610 	.word	0x08005610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005610 	.word	0x08005610

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f90d 	bl	80004b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	200f      	movs	r0, #15
 8000298:	f000 f808 	bl	80002ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f004 fc4c 	bl	8004b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_InitTick+0x54>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_InitTick+0x58>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f917 	bl	80004fe <HAL_SYSTICK_Config>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00e      	b.n	80002f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d80a      	bhi.n	80002f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e0:	2200      	movs	r2, #0
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295
 80002e8:	f000 f8ed 	bl	80004c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <HAL_InitTick+0x5c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e000      	b.n	80002f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002f6:	2301      	movs	r3, #1
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000000c 	.word	0x2000000c
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000

0800030c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x20>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x24>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4413      	add	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_IncTick+0x24>)
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004
 8000330:	20001570 	.word	0x20001570

08000334 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return uwTick;  
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <HAL_GetTick+0x14>)
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20001570 	.word	0x20001570

0800034c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f003 0307 	and.w	r3, r3, #7
 800035a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <NVIC_SetPriorityGrouping+0x44>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000362:	68ba      	ldr	r2, [r7, #8]
 8000364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000368:	4013      	ands	r3, r2
 800036a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800037e:	4a04      	ldr	r2, [pc, #16]	; (8000390 <NVIC_SetPriorityGrouping+0x44>)
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	60d3      	str	r3, [r2, #12]
}
 8000384:	bf00      	nop
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <NVIC_GetPriorityGrouping+0x18>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	0a1b      	lsrs	r3, r3, #8
 800039e:	f003 0307 	and.w	r3, r3, #7
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	6039      	str	r1, [r7, #0]
 80003ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	da0b      	bge.n	80003dc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	490c      	ldr	r1, [pc, #48]	; (80003fc <NVIC_SetPriority+0x4c>)
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	f003 030f 	and.w	r3, r3, #15
 80003d0:	3b04      	subs	r3, #4
 80003d2:	0112      	lsls	r2, r2, #4
 80003d4:	b2d2      	uxtb	r2, r2
 80003d6:	440b      	add	r3, r1
 80003d8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003da:	e009      	b.n	80003f0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4907      	ldr	r1, [pc, #28]	; (8000400 <NVIC_SetPriority+0x50>)
 80003e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e6:	0112      	lsls	r2, r2, #4
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	440b      	add	r3, r1
 80003ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	e000ed00 	.word	0xe000ed00
 8000400:	e000e100 	.word	0xe000e100

08000404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000404:	b480      	push	{r7}
 8000406:	b089      	sub	sp, #36	; 0x24
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f003 0307 	and.w	r3, r3, #7
 8000416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000418:	69fb      	ldr	r3, [r7, #28]
 800041a:	f1c3 0307 	rsb	r3, r3, #7
 800041e:	2b04      	cmp	r3, #4
 8000420:	bf28      	it	cs
 8000422:	2304      	movcs	r3, #4
 8000424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	3304      	adds	r3, #4
 800042a:	2b06      	cmp	r3, #6
 800042c:	d902      	bls.n	8000434 <NVIC_EncodePriority+0x30>
 800042e:	69fb      	ldr	r3, [r7, #28]
 8000430:	3b03      	subs	r3, #3
 8000432:	e000      	b.n	8000436 <NVIC_EncodePriority+0x32>
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000438:	f04f 32ff 	mov.w	r2, #4294967295
 800043c:	69bb      	ldr	r3, [r7, #24]
 800043e:	fa02 f303 	lsl.w	r3, r2, r3
 8000442:	43da      	mvns	r2, r3
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	401a      	ands	r2, r3
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800044c:	f04f 31ff 	mov.w	r1, #4294967295
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	fa01 f303 	lsl.w	r3, r1, r3
 8000456:	43d9      	mvns	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800045c:	4313      	orrs	r3, r2
         );
}
 800045e:	4618      	mov	r0, r3
 8000460:	3724      	adds	r7, #36	; 0x24
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
	...

0800046c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3b01      	subs	r3, #1
 8000478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800047c:	d301      	bcc.n	8000482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800047e:	2301      	movs	r3, #1
 8000480:	e00f      	b.n	80004a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <SysTick_Config+0x40>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3b01      	subs	r3, #1
 8000488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800048a:	210f      	movs	r1, #15
 800048c:	f04f 30ff 	mov.w	r0, #4294967295
 8000490:	f7ff ff8e 	bl	80003b0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <SysTick_Config+0x40>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800049a:	4b04      	ldr	r3, [pc, #16]	; (80004ac <SysTick_Config+0x40>)
 800049c:	2207      	movs	r2, #7
 800049e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	e000e010 	.word	0xe000e010

080004b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f7ff ff47 	bl	800034c <NVIC_SetPriorityGrouping>
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b086      	sub	sp, #24
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	4603      	mov	r3, r0
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
 80004d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004d8:	f7ff ff5c 	bl	8000394 <NVIC_GetPriorityGrouping>
 80004dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	68b9      	ldr	r1, [r7, #8]
 80004e2:	6978      	ldr	r0, [r7, #20]
 80004e4:	f7ff ff8e 	bl	8000404 <NVIC_EncodePriority>
 80004e8:	4602      	mov	r2, r0
 80004ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff5d 	bl	80003b0 <NVIC_SetPriority>
}
 80004f6:	bf00      	nop
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffb0 	bl	800046c <SysTick_Config>
 800050c:	4603      	mov	r3, r0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800052e:	e14e      	b.n	80007ce <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	2101      	movs	r1, #1
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	fa01 f303 	lsl.w	r3, r1, r3
 800053c:	4013      	ands	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	2b00      	cmp	r3, #0
 8000544:	f000 8140 	beq.w	80007c8 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d003      	beq.n	8000558 <HAL_GPIO_Init+0x40>
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	2b12      	cmp	r3, #18
 8000556:	d123      	bne.n	80005a0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	08da      	lsrs	r2, r3, #3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3208      	adds	r2, #8
 8000560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000564:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	f003 0307 	and.w	r3, r3, #7
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	220f      	movs	r2, #15
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	43db      	mvns	r3, r3
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	4013      	ands	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	691a      	ldr	r2, [r3, #16]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	fa02 f303 	lsl.w	r3, r2, r3
 800058c:	693a      	ldr	r2, [r7, #16]
 800058e:	4313      	orrs	r3, r2
 8000590:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	08da      	lsrs	r2, r3, #3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3208      	adds	r2, #8
 800059a:	6939      	ldr	r1, [r7, #16]
 800059c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2203      	movs	r2, #3
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	4013      	ands	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	f003 0203 	and.w	r2, r3, #3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00b      	beq.n	80005f4 <HAL_GPIO_Init+0xdc>
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d007      	beq.n	80005f4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005e8:	2b11      	cmp	r3, #17
 80005ea:	d003      	beq.n	80005f4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	2b12      	cmp	r3, #18
 80005f2:	d130      	bne.n	8000656 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	2203      	movs	r2, #3
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	43db      	mvns	r3, r3
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	4013      	ands	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	4313      	orrs	r3, r2
 800061c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800062a:	2201      	movs	r2, #1
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	4013      	ands	r3, r2
 8000638:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	091b      	lsrs	r3, r3, #4
 8000640:	f003 0201 	and.w	r2, r3, #1
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	4313      	orrs	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	2203      	movs	r2, #3
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	43db      	mvns	r3, r3
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	4013      	ands	r3, r2
 800066c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	4313      	orrs	r3, r2
 800067e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	2b00      	cmp	r3, #0
 8000690:	f000 809a 	beq.w	80007c8 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000694:	4b55      	ldr	r3, [pc, #340]	; (80007ec <HAL_GPIO_Init+0x2d4>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a54      	ldr	r2, [pc, #336]	; (80007ec <HAL_GPIO_Init+0x2d4>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b52      	ldr	r3, [pc, #328]	; (80007ec <HAL_GPIO_Init+0x2d4>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006ac:	4a50      	ldr	r2, [pc, #320]	; (80007f0 <HAL_GPIO_Init+0x2d8>)
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	089b      	lsrs	r3, r3, #2
 80006b2:	3302      	adds	r3, #2
 80006b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	f003 0303 	and.w	r3, r3, #3
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	220f      	movs	r2, #15
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	4013      	ands	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006d6:	d013      	beq.n	8000700 <HAL_GPIO_Init+0x1e8>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a46      	ldr	r2, [pc, #280]	; (80007f4 <HAL_GPIO_Init+0x2dc>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d00d      	beq.n	80006fc <HAL_GPIO_Init+0x1e4>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a45      	ldr	r2, [pc, #276]	; (80007f8 <HAL_GPIO_Init+0x2e0>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d007      	beq.n	80006f8 <HAL_GPIO_Init+0x1e0>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a44      	ldr	r2, [pc, #272]	; (80007fc <HAL_GPIO_Init+0x2e4>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d101      	bne.n	80006f4 <HAL_GPIO_Init+0x1dc>
 80006f0:	2303      	movs	r3, #3
 80006f2:	e006      	b.n	8000702 <HAL_GPIO_Init+0x1ea>
 80006f4:	2305      	movs	r3, #5
 80006f6:	e004      	b.n	8000702 <HAL_GPIO_Init+0x1ea>
 80006f8:	2302      	movs	r3, #2
 80006fa:	e002      	b.n	8000702 <HAL_GPIO_Init+0x1ea>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <HAL_GPIO_Init+0x1ea>
 8000700:	2300      	movs	r3, #0
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	f002 0203 	and.w	r2, r2, #3
 8000708:	0092      	lsls	r2, r2, #2
 800070a:	4093      	lsls	r3, r2
 800070c:	693a      	ldr	r2, [r7, #16]
 800070e:	4313      	orrs	r3, r2
 8000710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000712:	4937      	ldr	r1, [pc, #220]	; (80007f0 <HAL_GPIO_Init+0x2d8>)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	089b      	lsrs	r3, r3, #2
 8000718:	3302      	adds	r3, #2
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000720:	4b37      	ldr	r3, [pc, #220]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	43db      	mvns	r3, r3
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	4013      	ands	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4313      	orrs	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000744:	4a2e      	ldr	r2, [pc, #184]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	43db      	mvns	r3, r3
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	4013      	ands	r3, r2
 8000758:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000762:	2b00      	cmp	r3, #0
 8000764:	d003      	beq.n	800076e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4313      	orrs	r3, r2
 800076c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800076e:	4a24      	ldr	r2, [pc, #144]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	43db      	mvns	r3, r3
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	4013      	ands	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4313      	orrs	r3, r2
 8000796:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000798:	4a19      	ldr	r2, [pc, #100]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	43db      	mvns	r3, r3
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	4013      	ands	r3, r2
 80007ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d003      	beq.n	80007c2 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4313      	orrs	r3, r2
 80007c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	fa22 f303 	lsr.w	r3, r2, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f47f aea9 	bne.w	8000530 <HAL_GPIO_Init+0x18>
  }
}
 80007de:	bf00      	nop
 80007e0:	371c      	adds	r7, #28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010000 	.word	0x40010000
 80007f4:	48000400 	.word	0x48000400
 80007f8:	48000800 	.word	0x48000800
 80007fc:	48000c00 	.word	0x48000c00
 8000800:	40010400 	.word	0x40010400

08000804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	807b      	strh	r3, [r7, #2]
 8000810:	4613      	mov	r3, r2
 8000812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000814:	787b      	ldrb	r3, [r7, #1]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d003      	beq.n	8000822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800081a:	887a      	ldrh	r2, [r7, #2]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000820:	e002      	b.n	8000828 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000822:	887a      	ldrh	r2, [r7, #2]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800083a:	af00      	add	r7, sp, #0
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	f000 beda 	b.w	8001602 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	f000 816e 	beq.w	8000b3a <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800085e:	4bb5      	ldr	r3, [pc, #724]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f003 030c 	and.w	r3, r3, #12
 8000866:	2b04      	cmp	r3, #4
 8000868:	d00c      	beq.n	8000884 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800086a:	4bb2      	ldr	r3, [pc, #712]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 030c 	and.w	r3, r3, #12
 8000872:	2b08      	cmp	r3, #8
 8000874:	d15a      	bne.n	800092c <HAL_RCC_OscConfig+0xf8>
 8000876:	4baf      	ldr	r3, [pc, #700]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800087e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000882:	d153      	bne.n	800092c <HAL_RCC_OscConfig+0xf8>
 8000884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000888:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800088c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000890:	fa93 f3a3 	rbit	r3, r3
 8000894:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000898:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800089c:	fab3 f383 	clz	r3, r3
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d102      	bne.n	80008b6 <HAL_RCC_OscConfig+0x82>
 80008b0:	4ba0      	ldr	r3, [pc, #640]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	e015      	b.n	80008e2 <HAL_RCC_OscConfig+0xae>
 80008b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80008c2:	fa93 f3a3 	rbit	r3, r3
 80008c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80008ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80008d2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80008d6:	fa93 f3a3 	rbit	r3, r3
 80008da:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80008de:	4b95      	ldr	r3, [pc, #596]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 80008e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008e6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80008ea:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80008ee:	fa92 f2a2 	rbit	r2, r2
 80008f2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80008f6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80008fa:	fab2 f282 	clz	r2, r2
 80008fe:	b252      	sxtb	r2, r2
 8000900:	f042 0220 	orr.w	r2, r2, #32
 8000904:	b252      	sxtb	r2, r2
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	f002 021f 	and.w	r2, r2, #31
 800090c:	2101      	movs	r1, #1
 800090e:	fa01 f202 	lsl.w	r2, r1, r2
 8000912:	4013      	ands	r3, r2
 8000914:	2b00      	cmp	r3, #0
 8000916:	f000 810f 	beq.w	8000b38 <HAL_RCC_OscConfig+0x304>
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	f040 8109 	bne.w	8000b38 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	f000 be6b 	b.w	8001602 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000936:	d106      	bne.n	8000946 <HAL_RCC_OscConfig+0x112>
 8000938:	4b7e      	ldr	r3, [pc, #504]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a7d      	ldr	r2, [pc, #500]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 800093e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e030      	b.n	80009a8 <HAL_RCC_OscConfig+0x174>
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10c      	bne.n	800096a <HAL_RCC_OscConfig+0x136>
 8000950:	4b78      	ldr	r3, [pc, #480]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a77      	ldr	r2, [pc, #476]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b75      	ldr	r3, [pc, #468]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a74      	ldr	r2, [pc, #464]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	e01e      	b.n	80009a8 <HAL_RCC_OscConfig+0x174>
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000974:	d10c      	bne.n	8000990 <HAL_RCC_OscConfig+0x15c>
 8000976:	4b6f      	ldr	r3, [pc, #444]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a6e      	ldr	r2, [pc, #440]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 800097c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	4b6c      	ldr	r3, [pc, #432]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a6b      	ldr	r2, [pc, #428]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800098c:	6013      	str	r3, [r2, #0]
 800098e:	e00b      	b.n	80009a8 <HAL_RCC_OscConfig+0x174>
 8000990:	4b68      	ldr	r3, [pc, #416]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a67      	ldr	r2, [pc, #412]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b65      	ldr	r3, [pc, #404]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a64      	ldr	r2, [pc, #400]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 80009a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009a8:	4b62      	ldr	r3, [pc, #392]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 80009aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ac:	f023 020f 	bic.w	r2, r3, #15
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	495f      	ldr	r1, [pc, #380]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 80009b8:	4313      	orrs	r3, r2
 80009ba:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d05a      	beq.n	8000a7c <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009c6:	f7ff fcb5 	bl	8000334 <HAL_GetTick>
 80009ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ce:	e00a      	b.n	80009e6 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009d0:	f7ff fcb0 	bl	8000334 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	2b64      	cmp	r3, #100	; 0x64
 80009de:	d902      	bls.n	80009e6 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80009e0:	2303      	movs	r3, #3
 80009e2:	f000 be0e 	b.w	8001602 <HAL_RCC_OscConfig+0xdce>
 80009e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009ea:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ee:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80009f2:	fa93 f3a3 	rbit	r3, r3
 80009f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80009fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009fe:	fab3 f383 	clz	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	095b      	lsrs	r3, r3, #5
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d102      	bne.n	8000a18 <HAL_RCC_OscConfig+0x1e4>
 8000a12:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	e015      	b.n	8000a44 <HAL_RCC_OscConfig+0x210>
 8000a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a1c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a20:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a24:	fa93 f3a3 	rbit	r3, r3
 8000a28:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a30:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000a34:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000a38:	fa93 f3a3 	rbit	r3, r3
 8000a3c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000a40:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a48:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000a4c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000a50:	fa92 f2a2 	rbit	r2, r2
 8000a54:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000a58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000a5c:	fab2 f282 	clz	r2, r2
 8000a60:	b252      	sxtb	r2, r2
 8000a62:	f042 0220 	orr.w	r2, r2, #32
 8000a66:	b252      	sxtb	r2, r2
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	f002 021f 	and.w	r2, r2, #31
 8000a6e:	2101      	movs	r1, #1
 8000a70:	fa01 f202 	lsl.w	r2, r1, r2
 8000a74:	4013      	ands	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0aa      	beq.n	80009d0 <HAL_RCC_OscConfig+0x19c>
 8000a7a:	e05e      	b.n	8000b3a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a7c:	f7ff fc5a 	bl	8000334 <HAL_GetTick>
 8000a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a84:	e00a      	b.n	8000a9c <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a86:	f7ff fc55 	bl	8000334 <HAL_GetTick>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	2b64      	cmp	r3, #100	; 0x64
 8000a94:	d902      	bls.n	8000a9c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000a96:	2303      	movs	r3, #3
 8000a98:	f000 bdb3 	b.w	8001602 <HAL_RCC_OscConfig+0xdce>
 8000a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aa0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000aa8:	fa93 f3a3 	rbit	r3, r3
 8000aac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000ab0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ab4:	fab3 f383 	clz	r3, r3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d102      	bne.n	8000ace <HAL_RCC_OscConfig+0x29a>
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	e015      	b.n	8000afa <HAL_RCC_OscConfig+0x2c6>
 8000ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ad2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000ada:	fa93 f3a3 	rbit	r3, r3
 8000ade:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000ae2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000aea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000aee:	fa93 f3a3 	rbit	r3, r3
 8000af2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_RCC_OscConfig+0x300>)
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000afe:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b02:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b06:	fa92 f2a2 	rbit	r2, r2
 8000b0a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b12:	fab2 f282 	clz	r2, r2
 8000b16:	b252      	sxtb	r2, r2
 8000b18:	f042 0220 	orr.w	r2, r2, #32
 8000b1c:	b252      	sxtb	r2, r2
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	f002 021f 	and.w	r2, r2, #31
 8000b24:	2101      	movs	r1, #1
 8000b26:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1aa      	bne.n	8000a86 <HAL_RCC_OscConfig+0x252>
 8000b30:	e003      	b.n	8000b3a <HAL_RCC_OscConfig+0x306>
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 8170 	beq.w	8000e2a <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b4a:	4bd0      	ldr	r3, [pc, #832]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 030c 	and.w	r3, r3, #12
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00b      	beq.n	8000b6e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b56:	4bcd      	ldr	r3, [pc, #820]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d16d      	bne.n	8000c3e <HAL_RCC_OscConfig+0x40a>
 8000b62:	4bca      	ldr	r3, [pc, #808]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d167      	bne.n	8000c3e <HAL_RCC_OscConfig+0x40a>
 8000b6e:	2302      	movs	r3, #2
 8000b70:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b74:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b78:	fa93 f3a3 	rbit	r3, r3
 8000b7c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000b80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b84:	fab3 f383 	clz	r3, r3
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d102      	bne.n	8000b9e <HAL_RCC_OscConfig+0x36a>
 8000b98:	4bbc      	ldr	r3, [pc, #752]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	e013      	b.n	8000bc6 <HAL_RCC_OscConfig+0x392>
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000ba8:	fa93 f3a3 	rbit	r3, r3
 8000bac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000bb6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000bba:	fa93 f3a3 	rbit	r3, r3
 8000bbe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000bc2:	4bb2      	ldr	r3, [pc, #712]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000bcc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000bd0:	fa92 f2a2 	rbit	r2, r2
 8000bd4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000bd8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b252      	sxtb	r2, r2
 8000be2:	f042 0220 	orr.w	r2, r2, #32
 8000be6:	b252      	sxtb	r2, r2
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	f002 021f 	and.w	r2, r2, #31
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d007      	beq.n	8000c0a <HAL_RCC_OscConfig+0x3d6>
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d002      	beq.n	8000c0a <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f000 bcfc 	b.w	8001602 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c0a:	4ba0      	ldr	r3, [pc, #640]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6959      	ldr	r1, [r3, #20]
 8000c18:	23f8      	movs	r3, #248	; 0xf8
 8000c1a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c22:	fa93 f3a3 	rbit	r3, r3
 8000c26:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000c2a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000c2e:	fab3 f383 	clz	r3, r3
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	4995      	ldr	r1, [pc, #596]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c3c:	e0f5      	b.n	8000e2a <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 8085 	beq.w	8000d54 <HAL_RCC_OscConfig+0x520>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c50:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000c5c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c60:	fab3 f383 	clz	r3, r3
 8000c64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	2301      	movs	r3, #1
 8000c72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c74:	f7ff fb5e 	bl	8000334 <HAL_GetTick>
 8000c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7c:	e00a      	b.n	8000c94 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c7e:	f7ff fb59 	bl	8000334 <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d902      	bls.n	8000c94 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	f000 bcb7 	b.w	8001602 <HAL_RCC_OscConfig+0xdce>
 8000c94:	2302      	movs	r3, #2
 8000c96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c9e:	fa93 f3a3 	rbit	r3, r3
 8000ca2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000ca6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000caa:	fab3 f383 	clz	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	095b      	lsrs	r3, r3, #5
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d102      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x490>
 8000cbe:	4b73      	ldr	r3, [pc, #460]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	e013      	b.n	8000cec <HAL_RCC_OscConfig+0x4b8>
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000cce:	fa93 f3a3 	rbit	r3, r3
 8000cd2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000cdc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000ce8:	4b68      	ldr	r3, [pc, #416]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cec:	2202      	movs	r2, #2
 8000cee:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000cf2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000cf6:	fa92 f2a2 	rbit	r2, r2
 8000cfa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000cfe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	b252      	sxtb	r2, r2
 8000d08:	f042 0220 	orr.w	r2, r2, #32
 8000d0c:	b252      	sxtb	r2, r2
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	f002 021f 	and.w	r2, r2, #31
 8000d14:	2101      	movs	r1, #1
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0ae      	beq.n	8000c7e <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d20:	4b5a      	ldr	r3, [pc, #360]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6959      	ldr	r1, [r3, #20]
 8000d2e:	23f8      	movs	r3, #248	; 0xf8
 8000d30:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d34:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000d38:	fa93 f3a3 	rbit	r3, r3
 8000d3c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000d40:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	494f      	ldr	r1, [pc, #316]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
 8000d52:	e06a      	b.n	8000e2a <HAL_RCC_OscConfig+0x5f6>
 8000d54:	2301      	movs	r3, #1
 8000d56:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d5e:	fa93 f3a3 	rbit	r3, r3
 8000d62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000d66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6a:	fab3 f383 	clz	r3, r3
 8000d6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fad9 	bl	8000334 <HAL_GetTick>
 8000d82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d86:	e00a      	b.n	8000d9e <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d88:	f7ff fad4 	bl	8000334 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d902      	bls.n	8000d9e <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	f000 bc32 	b.w	8001602 <HAL_RCC_OscConfig+0xdce>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000da8:	fa93 f3a3 	rbit	r3, r3
 8000dac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000db0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db4:	fab3 f383 	clz	r3, r3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d102      	bne.n	8000dce <HAL_RCC_OscConfig+0x59a>
 8000dc8:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	e013      	b.n	8000df6 <HAL_RCC_OscConfig+0x5c2>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000de6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <HAL_RCC_OscConfig+0x658>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	2202      	movs	r2, #2
 8000df8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000dfc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e00:	fa92 f2a2 	rbit	r2, r2
 8000e04:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e08:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e0c:	fab2 f282 	clz	r2, r2
 8000e10:	b252      	sxtb	r2, r2
 8000e12:	f042 0220 	orr.w	r2, r2, #32
 8000e16:	b252      	sxtb	r2, r2
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	f002 021f 	and.w	r2, r2, #31
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1ae      	bne.n	8000d88 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 80d8 	beq.w	8000fea <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d067      	beq.n	8000f14 <HAL_RCC_OscConfig+0x6e0>
 8000e44:	2301      	movs	r3, #1
 8000e46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000e56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e5a:	fab3 f383 	clz	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_RCC_OscConfig+0x65c>)
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	461a      	mov	r2, r3
 8000e68:	2301      	movs	r3, #1
 8000e6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6c:	f7ff fa62 	bl	8000334 <HAL_GetTick>
 8000e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e74:	e00e      	b.n	8000e94 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e76:	f7ff fa5d 	bl	8000334 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d906      	bls.n	8000e94 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e3bb      	b.n	8001602 <HAL_RCC_OscConfig+0xdce>
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	10908120 	.word	0x10908120
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000eb0:	fa93 f2a3 	rbit	r2, r3
 8000eb4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	fa93 f2a3 	rbit	r2, r3
 8000ecc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000ed0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed2:	4ba5      	ldr	r3, [pc, #660]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 8000ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ed6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000eda:	2102      	movs	r1, #2
 8000edc:	6019      	str	r1, [r3, #0]
 8000ede:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	fa93 f1a3 	rbit	r1, r3
 8000ee8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000eec:	6019      	str	r1, [r3, #0]
  return(result);
 8000eee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0b1      	beq.n	8000e76 <HAL_RCC_OscConfig+0x642>
 8000f12:	e06a      	b.n	8000fea <HAL_RCC_OscConfig+0x7b6>
 8000f14:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	fa93 f2a3 	rbit	r2, r3
 8000f26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f2a:	601a      	str	r2, [r3, #0]
  return(result);
 8000f2c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f32:	fab3 f383 	clz	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b8c      	ldr	r3, [pc, #560]	; (800116c <HAL_RCC_OscConfig+0x938>)
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2300      	movs	r3, #0
 8000f42:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f44:	f7ff f9f6 	bl	8000334 <HAL_GetTick>
 8000f48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4c:	e009      	b.n	8000f62 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f4e:	f7ff f9f1 	bl	8000334 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e34f      	b.n	8001602 <HAL_RCC_OscConfig+0xdce>
 8000f62:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f66:	2202      	movs	r2, #2
 8000f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	fa93 f2a3 	rbit	r2, r3
 8000f74:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f7e:	2202      	movs	r2, #2
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	fa93 f2a3 	rbit	r2, r3
 8000f8c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f96:	2202      	movs	r2, #2
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	fa93 f2a3 	rbit	r2, r3
 8000fa4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000fa8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000faa:	4b6f      	ldr	r3, [pc, #444]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 8000fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	6019      	str	r1, [r3, #0]
 8000fb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	fa93 f1a3 	rbit	r1, r3
 8000fc0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fc4:	6019      	str	r1, [r3, #0]
  return(result);
 8000fc6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	fab3 f383 	clz	r3, r3
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1b1      	bne.n	8000f4e <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 8159 	beq.w	80012ac <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001000:	4b59      	ldr	r3, [pc, #356]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d112      	bne.n	8001032 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	4b56      	ldr	r3, [pc, #344]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	4a55      	ldr	r2, [pc, #340]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001016:	61d3      	str	r3, [r2, #28]
 8001018:	4b53      	ldr	r3, [pc, #332]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800102c:	2301      	movs	r3, #1
 800102e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001032:	4b4f      	ldr	r3, [pc, #316]	; (8001170 <HAL_RCC_OscConfig+0x93c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	2b00      	cmp	r3, #0
 800103c:	d11a      	bne.n	8001074 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <HAL_RCC_OscConfig+0x93c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <HAL_RCC_OscConfig+0x93c>)
 8001044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001048:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800104a:	f7ff f973 	bl	8000334 <HAL_GetTick>
 800104e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001052:	e009      	b.n	8001068 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001054:	f7ff f96e 	bl	8000334 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b64      	cmp	r3, #100	; 0x64
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e2cc      	b.n	8001602 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001068:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_RCC_OscConfig+0x93c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0ef      	beq.n	8001054 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d106      	bne.n	800108c <HAL_RCC_OscConfig+0x858>
 800107e:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4a39      	ldr	r2, [pc, #228]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6213      	str	r3, [r2, #32]
 800108a:	e02f      	b.n	80010ec <HAL_RCC_OscConfig+0x8b8>
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x87c>
 8001096:	4b34      	ldr	r3, [pc, #208]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4a33      	ldr	r2, [pc, #204]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 800109c:	f023 0301 	bic.w	r3, r3, #1
 80010a0:	6213      	str	r3, [r2, #32]
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a30      	ldr	r2, [pc, #192]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 80010a8:	f023 0304 	bic.w	r3, r3, #4
 80010ac:	6213      	str	r3, [r2, #32]
 80010ae:	e01d      	b.n	80010ec <HAL_RCC_OscConfig+0x8b8>
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x8a0>
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a2a      	ldr	r2, [pc, #168]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6213      	str	r3, [r2, #32]
 80010d2:	e00b      	b.n	80010ec <HAL_RCC_OscConfig+0x8b8>
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a23      	ldr	r2, [pc, #140]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 80010e6:	f023 0304 	bic.w	r3, r3, #4
 80010ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d06b      	beq.n	80011ce <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f6:	f7ff f91d 	bl	8000334 <HAL_GetTick>
 80010fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001100:	f7ff f918 	bl	8000334 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001110:	4293      	cmp	r3, r2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e274      	b.n	8001602 <HAL_RCC_OscConfig+0xdce>
 8001118:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800111c:	2202      	movs	r2, #2
 800111e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	fa93 f2a3 	rbit	r2, r3
 800112a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001134:	2202      	movs	r2, #2
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	fa93 f2a3 	rbit	r2, r3
 8001142:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001146:	601a      	str	r2, [r3, #0]
  return(result);
 8001148:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800114c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	095b      	lsrs	r3, r3, #5
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d108      	bne.n	8001174 <HAL_RCC_OscConfig+0x940>
 8001162:	4b01      	ldr	r3, [pc, #4]	; (8001168 <HAL_RCC_OscConfig+0x934>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	e013      	b.n	8001190 <HAL_RCC_OscConfig+0x95c>
 8001168:	40021000 	.word	0x40021000
 800116c:	10908120 	.word	0x10908120
 8001170:	40007000 	.word	0x40007000
 8001174:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001178:	2202      	movs	r2, #2
 800117a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	fa93 f2a3 	rbit	r2, r3
 8001186:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	4bbb      	ldr	r3, [pc, #748]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001194:	2102      	movs	r1, #2
 8001196:	6011      	str	r1, [r2, #0]
 8001198:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	fa92 f1a2 	rbit	r1, r2
 80011a2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011a6:	6011      	str	r1, [r2, #0]
  return(result);
 80011a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	fab2 f282 	clz	r2, r2
 80011b2:	b252      	sxtb	r2, r2
 80011b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011b8:	b252      	sxtb	r2, r2
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	f002 021f 	and.w	r2, r2, #31
 80011c0:	2101      	movs	r1, #1
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d099      	beq.n	8001100 <HAL_RCC_OscConfig+0x8cc>
 80011cc:	e064      	b.n	8001298 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ce:	f7ff f8b1 	bl	8000334 <HAL_GetTick>
 80011d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d8:	f7ff f8ac 	bl	8000334 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e208      	b.n	8001602 <HAL_RCC_OscConfig+0xdce>
 80011f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011f4:	2202      	movs	r2, #2
 80011f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	fa93 f2a3 	rbit	r2, r3
 8001202:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800120c:	2202      	movs	r2, #2
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	fa93 f2a3 	rbit	r2, r3
 800121a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800121e:	601a      	str	r2, [r3, #0]
  return(result);
 8001220:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001224:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	095b      	lsrs	r3, r3, #5
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0xa0c>
 800123a:	4b90      	ldr	r3, [pc, #576]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	e00d      	b.n	800125c <HAL_RCC_OscConfig+0xa28>
 8001240:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001244:	2202      	movs	r2, #2
 8001246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	fa93 f2a3 	rbit	r2, r3
 8001252:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001260:	2102      	movs	r1, #2
 8001262:	6011      	str	r1, [r2, #0]
 8001264:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	fa92 f1a2 	rbit	r1, r2
 800126e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001272:	6011      	str	r1, [r2, #0]
  return(result);
 8001274:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	fab2 f282 	clz	r2, r2
 800127e:	b252      	sxtb	r2, r2
 8001280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001284:	b252      	sxtb	r2, r2
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	f002 021f 	and.w	r2, r2, #31
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d19f      	bne.n	80011d8 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001298:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800129c:	2b01      	cmp	r3, #1
 800129e:	d105      	bne.n	80012ac <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a0:	4b76      	ldr	r3, [pc, #472]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	4a75      	ldr	r2, [pc, #468]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 80012a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 81a4 	beq.w	8001600 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b8:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	f000 819b 	beq.w	80015fc <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	f040 8113 	bne.w	80014f8 <HAL_RCC_OscConfig+0xcc4>
 80012d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	fa93 f2a3 	rbit	r2, r3
 80012e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012ea:	601a      	str	r2, [r3, #0]
  return(result);
 80012ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	461a      	mov	r2, r3
 8001302:	2300      	movs	r3, #0
 8001304:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff f815 	bl	8000334 <HAL_GetTick>
 800130a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	e009      	b.n	8001324 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff f810 	bl	8000334 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e16e      	b.n	8001602 <HAL_RCC_OscConfig+0xdce>
 8001324:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800132c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	fa93 f2a3 	rbit	r2, r3
 8001338:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800133c:	601a      	str	r2, [r3, #0]
  return(result);
 800133e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001342:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0xb2a>
 8001358:	4b48      	ldr	r3, [pc, #288]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	e01b      	b.n	8001396 <HAL_RCC_OscConfig+0xb62>
 800135e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	fa93 f2a3 	rbit	r2, r3
 8001372:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800137c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	fa93 f2a3 	rbit	r2, r3
 800138c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800139a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800139e:	6011      	str	r1, [r2, #0]
 80013a0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	fa92 f1a2 	rbit	r1, r2
 80013aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013ae:	6011      	str	r1, [r2, #0]
  return(result);
 80013b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	fab2 f282 	clz	r2, r2
 80013ba:	b252      	sxtb	r2, r2
 80013bc:	f042 0220 	orr.w	r2, r2, #32
 80013c0:	b252      	sxtb	r2, r2
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	f002 021f 	and.w	r2, r2, #31
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f202 	lsl.w	r2, r1, r2
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d19d      	bne.n	8001310 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d4:	4b29      	ldr	r3, [pc, #164]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	4924      	ldr	r1, [pc, #144]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
 80013f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	fa93 f2a3 	rbit	r2, r3
 8001404:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001408:	601a      	str	r2, [r3, #0]
  return(result);
 800140a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800140e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001418:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	461a      	mov	r2, r3
 8001420:	2301      	movs	r3, #1
 8001422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7fe ff86 	bl	8000334 <HAL_GetTick>
 8001428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800142c:	e009      	b.n	8001442 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142e:	f7fe ff81 	bl	8000334 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e0df      	b.n	8001602 <HAL_RCC_OscConfig+0xdce>
 8001442:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001446:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800144a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fa93 f2a3 	rbit	r2, r3
 8001456:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800145a:	601a      	str	r2, [r3, #0]
  return(result);
 800145c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001460:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	095b      	lsrs	r3, r3, #5
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d104      	bne.n	8001480 <HAL_RCC_OscConfig+0xc4c>
 8001476:	4b01      	ldr	r3, [pc, #4]	; (800147c <HAL_RCC_OscConfig+0xc48>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	e01d      	b.n	80014b8 <HAL_RCC_OscConfig+0xc84>
 800147c:	40021000 	.word	0x40021000
 8001480:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	fa93 f2a3 	rbit	r2, r3
 8001494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800149e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f2a3 	rbit	r2, r3
 80014ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	4b55      	ldr	r3, [pc, #340]	; (800160c <HAL_RCC_OscConfig+0xdd8>)
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80014bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80014c0:	6011      	str	r1, [r2, #0]
 80014c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	fa92 f1a2 	rbit	r1, r2
 80014cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014d0:	6011      	str	r1, [r2, #0]
  return(result);
 80014d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	fab2 f282 	clz	r2, r2
 80014dc:	b252      	sxtb	r2, r2
 80014de:	f042 0220 	orr.w	r2, r2, #32
 80014e2:	b252      	sxtb	r2, r2
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	f002 021f 	and.w	r2, r2, #31
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d09b      	beq.n	800142e <HAL_RCC_OscConfig+0xbfa>
 80014f6:	e083      	b.n	8001600 <HAL_RCC_OscConfig+0xdcc>
 80014f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	fa93 f2a3 	rbit	r2, r3
 800150c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001510:	601a      	str	r2, [r3, #0]
  return(result);
 8001512:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001516:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001520:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	461a      	mov	r2, r3
 8001528:	2300      	movs	r3, #0
 800152a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7fe ff02 	bl	8000334 <HAL_GetTick>
 8001530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001534:	e009      	b.n	800154a <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7fe fefd 	bl	8000334 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e05b      	b.n	8001602 <HAL_RCC_OscConfig+0xdce>
 800154a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001562:	601a      	str	r2, [r3, #0]
  return(result);
 8001564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001568:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156a:	fab3 f383 	clz	r3, r3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	095b      	lsrs	r3, r3, #5
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d102      	bne.n	8001584 <HAL_RCC_OscConfig+0xd50>
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_RCC_OscConfig+0xdd8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	e01b      	b.n	80015bc <HAL_RCC_OscConfig+0xd88>
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800158c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f2a3 	rbit	r2, r3
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	fa93 f2a3 	rbit	r2, r3
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_RCC_OscConfig+0xdd8>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	f107 0214 	add.w	r2, r7, #20
 80015c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015c4:	6011      	str	r1, [r2, #0]
 80015c6:	f107 0214 	add.w	r2, r7, #20
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	fa92 f1a2 	rbit	r1, r2
 80015d0:	f107 0210 	add.w	r2, r7, #16
 80015d4:	6011      	str	r1, [r2, #0]
  return(result);
 80015d6:	f107 0210 	add.w	r2, r7, #16
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	fab2 f282 	clz	r2, r2
 80015e0:	b252      	sxtb	r2, r2
 80015e2:	f042 0220 	orr.w	r2, r2, #32
 80015e6:	b252      	sxtb	r2, r2
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d19d      	bne.n	8001536 <HAL_RCC_OscConfig+0xd02>
 80015fa:	e001      	b.n	8001600 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b09e      	sub	sp, #120	; 0x78
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e164      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b92      	ldr	r3, [pc, #584]	; (8001874 <HAL_RCC_ClockConfig+0x264>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d910      	bls.n	8001658 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b8f      	ldr	r3, [pc, #572]	; (8001874 <HAL_RCC_ClockConfig+0x264>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 0207 	bic.w	r2, r3, #7
 800163e:	498d      	ldr	r1, [pc, #564]	; (8001874 <HAL_RCC_ClockConfig+0x264>)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b8b      	ldr	r3, [pc, #556]	; (8001874 <HAL_RCC_ClockConfig+0x264>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e14c      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b84      	ldr	r3, [pc, #528]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4981      	ldr	r1, [pc, #516]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80df 	beq.w	8001842 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d13d      	bne.n	8001708 <HAL_RCC_ClockConfig+0xf8>
 800168c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001690:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800169a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d102      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xa6>
 80016b0:	4b71      	ldr	r3, [pc, #452]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	e00f      	b.n	80016d6 <HAL_RCC_ClockConfig+0xc6>
 80016b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	667b      	str	r3, [r7, #100]	; 0x64
 80016c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c8:	663b      	str	r3, [r7, #96]	; 0x60
 80016ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016d2:	4b69      	ldr	r3, [pc, #420]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016da:	65ba      	str	r2, [r7, #88]	; 0x58
 80016dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016de:	fa92 f2a2 	rbit	r2, r2
 80016e2:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80016e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016e6:	fab2 f282 	clz	r2, r2
 80016ea:	b252      	sxtb	r2, r2
 80016ec:	f042 0220 	orr.w	r2, r2, #32
 80016f0:	b252      	sxtb	r2, r2
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f002 021f 	and.w	r2, r2, #31
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f202 	lsl.w	r2, r1, r2
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d17d      	bne.n	8001800 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0f4      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d13d      	bne.n	800178c <HAL_RCC_ClockConfig+0x17c>
 8001710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001714:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800171e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d102      	bne.n	800173a <HAL_RCC_ClockConfig+0x12a>
 8001734:	4b50      	ldr	r3, [pc, #320]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	e00f      	b.n	800175a <HAL_RCC_ClockConfig+0x14a>
 800173a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800173e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
 8001748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174c:	643b      	str	r3, [r7, #64]	; 0x40
 800174e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001756:	4b48      	ldr	r3, [pc, #288]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800175e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001762:	fa92 f2a2 	rbit	r2, r2
 8001766:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800176a:	fab2 f282 	clz	r2, r2
 800176e:	b252      	sxtb	r2, r2
 8001770:	f042 0220 	orr.w	r2, r2, #32
 8001774:	b252      	sxtb	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f002 021f 	and.w	r2, r2, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d13b      	bne.n	8001800 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b2      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e2>
 800178c:	2302      	movs	r3, #2
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x1a4>
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e00d      	b.n	80017d0 <HAL_RCC_ClockConfig+0x1c0>
 80017b4:	2302      	movs	r3, #2
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
 80017c0:	2302      	movs	r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	2202      	movs	r2, #2
 80017d2:	61ba      	str	r2, [r7, #24]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	fa92 f2a2 	rbit	r2, r2
 80017da:	617a      	str	r2, [r7, #20]
  return(result);
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	fab2 f282 	clz	r2, r2
 80017e2:	b252      	sxtb	r2, r2
 80017e4:	f042 0220 	orr.w	r2, r2, #32
 80017e8:	b252      	sxtb	r2, r2
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f002 021f 	and.w	r2, r2, #31
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f202 	lsl.w	r2, r1, r2
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e078      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 0203 	bic.w	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	491a      	ldr	r1, [pc, #104]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001812:	f7fe fd8f 	bl	8000334 <HAL_GetTick>
 8001816:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001818:	e00a      	b.n	8001830 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181a:	f7fe fd8b 	bl	8000334 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e060      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_RCC_ClockConfig+0x268>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 020c 	and.w	r2, r3, #12
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	429a      	cmp	r2, r3
 8001840:	d1eb      	bne.n	800181a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_RCC_ClockConfig+0x264>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d215      	bcs.n	800187c <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_RCC_ClockConfig+0x264>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 0207 	bic.w	r2, r3, #7
 8001858:	4906      	ldr	r1, [pc, #24]	; (8001874 <HAL_RCC_ClockConfig+0x264>)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <HAL_RCC_ClockConfig+0x264>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d006      	beq.n	800187c <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e03f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e2>
 8001872:	bf00      	nop
 8001874:	40022000 	.word	0x40022000
 8001878:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_RCC_ClockConfig+0x2ec>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4919      	ldr	r1, [pc, #100]	; (80018fc <HAL_RCC_ClockConfig+0x2ec>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_RCC_ClockConfig+0x2ec>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4911      	ldr	r1, [pc, #68]	; (80018fc <HAL_RCC_ClockConfig+0x2ec>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018ba:	f000 f825 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018be:	4601      	mov	r1, r0
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x2ec>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c8:	23f0      	movs	r3, #240	; 0xf0
 80018ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_RCC_ClockConfig+0x2f0>)
 80018e0:	5cd3      	ldrb	r3, [r2, r3]
 80018e2:	fa21 f303 	lsr.w	r3, r1, r3
 80018e6:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_RCC_ClockConfig+0x2f4>)
 80018e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f7fe fcde 	bl	80002ac <HAL_InitTick>
  
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3778      	adds	r7, #120	; 0x78
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	08005704 	.word	0x08005704
 8001904:	2000000c 	.word	0x2000000c

08001908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b08b      	sub	sp, #44	; 0x2c
 800190c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b04      	cmp	r3, #4
 8001930:	d002      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x30>
 8001932:	2b08      	cmp	r3, #8
 8001934:	d003      	beq.n	800193e <HAL_RCC_GetSysClockFreq+0x36>
 8001936:	e03c      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800193a:	623b      	str	r3, [r7, #32]
      break;
 800193c:	e03c      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001944:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001948:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	607b      	str	r3, [r7, #4]
  return(result);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	f003 020f 	and.w	r2, r3, #15
 800196a:	230f      	movs	r3, #15
 800196c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	60fb      	str	r3, [r7, #12]
  return(result);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	fbb2 f2f3 	udiv	r2, r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	e004      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	623b      	str	r3, [r7, #32]
      break;
 80019b0:	e002      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80019b4:	623b      	str	r3, [r7, #32]
      break;
 80019b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b8:	6a3b      	ldr	r3, [r7, #32]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	372c      	adds	r7, #44	; 0x2c
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	080056e4 	.word	0x080056e4
 80019d4:	080056f4 	.word	0x080056f4
 80019d8:	003d0900 	.word	0x003d0900

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000000c 	.word	0x2000000c

080019f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80019fa:	f7ff ffef 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019fe:	4601      	mov	r1, r0
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a08:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a0c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	603b      	str	r3, [r7, #0]
  return(result);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	08005714 	.word	0x08005714

08001a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a3e:	f7ff ffcd 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 8001a42:	4601      	mov	r1, r0
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001a4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a50:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	603b      	str	r3, [r7, #0]
  return(result);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08005714 	.word	0x08005714

08001a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e043      	b.n	8001b16 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f003 f870 	bl	8004b88 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2224      	movs	r2, #36	; 0x24
 8001aac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f8b9 	bl	8001c38 <UART_SetConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e022      	b.n	8001b16 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fa13 	bl	8001f04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001afc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0201 	orr.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fa9a 	bl	8002048 <UART_CheckIdleState>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b088      	sub	sp, #32
 8001b22:	af02      	add	r7, sp, #8
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d177      	bne.n	8001c2e <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_UART_Transmit+0x2c>
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e070      	b.n	8001c30 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_UART_Transmit+0x3e>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e069      	b.n	8001c30 <HAL_UART_Transmit+0x112>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2221      	movs	r2, #33	; 0x21
 8001b6e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001b72:	f7fe fbdf 	bl	8000334 <HAL_GetTick>
 8001b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	88fa      	ldrh	r2, [r7, #6]
 8001b7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	88fa      	ldrh	r2, [r7, #6]
 8001b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001b88:	e034      	b.n	8001bf4 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fa97 	bl	80020da <UART_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e03c      	b.n	8001c30 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bbe:	d111      	bne.n	8001be4 <HAL_UART_Transmit+0xc6>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10d      	bne.n	8001be4 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	881a      	ldrh	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	3302      	adds	r3, #2
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	e007      	b.n	8001bf4 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1c4      	bne.n	8001b8a <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2200      	movs	r2, #0
 8001c08:	2140      	movs	r1, #64	; 0x40
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fa65 	bl	80020da <UART_WaitOnFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e00a      	b.n	8001c30 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c44:	2310      	movs	r3, #16
 8001c46:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b9f      	ldr	r3, [pc, #636]	; (8001ef0 <UART_SetConfig+0x2b8>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	68f9      	ldr	r1, [r7, #12]
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a8e      	ldr	r2, [pc, #568]	; (8001ef4 <UART_SetConfig+0x2bc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d121      	bne.n	8001d04 <UART_SetConfig+0xcc>
 8001cc0:	4b8d      	ldr	r3, [pc, #564]	; (8001ef8 <UART_SetConfig+0x2c0>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d817      	bhi.n	8001cfc <UART_SetConfig+0xc4>
 8001ccc:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <UART_SetConfig+0x9c>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001ce5 	.word	0x08001ce5
 8001cd8:	08001cf1 	.word	0x08001cf1
 8001cdc:	08001cf7 	.word	0x08001cf7
 8001ce0:	08001ceb 	.word	0x08001ceb
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	75fb      	strb	r3, [r7, #23]
 8001ce8:	e01e      	b.n	8001d28 <UART_SetConfig+0xf0>
 8001cea:	2302      	movs	r3, #2
 8001cec:	75fb      	strb	r3, [r7, #23]
 8001cee:	e01b      	b.n	8001d28 <UART_SetConfig+0xf0>
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	75fb      	strb	r3, [r7, #23]
 8001cf4:	e018      	b.n	8001d28 <UART_SetConfig+0xf0>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	75fb      	strb	r3, [r7, #23]
 8001cfa:	e015      	b.n	8001d28 <UART_SetConfig+0xf0>
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	75fb      	strb	r3, [r7, #23]
 8001d00:	bf00      	nop
 8001d02:	e011      	b.n	8001d28 <UART_SetConfig+0xf0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a7c      	ldr	r2, [pc, #496]	; (8001efc <UART_SetConfig+0x2c4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d102      	bne.n	8001d14 <UART_SetConfig+0xdc>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]
 8001d12:	e009      	b.n	8001d28 <UART_SetConfig+0xf0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <UART_SetConfig+0x2c8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d102      	bne.n	8001d24 <UART_SetConfig+0xec>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	75fb      	strb	r3, [r7, #23]
 8001d22:	e001      	b.n	8001d28 <UART_SetConfig+0xf0>
 8001d24:	2310      	movs	r3, #16
 8001d26:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d30:	d16f      	bne.n	8001e12 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d857      	bhi.n	8001de8 <UART_SetConfig+0x1b0>
 8001d38:	a201      	add	r2, pc, #4	; (adr r2, 8001d40 <UART_SetConfig+0x108>)
 8001d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3e:	bf00      	nop
 8001d40:	08001d65 	.word	0x08001d65
 8001d44:	08001d81 	.word	0x08001d81
 8001d48:	08001d9d 	.word	0x08001d9d
 8001d4c:	08001de9 	.word	0x08001de9
 8001d50:	08001db7 	.word	0x08001db7
 8001d54:	08001de9 	.word	0x08001de9
 8001d58:	08001de9 	.word	0x08001de9
 8001d5c:	08001de9 	.word	0x08001de9
 8001d60:	08001dd3 	.word	0x08001dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d64:	f7ff fe46 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	005a      	lsls	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	441a      	add	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	82bb      	strh	r3, [r7, #20]
        break;
 8001d7e:	e036      	b.n	8001dee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d80:	f7ff fe5a 	bl	8001a38 <HAL_RCC_GetPCLK2Freq>
 8001d84:	4603      	mov	r3, r0
 8001d86:	005a      	lsls	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	441a      	add	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	82bb      	strh	r3, [r7, #20]
        break;
 8001d9a:	e028      	b.n	8001dee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001da6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6852      	ldr	r2, [r2, #4]
 8001dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8001db2:	82bb      	strh	r3, [r7, #20]
        break;
 8001db4:	e01b      	b.n	8001dee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001db6:	f7ff fda7 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	005a      	lsls	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	441a      	add	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	82bb      	strh	r3, [r7, #20]
        break;
 8001dd0:	e00d      	b.n	8001dee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	82bb      	strh	r3, [r7, #20]
        break;
 8001de6:	e002      	b.n	8001dee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	74fb      	strb	r3, [r7, #19]
        break;
 8001dec:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001dee:	8abb      	ldrh	r3, [r7, #20]
 8001df0:	f023 030f 	bic.w	r3, r3, #15
 8001df4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001df6:	8abb      	ldrh	r3, [r7, #20]
 8001df8:	105b      	asrs	r3, r3, #1
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	897a      	ldrh	r2, [r7, #10]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	e069      	b.n	8001ee6 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d863      	bhi.n	8001ee0 <UART_SetConfig+0x2a8>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <UART_SetConfig+0x1e8>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001e45 	.word	0x08001e45
 8001e24:	08001e65 	.word	0x08001e65
 8001e28:	08001e85 	.word	0x08001e85
 8001e2c:	08001ee1 	.word	0x08001ee1
 8001e30:	08001ea5 	.word	0x08001ea5
 8001e34:	08001ee1 	.word	0x08001ee1
 8001e38:	08001ee1 	.word	0x08001ee1
 8001e3c:	08001ee1 	.word	0x08001ee1
 8001e40:	08001ec5 	.word	0x08001ec5
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e44:	f7ff fdd6 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	085b      	lsrs	r3, r3, #1
 8001e50:	441a      	add	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60da      	str	r2, [r3, #12]
        break;
 8001e62:	e040      	b.n	8001ee6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e64:	f7ff fde8 	bl	8001a38 <HAL_RCC_GetPCLK2Freq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	085b      	lsrs	r3, r3, #1
 8001e70:	441a      	add	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60da      	str	r2, [r3, #12]
        break;
 8001e82:	e030      	b.n	8001ee6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	085b      	lsrs	r3, r3, #1
 8001e8a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001e8e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6852      	ldr	r2, [r2, #4]
 8001e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60da      	str	r2, [r3, #12]
        break;
 8001ea2:	e020      	b.n	8001ee6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ea4:	f7ff fd30 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60da      	str	r2, [r3, #12]
        break;
 8001ec2:	e010      	b.n	8001ee6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60da      	str	r2, [r3, #12]
        break;
 8001ede:	e002      	b.n	8001ee6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	74fb      	strb	r3, [r7, #19]
        break;
 8001ee4:	bf00      	nop
    }
  }

  return ret;
 8001ee6:	7cfb      	ldrb	r3, [r7, #19]

}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	efff69f3 	.word	0xefff69f3
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40004400 	.word	0x40004400
 8001f00:	40004800 	.word	0x40004800

08001f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00a      	beq.n	8001f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01a      	beq.n	800201a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002002:	d10a      	bne.n	800201a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]
  }
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af02      	add	r7, sp, #8
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800205a:	f7fe f96b 	bl	8000334 <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b08      	cmp	r3, #8
 800206c:	d10e      	bne.n	800208c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800206e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f82c 	bl	80020da <UART_WaitOnFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e022      	b.n	80020d2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d10e      	bne.n	80020b8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800209a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f816 	bl	80020da <UART_WaitOnFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e00c      	b.n	80020d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4613      	mov	r3, r2
 80020e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ea:	e02c      	b.n	8002146 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d028      	beq.n	8002146 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <UART_WaitOnFlagUntilTimeout+0x30>
 80020fa:	f7fe f91b 	bl	8000334 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	429a      	cmp	r2, r3
 8002108:	d21d      	bcs.n	8002146 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002118:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e00f      	b.n	8002166 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4013      	ands	r3, r2
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	429a      	cmp	r2, r3
 8002154:	bf0c      	ite	eq
 8002156:	2301      	moveq	r3, #1
 8002158:	2300      	movne	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	429a      	cmp	r2, r3
 8002162:	d0c3      	beq.n	80020ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800217c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002180:	2b84      	cmp	r3, #132	; 0x84
 8002182:	d005      	beq.n	8002190 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002184:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	3303      	adds	r3, #3
 800218e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002190:	68fb      	ldr	r3, [r7, #12]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021a4:	f3ef 8305 	mrs	r3, IPSR
 80021a8:	607b      	str	r3, [r7, #4]
  return(result);
 80021aa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80021c6:	f000 ffaf 	bl	8003128 <vTaskStartScheduler>
  
  return osOK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80021d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685c      	ldr	r4, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021e6:	b29e      	uxth	r6, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ffbd 	bl	800216e <makeFreeRtosPriority>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	9200      	str	r2, [sp, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	4632      	mov	r2, r6
 8002202:	4629      	mov	r1, r5
 8002204:	4620      	mov	r0, r4
 8002206:	f000 fe66 	bl	8002ed6 <xTaskCreate>
 800220a:	4603      	mov	r3, r0
 800220c:	2b01      	cmp	r3, #1
 800220e:	d001      	beq.n	8002214 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002214:	68fb      	ldr	r3, [r7, #12]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800221e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8002226:	2001      	movs	r0, #1
 8002228:	f000 fa1a 	bl	8002660 <xQueueCreateMutex>
 800222c:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <osMutexWait+0x18>
    return osErrorParameter;
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	e03c      	b.n	80022ca <osMutexWait+0x92>
  }
  
  ticks = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225a:	d103      	bne.n	8002264 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e009      	b.n	8002278 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <osMutexWait+0x40>
      ticks = 1;
 8002274:	2301      	movs	r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002278:	f7ff ff91 	bl	800219e <inHandlerMode>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d017      	beq.n	80022b2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	461a      	mov	r2, r3
 8002288:	2100      	movs	r1, #0
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fc96 	bl	8002bbc <xQueueReceiveFromISR>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d001      	beq.n	800229a <osMutexWait+0x62>
      return osErrorOS;
 8002296:	23ff      	movs	r3, #255	; 0xff
 8002298:	e017      	b.n	80022ca <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <osMutexWait+0x90>
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <osMutexWait+0x9c>)
 80022a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	e00a      	b.n	80022c8 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80022b2:	2300      	movs	r3, #0
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	2100      	movs	r1, #0
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fb6d 	bl	8002998 <xQueueGenericReceive>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d001      	beq.n	80022c8 <osMutexWait+0x90>
    return osErrorOS;
 80022c4:	23ff      	movs	r3, #255	; 0xff
 80022c6:	e000      	b.n	80022ca <osMutexWait+0x92>
  }
  
  return osOK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	e000ed04 	.word	0xe000ed04

080022d8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80022e8:	f7ff ff59 	bl	800219e <inHandlerMode>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fac3 	bl	8002884 <xQueueGiveFromISR>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b01      	cmp	r3, #1
 8002302:	d001      	beq.n	8002308 <osMutexRelease+0x30>
      return osErrorOS;
 8002304:	23ff      	movs	r3, #255	; 0xff
 8002306:	e017      	b.n	8002338 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d013      	beq.n	8002336 <osMutexRelease+0x5e>
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <osMutexRelease+0x68>)
 8002310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	e00a      	b.n	8002336 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002320:	2300      	movs	r3, #0
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f9b2 	bl	8002690 <xQueueGenericSend>
 800232c:	4603      	mov	r3, r0
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002332:	23ff      	movs	r3, #255	; 0xff
 8002334:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	e000ed04 	.word	0xe000ed04

08002344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f103 0208 	add.w	r2, r3, #8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f103 0208 	add.w	r2, r3, #8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f103 0208 	add.w	r2, r3, #8
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d103      	bne.n	8002406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e00c      	b.n	8002420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3308      	adds	r3, #8
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e002      	b.n	8002414 <vListInsert+0x2e>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	429a      	cmp	r2, r3
 800241e:	d2f6      	bcs.n	800240e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	601a      	str	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6892      	ldr	r2, [r2, #8]
 800246e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6852      	ldr	r2, [r2, #4]
 8002478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	429a      	cmp	r2, r3
 8002482:	d103      	bne.n	800248c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	e7fe      	b.n	80024d2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80024d4:	f001 fca4 	bl	8003e20 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	441a      	add	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	3b01      	subs	r3, #1
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	441a      	add	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	22ff      	movs	r2, #255	; 0xff
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	22ff      	movs	r2, #255	; 0xff
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d114      	bne.n	8002554 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d01a      	beq.n	8002568 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3310      	adds	r3, #16
 8002536:	4618      	mov	r0, r3
 8002538:	f001 f820 	bl	800357c <xTaskRemoveFromEventList>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d012      	beq.n	8002568 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <xQueueGenericReset+0xcc>)
 8002544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	e009      	b.n	8002568 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3310      	adds	r3, #16
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fef3 	bl	8002344 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3324      	adds	r3, #36	; 0x24
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff feee 	bl	8002344 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002568:	f001 fc88 	bl	8003e7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000ed04 	.word	0xe000ed04

0800257c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <xQueueGenericCreate+0x28>
 8002590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e7fe      	b.n	80025a2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	e004      	b.n	80025ba <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3348      	adds	r3, #72	; 0x48
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fd3e 	bl	8004040 <pvPortMalloc>
 80025c4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00b      	beq.n	80025e4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	3348      	adds	r3, #72	; 0x48
 80025d0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025d2:	79fa      	ldrb	r2, [r7, #7]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f805 	bl	80025ee <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80025e4:	69bb      	ldr	r3, [r7, #24]
	}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e002      	b.n	8002610 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800261c:	2101      	movs	r1, #1
 800261e:	69b8      	ldr	r0, [r7, #24]
 8002620:	f7ff ff44 	bl	80024ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00e      	beq.n	8002658 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800264c:	2300      	movs	r3, #0
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f81c 	bl	8002690 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800266a:	2301      	movs	r3, #1
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	461a      	mov	r2, r3
 8002676:	6939      	ldr	r1, [r7, #16]
 8002678:	6978      	ldr	r0, [r7, #20]
 800267a:	f7ff ff7f 	bl	800257c <xQueueGenericCreate>
 800267e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f7ff ffd3 	bl	800262c <prvInitialiseMutex>

		return pxNewQueue;
 8002686:	68fb      	ldr	r3, [r7, #12]
	}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08e      	sub	sp, #56	; 0x38
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800269e:	2300      	movs	r3, #0
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d109      	bne.n	80026c0 <xQueueGenericSend+0x30>
 80026ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026be:	e7fe      	b.n	80026be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <xQueueGenericSend+0x3e>
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <xQueueGenericSend+0x42>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <xQueueGenericSend+0x44>
 80026d2:	2300      	movs	r3, #0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <xQueueGenericSend+0x5c>
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ea:	e7fe      	b.n	80026ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d103      	bne.n	80026fa <xQueueGenericSend+0x6a>
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <xQueueGenericSend+0x6e>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <xQueueGenericSend+0x70>
 80026fe:	2300      	movs	r3, #0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <xQueueGenericSend+0x88>
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	e7fe      	b.n	8002716 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002718:	f001 f8ea 	bl	80038f0 <xTaskGetSchedulerState>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <xQueueGenericSend+0x98>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <xQueueGenericSend+0x9c>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <xQueueGenericSend+0x9e>
 800272c:	2300      	movs	r3, #0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <xQueueGenericSend+0xb6>
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	e7fe      	b.n	8002744 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002746:	f001 fb6b 	bl	8003e20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	429a      	cmp	r2, r3
 8002754:	d302      	bcc.n	800275c <xQueueGenericSend+0xcc>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d129      	bne.n	80027b0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002762:	f000 faa8 	bl	8002cb6 <prvCopyDataToQueue>
 8002766:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	d010      	beq.n	8002792 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	3324      	adds	r3, #36	; 0x24
 8002774:	4618      	mov	r0, r3
 8002776:	f000 ff01 	bl	800357c <xTaskRemoveFromEventList>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002780:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <xQueueGenericSend+0x1f0>)
 8002782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	e00a      	b.n	80027a8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002798:	4b39      	ldr	r3, [pc, #228]	; (8002880 <xQueueGenericSend+0x1f0>)
 800279a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027a8:	f001 fb68 	bl	8003e7c <vPortExitCritical>
				return pdPASS;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e063      	b.n	8002878 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027b6:	f001 fb61 	bl	8003e7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e05c      	b.n	8002878 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d106      	bne.n	80027d2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 ff39 	bl	8003640 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027d2:	f001 fb53 	bl	8003e7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027d6:	f000 fced 	bl	80031b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027da:	f001 fb21 	bl	8003e20 <vPortEnterCritical>
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d103      	bne.n	80027f4 <xQueueGenericSend+0x164>
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027fa:	b25b      	sxtb	r3, r3
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d103      	bne.n	800280a <xQueueGenericSend+0x17a>
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800280a:	f001 fb37 	bl	8003e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800280e:	1d3a      	adds	r2, r7, #4
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f000 ff36 	bl	8003688 <xTaskCheckForTimeOut>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d124      	bne.n	800286c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002824:	f000 fb3f 	bl	8002ea6 <prvIsQueueFull>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d018      	beq.n	8002860 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	3310      	adds	r3, #16
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fe7c 	bl	8003534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800283c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800283e:	f000 faca 	bl	8002dd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002842:	f000 fcc5 	bl	80031d0 <xTaskResumeAll>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	f47f af7c 	bne.w	8002746 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <xQueueGenericSend+0x1f0>)
 8002850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	e772      	b.n	8002746 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002862:	f000 fab8 	bl	8002dd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002866:	f000 fcb3 	bl	80031d0 <xTaskResumeAll>
 800286a:	e76c      	b.n	8002746 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800286c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800286e:	f000 fab2 	bl	8002dd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002872:	f000 fcad 	bl	80031d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002876:	2300      	movs	r3, #0
		}
	}
}
 8002878:	4618      	mov	r0, r3
 800287a:	3738      	adds	r7, #56	; 0x38
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <xQueueGiveFromISR+0x28>
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	623b      	str	r3, [r7, #32]
 80028aa:	e7fe      	b.n	80028aa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <xQueueGiveFromISR+0x44>
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e7fe      	b.n	80028c6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d103      	bne.n	80028d8 <xQueueGiveFromISR+0x54>
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <xQueueGiveFromISR+0x58>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <xQueueGiveFromISR+0x5a>
 80028dc:	2300      	movs	r3, #0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <xQueueGiveFromISR+0x72>
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e7fe      	b.n	80028f4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028f6:	f001 fb65 	bl	8003fc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80028fa:	f3ef 8211 	mrs	r2, BASEPRI
 80028fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	617a      	str	r2, [r7, #20]
 8002910:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002912:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002922:	429a      	cmp	r2, r3
 8002924:	d22b      	bcs.n	800297e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800292c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002938:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d112      	bne.n	8002968 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	3324      	adds	r3, #36	; 0x24
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fe14 	bl	800357c <xTaskRemoveFromEventList>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00e      	beq.n	8002978 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e007      	b.n	8002978 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800296c:	3301      	adds	r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	b25a      	sxtb	r2, r3
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002978:	2301      	movs	r3, #1
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
 800297c:	e001      	b.n	8002982 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800297e:	2300      	movs	r3, #0
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800298e:	4618      	mov	r0, r3
 8002990:	3738      	adds	r7, #56	; 0x38
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	; 0x38
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <xQueueGenericReceive+0x30>
	__asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	e7fe      	b.n	80029c6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <xQueueGenericReceive+0x3e>
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <xQueueGenericReceive+0x42>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <xQueueGenericReceive+0x44>
 80029da:	2300      	movs	r3, #0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <xQueueGenericReceive+0x5c>
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	623b      	str	r3, [r7, #32]
 80029f2:	e7fe      	b.n	80029f2 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029f4:	f000 ff7c 	bl	80038f0 <xTaskGetSchedulerState>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <xQueueGenericReceive+0x6c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <xQueueGenericReceive+0x70>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <xQueueGenericReceive+0x72>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <xQueueGenericReceive+0x8a>
 8002a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	e7fe      	b.n	8002a20 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a22:	f001 f9fd 	bl	8003e20 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d046      	beq.n	8002ac0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a3c:	f000 f9a5 	bl	8002d8a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d121      	bne.n	8002a8a <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	1e5a      	subs	r2, r3, #1
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d104      	bne.n	8002a60 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002a56:	f001 f863 	bl	8003b20 <pvTaskIncrementMutexHeldCount>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d027      	beq.n	8002ab8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	3310      	adds	r3, #16
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fd85 	bl	800357c <xTaskRemoveFromEventList>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01f      	beq.n	8002ab8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8002a78:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <xQueueGenericReceive+0x220>)
 8002a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	e016      	b.n	8002ab8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a8e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00f      	beq.n	8002ab8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	3324      	adds	r3, #36	; 0x24
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fd6d 	bl	800357c <xTaskRemoveFromEventList>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d007      	beq.n	8002ab8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8002aa8:	4b43      	ldr	r3, [pc, #268]	; (8002bb8 <xQueueGenericReceive+0x220>)
 8002aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8002ab8:	f001 f9e0 	bl	8003e7c <vPortExitCritical>
				return pdPASS;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e077      	b.n	8002bb0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ac6:	f001 f9d9 	bl	8003e7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e070      	b.n	8002bb0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d106      	bne.n	8002ae2 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fdb1 	bl	8003640 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ae2:	f001 f9cb 	bl	8003e7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ae6:	f000 fb65 	bl	80031b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aea:	f001 f999 	bl	8003e20 <vPortEnterCritical>
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afa:	d103      	bne.n	8002b04 <xQueueGenericReceive+0x16c>
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b0a:	b25b      	sxtb	r3, r3
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d103      	bne.n	8002b1a <xQueueGenericReceive+0x182>
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b1a:	f001 f9af 	bl	8003e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b1e:	1d3a      	adds	r2, r7, #4
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fdae 	bl	8003688 <xTaskCheckForTimeOut>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d131      	bne.n	8002b96 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b34:	f000 f9a1 	bl	8002e7a <prvIsQueueEmpty>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d025      	beq.n	8002b8a <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d108      	bne.n	8002b58 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8002b46:	f001 f96b 	bl	8003e20 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 feec 	bl	800392c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8002b54:	f001 f992 	bl	8003e7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	3324      	adds	r3, #36	; 0x24
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fce7 	bl	8003534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b68:	f000 f935 	bl	8002dd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b6c:	f000 fb30 	bl	80031d0 <xTaskResumeAll>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f47f af55 	bne.w	8002a22 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8002b78:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <xQueueGenericReceive+0x220>)
 8002b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	e74b      	b.n	8002a22 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b8c:	f000 f923 	bl	8002dd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b90:	f000 fb1e 	bl	80031d0 <xTaskResumeAll>
 8002b94:	e745      	b.n	8002a22 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8002b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b98:	f000 f91d 	bl	8002dd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b9c:	f000 fb18 	bl	80031d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba2:	f000 f96a 	bl	8002e7a <prvIsQueueEmpty>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f43f af3a 	beq.w	8002a22 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002bae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3738      	adds	r7, #56	; 0x38
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	e000ed04 	.word	0xe000ed04

08002bbc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08e      	sub	sp, #56	; 0x38
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <xQueueReceiveFromISR+0x2a>
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	e7fe      	b.n	8002be4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d103      	bne.n	8002bf4 <xQueueReceiveFromISR+0x38>
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <xQueueReceiveFromISR+0x3c>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <xQueueReceiveFromISR+0x3e>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <xQueueReceiveFromISR+0x56>
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	e7fe      	b.n	8002c10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c12:	f001 f9d7 	bl	8003fc4 <vPortValidateInterruptPriority>
	__asm volatile
 8002c16:	f3ef 8211 	mrs	r2, BASEPRI
 8002c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1e:	f383 8811 	msr	BASEPRI, r3
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	61ba      	str	r2, [r7, #24]
 8002c2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002c2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d02f      	beq.n	8002c9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c4c:	f000 f89d 	bl	8002d8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d112      	bne.n	8002c88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d016      	beq.n	8002c98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	3310      	adds	r3, #16
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fc84 	bl	800357c <xTaskRemoveFromEventList>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00e      	beq.n	8002c98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e007      	b.n	8002c98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	b25a      	sxtb	r2, r3
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9c:	e001      	b.n	8002ca2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3738      	adds	r7, #56	; 0x38
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d14d      	bne.n	8002d78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fe99 	bl	8003a18 <xTaskPriorityDisinherit>
 8002ce6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	e043      	b.n	8002d78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d119      	bne.n	8002d2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6898      	ldr	r0, [r3, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	f002 f875 	bl	8004df0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	441a      	add	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d32b      	bcc.n	8002d78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	e026      	b.n	8002d78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	68d8      	ldr	r0, [r3, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	461a      	mov	r2, r3
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	f002 f85b 	bl	8004df0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	425b      	negs	r3, r3
 8002d44:	441a      	add	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d207      	bcs.n	8002d66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	425b      	negs	r3, r3
 8002d60:	441a      	add	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d105      	bne.n	8002d78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d80:	697b      	ldr	r3, [r7, #20]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d018      	beq.n	8002dce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	441a      	add	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d303      	bcc.n	8002dbe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68d9      	ldr	r1, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	6838      	ldr	r0, [r7, #0]
 8002dca:	f002 f811 	bl	8004df0 <memcpy>
	}
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002dde:	f001 f81f 	bl	8003e20 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002de8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dea:	e011      	b.n	8002e10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d012      	beq.n	8002e1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3324      	adds	r3, #36	; 0x24
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fbbf 	bl	800357c <xTaskRemoveFromEventList>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e04:	f000 fc9e 	bl	8003744 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	dce9      	bgt.n	8002dec <prvUnlockQueue+0x16>
 8002e18:	e000      	b.n	8002e1c <prvUnlockQueue+0x46>
					break;
 8002e1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	22ff      	movs	r2, #255	; 0xff
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e24:	f001 f82a 	bl	8003e7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e28:	f000 fffa 	bl	8003e20 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e34:	e011      	b.n	8002e5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d012      	beq.n	8002e64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3310      	adds	r3, #16
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fb9a 	bl	800357c <xTaskRemoveFromEventList>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e4e:	f000 fc79 	bl	8003744 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e52:	7bbb      	ldrb	r3, [r7, #14]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	dce9      	bgt.n	8002e36 <prvUnlockQueue+0x60>
 8002e62:	e000      	b.n	8002e66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	22ff      	movs	r2, #255	; 0xff
 8002e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e6e:	f001 f805 	bl	8003e7c <vPortExitCritical>
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e82:	f000 ffcd 	bl	8003e20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d102      	bne.n	8002e94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e001      	b.n	8002e98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e98:	f000 fff0 	bl	8003e7c <vPortExitCritical>

	return xReturn;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002eae:	f000 ffb7 	bl	8003e20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d102      	bne.n	8002ec4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	e001      	b.n	8002ec8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ec8:	f000 ffd8 	bl	8003e7c <vPortExitCritical>

	return xReturn;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b08c      	sub	sp, #48	; 0x30
 8002eda:	af04      	add	r7, sp, #16
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 f8a8 	bl	8004040 <pvPortMalloc>
 8002ef0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00e      	beq.n	8002f16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002ef8:	2054      	movs	r0, #84	; 0x54
 8002efa:	f001 f8a1 	bl	8004040 <pvPortMalloc>
 8002efe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0c:	e005      	b.n	8002f1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f0e:	6978      	ldr	r0, [r7, #20]
 8002f10:	f001 f958 	bl	80041c4 <vPortFree>
 8002f14:	e001      	b.n	8002f1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f20:	88fa      	ldrh	r2, [r7, #6]
 8002f22:	2300      	movs	r3, #0
 8002f24:	9303      	str	r3, [sp, #12]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	9302      	str	r3, [sp, #8]
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f80e 	bl	8002f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f3c:	69f8      	ldr	r0, [r7, #28]
 8002f3e:	f000 f889 	bl	8003054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f42:	2301      	movs	r3, #1
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e002      	b.n	8002f4e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f4e:	69bb      	ldr	r3, [r7, #24]
	}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f70:	3b01      	subs	r3, #1
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f023 0307 	bic.w	r3, r3, #7
 8002f7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <prvInitialiseNewTask+0x46>
	__asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e7fe      	b.n	8002f9c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	e012      	b.n	8002fca <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	4413      	add	r3, r2
 8002faa:	7819      	ldrb	r1, [r3, #0]
 8002fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3334      	adds	r3, #52	; 0x34
 8002fb4:	460a      	mov	r2, r1
 8002fb6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d006      	beq.n	8002fd2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2b0f      	cmp	r3, #15
 8002fce:	d9e9      	bls.n	8002fa4 <prvInitialiseNewTask+0x4c>
 8002fd0:	e000      	b.n	8002fd4 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002fd2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d901      	bls.n	8002fe6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff f9c1 	bl	8002384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	3318      	adds	r3, #24
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f9bc 	bl	8002384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003010:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	f1c3 0207 	rsb	r2, r3, #7
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	2200      	movs	r2, #0
 8003026:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	68f9      	ldr	r1, [r7, #12]
 8003034:	69b8      	ldr	r0, [r7, #24]
 8003036:	f000 fded 	bl	8003c14 <pxPortInitialiseStack>
 800303a:	4602      	mov	r2, r0
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800304a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800304c:	bf00      	nop
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800305c:	f000 fee0 	bl	8003e20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003060:	4b2a      	ldr	r3, [pc, #168]	; (800310c <prvAddNewTaskToReadyList+0xb8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a29      	ldr	r2, [pc, #164]	; (800310c <prvAddNewTaskToReadyList+0xb8>)
 8003068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800306a:	4b29      	ldr	r3, [pc, #164]	; (8003110 <prvAddNewTaskToReadyList+0xbc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003072:	4a27      	ldr	r2, [pc, #156]	; (8003110 <prvAddNewTaskToReadyList+0xbc>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <prvAddNewTaskToReadyList+0xb8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d110      	bne.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003080:	f000 fb84 	bl	800378c <prvInitialiseTaskLists>
 8003084:	e00d      	b.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003086:	4b23      	ldr	r3, [pc, #140]	; (8003114 <prvAddNewTaskToReadyList+0xc0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <prvAddNewTaskToReadyList+0xbc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	429a      	cmp	r2, r3
 800309a:	d802      	bhi.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800309c:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <prvAddNewTaskToReadyList+0xbc>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030a2:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <prvAddNewTaskToReadyList+0xc4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3301      	adds	r3, #1
 80030a8:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <prvAddNewTaskToReadyList+0xc4>)
 80030aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	2201      	movs	r2, #1
 80030b2:	409a      	lsls	r2, r3
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <prvAddNewTaskToReadyList+0xc8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <prvAddNewTaskToReadyList+0xc8>)
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4a15      	ldr	r2, [pc, #84]	; (8003120 <prvAddNewTaskToReadyList+0xcc>)
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f7ff f962 	bl	800239e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030da:	f000 fecf 	bl	8003e7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <prvAddNewTaskToReadyList+0xc0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <prvAddNewTaskToReadyList+0xbc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d207      	bcs.n	8003104 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <prvAddNewTaskToReadyList+0xd0>)
 80030f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000190 	.word	0x20000190
 8003110:	20000090 	.word	0x20000090
 8003114:	2000019c 	.word	0x2000019c
 8003118:	200001ac 	.word	0x200001ac
 800311c:	20000198 	.word	0x20000198
 8003120:	20000094 	.word	0x20000094
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <vTaskStartScheduler+0x74>)
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2300      	movs	r3, #0
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	4919      	ldr	r1, [pc, #100]	; (80031a0 <vTaskStartScheduler+0x78>)
 800313c:	4819      	ldr	r0, [pc, #100]	; (80031a4 <vTaskStartScheduler+0x7c>)
 800313e:	f7ff feca 	bl	8002ed6 <xTaskCreate>
 8003142:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d115      	bne.n	8003176 <vTaskStartScheduler+0x4e>
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <vTaskStartScheduler+0x80>)
 800315e:	f04f 32ff 	mov.w	r2, #4294967295
 8003162:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <vTaskStartScheduler+0x84>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <vTaskStartScheduler+0x88>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003170:	f000 fdca 	bl	8003d08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003174:	e00d      	b.n	8003192 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d109      	bne.n	8003192 <vTaskStartScheduler+0x6a>
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	e7fe      	b.n	8003190 <vTaskStartScheduler+0x68>
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200001b4 	.word	0x200001b4
 80031a0:	08005628 	.word	0x08005628
 80031a4:	0800375d 	.word	0x0800375d
 80031a8:	200001b0 	.word	0x200001b0
 80031ac:	2000019c 	.word	0x2000019c
 80031b0:	20000194 	.word	0x20000194

080031b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <vTaskSuspendAll+0x18>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	4a03      	ldr	r2, [pc, #12]	; (80031cc <vTaskSuspendAll+0x18>)
 80031c0:	6013      	str	r3, [r2, #0]
}
 80031c2:	bf00      	nop
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	200001b8 	.word	0x200001b8

080031d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <xTaskResumeAll+0x114>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <xTaskResumeAll+0x2a>
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	e7fe      	b.n	80031f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031fa:	f000 fe11 	bl	8003e20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031fe:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <xTaskResumeAll+0x114>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3b01      	subs	r3, #1
 8003204:	4a37      	ldr	r2, [pc, #220]	; (80032e4 <xTaskResumeAll+0x114>)
 8003206:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003208:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <xTaskResumeAll+0x114>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d161      	bne.n	80032d4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <xTaskResumeAll+0x118>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05d      	beq.n	80032d4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003218:	e02e      	b.n	8003278 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800321a:	4b34      	ldr	r3, [pc, #208]	; (80032ec <xTaskResumeAll+0x11c>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3318      	adds	r3, #24
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff f916 	bl	8002458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3304      	adds	r3, #4
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff f911 	bl	8002458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	2201      	movs	r2, #1
 800323c:	409a      	lsls	r2, r3
 800323e:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <xTaskResumeAll+0x120>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <xTaskResumeAll+0x120>)
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <xTaskResumeAll+0x124>)
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3304      	adds	r3, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f7ff f89d 	bl	800239e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <xTaskResumeAll+0x128>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <xTaskResumeAll+0x12c>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <xTaskResumeAll+0x11c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1cc      	bne.n	800321a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003286:	f000 fb0d 	bl	80038a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <xTaskResumeAll+0x130>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d010      	beq.n	80032b8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003296:	f000 f837 	bl	8003308 <xTaskIncrementTick>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80032a0:	4b16      	ldr	r3, [pc, #88]	; (80032fc <xTaskResumeAll+0x12c>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f1      	bne.n	8003296 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <xTaskResumeAll+0x130>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032b8:	4b10      	ldr	r3, [pc, #64]	; (80032fc <xTaskResumeAll+0x12c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032c0:	2301      	movs	r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <xTaskResumeAll+0x134>)
 80032c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032d4:	f000 fdd2 	bl	8003e7c <vPortExitCritical>

	return xAlreadyYielded;
 80032d8:	68bb      	ldr	r3, [r7, #8]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200001b8 	.word	0x200001b8
 80032e8:	20000190 	.word	0x20000190
 80032ec:	20000150 	.word	0x20000150
 80032f0:	20000198 	.word	0x20000198
 80032f4:	20000094 	.word	0x20000094
 80032f8:	20000090 	.word	0x20000090
 80032fc:	200001a4 	.word	0x200001a4
 8003300:	200001a0 	.word	0x200001a0
 8003304:	e000ed04 	.word	0xe000ed04

08003308 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003312:	4b50      	ldr	r3, [pc, #320]	; (8003454 <xTaskIncrementTick+0x14c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f040 808c 	bne.w	8003434 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800331c:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <xTaskIncrementTick+0x150>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003324:	4a4c      	ldr	r2, [pc, #304]	; (8003458 <xTaskIncrementTick+0x150>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11f      	bne.n	8003370 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003330:	4b4a      	ldr	r3, [pc, #296]	; (800345c <xTaskIncrementTick+0x154>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <xTaskIncrementTick+0x46>
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	e7fe      	b.n	800334c <xTaskIncrementTick+0x44>
 800334e:	4b43      	ldr	r3, [pc, #268]	; (800345c <xTaskIncrementTick+0x154>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	4b42      	ldr	r3, [pc, #264]	; (8003460 <xTaskIncrementTick+0x158>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a40      	ldr	r2, [pc, #256]	; (800345c <xTaskIncrementTick+0x154>)
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4a40      	ldr	r2, [pc, #256]	; (8003460 <xTaskIncrementTick+0x158>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b40      	ldr	r3, [pc, #256]	; (8003464 <xTaskIncrementTick+0x15c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	4a3e      	ldr	r2, [pc, #248]	; (8003464 <xTaskIncrementTick+0x15c>)
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	f000 fa9a 	bl	80038a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003370:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <xTaskIncrementTick+0x160>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	d34d      	bcc.n	8003416 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800337a:	4b38      	ldr	r3, [pc, #224]	; (800345c <xTaskIncrementTick+0x154>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <xTaskIncrementTick+0x80>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <xTaskIncrementTick+0x82>
 8003388:	2300      	movs	r3, #0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <xTaskIncrementTick+0x160>)
 8003390:	f04f 32ff 	mov.w	r2, #4294967295
 8003394:	601a      	str	r2, [r3, #0]
					break;
 8003396:	e03e      	b.n	8003416 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003398:	4b30      	ldr	r3, [pc, #192]	; (800345c <xTaskIncrementTick+0x154>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d203      	bcs.n	80033b8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033b0:	4a2d      	ldr	r2, [pc, #180]	; (8003468 <xTaskIncrementTick+0x160>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6013      	str	r3, [r2, #0]
						break;
 80033b6:	e02e      	b.n	8003416 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff f84b 	bl	8002458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3318      	adds	r3, #24
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff f842 	bl	8002458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	2201      	movs	r2, #1
 80033da:	409a      	lsls	r2, r3
 80033dc:	4b23      	ldr	r3, [pc, #140]	; (800346c <xTaskIncrementTick+0x164>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	4a22      	ldr	r2, [pc, #136]	; (800346c <xTaskIncrementTick+0x164>)
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <xTaskIncrementTick+0x168>)
 80033f4:	441a      	add	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f7fe ffce 	bl	800239e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <xTaskIncrementTick+0x16c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	429a      	cmp	r2, r3
 800340e:	d3b4      	bcc.n	800337a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003414:	e7b1      	b.n	800337a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003416:	4b17      	ldr	r3, [pc, #92]	; (8003474 <xTaskIncrementTick+0x16c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341c:	4914      	ldr	r1, [pc, #80]	; (8003470 <xTaskIncrementTick+0x168>)
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d907      	bls.n	800343e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800342e:	2301      	movs	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e004      	b.n	800343e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <xTaskIncrementTick+0x170>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <xTaskIncrementTick+0x170>)
 800343c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800343e:	4b0f      	ldr	r3, [pc, #60]	; (800347c <xTaskIncrementTick+0x174>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003446:	2301      	movs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800344a:	697b      	ldr	r3, [r7, #20]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	200001b8 	.word	0x200001b8
 8003458:	20000194 	.word	0x20000194
 800345c:	20000148 	.word	0x20000148
 8003460:	2000014c 	.word	0x2000014c
 8003464:	200001a8 	.word	0x200001a8
 8003468:	200001b0 	.word	0x200001b0
 800346c:	20000198 	.word	0x20000198
 8003470:	20000094 	.word	0x20000094
 8003474:	20000090 	.word	0x20000090
 8003478:	200001a0 	.word	0x200001a0
 800347c:	200001a4 	.word	0x200001a4

08003480 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <vTaskSwitchContext+0xa0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800348e:	4b25      	ldr	r3, [pc, #148]	; (8003524 <vTaskSwitchContext+0xa4>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003494:	e03e      	b.n	8003514 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <vTaskSwitchContext+0xa4>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <vTaskSwitchContext+0xa8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034aa:	7afb      	ldrb	r3, [r7, #11]
 80034ac:	f1c3 031f 	rsb	r3, r3, #31
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	491e      	ldr	r1, [pc, #120]	; (800352c <vTaskSwitchContext+0xac>)
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <vTaskSwitchContext+0x5a>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	e7fe      	b.n	80034d8 <vTaskSwitchContext+0x58>
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4a11      	ldr	r2, [pc, #68]	; (800352c <vTaskSwitchContext+0xac>)
 80034e6:	4413      	add	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3308      	adds	r3, #8
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d104      	bne.n	800350a <vTaskSwitchContext+0x8a>
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a07      	ldr	r2, [pc, #28]	; (8003530 <vTaskSwitchContext+0xb0>)
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	200001b8 	.word	0x200001b8
 8003524:	200001a4 	.word	0x200001a4
 8003528:	20000198 	.word	0x20000198
 800352c:	20000094 	.word	0x20000094
 8003530:	20000090 	.word	0x20000090

08003534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <vTaskPlaceOnEventList+0x24>
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e7fe      	b.n	8003556 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <vTaskPlaceOnEventList+0x44>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3318      	adds	r3, #24
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7fe ff40 	bl	80023e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003566:	2101      	movs	r1, #1
 8003568:	6838      	ldr	r0, [r7, #0]
 800356a:	f000 faed 	bl	8003b48 <prvAddCurrentTaskToDelayedList>
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000090 	.word	0x20000090

0800357c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <xTaskRemoveFromEventList+0x2a>
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e7fe      	b.n	80035a4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	3318      	adds	r3, #24
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe ff54 	bl	8002458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <xTaskRemoveFromEventList+0xac>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d11c      	bne.n	80035f2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe ff4b 	bl	8002458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	2201      	movs	r2, #1
 80035c8:	409a      	lsls	r2, r3
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <xTaskRemoveFromEventList+0xb0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	4a16      	ldr	r2, [pc, #88]	; (800362c <xTaskRemoveFromEventList+0xb0>)
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4a13      	ldr	r2, [pc, #76]	; (8003630 <xTaskRemoveFromEventList+0xb4>)
 80035e2:	441a      	add	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f7fe fed7 	bl	800239e <vListInsertEnd>
 80035f0:	e005      	b.n	80035fe <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	3318      	adds	r3, #24
 80035f6:	4619      	mov	r1, r3
 80035f8:	480e      	ldr	r0, [pc, #56]	; (8003634 <xTaskRemoveFromEventList+0xb8>)
 80035fa:	f7fe fed0 	bl	800239e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <xTaskRemoveFromEventList+0xbc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	429a      	cmp	r2, r3
 800360a:	d905      	bls.n	8003618 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <xTaskRemoveFromEventList+0xc0>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e001      	b.n	800361c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800361c:	697b      	ldr	r3, [r7, #20]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	200001b8 	.word	0x200001b8
 800362c:	20000198 	.word	0x20000198
 8003630:	20000094 	.word	0x20000094
 8003634:	20000150 	.word	0x20000150
 8003638:	20000090 	.word	0x20000090
 800363c:	200001a4 	.word	0x200001a4

08003640 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <vTaskSetTimeOutState+0x22>
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e7fe      	b.n	8003660 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <vTaskSetTimeOutState+0x40>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <vTaskSetTimeOutState+0x44>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	605a      	str	r2, [r3, #4]
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	200001a8 	.word	0x200001a8
 8003684:	20000194 	.word	0x20000194

08003688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <xTaskCheckForTimeOut+0x24>
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	e7fe      	b.n	80036aa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <xTaskCheckForTimeOut+0x3e>
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	e7fe      	b.n	80036c4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80036c6:	f000 fbab 	bl	8003e20 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036ca:	4b1c      	ldr	r3, [pc, #112]	; (800373c <xTaskCheckForTimeOut+0xb4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d102      	bne.n	80036e0 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e026      	b.n	800372e <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b16      	ldr	r3, [pc, #88]	; (8003740 <xTaskCheckForTimeOut+0xb8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d007      	beq.n	80036fc <xTaskCheckForTimeOut+0x74>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036f6:	2301      	movs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e018      	b.n	800372e <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	1ad2      	subs	r2, r2, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d20e      	bcs.n	800372a <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1acb      	subs	r3, r1, r3
 8003718:	441a      	add	r2, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ff8e 	bl	8003640 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e001      	b.n	800372e <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 800372a:	2301      	movs	r3, #1
 800372c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800372e:	f000 fba5 	bl	8003e7c <vPortExitCritical>

	return xReturn;
 8003732:	697b      	ldr	r3, [r7, #20]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000194 	.word	0x20000194
 8003740:	200001a8 	.word	0x200001a8

08003744 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <vTaskMissedYield+0x14>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	200001a4 	.word	0x200001a4

0800375c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003764:	f000 f852 	bl	800380c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <prvIdleTask+0x28>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d9f9      	bls.n	8003764 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <prvIdleTask+0x2c>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003780:	e7f0      	b.n	8003764 <prvIdleTask+0x8>
 8003782:	bf00      	nop
 8003784:	20000094 	.word	0x20000094
 8003788:	e000ed04 	.word	0xe000ed04

0800378c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	e00c      	b.n	80037b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <prvInitialiseTaskLists+0x60>)
 80037a4:	4413      	add	r3, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fdcc 	bl	8002344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3301      	adds	r3, #1
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b06      	cmp	r3, #6
 80037b6:	d9ef      	bls.n	8003798 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037b8:	480d      	ldr	r0, [pc, #52]	; (80037f0 <prvInitialiseTaskLists+0x64>)
 80037ba:	f7fe fdc3 	bl	8002344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037be:	480d      	ldr	r0, [pc, #52]	; (80037f4 <prvInitialiseTaskLists+0x68>)
 80037c0:	f7fe fdc0 	bl	8002344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037c4:	480c      	ldr	r0, [pc, #48]	; (80037f8 <prvInitialiseTaskLists+0x6c>)
 80037c6:	f7fe fdbd 	bl	8002344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037ca:	480c      	ldr	r0, [pc, #48]	; (80037fc <prvInitialiseTaskLists+0x70>)
 80037cc:	f7fe fdba 	bl	8002344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037d0:	480b      	ldr	r0, [pc, #44]	; (8003800 <prvInitialiseTaskLists+0x74>)
 80037d2:	f7fe fdb7 	bl	8002344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <prvInitialiseTaskLists+0x78>)
 80037d8:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <prvInitialiseTaskLists+0x64>)
 80037da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <prvInitialiseTaskLists+0x7c>)
 80037de:	4a05      	ldr	r2, [pc, #20]	; (80037f4 <prvInitialiseTaskLists+0x68>)
 80037e0:	601a      	str	r2, [r3, #0]
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000094 	.word	0x20000094
 80037f0:	20000120 	.word	0x20000120
 80037f4:	20000134 	.word	0x20000134
 80037f8:	20000150 	.word	0x20000150
 80037fc:	20000164 	.word	0x20000164
 8003800:	2000017c 	.word	0x2000017c
 8003804:	20000148 	.word	0x20000148
 8003808:	2000014c 	.word	0x2000014c

0800380c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003812:	e028      	b.n	8003866 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003814:	f7ff fcce 	bl	80031b4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003818:	4b17      	ldr	r3, [pc, #92]	; (8003878 <prvCheckTasksWaitingTermination+0x6c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8003828:	f7ff fcd2 	bl	80031d0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d119      	bne.n	8003866 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003832:	f000 faf5 	bl	8003e20 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <prvCheckTasksWaitingTermination+0x6c>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	3304      	adds	r3, #4
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fe08 	bl	8002458 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <prvCheckTasksWaitingTermination+0x70>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3b01      	subs	r3, #1
 800384e:	4a0b      	ldr	r2, [pc, #44]	; (800387c <prvCheckTasksWaitingTermination+0x70>)
 8003850:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <prvCheckTasksWaitingTermination+0x74>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3b01      	subs	r3, #1
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <prvCheckTasksWaitingTermination+0x74>)
 800385a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800385c:	f000 fb0e 	bl	8003e7c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003860:	6838      	ldr	r0, [r7, #0]
 8003862:	f000 f80f 	bl	8003884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <prvCheckTasksWaitingTermination+0x74>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1d2      	bne.n	8003814 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000164 	.word	0x20000164
 800387c:	20000190 	.word	0x20000190
 8003880:	20000178 	.word	0x20000178

08003884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fc97 	bl	80041c4 <vPortFree>
			vPortFree( pxTCB );
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fc94 	bl	80041c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <prvResetNextTaskUnblockTime+0x44>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <prvResetNextTaskUnblockTime+0x14>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <prvResetNextTaskUnblockTime+0x16>
 80038b8:	2300      	movs	r3, #0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038be:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <prvResetNextTaskUnblockTime+0x48>)
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038c6:	e008      	b.n	80038da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <prvResetNextTaskUnblockTime+0x44>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a05      	ldr	r2, [pc, #20]	; (80038ec <prvResetNextTaskUnblockTime+0x48>)
 80038d8:	6013      	str	r3, [r2, #0]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000148 	.word	0x20000148
 80038ec:	200001b0 	.word	0x200001b0

080038f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038f6:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <xTaskGetSchedulerState+0x34>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038fe:	2301      	movs	r3, #1
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	e008      	b.n	8003916 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <xTaskGetSchedulerState+0x38>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800390c:	2302      	movs	r3, #2
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	e001      	b.n	8003916 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003912:	2300      	movs	r3, #0
 8003914:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003916:	687b      	ldr	r3, [r7, #4]
	}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	2000019c 	.word	0x2000019c
 8003928:	200001b8 	.word	0x200001b8

0800392c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d062      	beq.n	8003a04 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003942:	4b32      	ldr	r3, [pc, #200]	; (8003a0c <vTaskPriorityInherit+0xe0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d25b      	bcs.n	8003a04 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	db06      	blt.n	8003962 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003954:	4b2d      	ldr	r3, [pc, #180]	; (8003a0c <vTaskPriorityInherit+0xe0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	f1c3 0207 	rsb	r2, r3, #7
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6959      	ldr	r1, [r3, #20]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <vTaskPriorityInherit+0xe4>)
 8003974:	4413      	add	r3, r2
 8003976:	4299      	cmp	r1, r3
 8003978:	d101      	bne.n	800397e <vTaskPriorityInherit+0x52>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <vTaskPriorityInherit+0x54>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d03a      	beq.n	80039fa <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3304      	adds	r3, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fd65 	bl	8002458 <uxListRemove>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d115      	bne.n	80039c0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	491d      	ldr	r1, [pc, #116]	; (8003a10 <vTaskPriorityInherit+0xe4>)
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <vTaskPriorityInherit+0x94>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	2201      	movs	r2, #1
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43da      	mvns	r2, r3
 80039b6:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <vTaskPriorityInherit+0xe8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4013      	ands	r3, r2
 80039bc:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <vTaskPriorityInherit+0xe8>)
 80039be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039c0:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <vTaskPriorityInherit+0xe0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	2201      	movs	r2, #1
 80039d0:	409a      	lsls	r2, r3
 80039d2:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <vTaskPriorityInherit+0xe8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	4a0e      	ldr	r2, [pc, #56]	; (8003a14 <vTaskPriorityInherit+0xe8>)
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <vTaskPriorityInherit+0xe4>)
 80039ea:	441a      	add	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f7fe fcd3 	bl	800239e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039f8:	e004      	b.n	8003a04 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039fa:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <vTaskPriorityInherit+0xe0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000090 	.word	0x20000090
 8003a10:	20000094 	.word	0x20000094
 8003a14:	20000198 	.word	0x20000198

08003a18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d06c      	beq.n	8003b08 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <xTaskPriorityDisinherit+0xfc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d009      	beq.n	8003a4c <xTaskPriorityDisinherit+0x34>
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	e7fe      	b.n	8003a4a <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <xTaskPriorityDisinherit+0x50>
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	e7fe      	b.n	8003a66 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d044      	beq.n	8003b08 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d140      	bne.n	8003b08 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fce4 	bl	8002458 <uxListRemove>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d115      	bne.n	8003ac2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9a:	491f      	ldr	r1, [pc, #124]	; (8003b18 <xTaskPriorityDisinherit+0x100>)
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xTaskPriorityDisinherit+0xaa>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <xTaskPriorityDisinherit+0x104>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4013      	ands	r3, r2
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <xTaskPriorityDisinherit+0x104>)
 8003ac0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	f1c3 0207 	rsb	r2, r3, #7
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	2201      	movs	r2, #1
 8003adc:	409a      	lsls	r2, r3
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <xTaskPriorityDisinherit+0x104>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	4a0d      	ldr	r2, [pc, #52]	; (8003b1c <xTaskPriorityDisinherit+0x104>)
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <xTaskPriorityDisinherit+0x100>)
 8003af6:	441a      	add	r2, r3
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f7fe fc4d 	bl	800239e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b04:	2301      	movs	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b08:	697b      	ldr	r3, [r7, #20]
	}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000090 	.word	0x20000090
 8003b18:	20000094 	.word	0x20000094
 8003b1c:	20000198 	.word	0x20000198

08003b20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b32:	3201      	adds	r2, #1
 8003b34:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003b36:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8003b38:	681b      	ldr	r3, [r3, #0]
	}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	20000090 	.word	0x20000090

08003b48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b58:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fc7a 	bl	8002458 <uxListRemove>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	2201      	movs	r2, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43da      	mvns	r2, r3
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d10a      	bne.n	8003ba0 <prvAddCurrentTaskToDelayedList+0x58>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4619      	mov	r1, r3
 8003b98:	481a      	ldr	r0, [pc, #104]	; (8003c04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b9a:	f7fe fc00 	bl	800239e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b9e:	e026      	b.n	8003bee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d209      	bcs.n	8003bcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bb8:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f7fe fc0e 	bl	80023e6 <vListInsert>
}
 8003bca:	e010      	b.n	8003bee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f7fe fc04 	bl	80023e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d202      	bcs.n	8003bee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003be8:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6013      	str	r3, [r2, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000194 	.word	0x20000194
 8003bfc:	20000090 	.word	0x20000090
 8003c00:	20000198 	.word	0x20000198
 8003c04:	2000017c 	.word	0x2000017c
 8003c08:	2000014c 	.word	0x2000014c
 8003c0c:	20000148 	.word	0x20000148
 8003c10:	200001b0 	.word	0x200001b0

08003c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3b04      	subs	r3, #4
 8003c24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3b04      	subs	r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f023 0201 	bic.w	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3b04      	subs	r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c44:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <pxPortInitialiseStack+0x64>)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b14      	subs	r3, #20
 8003c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3b04      	subs	r3, #4
 8003c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f06f 0202 	mvn.w	r2, #2
 8003c62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3b20      	subs	r3, #32
 8003c68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	08003c7d 	.word	0x08003c7d

08003c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <prvTaskExitError+0x38>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d009      	beq.n	8003ca0 <prvTaskExitError+0x24>
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	607b      	str	r3, [r7, #4]
 8003c9e:	e7fe      	b.n	8003c9e <prvTaskExitError+0x22>
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8003cb2:	e7fe      	b.n	8003cb2 <prvTaskExitError+0x36>
 8003cb4:	20000008 	.word	0x20000008
	...

08003cc0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <pxCurrentTCBConst2>)
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	6808      	ldr	r0, [r1, #0]
 8003cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cca:	f380 8809 	msr	PSP, r0
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f04f 0000 	mov.w	r0, #0
 8003cd6:	f380 8811 	msr	BASEPRI, r0
 8003cda:	4770      	bx	lr
 8003cdc:	f3af 8000 	nop.w

08003ce0 <pxCurrentTCBConst2>:
 8003ce0:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop

08003ce8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ce8:	4806      	ldr	r0, [pc, #24]	; (8003d04 <prvPortStartFirstTask+0x1c>)
 8003cea:	6800      	ldr	r0, [r0, #0]
 8003cec:	6800      	ldr	r0, [r0, #0]
 8003cee:	f380 8808 	msr	MSP, r0
 8003cf2:	b662      	cpsie	i
 8003cf4:	b661      	cpsie	f
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	df00      	svc	0
 8003d00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d02:	bf00      	nop
 8003d04:	e000ed08 	.word	0xe000ed08

08003d08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d0e:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <xPortStartScheduler+0xf4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a3b      	ldr	r2, [pc, #236]	; (8003e00 <xPortStartScheduler+0xf8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d109      	bne.n	8003d2c <xPortStartScheduler+0x24>
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	e7fe      	b.n	8003d2a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d2c:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <xPortStartScheduler+0xf4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a34      	ldr	r2, [pc, #208]	; (8003e04 <xPortStartScheduler+0xfc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d109      	bne.n	8003d4a <xPortStartScheduler+0x42>
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e7fe      	b.n	8003d48 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d4a:	4b2f      	ldr	r3, [pc, #188]	; (8003e08 <xPortStartScheduler+0x100>)
 8003d4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	22ff      	movs	r2, #255	; 0xff
 8003d5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <xPortStartScheduler+0x104>)
 8003d70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <xPortStartScheduler+0x108>)
 8003d74:	2207      	movs	r2, #7
 8003d76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d78:	e009      	b.n	8003d8e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003d7a:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <xPortStartScheduler+0x108>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	4a23      	ldr	r2, [pc, #140]	; (8003e10 <xPortStartScheduler+0x108>)
 8003d82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b80      	cmp	r3, #128	; 0x80
 8003d98:	d0ef      	beq.n	8003d7a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <xPortStartScheduler+0x108>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <xPortStartScheduler+0x108>)
 8003da2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003da4:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <xPortStartScheduler+0x108>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <xPortStartScheduler+0x108>)
 8003dae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <xPortStartScheduler+0x10c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <xPortStartScheduler+0x10c>)
 8003dbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dc2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <xPortStartScheduler+0x10c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <xPortStartScheduler+0x10c>)
 8003dca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003dce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003dd0:	f000 f8d2 	bl	8003f78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003dd4:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <xPortStartScheduler+0x110>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003dda:	f000 f8e9 	bl	8003fb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003dde:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <xPortStartScheduler+0x114>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a0e      	ldr	r2, [pc, #56]	; (8003e1c <xPortStartScheduler+0x114>)
 8003de4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003de8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003dea:	f7ff ff7d 	bl	8003ce8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003dee:	f7ff ff45 	bl	8003c7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	e000ed00 	.word	0xe000ed00
 8003e00:	410fc271 	.word	0x410fc271
 8003e04:	410fc270 	.word	0x410fc270
 8003e08:	e000e400 	.word	0xe000e400
 8003e0c:	200001bc 	.word	0x200001bc
 8003e10:	200001c0 	.word	0x200001c0
 8003e14:	e000ed20 	.word	0xe000ed20
 8003e18:	20000008 	.word	0x20000008
 8003e1c:	e000ef34 	.word	0xe000ef34

08003e20 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e38:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <vPortEnterCritical+0x54>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	4a0d      	ldr	r2, [pc, #52]	; (8003e74 <vPortEnterCritical+0x54>)
 8003e40:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <vPortEnterCritical+0x54>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d10e      	bne.n	8003e68 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <vPortEnterCritical+0x58>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <vPortEnterCritical+0x48>
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	e7fe      	b.n	8003e66 <vPortEnterCritical+0x46>
	}
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	20000008 	.word	0x20000008
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <vPortExitCritical+0x4c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <vPortExitCritical+0x22>
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	e7fe      	b.n	8003e9c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <vPortExitCritical+0x4c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	4a08      	ldr	r2, [pc, #32]	; (8003ec8 <vPortExitCritical+0x4c>)
 8003ea6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <vPortExitCritical+0x4c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <vPortExitCritical+0x3e>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000008 	.word	0x20000008
 8003ecc:	00000000 	.word	0x00000000

08003ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ed0:	f3ef 8009 	mrs	r0, PSP
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <pxCurrentTCBConst>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f01e 0f10 	tst.w	lr, #16
 8003ee0:	bf08      	it	eq
 8003ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eea:	6010      	str	r0, [r2, #0]
 8003eec:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ef4:	f380 8811 	msr	BASEPRI, r0
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f7ff fabe 	bl	8003480 <vTaskSwitchContext>
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f380 8811 	msr	BASEPRI, r0
 8003f0c:	bc08      	pop	{r3}
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	6808      	ldr	r0, [r1, #0]
 8003f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f16:	f01e 0f10 	tst.w	lr, #16
 8003f1a:	bf08      	it	eq
 8003f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f20:	f380 8809 	msr	PSP, r0
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	f3af 8000 	nop.w

08003f30 <pxCurrentTCBConst>:
 8003f30:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop

08003f38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f50:	f7ff f9da 	bl	8003308 <xTaskIncrementTick>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <xPortSysTickHandler+0x3c>)
 8003f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	2300      	movs	r3, #0
 8003f64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f7c:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <vPortSetupTimerInterrupt+0x28>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <vPortSetupTimerInterrupt+0x2c>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <vPortSetupTimerInterrupt+0x30>)
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f8e:	4b07      	ldr	r3, [pc, #28]	; (8003fac <vPortSetupTimerInterrupt+0x34>)
 8003f90:	2207      	movs	r2, #7
 8003f92:	601a      	str	r2, [r3, #0]
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	2000000c 	.word	0x2000000c
 8003fa4:	10624dd3 	.word	0x10624dd3
 8003fa8:	e000e014 	.word	0xe000e014
 8003fac:	e000e010 	.word	0xe000e010

08003fb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003fb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003fc0 <vPortEnableVFP+0x10>
 8003fb4:	6801      	ldr	r1, [r0, #0]
 8003fb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003fba:	6001      	str	r1, [r0, #0]
 8003fbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003fbe:	bf00      	nop
 8003fc0:	e000ed88 	.word	0xe000ed88

08003fc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003fca:	f3ef 8305 	mrs	r3, IPSR
 8003fce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	d913      	bls.n	8003ffe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fd6:	4a16      	ldr	r2, [pc, #88]	; (8004030 <vPortValidateInterruptPriority+0x6c>)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fe0:	4b14      	ldr	r3, [pc, #80]	; (8004034 <vPortValidateInterruptPriority+0x70>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	7afa      	ldrb	r2, [r7, #11]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d209      	bcs.n	8003ffe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	e7fe      	b.n	8003ffc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <vPortValidateInterruptPriority+0x74>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <vPortValidateInterruptPriority+0x78>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d909      	bls.n	8004022 <vPortValidateInterruptPriority+0x5e>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	e7fe      	b.n	8004020 <vPortValidateInterruptPriority+0x5c>
	}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000e3f0 	.word	0xe000e3f0
 8004034:	200001bc 	.word	0x200001bc
 8004038:	e000ed0c 	.word	0xe000ed0c
 800403c:	200001c0 	.word	0x200001c0

08004040 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800404c:	f7ff f8b2 	bl	80031b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004050:	4b57      	ldr	r3, [pc, #348]	; (80041b0 <pvPortMalloc+0x170>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004058:	f000 f90c 	bl	8004274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800405c:	4b55      	ldr	r3, [pc, #340]	; (80041b4 <pvPortMalloc+0x174>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	f040 808c 	bne.w	8004182 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01c      	beq.n	80040aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004070:	2208      	movs	r2, #8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	2b00      	cmp	r3, #0
 8004080:	d013      	beq.n	80040aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f023 0307 	bic.w	r3, r3, #7
 8004088:	3308      	adds	r3, #8
 800408a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <pvPortMalloc+0x6a>
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e7fe      	b.n	80040a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d068      	beq.n	8004182 <pvPortMalloc+0x142>
 80040b0:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <pvPortMalloc+0x178>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d863      	bhi.n	8004182 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040ba:	4b40      	ldr	r3, [pc, #256]	; (80041bc <pvPortMalloc+0x17c>)
 80040bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040be:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <pvPortMalloc+0x17c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040c4:	e004      	b.n	80040d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d903      	bls.n	80040e2 <pvPortMalloc+0xa2>
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f1      	bne.n	80040c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040e2:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <pvPortMalloc+0x170>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d04a      	beq.n	8004182 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2208      	movs	r2, #8
 80040f2:	4413      	add	r3, r2
 80040f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	1ad2      	subs	r2, r2, r3
 8004106:	2308      	movs	r3, #8
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	429a      	cmp	r2, r3
 800410c:	d91e      	bls.n	800414c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4413      	add	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <pvPortMalloc+0xf4>
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	e7fe      	b.n	8004132 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1ad2      	subs	r2, r2, r3
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004146:	69b8      	ldr	r0, [r7, #24]
 8004148:	f000 f8f6 	bl	8004338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <pvPortMalloc+0x178>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <pvPortMalloc+0x178>)
 8004158:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <pvPortMalloc+0x178>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <pvPortMalloc+0x180>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d203      	bcs.n	800416e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <pvPortMalloc+0x178>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <pvPortMalloc+0x180>)
 800416c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <pvPortMalloc+0x174>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	431a      	orrs	r2, r3
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004182:	f7ff f825 	bl	80031d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <pvPortMalloc+0x164>
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e7fe      	b.n	80041a2 <pvPortMalloc+0x162>
	return pvReturn;
 80041a4:	69fb      	ldr	r3, [r7, #28]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3728      	adds	r7, #40	; 0x28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20001554 	.word	0x20001554
 80041b4:	20001560 	.word	0x20001560
 80041b8:	20001558 	.word	0x20001558
 80041bc:	2000154c 	.word	0x2000154c
 80041c0:	2000155c 	.word	0x2000155c

080041c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d046      	beq.n	8004264 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041d6:	2308      	movs	r3, #8
 80041d8:	425b      	negs	r3, r3
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4413      	add	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	4b20      	ldr	r3, [pc, #128]	; (800426c <vPortFree+0xa8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <vPortFree+0x42>
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e7fe      	b.n	8004204 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <vPortFree+0x5e>
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	e7fe      	b.n	8004220 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <vPortFree+0xa8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d019      	beq.n	8004264 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d115      	bne.n	8004264 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <vPortFree+0xa8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	43db      	mvns	r3, r3
 8004242:	401a      	ands	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004248:	f7fe ffb4 	bl	80031b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <vPortFree+0xac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4413      	add	r3, r2
 8004256:	4a06      	ldr	r2, [pc, #24]	; (8004270 <vPortFree+0xac>)
 8004258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800425a:	6938      	ldr	r0, [r7, #16]
 800425c:	f000 f86c 	bl	8004338 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004260:	f7fe ffb6 	bl	80031d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004264:	bf00      	nop
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20001560 	.word	0x20001560
 8004270:	20001558 	.word	0x20001558

08004274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800427a:	f241 3388 	movw	r3, #5000	; 0x1388
 800427e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004280:	4b27      	ldr	r3, [pc, #156]	; (8004320 <prvHeapInit+0xac>)
 8004282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00c      	beq.n	80042a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3307      	adds	r3, #7
 8004292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0307 	bic.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	4a1f      	ldr	r2, [pc, #124]	; (8004320 <prvHeapInit+0xac>)
 80042a4:	4413      	add	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042ac:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <prvHeapInit+0xb0>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <prvHeapInit+0xb0>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4413      	add	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042c0:	2208      	movs	r2, #8
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <prvHeapInit+0xb4>)
 80042d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <prvHeapInit+0xb4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <prvHeapInit+0xb4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <prvHeapInit+0xb4>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a0a      	ldr	r2, [pc, #40]	; (800432c <prvHeapInit+0xb8>)
 8004302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a09      	ldr	r2, [pc, #36]	; (8004330 <prvHeapInit+0xbc>)
 800430a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <prvHeapInit+0xc0>)
 800430e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004312:	601a      	str	r2, [r3, #0]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	200001c4 	.word	0x200001c4
 8004324:	2000154c 	.word	0x2000154c
 8004328:	20001554 	.word	0x20001554
 800432c:	2000155c 	.word	0x2000155c
 8004330:	20001558 	.word	0x20001558
 8004334:	20001560 	.word	0x20001560

08004338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004340:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <prvInsertBlockIntoFreeList+0xac>)
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e002      	b.n	800434c <prvInsertBlockIntoFreeList+0x14>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d8f7      	bhi.n	8004346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4413      	add	r3, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d108      	bne.n	800437a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	441a      	add	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	441a      	add	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d118      	bne.n	80043c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d00d      	beq.n	80043b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e008      	b.n	80043c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <prvInsertBlockIntoFreeList+0xb0>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e003      	b.n	80043c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d002      	beq.n	80043d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	2000154c 	.word	0x2000154c
 80043e8:	20001554 	.word	0x20001554

080043ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80043ec:	b5b0      	push	{r4, r5, r7, lr}
 80043ee:	b09c      	sub	sp, #112	; 0x70
 80043f0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80043f2:	f7fb ff45 	bl	8000280 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80043f6:	f000 f887 	bl	8004508 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80043fa:	f000 f8f7 	bl	80045ec <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80043fe:	f000 f8c5 	bl	800458c <MX_USART2_UART_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of mtxSensores */
	osMutexDef(mtxSensores);
 8004402:	2300      	movs	r3, #0
 8004404:	66fb      	str	r3, [r7, #108]	; 0x6c
	mtxSensoresHandle = osMutexCreate(osMutex(mtxSensores));
 8004406:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd ff07 	bl	800221e <osMutexCreate>
 8004410:	4602      	mov	r2, r0
 8004412:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <main+0xec>)
 8004414:	601a      	str	r2, [r3, #0]

	/* definition and creation of mtxResultado */
	osMutexDef(mtxResultado);
 8004416:	2300      	movs	r3, #0
 8004418:	66bb      	str	r3, [r7, #104]	; 0x68
	mtxResultadoHandle = osMutexCreate(osMutex(mtxResultado));
 800441a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fefd 	bl	800221e <osMutexCreate>
 8004424:	4602      	mov	r2, r0
 8004426:	4b2d      	ldr	r3, [pc, #180]	; (80044dc <main+0xf0>)
 8004428:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of taskLeitura */
	osThreadDef(taskLeitura, StartTaskLeitura, osPriorityNormal, 0, 128);
 800442a:	4b2d      	ldr	r3, [pc, #180]	; (80044e0 <main+0xf4>)
 800442c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004430:	461d      	mov	r5, r3
 8004432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004436:	682b      	ldr	r3, [r5, #0]
 8004438:	6023      	str	r3, [r4, #0]
	taskLeituraHandle = osThreadCreate(osThread(taskLeitura), NULL);
 800443a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f7fd fec5 	bl	80021d0 <osThreadCreate>
 8004446:	4602      	mov	r2, r0
 8004448:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <main+0xf8>)
 800444a:	601a      	str	r2, [r3, #0]

	/* definition and creation of taskMin */
	osThreadDef(taskMin, StartTaskMin, osPriorityIdle, 0, 128);
 800444c:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <main+0xfc>)
 800444e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004452:	461d      	mov	r5, r3
 8004454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	6023      	str	r3, [r4, #0]
	taskMinHandle = osThreadCreate(osThread(taskMin), NULL);
 800445c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd feb4 	bl	80021d0 <osThreadCreate>
 8004468:	4602      	mov	r2, r0
 800446a:	4b20      	ldr	r3, [pc, #128]	; (80044ec <main+0x100>)
 800446c:	601a      	str	r2, [r3, #0]

	/* definition and creation of taskMax */
	osThreadDef(taskMax, StartTask03, osPriorityIdle, 0, 128);
 800446e:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <main+0x104>)
 8004470:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004474:	461d      	mov	r5, r3
 8004476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800447a:	682b      	ldr	r3, [r5, #0]
 800447c:	6023      	str	r3, [r4, #0]
	taskMaxHandle = osThreadCreate(osThread(taskMax), NULL);
 800447e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fea3 	bl	80021d0 <osThreadCreate>
 800448a:	4602      	mov	r2, r0
 800448c:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <main+0x108>)
 800448e:	601a      	str	r2, [r3, #0]

	/* definition and creation of taskMed */
	osThreadDef(taskMed, StartTaskMed, osPriorityIdle, 0, 128);
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <main+0x10c>)
 8004492:	f107 0418 	add.w	r4, r7, #24
 8004496:	461d      	mov	r5, r3
 8004498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800449a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	6023      	str	r3, [r4, #0]
	taskMedHandle = osThreadCreate(osThread(taskMed), NULL);
 80044a0:	f107 0318 	add.w	r3, r7, #24
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd fe92 	bl	80021d0 <osThreadCreate>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <main+0x110>)
 80044b0:	601a      	str	r2, [r3, #0]

	/* definition and creation of taskEscrita */
	osThreadDef(taskEscrita, StartTaskEscrita, osPriorityIdle, 0, 128);
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <main+0x114>)
 80044b4:	1d3c      	adds	r4, r7, #4
 80044b6:	461d      	mov	r5, r3
 80044b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	6023      	str	r3, [r4, #0]
	taskEscritaHandle = osThreadCreate(osThread(taskEscrita), NULL);
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fd fe83 	bl	80021d0 <osThreadCreate>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <main+0x118>)
 80044ce:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80044d0:	f7fd fe77 	bl	80021c2 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80044d4:	e7fe      	b.n	80044d4 <main+0xe8>
 80044d6:	bf00      	nop
 80044d8:	200016ac 	.word	0x200016ac
 80044dc:	20001688 	.word	0x20001688
 80044e0:	0800563c 	.word	0x0800563c
 80044e4:	20001728 	.word	0x20001728
 80044e8:	08005658 	.word	0x08005658
 80044ec:	20001724 	.word	0x20001724
 80044f0:	08005674 	.word	0x08005674
 80044f4:	200016b0 	.word	0x200016b0
 80044f8:	08005690 	.word	0x08005690
 80044fc:	20001690 	.word	0x20001690
 8004500:	080056b0 	.word	0x080056b0
 8004504:	2000168c 	.word	0x2000168c

08004508 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b090      	sub	sp, #64	; 0x40
 800450c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800450e:	f107 0318 	add.w	r3, r7, #24
 8004512:	2228      	movs	r2, #40	; 0x28
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fc75 	bl	8004e06 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800451c:	1d3b      	adds	r3, r7, #4
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	609a      	str	r2, [r3, #8]
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800452a:	2302      	movs	r3, #2
 800452c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800452e:	2301      	movs	r3, #1
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004532:	2310      	movs	r3, #16
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004536:	2302      	movs	r3, #2
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800453a:	2300      	movs	r3, #0
 800453c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800453e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004544:	f107 0318 	add.w	r3, r7, #24
 8004548:	4618      	mov	r0, r3
 800454a:	f7fc f973 	bl	8000834 <HAL_RCC_OscConfig>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <SystemClock_Config+0x50>
		Error_Handler();
 8004554:	f000 fae8 	bl	8004b28 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004558:	230f      	movs	r3, #15
 800455a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800455c:	2302      	movs	r3, #2
 800455e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004568:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800456e:	1d3b      	adds	r3, r7, #4
 8004570:	2102      	movs	r1, #2
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd f84c 	bl	8001610 <HAL_RCC_ClockConfig>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <SystemClock_Config+0x7a>
		Error_Handler();
 800457e:	f000 fad3 	bl	8004b28 <Error_Handler>
	}
}
 8004582:	bf00      	nop
 8004584:	3740      	adds	r7, #64	; 0x40
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004590:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <MX_USART2_UART_Init+0x5c>)
 8004594:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 8004596:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 8004598:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800459c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800459e:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80045aa:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 80045b2:	220c      	movs	r2, #12
 80045b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80045ce:	4805      	ldr	r0, [pc, #20]	; (80045e4 <MX_USART2_UART_Init+0x58>)
 80045d0:	f7fd fa54 	bl	8001a7c <HAL_UART_Init>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80045da:	f000 faa5 	bl	8004b28 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	200016b4 	.word	0x200016b4
 80045e8:	40004400 	.word	0x40004400

080045ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80045f2:	f107 0314 	add.w	r3, r7, #20
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	609a      	str	r2, [r3, #8]
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004602:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <MX_GPIO_Init+0xc4>)
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4a2a      	ldr	r2, [pc, #168]	; (80046b0 <MX_GPIO_Init+0xc4>)
 8004608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800460c:	6153      	str	r3, [r2, #20]
 800460e:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <MX_GPIO_Init+0xc4>)
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
 800461a:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <MX_GPIO_Init+0xc4>)
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	4a24      	ldr	r2, [pc, #144]	; (80046b0 <MX_GPIO_Init+0xc4>)
 8004620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004624:	6153      	str	r3, [r2, #20]
 8004626:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <MX_GPIO_Init+0xc4>)
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004632:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <MX_GPIO_Init+0xc4>)
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <MX_GPIO_Init+0xc4>)
 8004638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463c:	6153      	str	r3, [r2, #20]
 800463e:	4b1c      	ldr	r3, [pc, #112]	; (80046b0 <MX_GPIO_Init+0xc4>)
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800464a:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <MX_GPIO_Init+0xc4>)
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <MX_GPIO_Init+0xc4>)
 8004650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004654:	6153      	str	r3, [r2, #20]
 8004656:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <MX_GPIO_Init+0xc4>)
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004662:	2200      	movs	r2, #0
 8004664:	2120      	movs	r1, #32
 8004666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800466a:	f7fc f8cb 	bl	8000804 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800466e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004672:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <MX_GPIO_Init+0xc8>)
 8004676:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800467c:	f107 0314 	add.w	r3, r7, #20
 8004680:	4619      	mov	r1, r3
 8004682:	480d      	ldr	r0, [pc, #52]	; (80046b8 <MX_GPIO_Init+0xcc>)
 8004684:	f7fb ff48 	bl	8000518 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8004688:	2320      	movs	r3, #32
 800468a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800468c:	2301      	movs	r3, #1
 800468e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004694:	2300      	movs	r3, #0
 8004696:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	4619      	mov	r1, r3
 800469e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046a2:	f7fb ff39 	bl	8000518 <HAL_GPIO_Init>

}
 80046a6:	bf00      	nop
 80046a8:	3728      	adds	r7, #40	; 0x28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	10210000 	.word	0x10210000
 80046b8:	48000800 	.word	0x48000800

080046bc <StartTaskLeitura>:
 * @brief  Function implementing the taskLeitura thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskLeitura */
void StartTaskLeitura(void const * argument) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osMutexWait(mtxSensoresHandle, 1000);
 80046c4:	4b1d      	ldr	r3, [pc, #116]	; (800473c <StartTaskLeitura+0x80>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fd fdb3 	bl	8002238 <osMutexWait>

		for (int i = 0; i < 2; i++) {
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	e021      	b.n	800471c <StartTaskLeitura+0x60>
			for (int j = 0; j < 10; j++) {
 80046d8:	2300      	movs	r3, #0
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	e018      	b.n	8004710 <StartTaskLeitura+0x54>
				sensores[i][j] = sensores[i][j + 1];
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	1c59      	adds	r1, r3, #1
 80046e2:	4817      	ldr	r0, [pc, #92]	; (8004740 <StartTaskLeitura+0x84>)
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4403      	add	r3, r0
 80046f0:	440b      	add	r3, r1
 80046f2:	7818      	ldrb	r0, [r3, #0]
 80046f4:	4912      	ldr	r1, [pc, #72]	; (8004740 <StartTaskLeitura+0x84>)
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	18ca      	adds	r2, r1, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4413      	add	r3, r2
 8004706:	4602      	mov	r2, r0
 8004708:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 10; j++) {
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	3301      	adds	r3, #1
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b09      	cmp	r3, #9
 8004714:	dde3      	ble.n	80046de <StartTaskLeitura+0x22>
		for (int i = 0; i < 2; i++) {
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b01      	cmp	r3, #1
 8004720:	ddda      	ble.n	80046d8 <StartTaskLeitura+0x1c>
			}
		}
		sensores[0][9] = 2;
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <StartTaskLeitura+0x84>)
 8004724:	2202      	movs	r2, #2
 8004726:	725a      	strb	r2, [r3, #9]
		sensores[1][9] = 2;
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <StartTaskLeitura+0x84>)
 800472a:	2202      	movs	r2, #2
 800472c:	74da      	strb	r2, [r3, #19]
		osMutexRelease(mtxSensoresHandle);
 800472e:	4b03      	ldr	r3, [pc, #12]	; (800473c <StartTaskLeitura+0x80>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fd fdd0 	bl	80022d8 <osMutexRelease>
		osMutexWait(mtxSensoresHandle, 1000);
 8004738:	e7c4      	b.n	80046c4 <StartTaskLeitura+0x8>
 800473a:	bf00      	nop
 800473c:	200016ac 	.word	0x200016ac
 8004740:	20001674 	.word	0x20001674

08004744 <StartTaskMin>:
 * @brief Function implementing the taskMin thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskMin */
void StartTaskMin(void const * argument) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskMin */
	int min[2];
	int i = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	61fb      	str	r3, [r7, #28]
	/* Infinite loop */
	for (;;) {

		osMutexWait(mtxSensoresHandle, 1000);
 8004750:	4b39      	ldr	r3, [pc, #228]	; (8004838 <StartTaskMin+0xf4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004758:	4618      	mov	r0, r3
 800475a:	f7fd fd6d 	bl	8002238 <osMutexWait>
		i = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < 10; i++) {
 8004762:	2300      	movs	r3, #0
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e01c      	b.n	80047a2 <StartTaskMin+0x5e>
			if (sensores[i][j] < min) {
 8004768:	4934      	ldr	r1, [pc, #208]	; (800483c <StartTaskMin+0xf8>)
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	18ca      	adds	r2, r1, r3
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	4413      	add	r3, r2
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	f107 030c 	add.w	r3, r7, #12
 8004782:	429a      	cmp	r2, r3
 8004784:	d20a      	bcs.n	800479c <StartTaskMin+0x58>
				min[0] = sensores[i][j];
 8004786:	492d      	ldr	r1, [pc, #180]	; (800483c <StartTaskMin+0xf8>)
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	18ca      	adds	r2, r1, r3
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	4413      	add	r3, r2
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < 10; i++) {
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	3301      	adds	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b09      	cmp	r3, #9
 80047a6:	dddf      	ble.n	8004768 <StartTaskMin+0x24>
			}
		}

		i = 1;
 80047a8:	2301      	movs	r3, #1
 80047aa:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < 10; i++) {
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	e01c      	b.n	80047ec <StartTaskMin+0xa8>
			if (sensores[i][j] < min) {
 80047b2:	4922      	ldr	r1, [pc, #136]	; (800483c <StartTaskMin+0xf8>)
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	18ca      	adds	r2, r1, r3
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f107 030c 	add.w	r3, r7, #12
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d20a      	bcs.n	80047e6 <StartTaskMin+0xa2>
				min[1] = sensores[i][j];
 80047d0:	491a      	ldr	r1, [pc, #104]	; (800483c <StartTaskMin+0xf8>)
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	18ca      	adds	r2, r1, r3
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	4413      	add	r3, r2
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < 10; i++) {
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	3301      	adds	r3, #1
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b09      	cmp	r3, #9
 80047f0:	dddf      	ble.n	80047b2 <StartTaskMin+0x6e>
			}
		}

		osMutexRelease(mtxSensoresHandle);
 80047f2:	4b11      	ldr	r3, [pc, #68]	; (8004838 <StartTaskMin+0xf4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fd fd6e 	bl	80022d8 <osMutexRelease>

		osMutexWait(mtxResultadoHandle, 1000);
 80047fc:	4b10      	ldr	r3, [pc, #64]	; (8004840 <StartTaskMin+0xfc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004804:	4618      	mov	r0, r3
 8004806:	f7fd fd17 	bl	8002238 <osMutexWait>
		resultados[0][0] = min[0];
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <StartTaskMin+0x100>)
 8004816:	edc3 7a00 	vstr	s15, [r3]
		resultados[1][0] = min[1];
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	ee07 3a90 	vmov	s15, r3
 8004820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <StartTaskMin+0x100>)
 8004826:	edc3 7a03 	vstr	s15, [r3, #12]
		osMutexRelease(mtxResultadoHandle);
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <StartTaskMin+0xfc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd fd52 	bl	80022d8 <osMutexRelease>
		osMutexWait(mtxSensoresHandle, 1000);
 8004834:	e78c      	b.n	8004750 <StartTaskMin+0xc>
 8004836:	bf00      	nop
 8004838:	200016ac 	.word	0x200016ac
 800483c:	20001674 	.word	0x20001674
 8004840:	20001688 	.word	0x20001688
 8004844:	20001694 	.word	0x20001694

08004848 <StartTask03>:
 * @brief Function implementing the taskMax thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	int max[2];
	int i;
	/* Infinite loop */
	for (;;) {
		osMutexWait(mtxSensoresHandle, 1000);
 8004850:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <StartTask03+0xf8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004858:	4618      	mov	r0, r3
 800485a:	f7fd fced 	bl	8002238 <osMutexWait>
		i = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
		max[0] = sensores[0][0];
 8004862:	4b38      	ldr	r3, [pc, #224]	; (8004944 <StartTask03+0xfc>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < 10; i++) {
 8004868:	2300      	movs	r3, #0
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	e01b      	b.n	80048a6 <StartTask03+0x5e>
			if (sensores[i][j] < max[1]) {
 800486e:	4935      	ldr	r1, [pc, #212]	; (8004944 <StartTask03+0xfc>)
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	18ca      	adds	r2, r1, r3
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	4413      	add	r3, r2
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	429a      	cmp	r2, r3
 8004888:	da0a      	bge.n	80048a0 <StartTask03+0x58>
				max[0] = sensores[i][j];
 800488a:	492e      	ldr	r1, [pc, #184]	; (8004944 <StartTask03+0xfc>)
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	18ca      	adds	r2, r1, r3
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < 10; i++) {
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	3301      	adds	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b09      	cmp	r3, #9
 80048aa:	dde0      	ble.n	800486e <StartTask03+0x26>
			}
		}

		i = 1;
 80048ac:	2301      	movs	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
		max[1] = sensores[1][0];
 80048b0:	4b24      	ldr	r3, [pc, #144]	; (8004944 <StartTask03+0xfc>)
 80048b2:	7a9b      	ldrb	r3, [r3, #10]
 80048b4:	613b      	str	r3, [r7, #16]

		for (int j = 0; j < 10; i++) {
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e01b      	b.n	80048f4 <StartTask03+0xac>
			if (sensores[i][j] < max[1]) {
 80048bc:	4921      	ldr	r1, [pc, #132]	; (8004944 <StartTask03+0xfc>)
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	18ca      	adds	r2, r1, r3
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	4413      	add	r3, r2
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	da0a      	bge.n	80048ee <StartTask03+0xa6>
				max[1] = sensores[i][j];
 80048d8:	491a      	ldr	r1, [pc, #104]	; (8004944 <StartTask03+0xfc>)
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	18ca      	adds	r2, r1, r3
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	4413      	add	r3, r2
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < 10; i++) {
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b09      	cmp	r3, #9
 80048f8:	dde0      	ble.n	80048bc <StartTask03+0x74>
			}
		}

		osMutexRelease(mtxSensoresHandle);
 80048fa:	4b11      	ldr	r3, [pc, #68]	; (8004940 <StartTask03+0xf8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fcea 	bl	80022d8 <osMutexRelease>

		osMutexWait(mtxResultadoHandle, 1000);
 8004904:	4b10      	ldr	r3, [pc, #64]	; (8004948 <StartTask03+0x100>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800490c:	4618      	mov	r0, r3
 800490e:	f7fd fc93 	bl	8002238 <osMutexWait>
		resultados[0][1] = max[0];
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <StartTask03+0x104>)
 800491e:	edc3 7a01 	vstr	s15, [r3, #4]
		resultados[1][1] = max[1];
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	ee07 3a90 	vmov	s15, r3
 8004928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <StartTask03+0x104>)
 800492e:	edc3 7a04 	vstr	s15, [r3, #16]
		osMutexRelease(mtxResultadoHandle);
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <StartTask03+0x100>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd fcce 	bl	80022d8 <osMutexRelease>
		osMutexWait(mtxSensoresHandle, 1000);
 800493c:	e788      	b.n	8004850 <StartTask03+0x8>
 800493e:	bf00      	nop
 8004940:	200016ac 	.word	0x200016ac
 8004944:	20001674 	.word	0x20001674
 8004948:	20001688 	.word	0x20001688
 800494c:	20001694 	.word	0x20001694

08004950 <StartTaskMed>:
 * @brief Function implementing the taskMed thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskMed */
void StartTaskMed(void const * argument) {
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskMed */
	float med[2];
	int i;
	/* Infinite loop */
	for (;;) {
		osMutexWait(mtxSensoresHandle, 1000);
 8004958:	4b44      	ldr	r3, [pc, #272]	; (8004a6c <StartTaskMed+0x11c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004960:	4618      	mov	r0, r3
 8004962:	f7fd fc69 	bl	8002238 <osMutexWait>
		i = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < 10; i++) {
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	e018      	b.n	80049a2 <StartTaskMed+0x52>
			med[i] = +sensores[i][j];
 8004970:	493f      	ldr	r1, [pc, #252]	; (8004a70 <StartTaskMed+0x120>)
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	18ca      	adds	r2, r1, r3
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	4413      	add	r3, r2
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	ee07 3a90 	vmov	s15, r3
 8004988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	f107 0220 	add.w	r2, r7, #32
 8004994:	4413      	add	r3, r2
 8004996:	3b14      	subs	r3, #20
 8004998:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 10; i++) {
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3301      	adds	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b09      	cmp	r3, #9
 80049a6:	dde3      	ble.n	8004970 <StartTaskMed+0x20>
		}
		med[i] = med[i] / 10;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	f107 0220 	add.w	r2, r7, #32
 80049b0:	4413      	add	r3, r2
 80049b2:	3b14      	subs	r3, #20
 80049b4:	ed93 7a00 	vldr	s14, [r3]
 80049b8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80049bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	f107 0220 	add.w	r2, r7, #32
 80049c8:	4413      	add	r3, r2
 80049ca:	3b14      	subs	r3, #20
 80049cc:	edc3 7a00 	vstr	s15, [r3]

		i = 1;
 80049d0:	2301      	movs	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < 10; i++) {
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e018      	b.n	8004a0c <StartTaskMed+0xbc>
			med[i] = +sensores[i][j];
 80049da:	4925      	ldr	r1, [pc, #148]	; (8004a70 <StartTaskMed+0x120>)
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	18ca      	adds	r2, r1, r3
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	4413      	add	r3, r2
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	f107 0220 	add.w	r2, r7, #32
 80049fe:	4413      	add	r3, r2
 8004a00:	3b14      	subs	r3, #20
 8004a02:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 10; i++) {
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b09      	cmp	r3, #9
 8004a10:	dde3      	ble.n	80049da <StartTaskMed+0x8a>
		}
		med[i] = med[i] / 10;
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	f107 0220 	add.w	r2, r7, #32
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3b14      	subs	r3, #20
 8004a1e:	ed93 7a00 	vldr	s14, [r3]
 8004a22:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004a26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	f107 0220 	add.w	r2, r7, #32
 8004a32:	4413      	add	r3, r2
 8004a34:	3b14      	subs	r3, #20
 8004a36:	edc3 7a00 	vstr	s15, [r3]

		osMutexRelease(mtxSensoresHandle);
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <StartTaskMed+0x11c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fd fc4a 	bl	80022d8 <osMutexRelease>
		osMutexWait(mtxResultadoHandle, 1000);
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <StartTaskMed+0x124>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fd fbf3 	bl	8002238 <osMutexWait>
		resultados[0][1] = med[0];
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <StartTaskMed+0x128>)
 8004a56:	6053      	str	r3, [r2, #4]
		resultados[1][1] = med[1];
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4a07      	ldr	r2, [pc, #28]	; (8004a78 <StartTaskMed+0x128>)
 8004a5c:	6113      	str	r3, [r2, #16]
		osMutexRelease(mtxResultadoHandle);
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <StartTaskMed+0x124>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fd fc38 	bl	80022d8 <osMutexRelease>
		osMutexWait(mtxSensoresHandle, 1000);
 8004a68:	e776      	b.n	8004958 <StartTaskMed+0x8>
 8004a6a:	bf00      	nop
 8004a6c:	200016ac 	.word	0x200016ac
 8004a70:	20001674 	.word	0x20001674
 8004a74:	20001688 	.word	0x20001688
 8004a78:	20001694 	.word	0x20001694

08004a7c <StartTaskEscrita>:
 * @brief Function implementing the taskEscrita thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskEscrita */
void StartTaskEscrita(void const * argument) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8004a82:	af02      	add	r7, sp, #8
 8004a84:	1d3b      	adds	r3, r7, #4
 8004a86:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN StartTaskEscrita */
	uint8_t buffer[1000];
	/* Infinite loop */
	for (;;) {

		osMutexWait(mtxResultadoHandle, 1000);
 8004a88:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <StartTaskEscrita+0x9c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fd fbd1 	bl	8002238 <osMutexWait>

		sprintf(buffer, "Min: %d\r\n Max: %d\r\n Med: %d\r\n", sensores[0][0],
 8004a96:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <StartTaskEscrita+0xa0>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
				sensores[0][1], sensores[0][2]);
 8004a9c:	4b1f      	ldr	r3, [pc, #124]	; (8004b1c <StartTaskEscrita+0xa0>)
 8004a9e:	785b      	ldrb	r3, [r3, #1]
		sprintf(buffer, "Min: %d\r\n Max: %d\r\n Med: %d\r\n", sensores[0][0],
 8004aa0:	4619      	mov	r1, r3
				sensores[0][1], sensores[0][2]);
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <StartTaskEscrita+0xa0>)
 8004aa4:	789b      	ldrb	r3, [r3, #2]
		sprintf(buffer, "Min: %d\r\n Max: %d\r\n Med: %d\r\n", sensores[0][0],
 8004aa6:	f107 0008 	add.w	r0, r7, #8
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	460b      	mov	r3, r1
 8004aae:	491c      	ldr	r1, [pc, #112]	; (8004b20 <StartTaskEscrita+0xa4>)
 8004ab0:	f000 f9b2 	bl	8004e18 <siprintf>

		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8004ab4:	f107 0308 	add.w	r3, r7, #8
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fb fb89 	bl	80001d0 <strlen>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	f107 0108 	add.w	r1, r7, #8
 8004ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aca:	4816      	ldr	r0, [pc, #88]	; (8004b24 <StartTaskEscrita+0xa8>)
 8004acc:	f7fd f827 	bl	8001b1e <HAL_UART_Transmit>

		sprintf(buffer, "Min: %d\r\n Max: %d\r\n Med: %d\r\n", sensores[1][0],
 8004ad0:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <StartTaskEscrita+0xa0>)
 8004ad2:	7a9b      	ldrb	r3, [r3, #10]
 8004ad4:	461a      	mov	r2, r3
				sensores[1][1], sensores[1][2]);
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <StartTaskEscrita+0xa0>)
 8004ad8:	7adb      	ldrb	r3, [r3, #11]
		sprintf(buffer, "Min: %d\r\n Max: %d\r\n Med: %d\r\n", sensores[1][0],
 8004ada:	4619      	mov	r1, r3
				sensores[1][1], sensores[1][2]);
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <StartTaskEscrita+0xa0>)
 8004ade:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "Min: %d\r\n Max: %d\r\n Med: %d\r\n", sensores[1][0],
 8004ae0:	f107 0008 	add.w	r0, r7, #8
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	490d      	ldr	r1, [pc, #52]	; (8004b20 <StartTaskEscrita+0xa4>)
 8004aea:	f000 f995 	bl	8004e18 <siprintf>

		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fb fb6c 	bl	80001d0 <strlen>
 8004af8:	4603      	mov	r3, r0
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	f107 0108 	add.w	r1, r7, #8
 8004b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b04:	4807      	ldr	r0, [pc, #28]	; (8004b24 <StartTaskEscrita+0xa8>)
 8004b06:	f7fd f80a 	bl	8001b1e <HAL_UART_Transmit>

		osMutexRelease(mtxResultadoHandle);
 8004b0a:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <StartTaskEscrita+0x9c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fd fbe2 	bl	80022d8 <osMutexRelease>
	for (;;) {
 8004b14:	e7b8      	b.n	8004a88 <StartTaskEscrita+0xc>
 8004b16:	bf00      	nop
 8004b18:	20001688 	.word	0x20001688
 8004b1c:	20001674 	.word	0x20001674
 8004b20:	080056c4 	.word	0x080056c4
 8004b24:	200016b4 	.word	0x200016b4

08004b28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004b2c:	bf00      	nop
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b3e:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <HAL_MspInit+0x4c>)
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <HAL_MspInit+0x4c>)
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	6193      	str	r3, [r2, #24]
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <HAL_MspInit+0x4c>)
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	607b      	str	r3, [r7, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_MspInit+0x4c>)
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <HAL_MspInit+0x4c>)
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b60:	61d3      	str	r3, [r2, #28]
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <HAL_MspInit+0x4c>)
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b6e:	2200      	movs	r2, #0
 8004b70:	210f      	movs	r1, #15
 8004b72:	f06f 0001 	mvn.w	r0, #1
 8004b76:	f7fb fca6 	bl	80004c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b7a:	bf00      	nop
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000

08004b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	f107 0314 	add.w	r3, r7, #20
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <HAL_UART_MspInit+0x7c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d128      	bne.n	8004bfc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004baa:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <HAL_UART_MspInit+0x80>)
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <HAL_UART_MspInit+0x80>)
 8004bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb4:	61d3      	str	r3, [r2, #28]
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <HAL_UART_MspInit+0x80>)
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <HAL_UART_MspInit+0x80>)
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	4a10      	ldr	r2, [pc, #64]	; (8004c08 <HAL_UART_MspInit+0x80>)
 8004bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bcc:	6153      	str	r3, [r2, #20]
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <HAL_UART_MspInit+0x80>)
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004bda:	230c      	movs	r3, #12
 8004bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bde:	2302      	movs	r3, #2
 8004be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004be6:	2303      	movs	r3, #3
 8004be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bea:	2307      	movs	r3, #7
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bee:	f107 0314 	add.w	r3, r7, #20
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bf8:	f7fb fc8e 	bl	8000518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004bfc:	bf00      	nop
 8004bfe:	3728      	adds	r7, #40	; 0x28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40004400 	.word	0x40004400
 8004c08:	40021000 	.word	0x40021000

08004c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c1e:	e7fe      	b.n	8004c1e <HardFault_Handler+0x4>

08004c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c24:	e7fe      	b.n	8004c24 <MemManage_Handler+0x4>

08004c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c26:	b480      	push	{r7}
 8004c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c2a:	e7fe      	b.n	8004c2a <BusFault_Handler+0x4>

08004c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c30:	e7fe      	b.n	8004c30 <UsageFault_Handler+0x4>

08004c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c32:	b480      	push	{r7}
 8004c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c36:	bf00      	nop
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c44:	f7fb fb62 	bl	800030c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004c48:	f7fe fe52 	bl	80038f0 <xTaskGetSchedulerState>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d001      	beq.n	8004c56 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004c52:	f7ff f971 	bl	8003f38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004c64:	4b11      	ldr	r3, [pc, #68]	; (8004cac <_sbrk+0x50>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <_sbrk+0x16>
		heap_end = &end;
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <_sbrk+0x50>)
 8004c6e:	4a10      	ldr	r2, [pc, #64]	; (8004cb0 <_sbrk+0x54>)
 8004c70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004c72:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <_sbrk+0x50>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <_sbrk+0x50>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4413      	add	r3, r2
 8004c80:	466a      	mov	r2, sp
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d907      	bls.n	8004c96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004c86:	f000 f889 	bl	8004d9c <__errno>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	230c      	movs	r3, #12
 8004c8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295
 8004c94:	e006      	b.n	8004ca4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <_sbrk+0x50>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	4a03      	ldr	r2, [pc, #12]	; (8004cac <_sbrk+0x50>)
 8004ca0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20001564 	.word	0x20001564
 8004cb0:	20001730 	.word	0x20001730

08004cb4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cb8:	4b1f      	ldr	r3, [pc, #124]	; (8004d38 <SystemInit+0x84>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	4a1e      	ldr	r2, [pc, #120]	; (8004d38 <SystemInit+0x84>)
 8004cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004cc8:	4b1c      	ldr	r3, [pc, #112]	; (8004d3c <SystemInit+0x88>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <SystemInit+0x88>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <SystemInit+0x88>)
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	4918      	ldr	r1, [pc, #96]	; (8004d3c <SystemInit+0x88>)
 8004cda:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <SystemInit+0x8c>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004ce0:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <SystemInit+0x88>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <SystemInit+0x88>)
 8004ce6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004cf0:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <SystemInit+0x88>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a11      	ldr	r2, [pc, #68]	; (8004d3c <SystemInit+0x88>)
 8004cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cfa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <SystemInit+0x88>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4a0e      	ldr	r2, [pc, #56]	; (8004d3c <SystemInit+0x88>)
 8004d02:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004d06:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <SystemInit+0x88>)
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <SystemInit+0x88>)
 8004d0e:	f023 030f 	bic.w	r3, r3, #15
 8004d12:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004d14:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <SystemInit+0x88>)
 8004d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d18:	4908      	ldr	r1, [pc, #32]	; (8004d3c <SystemInit+0x88>)
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <SystemInit+0x90>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <SystemInit+0x88>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d26:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <SystemInit+0x84>)
 8004d28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d2c:	609a      	str	r2, [r3, #8]
#endif
}
 8004d2e:	bf00      	nop
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	e000ed00 	.word	0xe000ed00
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	f87fc00c 	.word	0xf87fc00c
 8004d44:	ff00fccc 	.word	0xff00fccc

08004d48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004d4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004d4e:	e003      	b.n	8004d58 <LoopCopyDataInit>

08004d50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004d52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004d54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004d56:	3104      	adds	r1, #4

08004d58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004d58:	480b      	ldr	r0, [pc, #44]	; (8004d88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004d5a:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004d5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004d5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004d60:	d3f6      	bcc.n	8004d50 <CopyDataInit>
	ldr	r2, =_sbss
 8004d62:	4a0b      	ldr	r2, [pc, #44]	; (8004d90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004d64:	e002      	b.n	8004d6c <LoopFillZerobss>

08004d66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004d66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004d68:	f842 3b04 	str.w	r3, [r2], #4

08004d6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <LoopForever+0x16>)
	cmp	r2, r3
 8004d6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004d70:	d3f9      	bcc.n	8004d66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d72:	f7ff ff9f 	bl	8004cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d76:	f000 f817 	bl	8004da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d7a:	f7ff fb37 	bl	80043ec <main>

08004d7e <LoopForever>:

LoopForever:
    b LoopForever
 8004d7e:	e7fe      	b.n	8004d7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d80:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004d84:	08005758 	.word	0x08005758
	ldr	r0, =_sdata
 8004d88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004d8c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8004d90:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8004d94:	20001730 	.word	0x20001730

08004d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d98:	e7fe      	b.n	8004d98 <ADC1_2_IRQHandler>
	...

08004d9c <__errno>:
 8004d9c:	4b01      	ldr	r3, [pc, #4]	; (8004da4 <__errno+0x8>)
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000010 	.word	0x20000010

08004da8 <__libc_init_array>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	4e0d      	ldr	r6, [pc, #52]	; (8004de0 <__libc_init_array+0x38>)
 8004dac:	4c0d      	ldr	r4, [pc, #52]	; (8004de4 <__libc_init_array+0x3c>)
 8004dae:	1ba4      	subs	r4, r4, r6
 8004db0:	10a4      	asrs	r4, r4, #2
 8004db2:	2500      	movs	r5, #0
 8004db4:	42a5      	cmp	r5, r4
 8004db6:	d109      	bne.n	8004dcc <__libc_init_array+0x24>
 8004db8:	4e0b      	ldr	r6, [pc, #44]	; (8004de8 <__libc_init_array+0x40>)
 8004dba:	4c0c      	ldr	r4, [pc, #48]	; (8004dec <__libc_init_array+0x44>)
 8004dbc:	f000 fc28 	bl	8005610 <_init>
 8004dc0:	1ba4      	subs	r4, r4, r6
 8004dc2:	10a4      	asrs	r4, r4, #2
 8004dc4:	2500      	movs	r5, #0
 8004dc6:	42a5      	cmp	r5, r4
 8004dc8:	d105      	bne.n	8004dd6 <__libc_init_array+0x2e>
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dd0:	4798      	blx	r3
 8004dd2:	3501      	adds	r5, #1
 8004dd4:	e7ee      	b.n	8004db4 <__libc_init_array+0xc>
 8004dd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dda:	4798      	blx	r3
 8004ddc:	3501      	adds	r5, #1
 8004dde:	e7f2      	b.n	8004dc6 <__libc_init_array+0x1e>
 8004de0:	08005750 	.word	0x08005750
 8004de4:	08005750 	.word	0x08005750
 8004de8:	08005750 	.word	0x08005750
 8004dec:	08005754 	.word	0x08005754

08004df0 <memcpy>:
 8004df0:	b510      	push	{r4, lr}
 8004df2:	1e43      	subs	r3, r0, #1
 8004df4:	440a      	add	r2, r1
 8004df6:	4291      	cmp	r1, r2
 8004df8:	d100      	bne.n	8004dfc <memcpy+0xc>
 8004dfa:	bd10      	pop	{r4, pc}
 8004dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e04:	e7f7      	b.n	8004df6 <memcpy+0x6>

08004e06 <memset>:
 8004e06:	4402      	add	r2, r0
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d100      	bne.n	8004e10 <memset+0xa>
 8004e0e:	4770      	bx	lr
 8004e10:	f803 1b01 	strb.w	r1, [r3], #1
 8004e14:	e7f9      	b.n	8004e0a <memset+0x4>
	...

08004e18 <siprintf>:
 8004e18:	b40e      	push	{r1, r2, r3}
 8004e1a:	b500      	push	{lr}
 8004e1c:	b09c      	sub	sp, #112	; 0x70
 8004e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e20:	9002      	str	r0, [sp, #8]
 8004e22:	9006      	str	r0, [sp, #24]
 8004e24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e28:	4809      	ldr	r0, [pc, #36]	; (8004e50 <siprintf+0x38>)
 8004e2a:	9107      	str	r1, [sp, #28]
 8004e2c:	9104      	str	r1, [sp, #16]
 8004e2e:	4909      	ldr	r1, [pc, #36]	; (8004e54 <siprintf+0x3c>)
 8004e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e34:	9105      	str	r1, [sp, #20]
 8004e36:	6800      	ldr	r0, [r0, #0]
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	a902      	add	r1, sp, #8
 8004e3c:	f000 f866 	bl	8004f0c <_svfiprintf_r>
 8004e40:	9b02      	ldr	r3, [sp, #8]
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	b01c      	add	sp, #112	; 0x70
 8004e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e4c:	b003      	add	sp, #12
 8004e4e:	4770      	bx	lr
 8004e50:	20000010 	.word	0x20000010
 8004e54:	ffff0208 	.word	0xffff0208

08004e58 <__ssputs_r>:
 8004e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5c:	688e      	ldr	r6, [r1, #8]
 8004e5e:	429e      	cmp	r6, r3
 8004e60:	4682      	mov	sl, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	4690      	mov	r8, r2
 8004e66:	4699      	mov	r9, r3
 8004e68:	d837      	bhi.n	8004eda <__ssputs_r+0x82>
 8004e6a:	898a      	ldrh	r2, [r1, #12]
 8004e6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e70:	d031      	beq.n	8004ed6 <__ssputs_r+0x7e>
 8004e72:	6825      	ldr	r5, [r4, #0]
 8004e74:	6909      	ldr	r1, [r1, #16]
 8004e76:	1a6f      	subs	r7, r5, r1
 8004e78:	6965      	ldr	r5, [r4, #20]
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e80:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e84:	f109 0301 	add.w	r3, r9, #1
 8004e88:	443b      	add	r3, r7
 8004e8a:	429d      	cmp	r5, r3
 8004e8c:	bf38      	it	cc
 8004e8e:	461d      	movcc	r5, r3
 8004e90:	0553      	lsls	r3, r2, #21
 8004e92:	d530      	bpl.n	8004ef6 <__ssputs_r+0x9e>
 8004e94:	4629      	mov	r1, r5
 8004e96:	f000 fb21 	bl	80054dc <_malloc_r>
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	b950      	cbnz	r0, 8004eb4 <__ssputs_r+0x5c>
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	f8ca 3000 	str.w	r3, [sl]
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eaa:	81a3      	strh	r3, [r4, #12]
 8004eac:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb4:	463a      	mov	r2, r7
 8004eb6:	6921      	ldr	r1, [r4, #16]
 8004eb8:	f7ff ff9a 	bl	8004df0 <memcpy>
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	6126      	str	r6, [r4, #16]
 8004eca:	6165      	str	r5, [r4, #20]
 8004ecc:	443e      	add	r6, r7
 8004ece:	1bed      	subs	r5, r5, r7
 8004ed0:	6026      	str	r6, [r4, #0]
 8004ed2:	60a5      	str	r5, [r4, #8]
 8004ed4:	464e      	mov	r6, r9
 8004ed6:	454e      	cmp	r6, r9
 8004ed8:	d900      	bls.n	8004edc <__ssputs_r+0x84>
 8004eda:	464e      	mov	r6, r9
 8004edc:	4632      	mov	r2, r6
 8004ede:	4641      	mov	r1, r8
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	f000 fa93 	bl	800540c <memmove>
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	1b9b      	subs	r3, r3, r6
 8004eea:	60a3      	str	r3, [r4, #8]
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	441e      	add	r6, r3
 8004ef0:	6026      	str	r6, [r4, #0]
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	e7dc      	b.n	8004eb0 <__ssputs_r+0x58>
 8004ef6:	462a      	mov	r2, r5
 8004ef8:	f000 fb4a 	bl	8005590 <_realloc_r>
 8004efc:	4606      	mov	r6, r0
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d1e2      	bne.n	8004ec8 <__ssputs_r+0x70>
 8004f02:	6921      	ldr	r1, [r4, #16]
 8004f04:	4650      	mov	r0, sl
 8004f06:	f000 fa9b 	bl	8005440 <_free_r>
 8004f0a:	e7c8      	b.n	8004e9e <__ssputs_r+0x46>

08004f0c <_svfiprintf_r>:
 8004f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f10:	461d      	mov	r5, r3
 8004f12:	898b      	ldrh	r3, [r1, #12]
 8004f14:	061f      	lsls	r7, r3, #24
 8004f16:	b09d      	sub	sp, #116	; 0x74
 8004f18:	4680      	mov	r8, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	d50f      	bpl.n	8004f40 <_svfiprintf_r+0x34>
 8004f20:	690b      	ldr	r3, [r1, #16]
 8004f22:	b96b      	cbnz	r3, 8004f40 <_svfiprintf_r+0x34>
 8004f24:	2140      	movs	r1, #64	; 0x40
 8004f26:	f000 fad9 	bl	80054dc <_malloc_r>
 8004f2a:	6020      	str	r0, [r4, #0]
 8004f2c:	6120      	str	r0, [r4, #16]
 8004f2e:	b928      	cbnz	r0, 8004f3c <_svfiprintf_r+0x30>
 8004f30:	230c      	movs	r3, #12
 8004f32:	f8c8 3000 	str.w	r3, [r8]
 8004f36:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3a:	e0c8      	b.n	80050ce <_svfiprintf_r+0x1c2>
 8004f3c:	2340      	movs	r3, #64	; 0x40
 8004f3e:	6163      	str	r3, [r4, #20]
 8004f40:	2300      	movs	r3, #0
 8004f42:	9309      	str	r3, [sp, #36]	; 0x24
 8004f44:	2320      	movs	r3, #32
 8004f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f4a:	2330      	movs	r3, #48	; 0x30
 8004f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f50:	9503      	str	r5, [sp, #12]
 8004f52:	f04f 0b01 	mov.w	fp, #1
 8004f56:	4637      	mov	r7, r6
 8004f58:	463d      	mov	r5, r7
 8004f5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f5e:	b10b      	cbz	r3, 8004f64 <_svfiprintf_r+0x58>
 8004f60:	2b25      	cmp	r3, #37	; 0x25
 8004f62:	d13e      	bne.n	8004fe2 <_svfiprintf_r+0xd6>
 8004f64:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f68:	d00b      	beq.n	8004f82 <_svfiprintf_r+0x76>
 8004f6a:	4653      	mov	r3, sl
 8004f6c:	4632      	mov	r2, r6
 8004f6e:	4621      	mov	r1, r4
 8004f70:	4640      	mov	r0, r8
 8004f72:	f7ff ff71 	bl	8004e58 <__ssputs_r>
 8004f76:	3001      	adds	r0, #1
 8004f78:	f000 80a4 	beq.w	80050c4 <_svfiprintf_r+0x1b8>
 8004f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7e:	4453      	add	r3, sl
 8004f80:	9309      	str	r3, [sp, #36]	; 0x24
 8004f82:	783b      	ldrb	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 809d 	beq.w	80050c4 <_svfiprintf_r+0x1b8>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f94:	9304      	str	r3, [sp, #16]
 8004f96:	9307      	str	r3, [sp, #28]
 8004f98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f9c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f9e:	462f      	mov	r7, r5
 8004fa0:	2205      	movs	r2, #5
 8004fa2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004fa6:	4850      	ldr	r0, [pc, #320]	; (80050e8 <_svfiprintf_r+0x1dc>)
 8004fa8:	f7fb f91a 	bl	80001e0 <memchr>
 8004fac:	9b04      	ldr	r3, [sp, #16]
 8004fae:	b9d0      	cbnz	r0, 8004fe6 <_svfiprintf_r+0xda>
 8004fb0:	06d9      	lsls	r1, r3, #27
 8004fb2:	bf44      	itt	mi
 8004fb4:	2220      	movmi	r2, #32
 8004fb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fba:	071a      	lsls	r2, r3, #28
 8004fbc:	bf44      	itt	mi
 8004fbe:	222b      	movmi	r2, #43	; 0x2b
 8004fc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fc4:	782a      	ldrb	r2, [r5, #0]
 8004fc6:	2a2a      	cmp	r2, #42	; 0x2a
 8004fc8:	d015      	beq.n	8004ff6 <_svfiprintf_r+0xea>
 8004fca:	9a07      	ldr	r2, [sp, #28]
 8004fcc:	462f      	mov	r7, r5
 8004fce:	2000      	movs	r0, #0
 8004fd0:	250a      	movs	r5, #10
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fd8:	3b30      	subs	r3, #48	; 0x30
 8004fda:	2b09      	cmp	r3, #9
 8004fdc:	d94d      	bls.n	800507a <_svfiprintf_r+0x16e>
 8004fde:	b1b8      	cbz	r0, 8005010 <_svfiprintf_r+0x104>
 8004fe0:	e00f      	b.n	8005002 <_svfiprintf_r+0xf6>
 8004fe2:	462f      	mov	r7, r5
 8004fe4:	e7b8      	b.n	8004f58 <_svfiprintf_r+0x4c>
 8004fe6:	4a40      	ldr	r2, [pc, #256]	; (80050e8 <_svfiprintf_r+0x1dc>)
 8004fe8:	1a80      	subs	r0, r0, r2
 8004fea:	fa0b f000 	lsl.w	r0, fp, r0
 8004fee:	4318      	orrs	r0, r3
 8004ff0:	9004      	str	r0, [sp, #16]
 8004ff2:	463d      	mov	r5, r7
 8004ff4:	e7d3      	b.n	8004f9e <_svfiprintf_r+0x92>
 8004ff6:	9a03      	ldr	r2, [sp, #12]
 8004ff8:	1d11      	adds	r1, r2, #4
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	9103      	str	r1, [sp, #12]
 8004ffe:	2a00      	cmp	r2, #0
 8005000:	db01      	blt.n	8005006 <_svfiprintf_r+0xfa>
 8005002:	9207      	str	r2, [sp, #28]
 8005004:	e004      	b.n	8005010 <_svfiprintf_r+0x104>
 8005006:	4252      	negs	r2, r2
 8005008:	f043 0302 	orr.w	r3, r3, #2
 800500c:	9207      	str	r2, [sp, #28]
 800500e:	9304      	str	r3, [sp, #16]
 8005010:	783b      	ldrb	r3, [r7, #0]
 8005012:	2b2e      	cmp	r3, #46	; 0x2e
 8005014:	d10c      	bne.n	8005030 <_svfiprintf_r+0x124>
 8005016:	787b      	ldrb	r3, [r7, #1]
 8005018:	2b2a      	cmp	r3, #42	; 0x2a
 800501a:	d133      	bne.n	8005084 <_svfiprintf_r+0x178>
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	1d1a      	adds	r2, r3, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	9203      	str	r2, [sp, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	bfb8      	it	lt
 8005028:	f04f 33ff 	movlt.w	r3, #4294967295
 800502c:	3702      	adds	r7, #2
 800502e:	9305      	str	r3, [sp, #20]
 8005030:	4d2e      	ldr	r5, [pc, #184]	; (80050ec <_svfiprintf_r+0x1e0>)
 8005032:	7839      	ldrb	r1, [r7, #0]
 8005034:	2203      	movs	r2, #3
 8005036:	4628      	mov	r0, r5
 8005038:	f7fb f8d2 	bl	80001e0 <memchr>
 800503c:	b138      	cbz	r0, 800504e <_svfiprintf_r+0x142>
 800503e:	2340      	movs	r3, #64	; 0x40
 8005040:	1b40      	subs	r0, r0, r5
 8005042:	fa03 f000 	lsl.w	r0, r3, r0
 8005046:	9b04      	ldr	r3, [sp, #16]
 8005048:	4303      	orrs	r3, r0
 800504a:	3701      	adds	r7, #1
 800504c:	9304      	str	r3, [sp, #16]
 800504e:	7839      	ldrb	r1, [r7, #0]
 8005050:	4827      	ldr	r0, [pc, #156]	; (80050f0 <_svfiprintf_r+0x1e4>)
 8005052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005056:	2206      	movs	r2, #6
 8005058:	1c7e      	adds	r6, r7, #1
 800505a:	f7fb f8c1 	bl	80001e0 <memchr>
 800505e:	2800      	cmp	r0, #0
 8005060:	d038      	beq.n	80050d4 <_svfiprintf_r+0x1c8>
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <_svfiprintf_r+0x1e8>)
 8005064:	bb13      	cbnz	r3, 80050ac <_svfiprintf_r+0x1a0>
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	3307      	adds	r3, #7
 800506a:	f023 0307 	bic.w	r3, r3, #7
 800506e:	3308      	adds	r3, #8
 8005070:	9303      	str	r3, [sp, #12]
 8005072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005074:	444b      	add	r3, r9
 8005076:	9309      	str	r3, [sp, #36]	; 0x24
 8005078:	e76d      	b.n	8004f56 <_svfiprintf_r+0x4a>
 800507a:	fb05 3202 	mla	r2, r5, r2, r3
 800507e:	2001      	movs	r0, #1
 8005080:	460f      	mov	r7, r1
 8005082:	e7a6      	b.n	8004fd2 <_svfiprintf_r+0xc6>
 8005084:	2300      	movs	r3, #0
 8005086:	3701      	adds	r7, #1
 8005088:	9305      	str	r3, [sp, #20]
 800508a:	4619      	mov	r1, r3
 800508c:	250a      	movs	r5, #10
 800508e:	4638      	mov	r0, r7
 8005090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005094:	3a30      	subs	r2, #48	; 0x30
 8005096:	2a09      	cmp	r2, #9
 8005098:	d903      	bls.n	80050a2 <_svfiprintf_r+0x196>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0c8      	beq.n	8005030 <_svfiprintf_r+0x124>
 800509e:	9105      	str	r1, [sp, #20]
 80050a0:	e7c6      	b.n	8005030 <_svfiprintf_r+0x124>
 80050a2:	fb05 2101 	mla	r1, r5, r1, r2
 80050a6:	2301      	movs	r3, #1
 80050a8:	4607      	mov	r7, r0
 80050aa:	e7f0      	b.n	800508e <_svfiprintf_r+0x182>
 80050ac:	ab03      	add	r3, sp, #12
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4622      	mov	r2, r4
 80050b2:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <_svfiprintf_r+0x1ec>)
 80050b4:	a904      	add	r1, sp, #16
 80050b6:	4640      	mov	r0, r8
 80050b8:	f3af 8000 	nop.w
 80050bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050c0:	4681      	mov	r9, r0
 80050c2:	d1d6      	bne.n	8005072 <_svfiprintf_r+0x166>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	065b      	lsls	r3, r3, #25
 80050c8:	f53f af35 	bmi.w	8004f36 <_svfiprintf_r+0x2a>
 80050cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ce:	b01d      	add	sp, #116	; 0x74
 80050d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d4:	ab03      	add	r3, sp, #12
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	4622      	mov	r2, r4
 80050da:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <_svfiprintf_r+0x1ec>)
 80050dc:	a904      	add	r1, sp, #16
 80050de:	4640      	mov	r0, r8
 80050e0:	f000 f882 	bl	80051e8 <_printf_i>
 80050e4:	e7ea      	b.n	80050bc <_svfiprintf_r+0x1b0>
 80050e6:	bf00      	nop
 80050e8:	0800571c 	.word	0x0800571c
 80050ec:	08005722 	.word	0x08005722
 80050f0:	08005726 	.word	0x08005726
 80050f4:	00000000 	.word	0x00000000
 80050f8:	08004e59 	.word	0x08004e59

080050fc <_printf_common>:
 80050fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	4691      	mov	r9, r2
 8005102:	461f      	mov	r7, r3
 8005104:	688a      	ldr	r2, [r1, #8]
 8005106:	690b      	ldr	r3, [r1, #16]
 8005108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800510c:	4293      	cmp	r3, r2
 800510e:	bfb8      	it	lt
 8005110:	4613      	movlt	r3, r2
 8005112:	f8c9 3000 	str.w	r3, [r9]
 8005116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800511a:	4606      	mov	r6, r0
 800511c:	460c      	mov	r4, r1
 800511e:	b112      	cbz	r2, 8005126 <_printf_common+0x2a>
 8005120:	3301      	adds	r3, #1
 8005122:	f8c9 3000 	str.w	r3, [r9]
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	0699      	lsls	r1, r3, #26
 800512a:	bf42      	ittt	mi
 800512c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005130:	3302      	addmi	r3, #2
 8005132:	f8c9 3000 	strmi.w	r3, [r9]
 8005136:	6825      	ldr	r5, [r4, #0]
 8005138:	f015 0506 	ands.w	r5, r5, #6
 800513c:	d107      	bne.n	800514e <_printf_common+0x52>
 800513e:	f104 0a19 	add.w	sl, r4, #25
 8005142:	68e3      	ldr	r3, [r4, #12]
 8005144:	f8d9 2000 	ldr.w	r2, [r9]
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	42ab      	cmp	r3, r5
 800514c:	dc28      	bgt.n	80051a0 <_printf_common+0xa4>
 800514e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	3300      	adds	r3, #0
 8005156:	bf18      	it	ne
 8005158:	2301      	movne	r3, #1
 800515a:	0692      	lsls	r2, r2, #26
 800515c:	d42d      	bmi.n	80051ba <_printf_common+0xbe>
 800515e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005162:	4639      	mov	r1, r7
 8005164:	4630      	mov	r0, r6
 8005166:	47c0      	blx	r8
 8005168:	3001      	adds	r0, #1
 800516a:	d020      	beq.n	80051ae <_printf_common+0xb2>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	68e5      	ldr	r5, [r4, #12]
 8005170:	f8d9 2000 	ldr.w	r2, [r9]
 8005174:	f003 0306 	and.w	r3, r3, #6
 8005178:	2b04      	cmp	r3, #4
 800517a:	bf08      	it	eq
 800517c:	1aad      	subeq	r5, r5, r2
 800517e:	68a3      	ldr	r3, [r4, #8]
 8005180:	6922      	ldr	r2, [r4, #16]
 8005182:	bf0c      	ite	eq
 8005184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005188:	2500      	movne	r5, #0
 800518a:	4293      	cmp	r3, r2
 800518c:	bfc4      	itt	gt
 800518e:	1a9b      	subgt	r3, r3, r2
 8005190:	18ed      	addgt	r5, r5, r3
 8005192:	f04f 0900 	mov.w	r9, #0
 8005196:	341a      	adds	r4, #26
 8005198:	454d      	cmp	r5, r9
 800519a:	d11a      	bne.n	80051d2 <_printf_common+0xd6>
 800519c:	2000      	movs	r0, #0
 800519e:	e008      	b.n	80051b2 <_printf_common+0xb6>
 80051a0:	2301      	movs	r3, #1
 80051a2:	4652      	mov	r2, sl
 80051a4:	4639      	mov	r1, r7
 80051a6:	4630      	mov	r0, r6
 80051a8:	47c0      	blx	r8
 80051aa:	3001      	adds	r0, #1
 80051ac:	d103      	bne.n	80051b6 <_printf_common+0xba>
 80051ae:	f04f 30ff 	mov.w	r0, #4294967295
 80051b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b6:	3501      	adds	r5, #1
 80051b8:	e7c3      	b.n	8005142 <_printf_common+0x46>
 80051ba:	18e1      	adds	r1, r4, r3
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	2030      	movs	r0, #48	; 0x30
 80051c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051c4:	4422      	add	r2, r4
 80051c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ce:	3302      	adds	r3, #2
 80051d0:	e7c5      	b.n	800515e <_printf_common+0x62>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4622      	mov	r2, r4
 80051d6:	4639      	mov	r1, r7
 80051d8:	4630      	mov	r0, r6
 80051da:	47c0      	blx	r8
 80051dc:	3001      	adds	r0, #1
 80051de:	d0e6      	beq.n	80051ae <_printf_common+0xb2>
 80051e0:	f109 0901 	add.w	r9, r9, #1
 80051e4:	e7d8      	b.n	8005198 <_printf_common+0x9c>
	...

080051e8 <_printf_i>:
 80051e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051f0:	460c      	mov	r4, r1
 80051f2:	7e09      	ldrb	r1, [r1, #24]
 80051f4:	b085      	sub	sp, #20
 80051f6:	296e      	cmp	r1, #110	; 0x6e
 80051f8:	4617      	mov	r7, r2
 80051fa:	4606      	mov	r6, r0
 80051fc:	4698      	mov	r8, r3
 80051fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005200:	f000 80b3 	beq.w	800536a <_printf_i+0x182>
 8005204:	d822      	bhi.n	800524c <_printf_i+0x64>
 8005206:	2963      	cmp	r1, #99	; 0x63
 8005208:	d036      	beq.n	8005278 <_printf_i+0x90>
 800520a:	d80a      	bhi.n	8005222 <_printf_i+0x3a>
 800520c:	2900      	cmp	r1, #0
 800520e:	f000 80b9 	beq.w	8005384 <_printf_i+0x19c>
 8005212:	2958      	cmp	r1, #88	; 0x58
 8005214:	f000 8083 	beq.w	800531e <_printf_i+0x136>
 8005218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800521c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005220:	e032      	b.n	8005288 <_printf_i+0xa0>
 8005222:	2964      	cmp	r1, #100	; 0x64
 8005224:	d001      	beq.n	800522a <_printf_i+0x42>
 8005226:	2969      	cmp	r1, #105	; 0x69
 8005228:	d1f6      	bne.n	8005218 <_printf_i+0x30>
 800522a:	6820      	ldr	r0, [r4, #0]
 800522c:	6813      	ldr	r3, [r2, #0]
 800522e:	0605      	lsls	r5, r0, #24
 8005230:	f103 0104 	add.w	r1, r3, #4
 8005234:	d52a      	bpl.n	800528c <_printf_i+0xa4>
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6011      	str	r1, [r2, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	da03      	bge.n	8005246 <_printf_i+0x5e>
 800523e:	222d      	movs	r2, #45	; 0x2d
 8005240:	425b      	negs	r3, r3
 8005242:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005246:	486f      	ldr	r0, [pc, #444]	; (8005404 <_printf_i+0x21c>)
 8005248:	220a      	movs	r2, #10
 800524a:	e039      	b.n	80052c0 <_printf_i+0xd8>
 800524c:	2973      	cmp	r1, #115	; 0x73
 800524e:	f000 809d 	beq.w	800538c <_printf_i+0x1a4>
 8005252:	d808      	bhi.n	8005266 <_printf_i+0x7e>
 8005254:	296f      	cmp	r1, #111	; 0x6f
 8005256:	d020      	beq.n	800529a <_printf_i+0xb2>
 8005258:	2970      	cmp	r1, #112	; 0x70
 800525a:	d1dd      	bne.n	8005218 <_printf_i+0x30>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	f043 0320 	orr.w	r3, r3, #32
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	e003      	b.n	800526e <_printf_i+0x86>
 8005266:	2975      	cmp	r1, #117	; 0x75
 8005268:	d017      	beq.n	800529a <_printf_i+0xb2>
 800526a:	2978      	cmp	r1, #120	; 0x78
 800526c:	d1d4      	bne.n	8005218 <_printf_i+0x30>
 800526e:	2378      	movs	r3, #120	; 0x78
 8005270:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005274:	4864      	ldr	r0, [pc, #400]	; (8005408 <_printf_i+0x220>)
 8005276:	e055      	b.n	8005324 <_printf_i+0x13c>
 8005278:	6813      	ldr	r3, [r2, #0]
 800527a:	1d19      	adds	r1, r3, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6011      	str	r1, [r2, #0]
 8005280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005288:	2301      	movs	r3, #1
 800528a:	e08c      	b.n	80053a6 <_printf_i+0x1be>
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6011      	str	r1, [r2, #0]
 8005290:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005294:	bf18      	it	ne
 8005296:	b21b      	sxthne	r3, r3
 8005298:	e7cf      	b.n	800523a <_printf_i+0x52>
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	6825      	ldr	r5, [r4, #0]
 800529e:	1d18      	adds	r0, r3, #4
 80052a0:	6010      	str	r0, [r2, #0]
 80052a2:	0628      	lsls	r0, r5, #24
 80052a4:	d501      	bpl.n	80052aa <_printf_i+0xc2>
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	e002      	b.n	80052b0 <_printf_i+0xc8>
 80052aa:	0668      	lsls	r0, r5, #25
 80052ac:	d5fb      	bpl.n	80052a6 <_printf_i+0xbe>
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	4854      	ldr	r0, [pc, #336]	; (8005404 <_printf_i+0x21c>)
 80052b2:	296f      	cmp	r1, #111	; 0x6f
 80052b4:	bf14      	ite	ne
 80052b6:	220a      	movne	r2, #10
 80052b8:	2208      	moveq	r2, #8
 80052ba:	2100      	movs	r1, #0
 80052bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052c0:	6865      	ldr	r5, [r4, #4]
 80052c2:	60a5      	str	r5, [r4, #8]
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	f2c0 8095 	blt.w	80053f4 <_printf_i+0x20c>
 80052ca:	6821      	ldr	r1, [r4, #0]
 80052cc:	f021 0104 	bic.w	r1, r1, #4
 80052d0:	6021      	str	r1, [r4, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d13d      	bne.n	8005352 <_printf_i+0x16a>
 80052d6:	2d00      	cmp	r5, #0
 80052d8:	f040 808e 	bne.w	80053f8 <_printf_i+0x210>
 80052dc:	4665      	mov	r5, ip
 80052de:	2a08      	cmp	r2, #8
 80052e0:	d10b      	bne.n	80052fa <_printf_i+0x112>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	07db      	lsls	r3, r3, #31
 80052e6:	d508      	bpl.n	80052fa <_printf_i+0x112>
 80052e8:	6923      	ldr	r3, [r4, #16]
 80052ea:	6862      	ldr	r2, [r4, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	bfde      	ittt	le
 80052f0:	2330      	movle	r3, #48	; 0x30
 80052f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052fa:	ebac 0305 	sub.w	r3, ip, r5
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	f8cd 8000 	str.w	r8, [sp]
 8005304:	463b      	mov	r3, r7
 8005306:	aa03      	add	r2, sp, #12
 8005308:	4621      	mov	r1, r4
 800530a:	4630      	mov	r0, r6
 800530c:	f7ff fef6 	bl	80050fc <_printf_common>
 8005310:	3001      	adds	r0, #1
 8005312:	d14d      	bne.n	80053b0 <_printf_i+0x1c8>
 8005314:	f04f 30ff 	mov.w	r0, #4294967295
 8005318:	b005      	add	sp, #20
 800531a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800531e:	4839      	ldr	r0, [pc, #228]	; (8005404 <_printf_i+0x21c>)
 8005320:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005324:	6813      	ldr	r3, [r2, #0]
 8005326:	6821      	ldr	r1, [r4, #0]
 8005328:	1d1d      	adds	r5, r3, #4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6015      	str	r5, [r2, #0]
 800532e:	060a      	lsls	r2, r1, #24
 8005330:	d50b      	bpl.n	800534a <_printf_i+0x162>
 8005332:	07ca      	lsls	r2, r1, #31
 8005334:	bf44      	itt	mi
 8005336:	f041 0120 	orrmi.w	r1, r1, #32
 800533a:	6021      	strmi	r1, [r4, #0]
 800533c:	b91b      	cbnz	r3, 8005346 <_printf_i+0x15e>
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	f022 0220 	bic.w	r2, r2, #32
 8005344:	6022      	str	r2, [r4, #0]
 8005346:	2210      	movs	r2, #16
 8005348:	e7b7      	b.n	80052ba <_printf_i+0xd2>
 800534a:	064d      	lsls	r5, r1, #25
 800534c:	bf48      	it	mi
 800534e:	b29b      	uxthmi	r3, r3
 8005350:	e7ef      	b.n	8005332 <_printf_i+0x14a>
 8005352:	4665      	mov	r5, ip
 8005354:	fbb3 f1f2 	udiv	r1, r3, r2
 8005358:	fb02 3311 	mls	r3, r2, r1, r3
 800535c:	5cc3      	ldrb	r3, [r0, r3]
 800535e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005362:	460b      	mov	r3, r1
 8005364:	2900      	cmp	r1, #0
 8005366:	d1f5      	bne.n	8005354 <_printf_i+0x16c>
 8005368:	e7b9      	b.n	80052de <_printf_i+0xf6>
 800536a:	6813      	ldr	r3, [r2, #0]
 800536c:	6825      	ldr	r5, [r4, #0]
 800536e:	6961      	ldr	r1, [r4, #20]
 8005370:	1d18      	adds	r0, r3, #4
 8005372:	6010      	str	r0, [r2, #0]
 8005374:	0628      	lsls	r0, r5, #24
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	d501      	bpl.n	800537e <_printf_i+0x196>
 800537a:	6019      	str	r1, [r3, #0]
 800537c:	e002      	b.n	8005384 <_printf_i+0x19c>
 800537e:	066a      	lsls	r2, r5, #25
 8005380:	d5fb      	bpl.n	800537a <_printf_i+0x192>
 8005382:	8019      	strh	r1, [r3, #0]
 8005384:	2300      	movs	r3, #0
 8005386:	6123      	str	r3, [r4, #16]
 8005388:	4665      	mov	r5, ip
 800538a:	e7b9      	b.n	8005300 <_printf_i+0x118>
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	1d19      	adds	r1, r3, #4
 8005390:	6011      	str	r1, [r2, #0]
 8005392:	681d      	ldr	r5, [r3, #0]
 8005394:	6862      	ldr	r2, [r4, #4]
 8005396:	2100      	movs	r1, #0
 8005398:	4628      	mov	r0, r5
 800539a:	f7fa ff21 	bl	80001e0 <memchr>
 800539e:	b108      	cbz	r0, 80053a4 <_printf_i+0x1bc>
 80053a0:	1b40      	subs	r0, r0, r5
 80053a2:	6060      	str	r0, [r4, #4]
 80053a4:	6863      	ldr	r3, [r4, #4]
 80053a6:	6123      	str	r3, [r4, #16]
 80053a8:	2300      	movs	r3, #0
 80053aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ae:	e7a7      	b.n	8005300 <_printf_i+0x118>
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	462a      	mov	r2, r5
 80053b4:	4639      	mov	r1, r7
 80053b6:	4630      	mov	r0, r6
 80053b8:	47c0      	blx	r8
 80053ba:	3001      	adds	r0, #1
 80053bc:	d0aa      	beq.n	8005314 <_printf_i+0x12c>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	079b      	lsls	r3, r3, #30
 80053c2:	d413      	bmi.n	80053ec <_printf_i+0x204>
 80053c4:	68e0      	ldr	r0, [r4, #12]
 80053c6:	9b03      	ldr	r3, [sp, #12]
 80053c8:	4298      	cmp	r0, r3
 80053ca:	bfb8      	it	lt
 80053cc:	4618      	movlt	r0, r3
 80053ce:	e7a3      	b.n	8005318 <_printf_i+0x130>
 80053d0:	2301      	movs	r3, #1
 80053d2:	464a      	mov	r2, r9
 80053d4:	4639      	mov	r1, r7
 80053d6:	4630      	mov	r0, r6
 80053d8:	47c0      	blx	r8
 80053da:	3001      	adds	r0, #1
 80053dc:	d09a      	beq.n	8005314 <_printf_i+0x12c>
 80053de:	3501      	adds	r5, #1
 80053e0:	68e3      	ldr	r3, [r4, #12]
 80053e2:	9a03      	ldr	r2, [sp, #12]
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	42ab      	cmp	r3, r5
 80053e8:	dcf2      	bgt.n	80053d0 <_printf_i+0x1e8>
 80053ea:	e7eb      	b.n	80053c4 <_printf_i+0x1dc>
 80053ec:	2500      	movs	r5, #0
 80053ee:	f104 0919 	add.w	r9, r4, #25
 80053f2:	e7f5      	b.n	80053e0 <_printf_i+0x1f8>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ac      	bne.n	8005352 <_printf_i+0x16a>
 80053f8:	7803      	ldrb	r3, [r0, #0]
 80053fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005402:	e76c      	b.n	80052de <_printf_i+0xf6>
 8005404:	0800572d 	.word	0x0800572d
 8005408:	0800573e 	.word	0x0800573e

0800540c <memmove>:
 800540c:	4288      	cmp	r0, r1
 800540e:	b510      	push	{r4, lr}
 8005410:	eb01 0302 	add.w	r3, r1, r2
 8005414:	d807      	bhi.n	8005426 <memmove+0x1a>
 8005416:	1e42      	subs	r2, r0, #1
 8005418:	4299      	cmp	r1, r3
 800541a:	d00a      	beq.n	8005432 <memmove+0x26>
 800541c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005420:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005424:	e7f8      	b.n	8005418 <memmove+0xc>
 8005426:	4283      	cmp	r3, r0
 8005428:	d9f5      	bls.n	8005416 <memmove+0xa>
 800542a:	1881      	adds	r1, r0, r2
 800542c:	1ad2      	subs	r2, r2, r3
 800542e:	42d3      	cmn	r3, r2
 8005430:	d100      	bne.n	8005434 <memmove+0x28>
 8005432:	bd10      	pop	{r4, pc}
 8005434:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005438:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800543c:	e7f7      	b.n	800542e <memmove+0x22>
	...

08005440 <_free_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4605      	mov	r5, r0
 8005444:	2900      	cmp	r1, #0
 8005446:	d045      	beq.n	80054d4 <_free_r+0x94>
 8005448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800544c:	1f0c      	subs	r4, r1, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	bfb8      	it	lt
 8005452:	18e4      	addlt	r4, r4, r3
 8005454:	f000 f8d2 	bl	80055fc <__malloc_lock>
 8005458:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <_free_r+0x98>)
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	4610      	mov	r0, r2
 800545e:	b933      	cbnz	r3, 800546e <_free_r+0x2e>
 8005460:	6063      	str	r3, [r4, #4]
 8005462:	6014      	str	r4, [r2, #0]
 8005464:	4628      	mov	r0, r5
 8005466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800546a:	f000 b8c8 	b.w	80055fe <__malloc_unlock>
 800546e:	42a3      	cmp	r3, r4
 8005470:	d90c      	bls.n	800548c <_free_r+0x4c>
 8005472:	6821      	ldr	r1, [r4, #0]
 8005474:	1862      	adds	r2, r4, r1
 8005476:	4293      	cmp	r3, r2
 8005478:	bf04      	itt	eq
 800547a:	681a      	ldreq	r2, [r3, #0]
 800547c:	685b      	ldreq	r3, [r3, #4]
 800547e:	6063      	str	r3, [r4, #4]
 8005480:	bf04      	itt	eq
 8005482:	1852      	addeq	r2, r2, r1
 8005484:	6022      	streq	r2, [r4, #0]
 8005486:	6004      	str	r4, [r0, #0]
 8005488:	e7ec      	b.n	8005464 <_free_r+0x24>
 800548a:	4613      	mov	r3, r2
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	b10a      	cbz	r2, 8005494 <_free_r+0x54>
 8005490:	42a2      	cmp	r2, r4
 8005492:	d9fa      	bls.n	800548a <_free_r+0x4a>
 8005494:	6819      	ldr	r1, [r3, #0]
 8005496:	1858      	adds	r0, r3, r1
 8005498:	42a0      	cmp	r0, r4
 800549a:	d10b      	bne.n	80054b4 <_free_r+0x74>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	4401      	add	r1, r0
 80054a0:	1858      	adds	r0, r3, r1
 80054a2:	4282      	cmp	r2, r0
 80054a4:	6019      	str	r1, [r3, #0]
 80054a6:	d1dd      	bne.n	8005464 <_free_r+0x24>
 80054a8:	6810      	ldr	r0, [r2, #0]
 80054aa:	6852      	ldr	r2, [r2, #4]
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	4401      	add	r1, r0
 80054b0:	6019      	str	r1, [r3, #0]
 80054b2:	e7d7      	b.n	8005464 <_free_r+0x24>
 80054b4:	d902      	bls.n	80054bc <_free_r+0x7c>
 80054b6:	230c      	movs	r3, #12
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	e7d3      	b.n	8005464 <_free_r+0x24>
 80054bc:	6820      	ldr	r0, [r4, #0]
 80054be:	1821      	adds	r1, r4, r0
 80054c0:	428a      	cmp	r2, r1
 80054c2:	bf04      	itt	eq
 80054c4:	6811      	ldreq	r1, [r2, #0]
 80054c6:	6852      	ldreq	r2, [r2, #4]
 80054c8:	6062      	str	r2, [r4, #4]
 80054ca:	bf04      	itt	eq
 80054cc:	1809      	addeq	r1, r1, r0
 80054ce:	6021      	streq	r1, [r4, #0]
 80054d0:	605c      	str	r4, [r3, #4]
 80054d2:	e7c7      	b.n	8005464 <_free_r+0x24>
 80054d4:	bd38      	pop	{r3, r4, r5, pc}
 80054d6:	bf00      	nop
 80054d8:	20001568 	.word	0x20001568

080054dc <_malloc_r>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	1ccd      	adds	r5, r1, #3
 80054e0:	f025 0503 	bic.w	r5, r5, #3
 80054e4:	3508      	adds	r5, #8
 80054e6:	2d0c      	cmp	r5, #12
 80054e8:	bf38      	it	cc
 80054ea:	250c      	movcc	r5, #12
 80054ec:	2d00      	cmp	r5, #0
 80054ee:	4606      	mov	r6, r0
 80054f0:	db01      	blt.n	80054f6 <_malloc_r+0x1a>
 80054f2:	42a9      	cmp	r1, r5
 80054f4:	d903      	bls.n	80054fe <_malloc_r+0x22>
 80054f6:	230c      	movs	r3, #12
 80054f8:	6033      	str	r3, [r6, #0]
 80054fa:	2000      	movs	r0, #0
 80054fc:	bd70      	pop	{r4, r5, r6, pc}
 80054fe:	f000 f87d 	bl	80055fc <__malloc_lock>
 8005502:	4a21      	ldr	r2, [pc, #132]	; (8005588 <_malloc_r+0xac>)
 8005504:	6814      	ldr	r4, [r2, #0]
 8005506:	4621      	mov	r1, r4
 8005508:	b991      	cbnz	r1, 8005530 <_malloc_r+0x54>
 800550a:	4c20      	ldr	r4, [pc, #128]	; (800558c <_malloc_r+0xb0>)
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	b91b      	cbnz	r3, 8005518 <_malloc_r+0x3c>
 8005510:	4630      	mov	r0, r6
 8005512:	f000 f863 	bl	80055dc <_sbrk_r>
 8005516:	6020      	str	r0, [r4, #0]
 8005518:	4629      	mov	r1, r5
 800551a:	4630      	mov	r0, r6
 800551c:	f000 f85e 	bl	80055dc <_sbrk_r>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d124      	bne.n	800556e <_malloc_r+0x92>
 8005524:	230c      	movs	r3, #12
 8005526:	6033      	str	r3, [r6, #0]
 8005528:	4630      	mov	r0, r6
 800552a:	f000 f868 	bl	80055fe <__malloc_unlock>
 800552e:	e7e4      	b.n	80054fa <_malloc_r+0x1e>
 8005530:	680b      	ldr	r3, [r1, #0]
 8005532:	1b5b      	subs	r3, r3, r5
 8005534:	d418      	bmi.n	8005568 <_malloc_r+0x8c>
 8005536:	2b0b      	cmp	r3, #11
 8005538:	d90f      	bls.n	800555a <_malloc_r+0x7e>
 800553a:	600b      	str	r3, [r1, #0]
 800553c:	50cd      	str	r5, [r1, r3]
 800553e:	18cc      	adds	r4, r1, r3
 8005540:	4630      	mov	r0, r6
 8005542:	f000 f85c 	bl	80055fe <__malloc_unlock>
 8005546:	f104 000b 	add.w	r0, r4, #11
 800554a:	1d23      	adds	r3, r4, #4
 800554c:	f020 0007 	bic.w	r0, r0, #7
 8005550:	1ac3      	subs	r3, r0, r3
 8005552:	d0d3      	beq.n	80054fc <_malloc_r+0x20>
 8005554:	425a      	negs	r2, r3
 8005556:	50e2      	str	r2, [r4, r3]
 8005558:	e7d0      	b.n	80054fc <_malloc_r+0x20>
 800555a:	428c      	cmp	r4, r1
 800555c:	684b      	ldr	r3, [r1, #4]
 800555e:	bf16      	itet	ne
 8005560:	6063      	strne	r3, [r4, #4]
 8005562:	6013      	streq	r3, [r2, #0]
 8005564:	460c      	movne	r4, r1
 8005566:	e7eb      	b.n	8005540 <_malloc_r+0x64>
 8005568:	460c      	mov	r4, r1
 800556a:	6849      	ldr	r1, [r1, #4]
 800556c:	e7cc      	b.n	8005508 <_malloc_r+0x2c>
 800556e:	1cc4      	adds	r4, r0, #3
 8005570:	f024 0403 	bic.w	r4, r4, #3
 8005574:	42a0      	cmp	r0, r4
 8005576:	d005      	beq.n	8005584 <_malloc_r+0xa8>
 8005578:	1a21      	subs	r1, r4, r0
 800557a:	4630      	mov	r0, r6
 800557c:	f000 f82e 	bl	80055dc <_sbrk_r>
 8005580:	3001      	adds	r0, #1
 8005582:	d0cf      	beq.n	8005524 <_malloc_r+0x48>
 8005584:	6025      	str	r5, [r4, #0]
 8005586:	e7db      	b.n	8005540 <_malloc_r+0x64>
 8005588:	20001568 	.word	0x20001568
 800558c:	2000156c 	.word	0x2000156c

08005590 <_realloc_r>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	4607      	mov	r7, r0
 8005594:	4614      	mov	r4, r2
 8005596:	460e      	mov	r6, r1
 8005598:	b921      	cbnz	r1, 80055a4 <_realloc_r+0x14>
 800559a:	4611      	mov	r1, r2
 800559c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055a0:	f7ff bf9c 	b.w	80054dc <_malloc_r>
 80055a4:	b922      	cbnz	r2, 80055b0 <_realloc_r+0x20>
 80055a6:	f7ff ff4b 	bl	8005440 <_free_r>
 80055aa:	4625      	mov	r5, r4
 80055ac:	4628      	mov	r0, r5
 80055ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b0:	f000 f826 	bl	8005600 <_malloc_usable_size_r>
 80055b4:	42a0      	cmp	r0, r4
 80055b6:	d20f      	bcs.n	80055d8 <_realloc_r+0x48>
 80055b8:	4621      	mov	r1, r4
 80055ba:	4638      	mov	r0, r7
 80055bc:	f7ff ff8e 	bl	80054dc <_malloc_r>
 80055c0:	4605      	mov	r5, r0
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d0f2      	beq.n	80055ac <_realloc_r+0x1c>
 80055c6:	4631      	mov	r1, r6
 80055c8:	4622      	mov	r2, r4
 80055ca:	f7ff fc11 	bl	8004df0 <memcpy>
 80055ce:	4631      	mov	r1, r6
 80055d0:	4638      	mov	r0, r7
 80055d2:	f7ff ff35 	bl	8005440 <_free_r>
 80055d6:	e7e9      	b.n	80055ac <_realloc_r+0x1c>
 80055d8:	4635      	mov	r5, r6
 80055da:	e7e7      	b.n	80055ac <_realloc_r+0x1c>

080055dc <_sbrk_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4c06      	ldr	r4, [pc, #24]	; (80055f8 <_sbrk_r+0x1c>)
 80055e0:	2300      	movs	r3, #0
 80055e2:	4605      	mov	r5, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	f7ff fb38 	bl	8004c5c <_sbrk>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_sbrk_r+0x1a>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_sbrk_r+0x1a>
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	2000172c 	.word	0x2000172c

080055fc <__malloc_lock>:
 80055fc:	4770      	bx	lr

080055fe <__malloc_unlock>:
 80055fe:	4770      	bx	lr

08005600 <_malloc_usable_size_r>:
 8005600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005604:	1f18      	subs	r0, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfbc      	itt	lt
 800560a:	580b      	ldrlt	r3, [r1, r0]
 800560c:	18c0      	addlt	r0, r0, r3
 800560e:	4770      	bx	lr

08005610 <_init>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	bf00      	nop
 8005614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005616:	bc08      	pop	{r3}
 8005618:	469e      	mov	lr, r3
 800561a:	4770      	bx	lr

0800561c <_fini>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr
