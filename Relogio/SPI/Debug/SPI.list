
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d98  08003d98  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d98  08003d98  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d98  08003d98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d98  08003d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08003e10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003e10  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6f1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019d9  00000000  00000000  0002d791  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e0  00000000  00000000  0002f170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000728  00000000  00000000  0002f950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c530  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c25  00000000  00000000  0004c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009db4b  00000000  00000000  000541cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1d18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b4  00000000  00000000  000f1d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d00 	.word	0x08003d00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003d00 	.word	0x08003d00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f92f 	bl	80004f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 f808 	bl	80002ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f002 ff82 	bl	80031a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_InitTick+0x54>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_InitTick+0x58>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f939 	bl	8000542 <HAL_SYSTICK_Config>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00e      	b.n	80002f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d80a      	bhi.n	80002f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e0:	2200      	movs	r2, #0
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295
 80002e8:	f000 f90f 	bl	800050a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <HAL_InitTick+0x5c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e000      	b.n	80002f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002f6:	2301      	movs	r3, #1
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000008 	.word	0x20000008
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000

0800030c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x20>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x24>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4413      	add	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_IncTick+0x24>)
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004
 8000330:	20000098 	.word	0x20000098

08000334 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return uwTick;  
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <HAL_GetTick+0x14>)
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000098 	.word	0x20000098

0800034c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000354:	f7ff ffee 	bl	8000334 <HAL_GetTick>
 8000358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000364:	d005      	beq.n	8000372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_Delay+0x40>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	461a      	mov	r2, r3
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	4413      	add	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000372:	bf00      	nop
 8000374:	f7ff ffde 	bl	8000334 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	429a      	cmp	r2, r3
 8000382:	d8f7      	bhi.n	8000374 <HAL_Delay+0x28>
  {
  }
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000004 	.word	0x20000004

08000390 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f003 0307 	and.w	r3, r3, #7
 800039e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ac:	4013      	ands	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <NVIC_GetPriorityGrouping+0x18>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	f003 0307 	and.w	r3, r3, #7
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	2b00      	cmp	r3, #0
 8000406:	da0b      	bge.n	8000420 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	490c      	ldr	r1, [pc, #48]	; (8000440 <NVIC_SetPriority+0x4c>)
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f003 030f 	and.w	r3, r3, #15
 8000414:	3b04      	subs	r3, #4
 8000416:	0112      	lsls	r2, r2, #4
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	440b      	add	r3, r1
 800041c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800041e:	e009      	b.n	8000434 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4907      	ldr	r1, [pc, #28]	; (8000444 <NVIC_SetPriority+0x50>)
 8000426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042a:	0112      	lsls	r2, r2, #4
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	440b      	add	r3, r1
 8000430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	e000ed00 	.word	0xe000ed00
 8000444:	e000e100 	.word	0xe000e100

08000448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000448:	b480      	push	{r7}
 800044a:	b089      	sub	sp, #36	; 0x24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	f1c3 0307 	rsb	r3, r3, #7
 8000462:	2b04      	cmp	r3, #4
 8000464:	bf28      	it	cs
 8000466:	2304      	movcs	r3, #4
 8000468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	3304      	adds	r3, #4
 800046e:	2b06      	cmp	r3, #6
 8000470:	d902      	bls.n	8000478 <NVIC_EncodePriority+0x30>
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	3b03      	subs	r3, #3
 8000476:	e000      	b.n	800047a <NVIC_EncodePriority+0x32>
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047c:	f04f 32ff 	mov.w	r2, #4294967295
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	43da      	mvns	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	401a      	ands	r2, r3
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000490:	f04f 31ff 	mov.w	r1, #4294967295
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	43d9      	mvns	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	4313      	orrs	r3, r2
         );
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3724      	adds	r7, #36	; 0x24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004c0:	d301      	bcc.n	80004c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004c2:	2301      	movs	r3, #1
 80004c4:	e00f      	b.n	80004e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <SysTick_Config+0x40>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ce:	210f      	movs	r1, #15
 80004d0:	f04f 30ff 	mov.w	r0, #4294967295
 80004d4:	f7ff ff8e 	bl	80003f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <SysTick_Config+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <SysTick_Config+0x40>)
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff47 	bl	8000390 <NVIC_SetPriorityGrouping>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	4603      	mov	r3, r0
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800051c:	f7ff ff5c 	bl	80003d8 <NVIC_GetPriorityGrouping>
 8000520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	68b9      	ldr	r1, [r7, #8]
 8000526:	6978      	ldr	r0, [r7, #20]
 8000528:	f7ff ff8e 	bl	8000448 <NVIC_EncodePriority>
 800052c:	4602      	mov	r2, r0
 800052e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff5d 	bl	80003f4 <NVIC_SetPriority>
}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffb0 	bl	80004b0 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800055c:	b480      	push	{r7}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000572:	e14e      	b.n	8000812 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	2101      	movs	r1, #1
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f000 8140 	beq.w	800080c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d003      	beq.n	800059c <HAL_GPIO_Init+0x40>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b12      	cmp	r3, #18
 800059a:	d123      	bne.n	80005e4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	08da      	lsrs	r2, r3, #3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	220f      	movs	r2, #15
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	691a      	ldr	r2, [r3, #16]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	08da      	lsrs	r2, r3, #3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3208      	adds	r2, #8
 80005de:	6939      	ldr	r1, [r7, #16]
 80005e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2203      	movs	r2, #3
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f003 0203 	and.w	r2, r3, #3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	4313      	orrs	r3, r2
 8000610:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d00b      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d007      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800062c:	2b11      	cmp	r3, #17
 800062e:	d003      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2b12      	cmp	r3, #18
 8000636:	d130      	bne.n	800069a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	2203      	movs	r2, #3
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	4013      	ands	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	4313      	orrs	r3, r2
 8000660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800066e:	2201      	movs	r2, #1
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	091b      	lsrs	r3, r3, #4
 8000684:	f003 0201 	and.w	r2, r3, #1
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	4313      	orrs	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2203      	movs	r2, #3
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	4013      	ands	r3, r2
 80006b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f000 809a 	beq.w	800080c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d8:	4b55      	ldr	r3, [pc, #340]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a54      	ldr	r2, [pc, #336]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b52      	ldr	r3, [pc, #328]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006f0:	4a50      	ldr	r2, [pc, #320]	; (8000834 <HAL_GPIO_Init+0x2d8>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	3302      	adds	r3, #2
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	f003 0303 	and.w	r3, r3, #3
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	220f      	movs	r2, #15
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800071a:	d013      	beq.n	8000744 <HAL_GPIO_Init+0x1e8>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a46      	ldr	r2, [pc, #280]	; (8000838 <HAL_GPIO_Init+0x2dc>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d00d      	beq.n	8000740 <HAL_GPIO_Init+0x1e4>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a45      	ldr	r2, [pc, #276]	; (800083c <HAL_GPIO_Init+0x2e0>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d007      	beq.n	800073c <HAL_GPIO_Init+0x1e0>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a44      	ldr	r2, [pc, #272]	; (8000840 <HAL_GPIO_Init+0x2e4>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d101      	bne.n	8000738 <HAL_GPIO_Init+0x1dc>
 8000734:	2303      	movs	r3, #3
 8000736:	e006      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000738:	2305      	movs	r3, #5
 800073a:	e004      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 800073c:	2302      	movs	r3, #2
 800073e:	e002      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000740:	2301      	movs	r3, #1
 8000742:	e000      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000744:	2300      	movs	r3, #0
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	f002 0203 	and.w	r2, r2, #3
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	4093      	lsls	r3, r2
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	4313      	orrs	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000756:	4937      	ldr	r1, [pc, #220]	; (8000834 <HAL_GPIO_Init+0x2d8>)
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	089b      	lsrs	r3, r3, #2
 800075c:	3302      	adds	r3, #2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000764:	4b37      	ldr	r3, [pc, #220]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	43db      	mvns	r3, r3
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4313      	orrs	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000788:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	43db      	mvns	r3, r3
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	4013      	ands	r3, r2
 800079c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	43db      	mvns	r3, r3
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4013      	ands	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4313      	orrs	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	43db      	mvns	r3, r3
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4013      	ands	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4313      	orrs	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	fa22 f303 	lsr.w	r3, r2, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	f47f aea9 	bne.w	8000574 <HAL_GPIO_Init+0x18>
  }
}
 8000822:	bf00      	nop
 8000824:	371c      	adds	r7, #28
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000
 8000838:	48000400 	.word	0x48000400
 800083c:	48000800 	.word	0x48000800
 8000840:	48000c00 	.word	0x48000c00
 8000844:	40010400 	.word	0x40010400

08000848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	807b      	strh	r3, [r7, #2]
 8000854:	4613      	mov	r3, r2
 8000856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000858:	787b      	ldrb	r3, [r7, #1]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800085e:	887a      	ldrh	r2, [r7, #2]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000864:	e002      	b.n	800086c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000866:	887a      	ldrh	r2, [r7, #2]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800087e:	af00      	add	r7, sp, #0
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	f000 beda 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	f000 816e 	beq.w	8000b7e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008a2:	4bb5      	ldr	r3, [pc, #724]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f003 030c 	and.w	r3, r3, #12
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d00c      	beq.n	80008c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008ae:	4bb2      	ldr	r3, [pc, #712]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f003 030c 	and.w	r3, r3, #12
 80008b6:	2b08      	cmp	r3, #8
 80008b8:	d15a      	bne.n	8000970 <HAL_RCC_OscConfig+0xf8>
 80008ba:	4baf      	ldr	r3, [pc, #700]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c6:	d153      	bne.n	8000970 <HAL_RCC_OscConfig+0xf8>
 80008c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80008d4:	fa93 f3a3 	rbit	r3, r3
 80008d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80008dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008e0:	fab3 f383 	clz	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d102      	bne.n	80008fa <HAL_RCC_OscConfig+0x82>
 80008f4:	4ba0      	ldr	r3, [pc, #640]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	e015      	b.n	8000926 <HAL_RCC_OscConfig+0xae>
 80008fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000902:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000906:	fa93 f3a3 	rbit	r3, r3
 800090a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800090e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000912:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000916:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800091a:	fa93 f3a3 	rbit	r3, r3
 800091e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000922:	4b95      	ldr	r3, [pc, #596]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800092a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800092e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000932:	fa92 f2a2 	rbit	r2, r2
 8000936:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800093a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800093e:	fab2 f282 	clz	r2, r2
 8000942:	b252      	sxtb	r2, r2
 8000944:	f042 0220 	orr.w	r2, r2, #32
 8000948:	b252      	sxtb	r2, r2
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	f002 021f 	and.w	r2, r2, #31
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f202 	lsl.w	r2, r1, r2
 8000956:	4013      	ands	r3, r2
 8000958:	2b00      	cmp	r3, #0
 800095a:	f000 810f 	beq.w	8000b7c <HAL_RCC_OscConfig+0x304>
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	f040 8109 	bne.w	8000b7c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	f000 be6b 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800097a:	d106      	bne.n	800098a <HAL_RCC_OscConfig+0x112>
 800097c:	4b7e      	ldr	r3, [pc, #504]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a7d      	ldr	r2, [pc, #500]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	e030      	b.n	80009ec <HAL_RCC_OscConfig+0x174>
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10c      	bne.n	80009ae <HAL_RCC_OscConfig+0x136>
 8000994:	4b78      	ldr	r3, [pc, #480]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a77      	ldr	r2, [pc, #476]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 800099a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b75      	ldr	r3, [pc, #468]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a74      	ldr	r2, [pc, #464]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e01e      	b.n	80009ec <HAL_RCC_OscConfig+0x174>
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009b8:	d10c      	bne.n	80009d4 <HAL_RCC_OscConfig+0x15c>
 80009ba:	4b6f      	ldr	r3, [pc, #444]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a6e      	ldr	r2, [pc, #440]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	4b6c      	ldr	r3, [pc, #432]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a6b      	ldr	r2, [pc, #428]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	e00b      	b.n	80009ec <HAL_RCC_OscConfig+0x174>
 80009d4:	4b68      	ldr	r3, [pc, #416]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a67      	ldr	r2, [pc, #412]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b65      	ldr	r3, [pc, #404]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a64      	ldr	r2, [pc, #400]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009ec:	4b62      	ldr	r3, [pc, #392]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f0:	f023 020f 	bic.w	r2, r3, #15
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	495f      	ldr	r1, [pc, #380]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d05a      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0a:	f7ff fc93 	bl	8000334 <HAL_GetTick>
 8000a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a12:	e00a      	b.n	8000a2a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a14:	f7ff fc8e 	bl	8000334 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b64      	cmp	r3, #100	; 0x64
 8000a22:	d902      	bls.n	8000a2a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	f000 be0e 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a2e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a32:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a36:	fa93 f3a3 	rbit	r3, r3
 8000a3a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a42:	fab3 f383 	clz	r3, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	095b      	lsrs	r3, r3, #5
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d102      	bne.n	8000a5c <HAL_RCC_OscConfig+0x1e4>
 8000a56:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	e015      	b.n	8000a88 <HAL_RCC_OscConfig+0x210>
 8000a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a60:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a68:	fa93 f3a3 	rbit	r3, r3
 8000a6c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a74:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000a78:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000a7c:	fa93 f3a3 	rbit	r3, r3
 8000a80:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000a84:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a8c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000a90:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000a94:	fa92 f2a2 	rbit	r2, r2
 8000a98:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000a9c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b252      	sxtb	r2, r2
 8000aa6:	f042 0220 	orr.w	r2, r2, #32
 8000aaa:	b252      	sxtb	r2, r2
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	f002 021f 	and.w	r2, r2, #31
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0aa      	beq.n	8000a14 <HAL_RCC_OscConfig+0x19c>
 8000abe:	e05e      	b.n	8000b7e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fc38 	bl	8000334 <HAL_GetTick>
 8000ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ac8:	e00a      	b.n	8000ae0 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aca:	f7ff fc33 	bl	8000334 <HAL_GetTick>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b64      	cmp	r3, #100	; 0x64
 8000ad8:	d902      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000ada:	2303      	movs	r3, #3
 8000adc:	f000 bdb3 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000aec:	fa93 f3a3 	rbit	r3, r3
 8000af0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000af4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af8:	fab3 f383 	clz	r3, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d102      	bne.n	8000b12 <HAL_RCC_OscConfig+0x29a>
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	e015      	b.n	8000b3e <HAL_RCC_OscConfig+0x2c6>
 8000b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b1e:	fa93 f3a3 	rbit	r3, r3
 8000b22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b32:	fa93 f3a3 	rbit	r3, r3
 8000b36:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b42:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b46:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b4a:	fa92 f2a2 	rbit	r2, r2
 8000b4e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b52:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	b252      	sxtb	r2, r2
 8000b5c:	f042 0220 	orr.w	r2, r2, #32
 8000b60:	b252      	sxtb	r2, r2
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	f002 021f 	and.w	r2, r2, #31
 8000b68:	2101      	movs	r1, #1
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	4013      	ands	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1aa      	bne.n	8000aca <HAL_RCC_OscConfig+0x252>
 8000b74:	e003      	b.n	8000b7e <HAL_RCC_OscConfig+0x306>
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 8170 	beq.w	8000e6e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b8e:	4bd0      	ldr	r3, [pc, #832]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 030c 	and.w	r3, r3, #12
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00b      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b9a:	4bcd      	ldr	r3, [pc, #820]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 030c 	and.w	r3, r3, #12
 8000ba2:	2b08      	cmp	r3, #8
 8000ba4:	d16d      	bne.n	8000c82 <HAL_RCC_OscConfig+0x40a>
 8000ba6:	4bca      	ldr	r3, [pc, #808]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d167      	bne.n	8000c82 <HAL_RCC_OscConfig+0x40a>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000bc4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc8:	fab3 f383 	clz	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d102      	bne.n	8000be2 <HAL_RCC_OscConfig+0x36a>
 8000bdc:	4bbc      	ldr	r3, [pc, #752]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	e013      	b.n	8000c0a <HAL_RCC_OscConfig+0x392>
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000bec:	fa93 f3a3 	rbit	r3, r3
 8000bf0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000bfa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c06:	4bb2      	ldr	r3, [pc, #712]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c10:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c14:	fa92 f2a2 	rbit	r2, r2
 8000c18:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000c1c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b252      	sxtb	r2, r2
 8000c26:	f042 0220 	orr.w	r2, r2, #32
 8000c2a:	b252      	sxtb	r2, r2
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	f002 021f 	and.w	r2, r2, #31
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	4013      	ands	r3, r2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <HAL_RCC_OscConfig+0x3d6>
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d002      	beq.n	8000c4e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f000 bcfc 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c4e:	4ba0      	ldr	r3, [pc, #640]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6959      	ldr	r1, [r3, #20]
 8000c5c:	23f8      	movs	r3, #248	; 0xf8
 8000c5e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c62:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000c6e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	4995      	ldr	r1, [pc, #596]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c80:	e0f5      	b.n	8000e6e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 8085 	beq.w	8000d98 <HAL_RCC_OscConfig+0x520>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c94:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c98:	fa93 f3a3 	rbit	r3, r3
 8000c9c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000ca0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ca4:	fab3 f383 	clz	r3, r3
 8000ca8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fb3c 	bl	8000334 <HAL_GetTick>
 8000cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc0:	e00a      	b.n	8000cd8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc2:	f7ff fb37 	bl	8000334 <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d902      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f000 bcb7 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cde:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000ce2:	fa93 f3a3 	rbit	r3, r3
 8000ce6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000cea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cee:	fab3 f383 	clz	r3, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	095b      	lsrs	r3, r3, #5
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d102      	bne.n	8000d08 <HAL_RCC_OscConfig+0x490>
 8000d02:	4b73      	ldr	r3, [pc, #460]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	e013      	b.n	8000d30 <HAL_RCC_OscConfig+0x4b8>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d20:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d24:	fa93 f3a3 	rbit	r3, r3
 8000d28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d2c:	4b68      	ldr	r3, [pc, #416]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	2202      	movs	r2, #2
 8000d32:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d36:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d42:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	b252      	sxtb	r2, r2
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	b252      	sxtb	r2, r2
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	f002 021f 	and.w	r2, r2, #31
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0ae      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d64:	4b5a      	ldr	r3, [pc, #360]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6959      	ldr	r1, [r3, #20]
 8000d72:	23f8      	movs	r3, #248	; 0xf8
 8000d74:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000d84:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	494f      	ldr	r1, [pc, #316]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
 8000d96:	e06a      	b.n	8000e6e <HAL_RCC_OscConfig+0x5f6>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000da2:	fa93 f3a3 	rbit	r3, r3
 8000da6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000daa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dae:	fab3 f383 	clz	r3, r3
 8000db2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000db6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fab7 	bl	8000334 <HAL_GetTick>
 8000dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dca:	e00a      	b.n	8000de2 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fab2 	bl	8000334 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d902      	bls.n	8000de2 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f000 bc32 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000df4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df8:	fab3 f383 	clz	r3, r3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <HAL_RCC_OscConfig+0x59a>
 8000e0c:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	e013      	b.n	8000e3a <HAL_RCC_OscConfig+0x5c2>
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e40:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e44:	fa92 f2a2 	rbit	r2, r2
 8000e48:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e4c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	b252      	sxtb	r2, r2
 8000e56:	f042 0220 	orr.w	r2, r2, #32
 8000e5a:	b252      	sxtb	r2, r2
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	f002 021f 	and.w	r2, r2, #31
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f202 	lsl.w	r2, r1, r2
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1ae      	bne.n	8000dcc <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80d8 	beq.w	800102e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d067      	beq.n	8000f58 <HAL_RCC_OscConfig+0x6e0>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e92:	fa93 f3a3 	rbit	r3, r3
 8000e96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000e9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e9e:	fab3 f383 	clz	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_RCC_OscConfig+0x65c>)
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2301      	movs	r3, #1
 8000eae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fa40 	bl	8000334 <HAL_GetTick>
 8000eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb8:	e00e      	b.n	8000ed8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eba:	f7ff fa3b 	bl	8000334 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d906      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e3bb      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	10908120 	.word	0x10908120
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ef4:	fa93 f2a3 	rbit	r2, r3
 8000ef8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f02:	2202      	movs	r2, #2
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	fa93 f2a3 	rbit	r2, r3
 8000f10:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f16:	4ba5      	ldr	r3, [pc, #660]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8000f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f1e:	2102      	movs	r1, #2
 8000f20:	6019      	str	r1, [r3, #0]
 8000f22:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	fa93 f1a3 	rbit	r1, r3
 8000f2c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f30:	6019      	str	r1, [r3, #0]
  return(result);
 8000f32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0b1      	beq.n	8000eba <HAL_RCC_OscConfig+0x642>
 8000f56:	e06a      	b.n	800102e <HAL_RCC_OscConfig+0x7b6>
 8000f58:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	fa93 f2a3 	rbit	r2, r3
 8000f6a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f6e:	601a      	str	r2, [r3, #0]
  return(result);
 8000f70:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f76:	fab3 f383 	clz	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b8c      	ldr	r3, [pc, #560]	; (80011b0 <HAL_RCC_OscConfig+0x938>)
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	461a      	mov	r2, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f88:	f7ff f9d4 	bl	8000334 <HAL_GetTick>
 8000f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f90:	e009      	b.n	8000fa6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f92:	f7ff f9cf 	bl	8000334 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e34f      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8000fa6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000faa:	2202      	movs	r2, #2
 8000fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	fa93 f2a3 	rbit	r2, r3
 8000fb8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	fa93 f2a3 	rbit	r2, r3
 8000fd0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fda:	2202      	movs	r2, #2
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	fa93 f2a3 	rbit	r2, r3
 8000fe8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000fec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fee:	4b6f      	ldr	r3, [pc, #444]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8000ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	6019      	str	r1, [r3, #0]
 8000ffa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	fa93 f1a3 	rbit	r1, r3
 8001004:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001008:	6019      	str	r1, [r3, #0]
  return(result);
 800100a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b25b      	sxtb	r3, r3
 8001016:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800101a:	b25b      	sxtb	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1b1      	bne.n	8000f92 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 8159 	beq.w	80012f0 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001044:	4b59      	ldr	r3, [pc, #356]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d112      	bne.n	8001076 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	4b56      	ldr	r3, [pc, #344]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a55      	ldr	r2, [pc, #340]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	61d3      	str	r3, [r2, #28]
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001070:	2301      	movs	r3, #1
 8001072:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d11a      	bne.n	80010b8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff f951 	bl	8000334 <HAL_GetTick>
 8001092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001096:	e009      	b.n	80010ac <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001098:	f7ff f94c 	bl	8000334 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	; 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e2cc      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ef      	beq.n	8001098 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x858>
 80010c2:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a39      	ldr	r2, [pc, #228]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6213      	str	r3, [r2, #32]
 80010ce:	e02f      	b.n	8001130 <HAL_RCC_OscConfig+0x8b8>
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x87c>
 80010da:	4b34      	ldr	r3, [pc, #208]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4a33      	ldr	r2, [pc, #204]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	6213      	str	r3, [r2, #32]
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4a30      	ldr	r2, [pc, #192]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010ec:	f023 0304 	bic.w	r3, r3, #4
 80010f0:	6213      	str	r3, [r2, #32]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0x8b8>
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x8a0>
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0x8b8>
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800112a:	f023 0304 	bic.w	r3, r3, #4
 800112e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d06b      	beq.n	8001212 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff f8fb 	bl	8000334 <HAL_GetTick>
 800113e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001144:	f7ff f8f6 	bl	8000334 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e274      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 800115c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001160:	2202      	movs	r2, #2
 8001162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	fa93 f2a3 	rbit	r2, r3
 800116e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001178:	2202      	movs	r2, #2
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	fa93 f2a3 	rbit	r2, r3
 8001186:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800118a:	601a      	str	r2, [r3, #0]
  return(result);
 800118c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001190:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d108      	bne.n	80011b8 <HAL_RCC_OscConfig+0x940>
 80011a6:	4b01      	ldr	r3, [pc, #4]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x95c>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	10908120 	.word	0x10908120
 80011b4:	40007000 	.word	0x40007000
 80011b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011bc:	2202      	movs	r2, #2
 80011be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	fa93 f2a3 	rbit	r2, r3
 80011ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	4bbb      	ldr	r3, [pc, #748]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011d8:	2102      	movs	r1, #2
 80011da:	6011      	str	r1, [r2, #0]
 80011dc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	fa92 f1a2 	rbit	r1, r2
 80011e6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011ea:	6011      	str	r1, [r2, #0]
  return(result);
 80011ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	b252      	sxtb	r2, r2
 80011f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011fc:	b252      	sxtb	r2, r2
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f002 021f 	and.w	r2, r2, #31
 8001204:	2101      	movs	r1, #1
 8001206:	fa01 f202 	lsl.w	r2, r1, r2
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d099      	beq.n	8001144 <HAL_RCC_OscConfig+0x8cc>
 8001210:	e064      	b.n	80012dc <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff f88f 	bl	8000334 <HAL_GetTick>
 8001216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121c:	f7ff f88a 	bl	8000334 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e208      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8001234:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001238:	2202      	movs	r2, #2
 800123a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	fa93 f2a3 	rbit	r2, r3
 8001246:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001250:	2202      	movs	r2, #2
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	fa93 f2a3 	rbit	r2, r3
 800125e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001262:	601a      	str	r2, [r3, #0]
  return(result);
 8001264:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001268:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	095b      	lsrs	r3, r3, #5
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d102      	bne.n	8001284 <HAL_RCC_OscConfig+0xa0c>
 800127e:	4b90      	ldr	r3, [pc, #576]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	e00d      	b.n	80012a0 <HAL_RCC_OscConfig+0xa28>
 8001284:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001288:	2202      	movs	r2, #2
 800128a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	fa93 f2a3 	rbit	r2, r3
 8001296:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012a4:	2102      	movs	r1, #2
 80012a6:	6011      	str	r1, [r2, #0]
 80012a8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	fa92 f1a2 	rbit	r1, r2
 80012b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012b6:	6011      	str	r1, [r2, #0]
  return(result);
 80012b8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	fab2 f282 	clz	r2, r2
 80012c2:	b252      	sxtb	r2, r2
 80012c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012c8:	b252      	sxtb	r2, r2
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	f002 021f 	and.w	r2, r2, #31
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d19f      	bne.n	800121c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e4:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	4a75      	ldr	r2, [pc, #468]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80012ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 81a4 	beq.w	8001644 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	f000 819b 	beq.w	8001640 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b02      	cmp	r3, #2
 8001312:	f040 8113 	bne.w	800153c <HAL_RCC_OscConfig+0xcc4>
 8001316:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800131a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800131e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fa93 f2a3 	rbit	r2, r3
 800132a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800132e:	601a      	str	r2, [r3, #0]
  return(result);
 8001330:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001334:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800133e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	461a      	mov	r2, r3
 8001346:	2300      	movs	r3, #0
 8001348:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7fe fff3 	bl	8000334 <HAL_GetTick>
 800134e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001352:	e009      	b.n	8001368 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7fe ffee 	bl	8000334 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e16e      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8001368:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800136c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001380:	601a      	str	r2, [r3, #0]
  return(result);
 8001382:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001386:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0xb2a>
 800139c:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	e01b      	b.n	80013da <HAL_RCC_OscConfig+0xb62>
 80013a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fa93 f2a3 	rbit	r2, r3
 80013b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	fa93 f2a3 	rbit	r2, r3
 80013d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013e2:	6011      	str	r1, [r2, #0]
 80013e4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	fa92 f1a2 	rbit	r1, r2
 80013ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013f2:	6011      	str	r1, [r2, #0]
  return(result);
 80013f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	fab2 f282 	clz	r2, r2
 80013fe:	b252      	sxtb	r2, r2
 8001400:	f042 0220 	orr.w	r2, r2, #32
 8001404:	b252      	sxtb	r2, r2
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f002 021f 	and.w	r2, r2, #31
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d19d      	bne.n	8001354 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	430b      	orrs	r3, r1
 800142e:	4924      	ldr	r1, [pc, #144]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001438:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800143c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800144c:	601a      	str	r2, [r3, #0]
  return(result);
 800144e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001452:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800145c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	461a      	mov	r2, r3
 8001464:	2301      	movs	r3, #1
 8001466:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7fe ff64 	bl	8000334 <HAL_GetTick>
 800146c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001470:	e009      	b.n	8001486 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001472:	f7fe ff5f 	bl	8000334 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0df      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8001486:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800148a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800148e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800149e:	601a      	str	r2, [r3, #0]
  return(result);
 80014a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	095b      	lsrs	r3, r3, #5
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d104      	bne.n	80014c4 <HAL_RCC_OscConfig+0xc4c>
 80014ba:	4b01      	ldr	r3, [pc, #4]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xc84>
 80014c0:	40021000 	.word	0x40021000
 80014c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f2a3 	rbit	r2, r3
 80014f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	4b55      	ldr	r3, [pc, #340]	; (8001650 <HAL_RCC_OscConfig+0xdd8>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001500:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001504:	6011      	str	r1, [r2, #0]
 8001506:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	fa92 f1a2 	rbit	r1, r2
 8001510:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001514:	6011      	str	r1, [r2, #0]
  return(result);
 8001516:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	fab2 f282 	clz	r2, r2
 8001520:	b252      	sxtb	r2, r2
 8001522:	f042 0220 	orr.w	r2, r2, #32
 8001526:	b252      	sxtb	r2, r2
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	f002 021f 	and.w	r2, r2, #31
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d09b      	beq.n	8001472 <HAL_RCC_OscConfig+0xbfa>
 800153a:	e083      	b.n	8001644 <HAL_RCC_OscConfig+0xdcc>
 800153c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	fa93 f2a3 	rbit	r2, r3
 8001550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001554:	601a      	str	r2, [r3, #0]
  return(result);
 8001556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001564:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	461a      	mov	r2, r3
 800156c:	2300      	movs	r3, #0
 800156e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7fe fee0 	bl	8000334 <HAL_GetTick>
 8001574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	e009      	b.n	800158e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157a:	f7fe fedb 	bl	8000334 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e05b      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 800158e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fa93 f2a3 	rbit	r2, r3
 80015a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a6:	601a      	str	r2, [r3, #0]
  return(result);
 80015a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	095b      	lsrs	r3, r3, #5
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d102      	bne.n	80015c8 <HAL_RCC_OscConfig+0xd50>
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_RCC_OscConfig+0xdd8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	e01b      	b.n	8001600 <HAL_RCC_OscConfig+0xd88>
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	fa93 f2a3 	rbit	r2, r3
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_RCC_OscConfig+0xdd8>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f107 0214 	add.w	r2, r7, #20
 8001604:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001608:	6011      	str	r1, [r2, #0]
 800160a:	f107 0214 	add.w	r2, r7, #20
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	fa92 f1a2 	rbit	r1, r2
 8001614:	f107 0210 	add.w	r2, r7, #16
 8001618:	6011      	str	r1, [r2, #0]
  return(result);
 800161a:	f107 0210 	add.w	r2, r7, #16
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	fab2 f282 	clz	r2, r2
 8001624:	b252      	sxtb	r2, r2
 8001626:	f042 0220 	orr.w	r2, r2, #32
 800162a:	b252      	sxtb	r2, r2
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	f002 021f 	and.w	r2, r2, #31
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d19d      	bne.n	800157a <HAL_RCC_OscConfig+0xd02>
 800163e:	e001      	b.n	8001644 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b09e      	sub	sp, #120	; 0x78
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e164      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d910      	bls.n	800169c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 0207 	bic.w	r2, r3, #7
 8001682:	498d      	ldr	r1, [pc, #564]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e14c      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b84      	ldr	r3, [pc, #528]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4981      	ldr	r1, [pc, #516]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80df 	beq.w	8001886 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d13d      	bne.n	800174c <HAL_RCC_ClockConfig+0xf8>
 80016d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80016de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_ClockConfig+0xa6>
 80016f4:	4b71      	ldr	r3, [pc, #452]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	e00f      	b.n	800171a <HAL_RCC_ClockConfig+0xc6>
 80016fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	667b      	str	r3, [r7, #100]	; 0x64
 8001708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170c:	663b      	str	r3, [r7, #96]	; 0x60
 800170e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001716:	4b69      	ldr	r3, [pc, #420]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800171e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001722:	fa92 f2a2 	rbit	r2, r2
 8001726:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001728:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800172a:	fab2 f282 	clz	r2, r2
 800172e:	b252      	sxtb	r2, r2
 8001730:	f042 0220 	orr.w	r2, r2, #32
 8001734:	b252      	sxtb	r2, r2
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	f002 021f 	and.w	r2, r2, #31
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d17d      	bne.n	8001844 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0f4      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d13d      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x17c>
 8001754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001758:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <HAL_RCC_ClockConfig+0x12a>
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	e00f      	b.n	800179e <HAL_RCC_ClockConfig+0x14a>
 800177e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	647b      	str	r3, [r7, #68]	; 0x44
 800178c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
 8001792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800179a:	4b48      	ldr	r3, [pc, #288]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80017a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017a6:	fa92 f2a2 	rbit	r2, r2
 80017aa:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80017ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ae:	fab2 f282 	clz	r2, r2
 80017b2:	b252      	sxtb	r2, r2
 80017b4:	f042 0220 	orr.w	r2, r2, #32
 80017b8:	b252      	sxtb	r2, r2
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	f002 021f 	and.w	r2, r2, #31
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f202 	lsl.w	r2, r1, r2
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d13b      	bne.n	8001844 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b2      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
 80017d0:	2302      	movs	r3, #2
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	095b      	lsrs	r3, r3, #5
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x1a4>
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	e00d      	b.n	8001814 <HAL_RCC_ClockConfig+0x1c0>
 80017f8:	2302      	movs	r3, #2
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2202      	movs	r2, #2
 8001816:	61ba      	str	r2, [r7, #24]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	fa92 f2a2 	rbit	r2, r2
 800181e:	617a      	str	r2, [r7, #20]
  return(result);
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b252      	sxtb	r2, r2
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	b252      	sxtb	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f002 021f 	and.w	r2, r2, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f202 	lsl.w	r2, r1, r2
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e078      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 0203 	bic.w	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	491a      	ldr	r1, [pc, #104]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001856:	f7fe fd6d 	bl	8000334 <HAL_GetTick>
 800185a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185c:	e00a      	b.n	8001874 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185e:	f7fe fd69 	bl	8000334 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e060      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 020c 	and.w	r2, r3, #12
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	429a      	cmp	r2, r3
 8001884:	d1eb      	bne.n	800185e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d215      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 0207 	bic.w	r2, r3, #7
 800189c:	4906      	ldr	r1, [pc, #24]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d006      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e03f      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000
 80018bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4919      	ldr	r1, [pc, #100]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4911      	ldr	r1, [pc, #68]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018fe:	f000 f825 	bl	800194c <HAL_RCC_GetSysClockFreq>
 8001902:	4601      	mov	r1, r0
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800190c:	23f0      	movs	r3, #240	; 0xf0
 800190e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	60fb      	str	r3, [r7, #12]
  return(result);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_RCC_ClockConfig+0x2f0>)
 8001924:	5cd3      	ldrb	r3, [r2, r3]
 8001926:	fa21 f303 	lsr.w	r3, r1, r3
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_RCC_ClockConfig+0x2f4>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800192e:	2000      	movs	r0, #0
 8001930:	f7fe fcbc 	bl	80002ac <HAL_InitTick>
  
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3778      	adds	r7, #120	; 0x78
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	08003d4c 	.word	0x08003d4c
 8001948:	20000008 	.word	0x20000008

0800194c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b08b      	sub	sp, #44	; 0x2c
 8001950:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b04      	cmp	r3, #4
 8001974:	d002      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x30>
 8001976:	2b08      	cmp	r3, #8
 8001978:	d003      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x36>
 800197a:	e03c      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc4>)
 800197e:	623b      	str	r3, [r7, #32]
      break;
 8001980:	e03c      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001988:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800198c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	607b      	str	r3, [r7, #4]
  return(result);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
 80019a0:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	f003 020f 	and.w	r2, r3, #15
 80019ae:	230f      	movs	r3, #15
 80019b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xcc>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e004      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xd0>)
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	623b      	str	r3, [r7, #32]
      break;
 80019f4:	e002      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019f8:	623b      	str	r3, [r7, #32]
      break;
 80019fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fc:	6a3b      	ldr	r3, [r7, #32]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	372c      	adds	r7, #44	; 0x2c
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	007a1200 	.word	0x007a1200
 8001a14:	08003d2c 	.word	0x08003d2c
 8001a18:	08003d3c 	.word	0x08003d3c
 8001a1c:	003d0900 	.word	0x003d0900

08001a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a3e:	f7ff ffef 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a42:	4601      	mov	r1, r0
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a4c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a50:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	603b      	str	r3, [r7, #0]
  return(result);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08003d5c 	.word	0x08003d5c

08001a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a82:	f7ff ffcd 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a86:	4601      	mov	r1, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001a90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a94:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	603b      	str	r3, [r7, #0]
  return(result);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x40>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08003d5c 	.word	0x08003d5c

08001ac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e07c      	b.n	8001bcc <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f001 fb7d 	bl	80031ec <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b08:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b12:	d902      	bls.n	8001b1a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e002      	b.n	8001b20 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001b28:	d007      	beq.n	8001b3a <HAL_SPI_Init+0x7a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b32:	d002      	beq.n	8001b3a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b4a:	d903      	bls.n	8001b54 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
 8001b52:	e002      	b.n	8001b5a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	ea42 0103 	orr.w	r1, r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	f003 0204 	and.w	r2, r3, #4
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	ea42 0103 	orr.w	r1, r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_SPI_Transmit+0x26>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e13e      	b.n	8001e78 <HAL_SPI_Transmit+0x2a4>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c02:	f7fe fb97 	bl	8000334 <HAL_GetTick>
 8001c06:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d002      	beq.n	8001c1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
 8001c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c18:	e125      	b.n	8001e66 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_SPI_Transmit+0x52>
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c2a:	e11c      	b.n	8001e66 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	88fa      	ldrh	r2, [r7, #6]
 8001c4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c76:	d107      	bne.n	8001c88 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c92:	2b40      	cmp	r3, #64	; 0x40
 8001c94:	d007      	beq.n	8001ca6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001cae:	d947      	bls.n	8001d40 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_SPI_Transmit+0xee>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d138      	bne.n	8001d34 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	881a      	ldrh	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3302      	adds	r3, #2
 8001cd0:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ce0:	e028      	b.n	8001d34 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d10f      	bne.n	8001d10 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	881a      	ldrh	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d0e:	e011      	b.n	8001d34 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_SPI_Transmit+0x15a>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d00a      	beq.n	8001d34 <HAL_SPI_Transmit+0x160>
 8001d1e:	f7fe fb09 	bl	8000334 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d802      	bhi.n	8001d34 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d32:	e098      	b.n	8001e66 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1d1      	bne.n	8001ce2 <HAL_SPI_Transmit+0x10e>
 8001d3e:	e070      	b.n	8001e22 <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_SPI_Transmit+0x17e>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d162      	bne.n	8001e18 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d90f      	bls.n	8001d7c <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	881a      	ldrh	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3302      	adds	r3, #2
 8001d6a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b02      	subs	r3, #2
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d7a:	e04d      	b.n	8001e18 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	320c      	adds	r2, #12
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d9a:	e03d      	b.n	8001e18 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d124      	bne.n	8001df4 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d90f      	bls.n	8001dd4 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	881a      	ldrh	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b02      	subs	r3, #2
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001dd2:	e021      	b.n	8001e18 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	60ba      	str	r2, [r7, #8]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	320c      	adds	r2, #12
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001df2:	e011      	b.n	8001e18 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_SPI_Transmit+0x23e>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d00a      	beq.n	8001e18 <HAL_SPI_Transmit+0x244>
 8001e02:	f7fe fa97 	bl	8000334 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d802      	bhi.n	8001e18 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e16:	e026      	b.n	8001e66 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1bc      	bne.n	8001d9c <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 fc7d 	bl	8002726 <SPI_EndRxTxTransaction>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2220      	movs	r2, #32
 8001e36:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10a      	bne.n	8001e56 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	77fb      	strb	r3, [r7, #31]
 8001e62:	e000      	b.n	8001e66 <HAL_SPI_Transmit+0x292>
  }

error:
 8001e64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	75fb      	strb	r3, [r7, #23]


  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ea0:	d112      	bne.n	8001ec8 <HAL_SPI_Receive+0x48>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2204      	movs	r2, #4
 8001eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001eb2:	88fa      	ldrh	r2, [r7, #6]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f901 	bl	80020c6 <HAL_SPI_TransmitReceive>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	e0fa      	b.n	80020be <HAL_SPI_Receive+0x23e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_SPI_Receive+0x56>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e0f3      	b.n	80020be <HAL_SPI_Receive+0x23e>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ede:	f7fe fa29 	bl	8000334 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d002      	beq.n	8001ef6 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ef4:	e0da      	b.n	80020ac <HAL_SPI_Receive+0x22c>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_SPI_Receive+0x82>
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f06:	e0d1      	b.n	80020ac <HAL_SPI_Receive+0x22c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	88fa      	ldrh	r2, [r7, #6]
 8001f20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	88fa      	ldrh	r2, [r7, #6]
 8001f28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f52:	d908      	bls.n	8001f66 <HAL_SPI_Receive+0xe6>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	e007      	b.n	8001f76 <HAL_SPI_Receive+0xf6>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f74:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7e:	d107      	bne.n	8001f90 <HAL_SPI_Receive+0x110>
  {
    SPI_1LINE_RX(hspi);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d007      	beq.n	8001fae <HAL_SPI_Receive+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fb6:	d860      	bhi.n	800207a <HAL_SPI_Receive+0x1fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001fb8:	e02c      	b.n	8002014 <HAL_SPI_Receive+0x194>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d113      	bne.n	8001ff0 <HAL_SPI_Receive+0x170>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	330c      	adds	r3, #12
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001fee:	e011      	b.n	8002014 <HAL_SPI_Receive+0x194>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_SPI_Receive+0x18e>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d00a      	beq.n	8002014 <HAL_SPI_Receive+0x194>
 8001ffe:	f7fe f999 	bl	8000334 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d802      	bhi.n	8002014 <HAL_SPI_Receive+0x194>
        {
          errorcode = HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002012:	e04b      	b.n	80020ac <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1cc      	bne.n	8001fba <HAL_SPI_Receive+0x13a>
 8002020:	e031      	b.n	8002086 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d112      	bne.n	8002056 <HAL_SPI_Receive+0x1d6>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	b29a      	uxth	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	3302      	adds	r3, #2
 8002040:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002054:	e011      	b.n	800207a <HAL_SPI_Receive+0x1fa>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <HAL_SPI_Receive+0x1f4>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002062:	d00a      	beq.n	800207a <HAL_SPI_Receive+0x1fa>
 8002064:	f7fe f966 	bl	8000334 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d802      	bhi.n	800207a <HAL_SPI_Receive+0x1fa>
        {
          errorcode = HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002078:	e018      	b.n	80020ac <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1cd      	bne.n	8002022 <HAL_SPI_Receive+0x1a2>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	6839      	ldr	r1, [r7, #0]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 faf3 	bl	8002676 <SPI_EndRxTransaction>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_SPI_Receive+0x21c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_SPI_Receive+0x22a>
  {
    errorcode = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	75fb      	strb	r3, [r7, #23]
 80020a8:	e000      	b.n	80020ac <HAL_SPI_Receive+0x22c>
  }

error :
 80020aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b08a      	sub	sp, #40	; 0x28
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80020e0:	2301      	movs	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_SPI_TransmitReceive+0x32>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e1e2      	b.n	80024be <HAL_SPI_TransmitReceive+0x3f8>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002100:	f7fe f918 	bl	8000334 <HAL_GetTick>
 8002104:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d00e      	beq.n	800213a <HAL_SPI_TransmitReceive+0x74>
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002122:	d106      	bne.n	8002132 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <HAL_SPI_TransmitReceive+0x6c>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d003      	beq.n	800213a <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002132:	2302      	movs	r3, #2
 8002134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002138:	e1b7      	b.n	80024aa <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_SPI_TransmitReceive+0x86>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_SPI_TransmitReceive+0x86>
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002152:	e1aa      	b.n	80024aa <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b04      	cmp	r3, #4
 800215e:	d003      	beq.n	8002168 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2205      	movs	r2, #5
 8002164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	887a      	ldrh	r2, [r7, #2]
 800218e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021aa:	d805      	bhi.n	80021b8 <HAL_SPI_TransmitReceive+0xf2>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d908      	bls.n	80021ca <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	e007      	b.n	80021da <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d007      	beq.n	80021f8 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002200:	d975      	bls.n	80022ee <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <HAL_SPI_TransmitReceive+0x14e>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d160      	bne.n	80022d6 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3302      	adds	r3, #2
 8002222:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002232:	e050      	b.n	80022d6 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01c      	beq.n	8002274 <HAL_SPI_TransmitReceive+0x1ae>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d017      	beq.n	8002274 <HAL_SPI_TransmitReceive+0x1ae>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d110      	bne.n	8002274 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3302      	adds	r3, #2
 8002260:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01a      	beq.n	80022b6 <HAL_SPI_TransmitReceive+0x1f0>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d113      	bne.n	80022b6 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	b29a      	uxth	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3302      	adds	r3, #2
 800229e:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022b2:	2301      	movs	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d00b      	beq.n	80022d6 <HAL_SPI_TransmitReceive+0x210>
 80022be:	f7fe f839 	bl	8000334 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d803      	bhi.n	80022d6 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80022d4:	e0e9      	b.n	80024aa <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1a9      	bne.n	8002234 <HAL_SPI_TransmitReceive+0x16e>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1a3      	bne.n	8002234 <HAL_SPI_TransmitReceive+0x16e>
 80022ec:	e0c9      	b.n	8002482 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_SPI_TransmitReceive+0x23c>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	f040 80b3 	bne.w	8002468 <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d90f      	bls.n	800232c <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	881a      	ldrh	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3302      	adds	r3, #2
 800231a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b02      	subs	r3, #2
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800232a:	e09d      	b.n	8002468 <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	60ba      	str	r2, [r7, #8]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	320c      	adds	r2, #12
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800234a:	e08d      	b.n	8002468 <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	2b00      	cmp	r3, #0
 8002350:	d031      	beq.n	80023b6 <HAL_SPI_TransmitReceive+0x2f0>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d02c      	beq.n	80023b6 <HAL_SPI_TransmitReceive+0x2f0>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d125      	bne.n	80023b6 <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d90f      	bls.n	8002394 <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	881a      	ldrh	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3302      	adds	r3, #2
 8002382:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b02      	subs	r3, #2
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002392:	e00e      	b.n	80023b2 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	60ba      	str	r2, [r7, #8]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	320c      	adds	r2, #12
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d042      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x382>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d13b      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d920      	bls.n	800241e <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3302      	adds	r3, #2
 80023ec:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b02      	subs	r3, #2
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d81b      	bhi.n	8002444 <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	e012      	b.n	8002444 <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f103 020c 	add.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	1c59      	adds	r1, r3, #1
 800242a:	6079      	str	r1, [r7, #4]
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002444:	2301      	movs	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d00b      	beq.n	8002468 <HAL_SPI_TransmitReceive+0x3a2>
 8002450:	f7fd ff70 	bl	8000334 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245c:	429a      	cmp	r2, r3
 800245e:	d803      	bhi.n	8002468 <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002466:	e020      	b.n	80024aa <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	f47f af6c 	bne.w	800234c <HAL_SPI_TransmitReceive+0x286>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	f47f af65 	bne.w	800234c <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f94d 	bl	8002726 <SPI_EndRxTxTransaction>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024a6:	e000      	b.n	80024aa <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 80024a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80024ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024d4:	e04c      	b.n	8002570 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d048      	beq.n	8002570 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80024e4:	f7fd ff26 	bl	8000334 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d83d      	bhi.n	8002570 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002502:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800250c:	d111      	bne.n	8002532 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002516:	d004      	beq.n	8002522 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002520:	d107      	bne.n	8002532 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002530:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253a:	d10f      	bne.n	800255c <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800255a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e00e      	b.n	800258e <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4013      	ands	r3, r2
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	429a      	cmp	r2, r3
 800257e:	d101      	bne.n	8002584 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002580:	2201      	movs	r2, #1
 8002582:	e000      	b.n	8002586 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002584:	2200      	movs	r2, #0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	d1a4      	bne.n	80024d6 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80025a4:	e05a      	b.n	800265c <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025ac:	d109      	bne.n	80025c2 <SPI_WaitFifoStateUntilTimeout+0x2c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d106      	bne.n	80025c2 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d048      	beq.n	800265c <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <SPI_WaitFifoStateUntilTimeout+0x4a>
 80025d0:	f7fd feb0 	bl	8000334 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d83d      	bhi.n	800265c <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f8:	d111      	bne.n	800261e <SPI_WaitFifoStateUntilTimeout+0x88>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002602:	d004      	beq.n	800260e <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260c:	d107      	bne.n	800261e <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800261c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002626:	d10f      	bne.n	8002648 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002646:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e008      	b.n	800266e <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	429a      	cmp	r2, r3
 800266a:	d19c      	bne.n	80025a6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af02      	add	r7, sp, #8
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800268a:	d111      	bne.n	80026b0 <SPI_EndRxTransaction+0x3a>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002694:	d004      	beq.n	80026a0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269e:	d107      	bne.n	80026b0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff ff03 	bl	80024c6 <SPI_WaitFlagStateUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e023      	b.n	800271e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026de:	d11d      	bne.n	800271c <SPI_EndRxTransaction+0xa6>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e8:	d004      	beq.n	80026f4 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f2:	d113      	bne.n	800271c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff ff48 	bl	8002596 <SPI_WaitFifoStateUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e000      	b.n	800271e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af02      	add	r7, sp, #8
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f7ff ff29 	bl	8002596 <SPI_WaitFifoStateUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e027      	b.n	80027aa <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	2180      	movs	r1, #128	; 0x80
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff feae 	bl	80024c6 <SPI_WaitFlagStateUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e014      	b.n	80027aa <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff ff02 	bl	8002596 <SPI_WaitFifoStateUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e000      	b.n	80027aa <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e043      	b.n	800284c <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d106      	bne.n	80027de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fd49 	bl	8003270 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2224      	movs	r2, #36	; 0x24
 80027e2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f8ba 	bl	8002970 <UART_SetConfig>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e022      	b.n	800284c <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa14 	bl	8002c3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002832:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fa9b 	bl	8002d80 <UART_CheckIdleState>
 800284a:	4603      	mov	r3, r0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b20      	cmp	r3, #32
 8002872:	d177      	bne.n	8002964 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_UART_Transmit+0x2c>
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e070      	b.n	8002966 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_UART_Transmit+0x3e>
 800288e:	2302      	movs	r3, #2
 8002890:	e069      	b.n	8002966 <HAL_UART_Transmit+0x112>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2221      	movs	r2, #33	; 0x21
 80028a4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80028a8:	f7fd fd44 	bl	8000334 <HAL_GetTick>
 80028ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80028be:	e034      	b.n	800292a <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fa98 	bl	8002e12 <UART_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e03c      	b.n	8002966 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f4:	d111      	bne.n	800291a <HAL_UART_Transmit+0xc6>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	881a      	ldrh	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800290e:	b292      	uxth	r2, r2
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3302      	adds	r3, #2
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	e007      	b.n	800292a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	60ba      	str	r2, [r7, #8]
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	b292      	uxth	r2, r2
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1c4      	bne.n	80028c0 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	2140      	movs	r1, #64	; 0x40
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fa66 	bl	8002e12 <UART_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e00a      	b.n	8002966 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800297c:	2310      	movs	r3, #16
 800297e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002980:	2300      	movs	r3, #0
 8002982:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002984:	2300      	movs	r3, #0
 8002986:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b9f      	ldr	r3, [pc, #636]	; (8002c28 <UART_SetConfig+0x2b8>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	430b      	orrs	r3, r1
 80029b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a8e      	ldr	r2, [pc, #568]	; (8002c2c <UART_SetConfig+0x2bc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d121      	bne.n	8002a3c <UART_SetConfig+0xcc>
 80029f8:	4b8d      	ldr	r3, [pc, #564]	; (8002c30 <UART_SetConfig+0x2c0>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d817      	bhi.n	8002a34 <UART_SetConfig+0xc4>
 8002a04:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <UART_SetConfig+0x9c>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a29 	.word	0x08002a29
 8002a14:	08002a2f 	.word	0x08002a2f
 8002a18:	08002a23 	.word	0x08002a23
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	75fb      	strb	r3, [r7, #23]
 8002a20:	e01e      	b.n	8002a60 <UART_SetConfig+0xf0>
 8002a22:	2302      	movs	r3, #2
 8002a24:	75fb      	strb	r3, [r7, #23]
 8002a26:	e01b      	b.n	8002a60 <UART_SetConfig+0xf0>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	75fb      	strb	r3, [r7, #23]
 8002a2c:	e018      	b.n	8002a60 <UART_SetConfig+0xf0>
 8002a2e:	2308      	movs	r3, #8
 8002a30:	75fb      	strb	r3, [r7, #23]
 8002a32:	e015      	b.n	8002a60 <UART_SetConfig+0xf0>
 8002a34:	2310      	movs	r3, #16
 8002a36:	75fb      	strb	r3, [r7, #23]
 8002a38:	bf00      	nop
 8002a3a:	e011      	b.n	8002a60 <UART_SetConfig+0xf0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a7c      	ldr	r2, [pc, #496]	; (8002c34 <UART_SetConfig+0x2c4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d102      	bne.n	8002a4c <UART_SetConfig+0xdc>
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
 8002a4a:	e009      	b.n	8002a60 <UART_SetConfig+0xf0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a79      	ldr	r2, [pc, #484]	; (8002c38 <UART_SetConfig+0x2c8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d102      	bne.n	8002a5c <UART_SetConfig+0xec>
 8002a56:	2300      	movs	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]
 8002a5a:	e001      	b.n	8002a60 <UART_SetConfig+0xf0>
 8002a5c:	2310      	movs	r3, #16
 8002a5e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a68:	d16f      	bne.n	8002b4a <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d857      	bhi.n	8002b20 <UART_SetConfig+0x1b0>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <UART_SetConfig+0x108>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002a9d 	.word	0x08002a9d
 8002a7c:	08002ab9 	.word	0x08002ab9
 8002a80:	08002ad5 	.word	0x08002ad5
 8002a84:	08002b21 	.word	0x08002b21
 8002a88:	08002aef 	.word	0x08002aef
 8002a8c:	08002b21 	.word	0x08002b21
 8002a90:	08002b21 	.word	0x08002b21
 8002a94:	08002b21 	.word	0x08002b21
 8002a98:	08002b0b 	.word	0x08002b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a9c:	f7fe ffcc 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	005a      	lsls	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	441a      	add	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab4:	82bb      	strh	r3, [r7, #20]
        break;
 8002ab6:	e036      	b.n	8002b26 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ab8:	f7fe ffe0 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
 8002abc:	4603      	mov	r3, r0
 8002abe:	005a      	lsls	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	441a      	add	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	82bb      	strh	r3, [r7, #20]
        break;
 8002ad2:	e028      	b.n	8002b26 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002ade:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6852      	ldr	r2, [r2, #4]
 8002ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aea:	82bb      	strh	r3, [r7, #20]
        break;
 8002aec:	e01b      	b.n	8002b26 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002aee:	f7fe ff2d 	bl	800194c <HAL_RCC_GetSysClockFreq>
 8002af2:	4603      	mov	r3, r0
 8002af4:	005a      	lsls	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	085b      	lsrs	r3, r3, #1
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	82bb      	strh	r3, [r7, #20]
        break;
 8002b08:	e00d      	b.n	8002b26 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	82bb      	strh	r3, [r7, #20]
        break;
 8002b1e:	e002      	b.n	8002b26 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	74fb      	strb	r3, [r7, #19]
        break;
 8002b24:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002b26:	8abb      	ldrh	r3, [r7, #20]
 8002b28:	f023 030f 	bic.w	r3, r3, #15
 8002b2c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b2e:	8abb      	ldrh	r3, [r7, #20]
 8002b30:	105b      	asrs	r3, r3, #1
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	897b      	ldrh	r3, [r7, #10]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	897a      	ldrh	r2, [r7, #10]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	e069      	b.n	8002c1e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d863      	bhi.n	8002c18 <UART_SetConfig+0x2a8>
 8002b50:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <UART_SetConfig+0x1e8>)
 8002b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b56:	bf00      	nop
 8002b58:	08002b7d 	.word	0x08002b7d
 8002b5c:	08002b9d 	.word	0x08002b9d
 8002b60:	08002bbd 	.word	0x08002bbd
 8002b64:	08002c19 	.word	0x08002c19
 8002b68:	08002bdd 	.word	0x08002bdd
 8002b6c:	08002c19 	.word	0x08002c19
 8002b70:	08002c19 	.word	0x08002c19
 8002b74:	08002c19 	.word	0x08002c19
 8002b78:	08002bfd 	.word	0x08002bfd
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b7c:	f7fe ff5c 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	441a      	add	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60da      	str	r2, [r3, #12]
        break;
 8002b9a:	e040      	b.n	8002c1e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b9c:	f7fe ff6e 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	441a      	add	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60da      	str	r2, [r3, #12]
        break;
 8002bba:	e030      	b.n	8002c1e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002bc6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6852      	ldr	r2, [r2, #4]
 8002bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60da      	str	r2, [r3, #12]
        break;
 8002bda:	e020      	b.n	8002c1e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bdc:	f7fe feb6 	bl	800194c <HAL_RCC_GetSysClockFreq>
 8002be0:	4602      	mov	r2, r0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	441a      	add	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60da      	str	r2, [r3, #12]
        break;
 8002bfa:	e010      	b.n	8002c1e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60da      	str	r2, [r3, #12]
        break;
 8002c16:	e002      	b.n	8002c1e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	74fb      	strb	r3, [r7, #19]
        break;
 8002c1c:	bf00      	nop
    }
  }

  return ret;
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]

}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	efff69f3 	.word	0xefff69f3
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40004400 	.word	0x40004400
 8002c38:	40004800 	.word	0x40004800

08002c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01a      	beq.n	8002d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d3a:	d10a      	bne.n	8002d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
  }
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d92:	f7fd facf 	bl	8000334 <HAL_GetTick>
 8002d96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d10e      	bne.n	8002dc4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002da6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f82c 	bl	8002e12 <UART_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e022      	b.n	8002e0a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d10e      	bne.n	8002df0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f816 	bl	8002e12 <UART_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e00c      	b.n	8002e0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e22:	e02c      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d028      	beq.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e32:	f7fd fa7f 	bl	8000334 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d21d      	bcs.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e00f      	b.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4013      	ands	r3, r2
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2301      	moveq	r3, #1
 8002e90:	2300      	movne	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d0c3      	beq.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eae:	f7fd f9e7 	bl	8000280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eb2:	f000 f843 	bl	8002f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eb6:	f000 f8f1 	bl	800309c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002eba:	f000 f8bf 	bl	800303c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002ebe:	f000 f87f 	bl	8002fc0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t init = 0xE;
 8002ec2:	230e      	movs	r3, #14
 8002ec4:	71fb      	strb	r3, [r7, #7]
//	  HAL_GPIO_WritePin(EN_OXIG_GPIO_Port, EN_OXIG_Pin, 1);
//	  HAL_Delay(100);



	  HAL_GPIO_WritePin(EN_OXIG_GPIO_Port, EN_OXIG_Pin, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2120      	movs	r1, #32
 8002eca:	4817      	ldr	r0, [pc, #92]	; (8002f28 <main+0x80>)
 8002ecc:	f7fd fcbc 	bl	8000848 <HAL_GPIO_WritePin>

	  init = 0xE;
 8002ed0:	230e      	movs	r3, #14
 8002ed2:	71fb      	strb	r3, [r7, #7]
	  HAL_SPI_Transmit(&hspi1, &init, 1, 1000);
 8002ed4:	1df9      	adds	r1, r7, #7
 8002ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eda:	2201      	movs	r2, #1
 8002edc:	4813      	ldr	r0, [pc, #76]	; (8002f2c <main+0x84>)
 8002ede:	f7fe fe79 	bl	8001bd4 <HAL_SPI_Transmit>

	  HAL_SPI_Receive(&hspi1, &init, 1, 1000);
 8002ee2:	1df9      	adds	r1, r7, #7
 8002ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4810      	ldr	r0, [pc, #64]	; (8002f2c <main+0x84>)
 8002eec:	f7fe ffc8 	bl	8001e80 <HAL_SPI_Receive>

	  HAL_GPIO_WritePin(EN_OXIG_GPIO_Port, EN_OXIG_Pin, 1);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2120      	movs	r1, #32
 8002ef4:	480c      	ldr	r0, [pc, #48]	; (8002f28 <main+0x80>)
 8002ef6:	f7fd fca7 	bl	8000848 <HAL_GPIO_WritePin>





	  sprintf (transmissao, "valor lido: %d\r\n", init);
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	461a      	mov	r2, r3
 8002efe:	490c      	ldr	r1, [pc, #48]	; (8002f30 <main+0x88>)
 8002f00:	480c      	ldr	r0, [pc, #48]	; (8002f34 <main+0x8c>)
 8002f02:	f000 faf7 	bl	80034f4 <siprintf>


	  HAL_UART_Transmit(&huart2, transmissao, strlen(transmissao), 10000);
 8002f06:	480b      	ldr	r0, [pc, #44]	; (8002f34 <main+0x8c>)
 8002f08:	f7fd f962 	bl	80001d0 <strlen>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f14:	4907      	ldr	r1, [pc, #28]	; (8002f34 <main+0x8c>)
 8002f16:	4808      	ldr	r0, [pc, #32]	; (8002f38 <main+0x90>)
 8002f18:	f7ff fc9c 	bl	8002854 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8002f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f20:	f7fd fa14 	bl	800034c <HAL_Delay>
  {
 8002f24:	e7cf      	b.n	8002ec6 <main+0x1e>
 8002f26:	bf00      	nop
 8002f28:	48000800 	.word	0x48000800
 8002f2c:	200000bc 	.word	0x200000bc
 8002f30:	08003d18 	.word	0x08003d18
 8002f34:	2000009c 	.word	0x2000009c
 8002f38:	20000120 	.word	0x20000120

08002f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b090      	sub	sp, #64	; 0x40
 8002f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f42:	f107 0318 	add.w	r3, r7, #24
 8002f46:	2228      	movs	r2, #40	; 0x28
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 faca 	bl	80034e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	609a      	str	r2, [r3, #8]
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f62:	2301      	movs	r3, #1
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f66:	2310      	movs	r3, #16
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002f72:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f78:	f107 0318 	add.w	r3, r7, #24
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fc7b 	bl	8000878 <HAL_RCC_OscConfig>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002f88:	f000 f904 	bl	8003194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f8c:	230f      	movs	r3, #15
 8002f8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f90:	2302      	movs	r3, #2
 8002f92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fb54 	bl	8001654 <HAL_RCC_ClockConfig>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002fb2:	f000 f8ef 	bl	8003194 <Error_Handler>
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3740      	adds	r7, #64	; 0x40
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <MX_SPI1_Init+0x74>)
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <MX_SPI1_Init+0x78>)
 8002fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fca:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <MX_SPI1_Init+0x74>)
 8002fcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fd2:	4b18      	ldr	r3, [pc, #96]	; (8003034 <MX_SPI1_Init+0x74>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002fd8:	4b16      	ldr	r3, [pc, #88]	; (8003034 <MX_SPI1_Init+0x74>)
 8002fda:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002fde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <MX_SPI1_Init+0x74>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fe6:	4b13      	ldr	r3, [pc, #76]	; (8003034 <MX_SPI1_Init+0x74>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <MX_SPI1_Init+0x74>)
 8002fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <MX_SPI1_Init+0x74>)
 8002ff6:	2238      	movs	r2, #56	; 0x38
 8002ff8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <MX_SPI1_Init+0x74>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <MX_SPI1_Init+0x74>)
 8003002:	2200      	movs	r2, #0
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <MX_SPI1_Init+0x74>)
 8003008:	2200      	movs	r2, #0
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <MX_SPI1_Init+0x74>)
 800300e:	2207      	movs	r2, #7
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <MX_SPI1_Init+0x74>)
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <MX_SPI1_Init+0x74>)
 800301a:	2208      	movs	r2, #8
 800301c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800301e:	4805      	ldr	r0, [pc, #20]	; (8003034 <MX_SPI1_Init+0x74>)
 8003020:	f7fe fd4e 	bl	8001ac0 <HAL_SPI_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800302a:	f000 f8b3 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200000bc 	.word	0x200000bc
 8003038:	40013000 	.word	0x40013000

0800303c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <MX_USART2_UART_Init+0x58>)
 8003042:	4a15      	ldr	r2, [pc, #84]	; (8003098 <MX_USART2_UART_Init+0x5c>)
 8003044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <MX_USART2_UART_Init+0x58>)
 8003048:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800304c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <MX_USART2_UART_Init+0x58>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <MX_USART2_UART_Init+0x58>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <MX_USART2_UART_Init+0x58>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <MX_USART2_UART_Init+0x58>)
 8003062:	220c      	movs	r2, #12
 8003064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <MX_USART2_UART_Init+0x58>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <MX_USART2_UART_Init+0x58>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <MX_USART2_UART_Init+0x58>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <MX_USART2_UART_Init+0x58>)
 800307a:	2200      	movs	r2, #0
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800307e:	4805      	ldr	r0, [pc, #20]	; (8003094 <MX_USART2_UART_Init+0x58>)
 8003080:	f7ff fb97 	bl	80027b2 <HAL_UART_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800308a:	f000 f883 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000120 	.word	0x20000120
 8003098:	40004400 	.word	0x40004400

0800309c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b2:	4b35      	ldr	r3, [pc, #212]	; (8003188 <MX_GPIO_Init+0xec>)
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	4a34      	ldr	r2, [pc, #208]	; (8003188 <MX_GPIO_Init+0xec>)
 80030b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030bc:	6153      	str	r3, [r2, #20]
 80030be:	4b32      	ldr	r3, [pc, #200]	; (8003188 <MX_GPIO_Init+0xec>)
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030ca:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <MX_GPIO_Init+0xec>)
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	4a2e      	ldr	r2, [pc, #184]	; (8003188 <MX_GPIO_Init+0xec>)
 80030d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030d4:	6153      	str	r3, [r2, #20]
 80030d6:	4b2c      	ldr	r3, [pc, #176]	; (8003188 <MX_GPIO_Init+0xec>)
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e2:	4b29      	ldr	r3, [pc, #164]	; (8003188 <MX_GPIO_Init+0xec>)
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	4a28      	ldr	r2, [pc, #160]	; (8003188 <MX_GPIO_Init+0xec>)
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ec:	6153      	str	r3, [r2, #20]
 80030ee:	4b26      	ldr	r3, [pc, #152]	; (8003188 <MX_GPIO_Init+0xec>)
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	4b23      	ldr	r3, [pc, #140]	; (8003188 <MX_GPIO_Init+0xec>)
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	4a22      	ldr	r2, [pc, #136]	; (8003188 <MX_GPIO_Init+0xec>)
 8003100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003104:	6153      	str	r3, [r2, #20]
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <MX_GPIO_Init+0xec>)
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD_Pin|ADC_Acel_Pin, GPIO_PIN_RESET);
 8003112:	2200      	movs	r2, #0
 8003114:	f241 0110 	movw	r1, #4112	; 0x1010
 8003118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311c:	f7fd fb94 	bl	8000848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_OXIG_GPIO_Port, EN_OXIG_Pin, GPIO_PIN_RESET);
 8003120:	2200      	movs	r2, #0
 8003122:	2120      	movs	r1, #32
 8003124:	4819      	ldr	r0, [pc, #100]	; (800318c <MX_GPIO_Init+0xf0>)
 8003126:	f7fd fb8f 	bl	8000848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800312a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800312e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <MX_GPIO_Init+0xf4>)
 8003132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4619      	mov	r1, r3
 800313e:	4813      	ldr	r0, [pc, #76]	; (800318c <MX_GPIO_Init+0xf0>)
 8003140:	f7fd fa0c 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_Pin ADC_Acel_Pin */
  GPIO_InitStruct.Pin = LD_Pin|ADC_Acel_Pin;
 8003144:	f241 0310 	movw	r3, #4112	; 0x1010
 8003148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314a:	2301      	movs	r3, #1
 800314c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4619      	mov	r1, r3
 800315c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003160:	f7fd f9fc 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_OXIG_Pin */
  GPIO_InitStruct.Pin = EN_OXIG_Pin;
 8003164:	2320      	movs	r3, #32
 8003166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003168:	2301      	movs	r3, #1
 800316a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_OXIG_GPIO_Port, &GPIO_InitStruct);
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4619      	mov	r1, r3
 800317a:	4804      	ldr	r0, [pc, #16]	; (800318c <MX_GPIO_Init+0xf0>)
 800317c:	f7fd f9ee 	bl	800055c <HAL_GPIO_Init>

}
 8003180:	bf00      	nop
 8003182:	3728      	adds	r7, #40	; 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	48000800 	.word	0x48000800
 8003190:	10210000 	.word	0x10210000

08003194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_MspInit+0x44>)
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <HAL_MspInit+0x44>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6193      	str	r3, [r2, #24]
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_MspInit+0x44>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_MspInit+0x44>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <HAL_MspInit+0x44>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	61d3      	str	r3, [r2, #28]
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_MspInit+0x44>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031da:	2007      	movs	r0, #7
 80031dc:	f7fd f98a 	bl	80004f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000

080031ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a17      	ldr	r2, [pc, #92]	; (8003268 <HAL_SPI_MspInit+0x7c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d128      	bne.n	8003260 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <HAL_SPI_MspInit+0x80>)
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	4a16      	ldr	r2, [pc, #88]	; (800326c <HAL_SPI_MspInit+0x80>)
 8003214:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003218:	6193      	str	r3, [r2, #24]
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <HAL_SPI_MspInit+0x80>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_SPI_MspInit+0x80>)
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	4a10      	ldr	r2, [pc, #64]	; (800326c <HAL_SPI_MspInit+0x80>)
 800322c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003230:	6153      	str	r3, [r2, #20]
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_SPI_MspInit+0x80>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800323e:	23e0      	movs	r3, #224	; 0xe0
 8003240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800324a:	2303      	movs	r3, #3
 800324c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800324e:	2305      	movs	r3, #5
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	4619      	mov	r1, r3
 8003258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800325c:	f7fd f97e 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003260:	bf00      	nop
 8003262:	3728      	adds	r7, #40	; 0x28
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40013000 	.word	0x40013000
 800326c:	40021000 	.word	0x40021000

08003270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <HAL_UART_MspInit+0x7c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d128      	bne.n	80032e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <HAL_UART_MspInit+0x80>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <HAL_UART_MspInit+0x80>)
 8003298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329c:	61d3      	str	r3, [r2, #28]
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <HAL_UART_MspInit+0x80>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_UART_MspInit+0x80>)
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_UART_MspInit+0x80>)
 80032b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b4:	6153      	str	r3, [r2, #20]
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <HAL_UART_MspInit+0x80>)
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032c2:	230c      	movs	r3, #12
 80032c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032d2:	2307      	movs	r3, #7
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d6:	f107 0314 	add.w	r3, r7, #20
 80032da:	4619      	mov	r1, r3
 80032dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e0:	f7fd f93c 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032e4:	bf00      	nop
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40004400 	.word	0x40004400
 80032f0:	40021000 	.word	0x40021000

080032f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003306:	e7fe      	b.n	8003306 <HardFault_Handler+0x4>

08003308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800330c:	e7fe      	b.n	800330c <MemManage_Handler+0x4>

0800330e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800330e:	b480      	push	{r7}
 8003310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003312:	e7fe      	b.n	8003312 <BusFault_Handler+0x4>

08003314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003318:	e7fe      	b.n	8003318 <UsageFault_Handler+0x4>

0800331a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800331a:	b480      	push	{r7}
 800331c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003348:	f7fc ffe0 	bl	800030c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}

08003350 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <_sbrk+0x50>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <_sbrk+0x16>
		heap_end = &end;
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <_sbrk+0x50>)
 8003362:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <_sbrk+0x54>)
 8003364:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <_sbrk+0x50>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <_sbrk+0x50>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	466a      	mov	r2, sp
 8003376:	4293      	cmp	r3, r2
 8003378:	d907      	bls.n	800338a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800337a:	f000 f889 	bl	8003490 <__errno>
 800337e:	4602      	mov	r2, r0
 8003380:	230c      	movs	r3, #12
 8003382:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295
 8003388:	e006      	b.n	8003398 <_sbrk+0x48>
	}

	heap_end += incr;
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <_sbrk+0x50>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	4a03      	ldr	r2, [pc, #12]	; (80033a0 <_sbrk+0x50>)
 8003394:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	2000008c 	.word	0x2000008c
 80033a4:	20000198 	.word	0x20000198

080033a8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <SystemInit+0x84>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	4a1e      	ldr	r2, [pc, #120]	; (800342c <SystemInit+0x84>)
 80033b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80033bc:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <SystemInit+0x88>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <SystemInit+0x88>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <SystemInit+0x88>)
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	4918      	ldr	r1, [pc, #96]	; (8003430 <SystemInit+0x88>)
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <SystemInit+0x8c>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033d4:	4b16      	ldr	r3, [pc, #88]	; (8003430 <SystemInit+0x88>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <SystemInit+0x88>)
 80033da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <SystemInit+0x88>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a11      	ldr	r2, [pc, #68]	; (8003430 <SystemInit+0x88>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <SystemInit+0x88>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <SystemInit+0x88>)
 80033f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80033fa:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <SystemInit+0x88>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <SystemInit+0x88>)
 8003402:	f023 030f 	bic.w	r3, r3, #15
 8003406:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <SystemInit+0x88>)
 800340a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340c:	4908      	ldr	r1, [pc, #32]	; (8003430 <SystemInit+0x88>)
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <SystemInit+0x90>)
 8003410:	4013      	ands	r3, r2
 8003412:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <SystemInit+0x88>)
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800341a:	4b04      	ldr	r3, [pc, #16]	; (800342c <SystemInit+0x84>)
 800341c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003420:	609a      	str	r2, [r3, #8]
#endif
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00
 8003430:	40021000 	.word	0x40021000
 8003434:	f87fc00c 	.word	0xf87fc00c
 8003438:	ff00fccc 	.word	0xff00fccc

0800343c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800343c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003474 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003440:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003442:	e003      	b.n	800344c <LoopCopyDataInit>

08003444 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003446:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003448:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800344a:	3104      	adds	r1, #4

0800344c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800344c:	480b      	ldr	r0, [pc, #44]	; (800347c <LoopForever+0xa>)
	ldr	r3, =_edata
 800344e:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003450:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003452:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003454:	d3f6      	bcc.n	8003444 <CopyDataInit>
	ldr	r2, =_sbss
 8003456:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003458:	e002      	b.n	8003460 <LoopFillZerobss>

0800345a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800345a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800345c:	f842 3b04 	str.w	r3, [r2], #4

08003460 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <LoopForever+0x16>)
	cmp	r2, r3
 8003462:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003464:	d3f9      	bcc.n	800345a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003466:	f7ff ff9f 	bl	80033a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800346a:	f000 f817 	bl	800349c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800346e:	f7ff fd1b 	bl	8002ea8 <main>

08003472 <LoopForever>:

LoopForever:
    b LoopForever
 8003472:	e7fe      	b.n	8003472 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003474:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003478:	08003da0 	.word	0x08003da0
	ldr	r0, =_sdata
 800347c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003480:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003484:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003488:	20000194 	.word	0x20000194

0800348c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800348c:	e7fe      	b.n	800348c <ADC1_2_IRQHandler>
	...

08003490 <__errno>:
 8003490:	4b01      	ldr	r3, [pc, #4]	; (8003498 <__errno+0x8>)
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	2000000c 	.word	0x2000000c

0800349c <__libc_init_array>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	4e0d      	ldr	r6, [pc, #52]	; (80034d4 <__libc_init_array+0x38>)
 80034a0:	4c0d      	ldr	r4, [pc, #52]	; (80034d8 <__libc_init_array+0x3c>)
 80034a2:	1ba4      	subs	r4, r4, r6
 80034a4:	10a4      	asrs	r4, r4, #2
 80034a6:	2500      	movs	r5, #0
 80034a8:	42a5      	cmp	r5, r4
 80034aa:	d109      	bne.n	80034c0 <__libc_init_array+0x24>
 80034ac:	4e0b      	ldr	r6, [pc, #44]	; (80034dc <__libc_init_array+0x40>)
 80034ae:	4c0c      	ldr	r4, [pc, #48]	; (80034e0 <__libc_init_array+0x44>)
 80034b0:	f000 fc26 	bl	8003d00 <_init>
 80034b4:	1ba4      	subs	r4, r4, r6
 80034b6:	10a4      	asrs	r4, r4, #2
 80034b8:	2500      	movs	r5, #0
 80034ba:	42a5      	cmp	r5, r4
 80034bc:	d105      	bne.n	80034ca <__libc_init_array+0x2e>
 80034be:	bd70      	pop	{r4, r5, r6, pc}
 80034c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034c4:	4798      	blx	r3
 80034c6:	3501      	adds	r5, #1
 80034c8:	e7ee      	b.n	80034a8 <__libc_init_array+0xc>
 80034ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ce:	4798      	blx	r3
 80034d0:	3501      	adds	r5, #1
 80034d2:	e7f2      	b.n	80034ba <__libc_init_array+0x1e>
 80034d4:	08003d98 	.word	0x08003d98
 80034d8:	08003d98 	.word	0x08003d98
 80034dc:	08003d98 	.word	0x08003d98
 80034e0:	08003d9c 	.word	0x08003d9c

080034e4 <memset>:
 80034e4:	4402      	add	r2, r0
 80034e6:	4603      	mov	r3, r0
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d100      	bne.n	80034ee <memset+0xa>
 80034ec:	4770      	bx	lr
 80034ee:	f803 1b01 	strb.w	r1, [r3], #1
 80034f2:	e7f9      	b.n	80034e8 <memset+0x4>

080034f4 <siprintf>:
 80034f4:	b40e      	push	{r1, r2, r3}
 80034f6:	b500      	push	{lr}
 80034f8:	b09c      	sub	sp, #112	; 0x70
 80034fa:	ab1d      	add	r3, sp, #116	; 0x74
 80034fc:	9002      	str	r0, [sp, #8]
 80034fe:	9006      	str	r0, [sp, #24]
 8003500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003504:	4809      	ldr	r0, [pc, #36]	; (800352c <siprintf+0x38>)
 8003506:	9107      	str	r1, [sp, #28]
 8003508:	9104      	str	r1, [sp, #16]
 800350a:	4909      	ldr	r1, [pc, #36]	; (8003530 <siprintf+0x3c>)
 800350c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003510:	9105      	str	r1, [sp, #20]
 8003512:	6800      	ldr	r0, [r0, #0]
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	a902      	add	r1, sp, #8
 8003518:	f000 f866 	bl	80035e8 <_svfiprintf_r>
 800351c:	9b02      	ldr	r3, [sp, #8]
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	b01c      	add	sp, #112	; 0x70
 8003524:	f85d eb04 	ldr.w	lr, [sp], #4
 8003528:	b003      	add	sp, #12
 800352a:	4770      	bx	lr
 800352c:	2000000c 	.word	0x2000000c
 8003530:	ffff0208 	.word	0xffff0208

08003534 <__ssputs_r>:
 8003534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	688e      	ldr	r6, [r1, #8]
 800353a:	429e      	cmp	r6, r3
 800353c:	4682      	mov	sl, r0
 800353e:	460c      	mov	r4, r1
 8003540:	4690      	mov	r8, r2
 8003542:	4699      	mov	r9, r3
 8003544:	d837      	bhi.n	80035b6 <__ssputs_r+0x82>
 8003546:	898a      	ldrh	r2, [r1, #12]
 8003548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800354c:	d031      	beq.n	80035b2 <__ssputs_r+0x7e>
 800354e:	6825      	ldr	r5, [r4, #0]
 8003550:	6909      	ldr	r1, [r1, #16]
 8003552:	1a6f      	subs	r7, r5, r1
 8003554:	6965      	ldr	r5, [r4, #20]
 8003556:	2302      	movs	r3, #2
 8003558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800355c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003560:	f109 0301 	add.w	r3, r9, #1
 8003564:	443b      	add	r3, r7
 8003566:	429d      	cmp	r5, r3
 8003568:	bf38      	it	cc
 800356a:	461d      	movcc	r5, r3
 800356c:	0553      	lsls	r3, r2, #21
 800356e:	d530      	bpl.n	80035d2 <__ssputs_r+0x9e>
 8003570:	4629      	mov	r1, r5
 8003572:	f000 fb2b 	bl	8003bcc <_malloc_r>
 8003576:	4606      	mov	r6, r0
 8003578:	b950      	cbnz	r0, 8003590 <__ssputs_r+0x5c>
 800357a:	230c      	movs	r3, #12
 800357c:	f8ca 3000 	str.w	r3, [sl]
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003590:	463a      	mov	r2, r7
 8003592:	6921      	ldr	r1, [r4, #16]
 8003594:	f000 faa8 	bl	8003ae8 <memcpy>
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800359e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a2:	81a3      	strh	r3, [r4, #12]
 80035a4:	6126      	str	r6, [r4, #16]
 80035a6:	6165      	str	r5, [r4, #20]
 80035a8:	443e      	add	r6, r7
 80035aa:	1bed      	subs	r5, r5, r7
 80035ac:	6026      	str	r6, [r4, #0]
 80035ae:	60a5      	str	r5, [r4, #8]
 80035b0:	464e      	mov	r6, r9
 80035b2:	454e      	cmp	r6, r9
 80035b4:	d900      	bls.n	80035b8 <__ssputs_r+0x84>
 80035b6:	464e      	mov	r6, r9
 80035b8:	4632      	mov	r2, r6
 80035ba:	4641      	mov	r1, r8
 80035bc:	6820      	ldr	r0, [r4, #0]
 80035be:	f000 fa9e 	bl	8003afe <memmove>
 80035c2:	68a3      	ldr	r3, [r4, #8]
 80035c4:	1b9b      	subs	r3, r3, r6
 80035c6:	60a3      	str	r3, [r4, #8]
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	441e      	add	r6, r3
 80035cc:	6026      	str	r6, [r4, #0]
 80035ce:	2000      	movs	r0, #0
 80035d0:	e7dc      	b.n	800358c <__ssputs_r+0x58>
 80035d2:	462a      	mov	r2, r5
 80035d4:	f000 fb54 	bl	8003c80 <_realloc_r>
 80035d8:	4606      	mov	r6, r0
 80035da:	2800      	cmp	r0, #0
 80035dc:	d1e2      	bne.n	80035a4 <__ssputs_r+0x70>
 80035de:	6921      	ldr	r1, [r4, #16]
 80035e0:	4650      	mov	r0, sl
 80035e2:	f000 faa5 	bl	8003b30 <_free_r>
 80035e6:	e7c8      	b.n	800357a <__ssputs_r+0x46>

080035e8 <_svfiprintf_r>:
 80035e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ec:	461d      	mov	r5, r3
 80035ee:	898b      	ldrh	r3, [r1, #12]
 80035f0:	061f      	lsls	r7, r3, #24
 80035f2:	b09d      	sub	sp, #116	; 0x74
 80035f4:	4680      	mov	r8, r0
 80035f6:	460c      	mov	r4, r1
 80035f8:	4616      	mov	r6, r2
 80035fa:	d50f      	bpl.n	800361c <_svfiprintf_r+0x34>
 80035fc:	690b      	ldr	r3, [r1, #16]
 80035fe:	b96b      	cbnz	r3, 800361c <_svfiprintf_r+0x34>
 8003600:	2140      	movs	r1, #64	; 0x40
 8003602:	f000 fae3 	bl	8003bcc <_malloc_r>
 8003606:	6020      	str	r0, [r4, #0]
 8003608:	6120      	str	r0, [r4, #16]
 800360a:	b928      	cbnz	r0, 8003618 <_svfiprintf_r+0x30>
 800360c:	230c      	movs	r3, #12
 800360e:	f8c8 3000 	str.w	r3, [r8]
 8003612:	f04f 30ff 	mov.w	r0, #4294967295
 8003616:	e0c8      	b.n	80037aa <_svfiprintf_r+0x1c2>
 8003618:	2340      	movs	r3, #64	; 0x40
 800361a:	6163      	str	r3, [r4, #20]
 800361c:	2300      	movs	r3, #0
 800361e:	9309      	str	r3, [sp, #36]	; 0x24
 8003620:	2320      	movs	r3, #32
 8003622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003626:	2330      	movs	r3, #48	; 0x30
 8003628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800362c:	9503      	str	r5, [sp, #12]
 800362e:	f04f 0b01 	mov.w	fp, #1
 8003632:	4637      	mov	r7, r6
 8003634:	463d      	mov	r5, r7
 8003636:	f815 3b01 	ldrb.w	r3, [r5], #1
 800363a:	b10b      	cbz	r3, 8003640 <_svfiprintf_r+0x58>
 800363c:	2b25      	cmp	r3, #37	; 0x25
 800363e:	d13e      	bne.n	80036be <_svfiprintf_r+0xd6>
 8003640:	ebb7 0a06 	subs.w	sl, r7, r6
 8003644:	d00b      	beq.n	800365e <_svfiprintf_r+0x76>
 8003646:	4653      	mov	r3, sl
 8003648:	4632      	mov	r2, r6
 800364a:	4621      	mov	r1, r4
 800364c:	4640      	mov	r0, r8
 800364e:	f7ff ff71 	bl	8003534 <__ssputs_r>
 8003652:	3001      	adds	r0, #1
 8003654:	f000 80a4 	beq.w	80037a0 <_svfiprintf_r+0x1b8>
 8003658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800365a:	4453      	add	r3, sl
 800365c:	9309      	str	r3, [sp, #36]	; 0x24
 800365e:	783b      	ldrb	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 809d 	beq.w	80037a0 <_svfiprintf_r+0x1b8>
 8003666:	2300      	movs	r3, #0
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003670:	9304      	str	r3, [sp, #16]
 8003672:	9307      	str	r3, [sp, #28]
 8003674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003678:	931a      	str	r3, [sp, #104]	; 0x68
 800367a:	462f      	mov	r7, r5
 800367c:	2205      	movs	r2, #5
 800367e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003682:	4850      	ldr	r0, [pc, #320]	; (80037c4 <_svfiprintf_r+0x1dc>)
 8003684:	f7fc fdac 	bl	80001e0 <memchr>
 8003688:	9b04      	ldr	r3, [sp, #16]
 800368a:	b9d0      	cbnz	r0, 80036c2 <_svfiprintf_r+0xda>
 800368c:	06d9      	lsls	r1, r3, #27
 800368e:	bf44      	itt	mi
 8003690:	2220      	movmi	r2, #32
 8003692:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003696:	071a      	lsls	r2, r3, #28
 8003698:	bf44      	itt	mi
 800369a:	222b      	movmi	r2, #43	; 0x2b
 800369c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036a0:	782a      	ldrb	r2, [r5, #0]
 80036a2:	2a2a      	cmp	r2, #42	; 0x2a
 80036a4:	d015      	beq.n	80036d2 <_svfiprintf_r+0xea>
 80036a6:	9a07      	ldr	r2, [sp, #28]
 80036a8:	462f      	mov	r7, r5
 80036aa:	2000      	movs	r0, #0
 80036ac:	250a      	movs	r5, #10
 80036ae:	4639      	mov	r1, r7
 80036b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036b4:	3b30      	subs	r3, #48	; 0x30
 80036b6:	2b09      	cmp	r3, #9
 80036b8:	d94d      	bls.n	8003756 <_svfiprintf_r+0x16e>
 80036ba:	b1b8      	cbz	r0, 80036ec <_svfiprintf_r+0x104>
 80036bc:	e00f      	b.n	80036de <_svfiprintf_r+0xf6>
 80036be:	462f      	mov	r7, r5
 80036c0:	e7b8      	b.n	8003634 <_svfiprintf_r+0x4c>
 80036c2:	4a40      	ldr	r2, [pc, #256]	; (80037c4 <_svfiprintf_r+0x1dc>)
 80036c4:	1a80      	subs	r0, r0, r2
 80036c6:	fa0b f000 	lsl.w	r0, fp, r0
 80036ca:	4318      	orrs	r0, r3
 80036cc:	9004      	str	r0, [sp, #16]
 80036ce:	463d      	mov	r5, r7
 80036d0:	e7d3      	b.n	800367a <_svfiprintf_r+0x92>
 80036d2:	9a03      	ldr	r2, [sp, #12]
 80036d4:	1d11      	adds	r1, r2, #4
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	9103      	str	r1, [sp, #12]
 80036da:	2a00      	cmp	r2, #0
 80036dc:	db01      	blt.n	80036e2 <_svfiprintf_r+0xfa>
 80036de:	9207      	str	r2, [sp, #28]
 80036e0:	e004      	b.n	80036ec <_svfiprintf_r+0x104>
 80036e2:	4252      	negs	r2, r2
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	9207      	str	r2, [sp, #28]
 80036ea:	9304      	str	r3, [sp, #16]
 80036ec:	783b      	ldrb	r3, [r7, #0]
 80036ee:	2b2e      	cmp	r3, #46	; 0x2e
 80036f0:	d10c      	bne.n	800370c <_svfiprintf_r+0x124>
 80036f2:	787b      	ldrb	r3, [r7, #1]
 80036f4:	2b2a      	cmp	r3, #42	; 0x2a
 80036f6:	d133      	bne.n	8003760 <_svfiprintf_r+0x178>
 80036f8:	9b03      	ldr	r3, [sp, #12]
 80036fa:	1d1a      	adds	r2, r3, #4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	9203      	str	r2, [sp, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	bfb8      	it	lt
 8003704:	f04f 33ff 	movlt.w	r3, #4294967295
 8003708:	3702      	adds	r7, #2
 800370a:	9305      	str	r3, [sp, #20]
 800370c:	4d2e      	ldr	r5, [pc, #184]	; (80037c8 <_svfiprintf_r+0x1e0>)
 800370e:	7839      	ldrb	r1, [r7, #0]
 8003710:	2203      	movs	r2, #3
 8003712:	4628      	mov	r0, r5
 8003714:	f7fc fd64 	bl	80001e0 <memchr>
 8003718:	b138      	cbz	r0, 800372a <_svfiprintf_r+0x142>
 800371a:	2340      	movs	r3, #64	; 0x40
 800371c:	1b40      	subs	r0, r0, r5
 800371e:	fa03 f000 	lsl.w	r0, r3, r0
 8003722:	9b04      	ldr	r3, [sp, #16]
 8003724:	4303      	orrs	r3, r0
 8003726:	3701      	adds	r7, #1
 8003728:	9304      	str	r3, [sp, #16]
 800372a:	7839      	ldrb	r1, [r7, #0]
 800372c:	4827      	ldr	r0, [pc, #156]	; (80037cc <_svfiprintf_r+0x1e4>)
 800372e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003732:	2206      	movs	r2, #6
 8003734:	1c7e      	adds	r6, r7, #1
 8003736:	f7fc fd53 	bl	80001e0 <memchr>
 800373a:	2800      	cmp	r0, #0
 800373c:	d038      	beq.n	80037b0 <_svfiprintf_r+0x1c8>
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <_svfiprintf_r+0x1e8>)
 8003740:	bb13      	cbnz	r3, 8003788 <_svfiprintf_r+0x1a0>
 8003742:	9b03      	ldr	r3, [sp, #12]
 8003744:	3307      	adds	r3, #7
 8003746:	f023 0307 	bic.w	r3, r3, #7
 800374a:	3308      	adds	r3, #8
 800374c:	9303      	str	r3, [sp, #12]
 800374e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003750:	444b      	add	r3, r9
 8003752:	9309      	str	r3, [sp, #36]	; 0x24
 8003754:	e76d      	b.n	8003632 <_svfiprintf_r+0x4a>
 8003756:	fb05 3202 	mla	r2, r5, r2, r3
 800375a:	2001      	movs	r0, #1
 800375c:	460f      	mov	r7, r1
 800375e:	e7a6      	b.n	80036ae <_svfiprintf_r+0xc6>
 8003760:	2300      	movs	r3, #0
 8003762:	3701      	adds	r7, #1
 8003764:	9305      	str	r3, [sp, #20]
 8003766:	4619      	mov	r1, r3
 8003768:	250a      	movs	r5, #10
 800376a:	4638      	mov	r0, r7
 800376c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003770:	3a30      	subs	r2, #48	; 0x30
 8003772:	2a09      	cmp	r2, #9
 8003774:	d903      	bls.n	800377e <_svfiprintf_r+0x196>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0c8      	beq.n	800370c <_svfiprintf_r+0x124>
 800377a:	9105      	str	r1, [sp, #20]
 800377c:	e7c6      	b.n	800370c <_svfiprintf_r+0x124>
 800377e:	fb05 2101 	mla	r1, r5, r1, r2
 8003782:	2301      	movs	r3, #1
 8003784:	4607      	mov	r7, r0
 8003786:	e7f0      	b.n	800376a <_svfiprintf_r+0x182>
 8003788:	ab03      	add	r3, sp, #12
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	4622      	mov	r2, r4
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <_svfiprintf_r+0x1ec>)
 8003790:	a904      	add	r1, sp, #16
 8003792:	4640      	mov	r0, r8
 8003794:	f3af 8000 	nop.w
 8003798:	f1b0 3fff 	cmp.w	r0, #4294967295
 800379c:	4681      	mov	r9, r0
 800379e:	d1d6      	bne.n	800374e <_svfiprintf_r+0x166>
 80037a0:	89a3      	ldrh	r3, [r4, #12]
 80037a2:	065b      	lsls	r3, r3, #25
 80037a4:	f53f af35 	bmi.w	8003612 <_svfiprintf_r+0x2a>
 80037a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037aa:	b01d      	add	sp, #116	; 0x74
 80037ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b0:	ab03      	add	r3, sp, #12
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4622      	mov	r2, r4
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <_svfiprintf_r+0x1ec>)
 80037b8:	a904      	add	r1, sp, #16
 80037ba:	4640      	mov	r0, r8
 80037bc:	f000 f882 	bl	80038c4 <_printf_i>
 80037c0:	e7ea      	b.n	8003798 <_svfiprintf_r+0x1b0>
 80037c2:	bf00      	nop
 80037c4:	08003d64 	.word	0x08003d64
 80037c8:	08003d6a 	.word	0x08003d6a
 80037cc:	08003d6e 	.word	0x08003d6e
 80037d0:	00000000 	.word	0x00000000
 80037d4:	08003535 	.word	0x08003535

080037d8 <_printf_common>:
 80037d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037dc:	4691      	mov	r9, r2
 80037de:	461f      	mov	r7, r3
 80037e0:	688a      	ldr	r2, [r1, #8]
 80037e2:	690b      	ldr	r3, [r1, #16]
 80037e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037e8:	4293      	cmp	r3, r2
 80037ea:	bfb8      	it	lt
 80037ec:	4613      	movlt	r3, r2
 80037ee:	f8c9 3000 	str.w	r3, [r9]
 80037f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037f6:	4606      	mov	r6, r0
 80037f8:	460c      	mov	r4, r1
 80037fa:	b112      	cbz	r2, 8003802 <_printf_common+0x2a>
 80037fc:	3301      	adds	r3, #1
 80037fe:	f8c9 3000 	str.w	r3, [r9]
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	0699      	lsls	r1, r3, #26
 8003806:	bf42      	ittt	mi
 8003808:	f8d9 3000 	ldrmi.w	r3, [r9]
 800380c:	3302      	addmi	r3, #2
 800380e:	f8c9 3000 	strmi.w	r3, [r9]
 8003812:	6825      	ldr	r5, [r4, #0]
 8003814:	f015 0506 	ands.w	r5, r5, #6
 8003818:	d107      	bne.n	800382a <_printf_common+0x52>
 800381a:	f104 0a19 	add.w	sl, r4, #25
 800381e:	68e3      	ldr	r3, [r4, #12]
 8003820:	f8d9 2000 	ldr.w	r2, [r9]
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	42ab      	cmp	r3, r5
 8003828:	dc28      	bgt.n	800387c <_printf_common+0xa4>
 800382a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	3300      	adds	r3, #0
 8003832:	bf18      	it	ne
 8003834:	2301      	movne	r3, #1
 8003836:	0692      	lsls	r2, r2, #26
 8003838:	d42d      	bmi.n	8003896 <_printf_common+0xbe>
 800383a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800383e:	4639      	mov	r1, r7
 8003840:	4630      	mov	r0, r6
 8003842:	47c0      	blx	r8
 8003844:	3001      	adds	r0, #1
 8003846:	d020      	beq.n	800388a <_printf_common+0xb2>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	68e5      	ldr	r5, [r4, #12]
 800384c:	f8d9 2000 	ldr.w	r2, [r9]
 8003850:	f003 0306 	and.w	r3, r3, #6
 8003854:	2b04      	cmp	r3, #4
 8003856:	bf08      	it	eq
 8003858:	1aad      	subeq	r5, r5, r2
 800385a:	68a3      	ldr	r3, [r4, #8]
 800385c:	6922      	ldr	r2, [r4, #16]
 800385e:	bf0c      	ite	eq
 8003860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003864:	2500      	movne	r5, #0
 8003866:	4293      	cmp	r3, r2
 8003868:	bfc4      	itt	gt
 800386a:	1a9b      	subgt	r3, r3, r2
 800386c:	18ed      	addgt	r5, r5, r3
 800386e:	f04f 0900 	mov.w	r9, #0
 8003872:	341a      	adds	r4, #26
 8003874:	454d      	cmp	r5, r9
 8003876:	d11a      	bne.n	80038ae <_printf_common+0xd6>
 8003878:	2000      	movs	r0, #0
 800387a:	e008      	b.n	800388e <_printf_common+0xb6>
 800387c:	2301      	movs	r3, #1
 800387e:	4652      	mov	r2, sl
 8003880:	4639      	mov	r1, r7
 8003882:	4630      	mov	r0, r6
 8003884:	47c0      	blx	r8
 8003886:	3001      	adds	r0, #1
 8003888:	d103      	bne.n	8003892 <_printf_common+0xba>
 800388a:	f04f 30ff 	mov.w	r0, #4294967295
 800388e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003892:	3501      	adds	r5, #1
 8003894:	e7c3      	b.n	800381e <_printf_common+0x46>
 8003896:	18e1      	adds	r1, r4, r3
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	2030      	movs	r0, #48	; 0x30
 800389c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038a0:	4422      	add	r2, r4
 80038a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038aa:	3302      	adds	r3, #2
 80038ac:	e7c5      	b.n	800383a <_printf_common+0x62>
 80038ae:	2301      	movs	r3, #1
 80038b0:	4622      	mov	r2, r4
 80038b2:	4639      	mov	r1, r7
 80038b4:	4630      	mov	r0, r6
 80038b6:	47c0      	blx	r8
 80038b8:	3001      	adds	r0, #1
 80038ba:	d0e6      	beq.n	800388a <_printf_common+0xb2>
 80038bc:	f109 0901 	add.w	r9, r9, #1
 80038c0:	e7d8      	b.n	8003874 <_printf_common+0x9c>
	...

080038c4 <_printf_i>:
 80038c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80038cc:	460c      	mov	r4, r1
 80038ce:	7e09      	ldrb	r1, [r1, #24]
 80038d0:	b085      	sub	sp, #20
 80038d2:	296e      	cmp	r1, #110	; 0x6e
 80038d4:	4617      	mov	r7, r2
 80038d6:	4606      	mov	r6, r0
 80038d8:	4698      	mov	r8, r3
 80038da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038dc:	f000 80b3 	beq.w	8003a46 <_printf_i+0x182>
 80038e0:	d822      	bhi.n	8003928 <_printf_i+0x64>
 80038e2:	2963      	cmp	r1, #99	; 0x63
 80038e4:	d036      	beq.n	8003954 <_printf_i+0x90>
 80038e6:	d80a      	bhi.n	80038fe <_printf_i+0x3a>
 80038e8:	2900      	cmp	r1, #0
 80038ea:	f000 80b9 	beq.w	8003a60 <_printf_i+0x19c>
 80038ee:	2958      	cmp	r1, #88	; 0x58
 80038f0:	f000 8083 	beq.w	80039fa <_printf_i+0x136>
 80038f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038fc:	e032      	b.n	8003964 <_printf_i+0xa0>
 80038fe:	2964      	cmp	r1, #100	; 0x64
 8003900:	d001      	beq.n	8003906 <_printf_i+0x42>
 8003902:	2969      	cmp	r1, #105	; 0x69
 8003904:	d1f6      	bne.n	80038f4 <_printf_i+0x30>
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	6813      	ldr	r3, [r2, #0]
 800390a:	0605      	lsls	r5, r0, #24
 800390c:	f103 0104 	add.w	r1, r3, #4
 8003910:	d52a      	bpl.n	8003968 <_printf_i+0xa4>
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6011      	str	r1, [r2, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	da03      	bge.n	8003922 <_printf_i+0x5e>
 800391a:	222d      	movs	r2, #45	; 0x2d
 800391c:	425b      	negs	r3, r3
 800391e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003922:	486f      	ldr	r0, [pc, #444]	; (8003ae0 <_printf_i+0x21c>)
 8003924:	220a      	movs	r2, #10
 8003926:	e039      	b.n	800399c <_printf_i+0xd8>
 8003928:	2973      	cmp	r1, #115	; 0x73
 800392a:	f000 809d 	beq.w	8003a68 <_printf_i+0x1a4>
 800392e:	d808      	bhi.n	8003942 <_printf_i+0x7e>
 8003930:	296f      	cmp	r1, #111	; 0x6f
 8003932:	d020      	beq.n	8003976 <_printf_i+0xb2>
 8003934:	2970      	cmp	r1, #112	; 0x70
 8003936:	d1dd      	bne.n	80038f4 <_printf_i+0x30>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	f043 0320 	orr.w	r3, r3, #32
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	e003      	b.n	800394a <_printf_i+0x86>
 8003942:	2975      	cmp	r1, #117	; 0x75
 8003944:	d017      	beq.n	8003976 <_printf_i+0xb2>
 8003946:	2978      	cmp	r1, #120	; 0x78
 8003948:	d1d4      	bne.n	80038f4 <_printf_i+0x30>
 800394a:	2378      	movs	r3, #120	; 0x78
 800394c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003950:	4864      	ldr	r0, [pc, #400]	; (8003ae4 <_printf_i+0x220>)
 8003952:	e055      	b.n	8003a00 <_printf_i+0x13c>
 8003954:	6813      	ldr	r3, [r2, #0]
 8003956:	1d19      	adds	r1, r3, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6011      	str	r1, [r2, #0]
 800395c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003964:	2301      	movs	r3, #1
 8003966:	e08c      	b.n	8003a82 <_printf_i+0x1be>
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6011      	str	r1, [r2, #0]
 800396c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003970:	bf18      	it	ne
 8003972:	b21b      	sxthne	r3, r3
 8003974:	e7cf      	b.n	8003916 <_printf_i+0x52>
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	6825      	ldr	r5, [r4, #0]
 800397a:	1d18      	adds	r0, r3, #4
 800397c:	6010      	str	r0, [r2, #0]
 800397e:	0628      	lsls	r0, r5, #24
 8003980:	d501      	bpl.n	8003986 <_printf_i+0xc2>
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	e002      	b.n	800398c <_printf_i+0xc8>
 8003986:	0668      	lsls	r0, r5, #25
 8003988:	d5fb      	bpl.n	8003982 <_printf_i+0xbe>
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	4854      	ldr	r0, [pc, #336]	; (8003ae0 <_printf_i+0x21c>)
 800398e:	296f      	cmp	r1, #111	; 0x6f
 8003990:	bf14      	ite	ne
 8003992:	220a      	movne	r2, #10
 8003994:	2208      	moveq	r2, #8
 8003996:	2100      	movs	r1, #0
 8003998:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800399c:	6865      	ldr	r5, [r4, #4]
 800399e:	60a5      	str	r5, [r4, #8]
 80039a0:	2d00      	cmp	r5, #0
 80039a2:	f2c0 8095 	blt.w	8003ad0 <_printf_i+0x20c>
 80039a6:	6821      	ldr	r1, [r4, #0]
 80039a8:	f021 0104 	bic.w	r1, r1, #4
 80039ac:	6021      	str	r1, [r4, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d13d      	bne.n	8003a2e <_printf_i+0x16a>
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	f040 808e 	bne.w	8003ad4 <_printf_i+0x210>
 80039b8:	4665      	mov	r5, ip
 80039ba:	2a08      	cmp	r2, #8
 80039bc:	d10b      	bne.n	80039d6 <_printf_i+0x112>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	07db      	lsls	r3, r3, #31
 80039c2:	d508      	bpl.n	80039d6 <_printf_i+0x112>
 80039c4:	6923      	ldr	r3, [r4, #16]
 80039c6:	6862      	ldr	r2, [r4, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	bfde      	ittt	le
 80039cc:	2330      	movle	r3, #48	; 0x30
 80039ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039d6:	ebac 0305 	sub.w	r3, ip, r5
 80039da:	6123      	str	r3, [r4, #16]
 80039dc:	f8cd 8000 	str.w	r8, [sp]
 80039e0:	463b      	mov	r3, r7
 80039e2:	aa03      	add	r2, sp, #12
 80039e4:	4621      	mov	r1, r4
 80039e6:	4630      	mov	r0, r6
 80039e8:	f7ff fef6 	bl	80037d8 <_printf_common>
 80039ec:	3001      	adds	r0, #1
 80039ee:	d14d      	bne.n	8003a8c <_printf_i+0x1c8>
 80039f0:	f04f 30ff 	mov.w	r0, #4294967295
 80039f4:	b005      	add	sp, #20
 80039f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039fa:	4839      	ldr	r0, [pc, #228]	; (8003ae0 <_printf_i+0x21c>)
 80039fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	6821      	ldr	r1, [r4, #0]
 8003a04:	1d1d      	adds	r5, r3, #4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6015      	str	r5, [r2, #0]
 8003a0a:	060a      	lsls	r2, r1, #24
 8003a0c:	d50b      	bpl.n	8003a26 <_printf_i+0x162>
 8003a0e:	07ca      	lsls	r2, r1, #31
 8003a10:	bf44      	itt	mi
 8003a12:	f041 0120 	orrmi.w	r1, r1, #32
 8003a16:	6021      	strmi	r1, [r4, #0]
 8003a18:	b91b      	cbnz	r3, 8003a22 <_printf_i+0x15e>
 8003a1a:	6822      	ldr	r2, [r4, #0]
 8003a1c:	f022 0220 	bic.w	r2, r2, #32
 8003a20:	6022      	str	r2, [r4, #0]
 8003a22:	2210      	movs	r2, #16
 8003a24:	e7b7      	b.n	8003996 <_printf_i+0xd2>
 8003a26:	064d      	lsls	r5, r1, #25
 8003a28:	bf48      	it	mi
 8003a2a:	b29b      	uxthmi	r3, r3
 8003a2c:	e7ef      	b.n	8003a0e <_printf_i+0x14a>
 8003a2e:	4665      	mov	r5, ip
 8003a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a34:	fb02 3311 	mls	r3, r2, r1, r3
 8003a38:	5cc3      	ldrb	r3, [r0, r3]
 8003a3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a3e:	460b      	mov	r3, r1
 8003a40:	2900      	cmp	r1, #0
 8003a42:	d1f5      	bne.n	8003a30 <_printf_i+0x16c>
 8003a44:	e7b9      	b.n	80039ba <_printf_i+0xf6>
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	6825      	ldr	r5, [r4, #0]
 8003a4a:	6961      	ldr	r1, [r4, #20]
 8003a4c:	1d18      	adds	r0, r3, #4
 8003a4e:	6010      	str	r0, [r2, #0]
 8003a50:	0628      	lsls	r0, r5, #24
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	d501      	bpl.n	8003a5a <_printf_i+0x196>
 8003a56:	6019      	str	r1, [r3, #0]
 8003a58:	e002      	b.n	8003a60 <_printf_i+0x19c>
 8003a5a:	066a      	lsls	r2, r5, #25
 8003a5c:	d5fb      	bpl.n	8003a56 <_printf_i+0x192>
 8003a5e:	8019      	strh	r1, [r3, #0]
 8003a60:	2300      	movs	r3, #0
 8003a62:	6123      	str	r3, [r4, #16]
 8003a64:	4665      	mov	r5, ip
 8003a66:	e7b9      	b.n	80039dc <_printf_i+0x118>
 8003a68:	6813      	ldr	r3, [r2, #0]
 8003a6a:	1d19      	adds	r1, r3, #4
 8003a6c:	6011      	str	r1, [r2, #0]
 8003a6e:	681d      	ldr	r5, [r3, #0]
 8003a70:	6862      	ldr	r2, [r4, #4]
 8003a72:	2100      	movs	r1, #0
 8003a74:	4628      	mov	r0, r5
 8003a76:	f7fc fbb3 	bl	80001e0 <memchr>
 8003a7a:	b108      	cbz	r0, 8003a80 <_printf_i+0x1bc>
 8003a7c:	1b40      	subs	r0, r0, r5
 8003a7e:	6060      	str	r0, [r4, #4]
 8003a80:	6863      	ldr	r3, [r4, #4]
 8003a82:	6123      	str	r3, [r4, #16]
 8003a84:	2300      	movs	r3, #0
 8003a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a8a:	e7a7      	b.n	80039dc <_printf_i+0x118>
 8003a8c:	6923      	ldr	r3, [r4, #16]
 8003a8e:	462a      	mov	r2, r5
 8003a90:	4639      	mov	r1, r7
 8003a92:	4630      	mov	r0, r6
 8003a94:	47c0      	blx	r8
 8003a96:	3001      	adds	r0, #1
 8003a98:	d0aa      	beq.n	80039f0 <_printf_i+0x12c>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	079b      	lsls	r3, r3, #30
 8003a9e:	d413      	bmi.n	8003ac8 <_printf_i+0x204>
 8003aa0:	68e0      	ldr	r0, [r4, #12]
 8003aa2:	9b03      	ldr	r3, [sp, #12]
 8003aa4:	4298      	cmp	r0, r3
 8003aa6:	bfb8      	it	lt
 8003aa8:	4618      	movlt	r0, r3
 8003aaa:	e7a3      	b.n	80039f4 <_printf_i+0x130>
 8003aac:	2301      	movs	r3, #1
 8003aae:	464a      	mov	r2, r9
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	47c0      	blx	r8
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d09a      	beq.n	80039f0 <_printf_i+0x12c>
 8003aba:	3501      	adds	r5, #1
 8003abc:	68e3      	ldr	r3, [r4, #12]
 8003abe:	9a03      	ldr	r2, [sp, #12]
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	42ab      	cmp	r3, r5
 8003ac4:	dcf2      	bgt.n	8003aac <_printf_i+0x1e8>
 8003ac6:	e7eb      	b.n	8003aa0 <_printf_i+0x1dc>
 8003ac8:	2500      	movs	r5, #0
 8003aca:	f104 0919 	add.w	r9, r4, #25
 8003ace:	e7f5      	b.n	8003abc <_printf_i+0x1f8>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ac      	bne.n	8003a2e <_printf_i+0x16a>
 8003ad4:	7803      	ldrb	r3, [r0, #0]
 8003ad6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ada:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ade:	e76c      	b.n	80039ba <_printf_i+0xf6>
 8003ae0:	08003d75 	.word	0x08003d75
 8003ae4:	08003d86 	.word	0x08003d86

08003ae8 <memcpy>:
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	1e43      	subs	r3, r0, #1
 8003aec:	440a      	add	r2, r1
 8003aee:	4291      	cmp	r1, r2
 8003af0:	d100      	bne.n	8003af4 <memcpy+0xc>
 8003af2:	bd10      	pop	{r4, pc}
 8003af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003afc:	e7f7      	b.n	8003aee <memcpy+0x6>

08003afe <memmove>:
 8003afe:	4288      	cmp	r0, r1
 8003b00:	b510      	push	{r4, lr}
 8003b02:	eb01 0302 	add.w	r3, r1, r2
 8003b06:	d807      	bhi.n	8003b18 <memmove+0x1a>
 8003b08:	1e42      	subs	r2, r0, #1
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	d00a      	beq.n	8003b24 <memmove+0x26>
 8003b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b12:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b16:	e7f8      	b.n	8003b0a <memmove+0xc>
 8003b18:	4283      	cmp	r3, r0
 8003b1a:	d9f5      	bls.n	8003b08 <memmove+0xa>
 8003b1c:	1881      	adds	r1, r0, r2
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	42d3      	cmn	r3, r2
 8003b22:	d100      	bne.n	8003b26 <memmove+0x28>
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b2e:	e7f7      	b.n	8003b20 <memmove+0x22>

08003b30 <_free_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	4605      	mov	r5, r0
 8003b34:	2900      	cmp	r1, #0
 8003b36:	d045      	beq.n	8003bc4 <_free_r+0x94>
 8003b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b3c:	1f0c      	subs	r4, r1, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bfb8      	it	lt
 8003b42:	18e4      	addlt	r4, r4, r3
 8003b44:	f000 f8d2 	bl	8003cec <__malloc_lock>
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <_free_r+0x98>)
 8003b4a:	6813      	ldr	r3, [r2, #0]
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	b933      	cbnz	r3, 8003b5e <_free_r+0x2e>
 8003b50:	6063      	str	r3, [r4, #4]
 8003b52:	6014      	str	r4, [r2, #0]
 8003b54:	4628      	mov	r0, r5
 8003b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b5a:	f000 b8c8 	b.w	8003cee <__malloc_unlock>
 8003b5e:	42a3      	cmp	r3, r4
 8003b60:	d90c      	bls.n	8003b7c <_free_r+0x4c>
 8003b62:	6821      	ldr	r1, [r4, #0]
 8003b64:	1862      	adds	r2, r4, r1
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bf04      	itt	eq
 8003b6a:	681a      	ldreq	r2, [r3, #0]
 8003b6c:	685b      	ldreq	r3, [r3, #4]
 8003b6e:	6063      	str	r3, [r4, #4]
 8003b70:	bf04      	itt	eq
 8003b72:	1852      	addeq	r2, r2, r1
 8003b74:	6022      	streq	r2, [r4, #0]
 8003b76:	6004      	str	r4, [r0, #0]
 8003b78:	e7ec      	b.n	8003b54 <_free_r+0x24>
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	b10a      	cbz	r2, 8003b84 <_free_r+0x54>
 8003b80:	42a2      	cmp	r2, r4
 8003b82:	d9fa      	bls.n	8003b7a <_free_r+0x4a>
 8003b84:	6819      	ldr	r1, [r3, #0]
 8003b86:	1858      	adds	r0, r3, r1
 8003b88:	42a0      	cmp	r0, r4
 8003b8a:	d10b      	bne.n	8003ba4 <_free_r+0x74>
 8003b8c:	6820      	ldr	r0, [r4, #0]
 8003b8e:	4401      	add	r1, r0
 8003b90:	1858      	adds	r0, r3, r1
 8003b92:	4282      	cmp	r2, r0
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	d1dd      	bne.n	8003b54 <_free_r+0x24>
 8003b98:	6810      	ldr	r0, [r2, #0]
 8003b9a:	6852      	ldr	r2, [r2, #4]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	4401      	add	r1, r0
 8003ba0:	6019      	str	r1, [r3, #0]
 8003ba2:	e7d7      	b.n	8003b54 <_free_r+0x24>
 8003ba4:	d902      	bls.n	8003bac <_free_r+0x7c>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	e7d3      	b.n	8003b54 <_free_r+0x24>
 8003bac:	6820      	ldr	r0, [r4, #0]
 8003bae:	1821      	adds	r1, r4, r0
 8003bb0:	428a      	cmp	r2, r1
 8003bb2:	bf04      	itt	eq
 8003bb4:	6811      	ldreq	r1, [r2, #0]
 8003bb6:	6852      	ldreq	r2, [r2, #4]
 8003bb8:	6062      	str	r2, [r4, #4]
 8003bba:	bf04      	itt	eq
 8003bbc:	1809      	addeq	r1, r1, r0
 8003bbe:	6021      	streq	r1, [r4, #0]
 8003bc0:	605c      	str	r4, [r3, #4]
 8003bc2:	e7c7      	b.n	8003b54 <_free_r+0x24>
 8003bc4:	bd38      	pop	{r3, r4, r5, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000090 	.word	0x20000090

08003bcc <_malloc_r>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	1ccd      	adds	r5, r1, #3
 8003bd0:	f025 0503 	bic.w	r5, r5, #3
 8003bd4:	3508      	adds	r5, #8
 8003bd6:	2d0c      	cmp	r5, #12
 8003bd8:	bf38      	it	cc
 8003bda:	250c      	movcc	r5, #12
 8003bdc:	2d00      	cmp	r5, #0
 8003bde:	4606      	mov	r6, r0
 8003be0:	db01      	blt.n	8003be6 <_malloc_r+0x1a>
 8003be2:	42a9      	cmp	r1, r5
 8003be4:	d903      	bls.n	8003bee <_malloc_r+0x22>
 8003be6:	230c      	movs	r3, #12
 8003be8:	6033      	str	r3, [r6, #0]
 8003bea:	2000      	movs	r0, #0
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
 8003bee:	f000 f87d 	bl	8003cec <__malloc_lock>
 8003bf2:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <_malloc_r+0xac>)
 8003bf4:	6814      	ldr	r4, [r2, #0]
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	b991      	cbnz	r1, 8003c20 <_malloc_r+0x54>
 8003bfa:	4c20      	ldr	r4, [pc, #128]	; (8003c7c <_malloc_r+0xb0>)
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	b91b      	cbnz	r3, 8003c08 <_malloc_r+0x3c>
 8003c00:	4630      	mov	r0, r6
 8003c02:	f000 f863 	bl	8003ccc <_sbrk_r>
 8003c06:	6020      	str	r0, [r4, #0]
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f000 f85e 	bl	8003ccc <_sbrk_r>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d124      	bne.n	8003c5e <_malloc_r+0x92>
 8003c14:	230c      	movs	r3, #12
 8003c16:	6033      	str	r3, [r6, #0]
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f000 f868 	bl	8003cee <__malloc_unlock>
 8003c1e:	e7e4      	b.n	8003bea <_malloc_r+0x1e>
 8003c20:	680b      	ldr	r3, [r1, #0]
 8003c22:	1b5b      	subs	r3, r3, r5
 8003c24:	d418      	bmi.n	8003c58 <_malloc_r+0x8c>
 8003c26:	2b0b      	cmp	r3, #11
 8003c28:	d90f      	bls.n	8003c4a <_malloc_r+0x7e>
 8003c2a:	600b      	str	r3, [r1, #0]
 8003c2c:	50cd      	str	r5, [r1, r3]
 8003c2e:	18cc      	adds	r4, r1, r3
 8003c30:	4630      	mov	r0, r6
 8003c32:	f000 f85c 	bl	8003cee <__malloc_unlock>
 8003c36:	f104 000b 	add.w	r0, r4, #11
 8003c3a:	1d23      	adds	r3, r4, #4
 8003c3c:	f020 0007 	bic.w	r0, r0, #7
 8003c40:	1ac3      	subs	r3, r0, r3
 8003c42:	d0d3      	beq.n	8003bec <_malloc_r+0x20>
 8003c44:	425a      	negs	r2, r3
 8003c46:	50e2      	str	r2, [r4, r3]
 8003c48:	e7d0      	b.n	8003bec <_malloc_r+0x20>
 8003c4a:	428c      	cmp	r4, r1
 8003c4c:	684b      	ldr	r3, [r1, #4]
 8003c4e:	bf16      	itet	ne
 8003c50:	6063      	strne	r3, [r4, #4]
 8003c52:	6013      	streq	r3, [r2, #0]
 8003c54:	460c      	movne	r4, r1
 8003c56:	e7eb      	b.n	8003c30 <_malloc_r+0x64>
 8003c58:	460c      	mov	r4, r1
 8003c5a:	6849      	ldr	r1, [r1, #4]
 8003c5c:	e7cc      	b.n	8003bf8 <_malloc_r+0x2c>
 8003c5e:	1cc4      	adds	r4, r0, #3
 8003c60:	f024 0403 	bic.w	r4, r4, #3
 8003c64:	42a0      	cmp	r0, r4
 8003c66:	d005      	beq.n	8003c74 <_malloc_r+0xa8>
 8003c68:	1a21      	subs	r1, r4, r0
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f000 f82e 	bl	8003ccc <_sbrk_r>
 8003c70:	3001      	adds	r0, #1
 8003c72:	d0cf      	beq.n	8003c14 <_malloc_r+0x48>
 8003c74:	6025      	str	r5, [r4, #0]
 8003c76:	e7db      	b.n	8003c30 <_malloc_r+0x64>
 8003c78:	20000090 	.word	0x20000090
 8003c7c:	20000094 	.word	0x20000094

08003c80 <_realloc_r>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	4607      	mov	r7, r0
 8003c84:	4614      	mov	r4, r2
 8003c86:	460e      	mov	r6, r1
 8003c88:	b921      	cbnz	r1, 8003c94 <_realloc_r+0x14>
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c90:	f7ff bf9c 	b.w	8003bcc <_malloc_r>
 8003c94:	b922      	cbnz	r2, 8003ca0 <_realloc_r+0x20>
 8003c96:	f7ff ff4b 	bl	8003b30 <_free_r>
 8003c9a:	4625      	mov	r5, r4
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ca0:	f000 f826 	bl	8003cf0 <_malloc_usable_size_r>
 8003ca4:	42a0      	cmp	r0, r4
 8003ca6:	d20f      	bcs.n	8003cc8 <_realloc_r+0x48>
 8003ca8:	4621      	mov	r1, r4
 8003caa:	4638      	mov	r0, r7
 8003cac:	f7ff ff8e 	bl	8003bcc <_malloc_r>
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d0f2      	beq.n	8003c9c <_realloc_r+0x1c>
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	4622      	mov	r2, r4
 8003cba:	f7ff ff15 	bl	8003ae8 <memcpy>
 8003cbe:	4631      	mov	r1, r6
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	f7ff ff35 	bl	8003b30 <_free_r>
 8003cc6:	e7e9      	b.n	8003c9c <_realloc_r+0x1c>
 8003cc8:	4635      	mov	r5, r6
 8003cca:	e7e7      	b.n	8003c9c <_realloc_r+0x1c>

08003ccc <_sbrk_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4c06      	ldr	r4, [pc, #24]	; (8003ce8 <_sbrk_r+0x1c>)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	4605      	mov	r5, r0
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	f7ff fb3a 	bl	8003350 <_sbrk>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d102      	bne.n	8003ce6 <_sbrk_r+0x1a>
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	b103      	cbz	r3, 8003ce6 <_sbrk_r+0x1a>
 8003ce4:	602b      	str	r3, [r5, #0]
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	20000190 	.word	0x20000190

08003cec <__malloc_lock>:
 8003cec:	4770      	bx	lr

08003cee <__malloc_unlock>:
 8003cee:	4770      	bx	lr

08003cf0 <_malloc_usable_size_r>:
 8003cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cf4:	1f18      	subs	r0, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bfbc      	itt	lt
 8003cfa:	580b      	ldrlt	r3, [r1, r0]
 8003cfc:	18c0      	addlt	r0, r0, r3
 8003cfe:	4770      	bx	lr

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
