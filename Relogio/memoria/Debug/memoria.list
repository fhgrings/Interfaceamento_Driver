
memoria.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003378  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003584  08003584  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003584  08003584  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003584  08003584  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800358c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003598  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003598  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f572  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d21  00000000  00000000  0002f5ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c8  00000000  00000000  000312d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  00031b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c434  00000000  00000000  00032398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f7b  00000000  00000000  0004e7cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c866  00000000  00000000  00057747  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3fad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002408  00000000  00000000  000f4028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080034e8 	.word	0x080034e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080034e8 	.word	0x080034e8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <HAL_Init+0x28>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_Init+0x28>)
 80001e2:	f043 0310 	orr.w	r3, r3, #16
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e8:	2003      	movs	r0, #3
 80001ea:	f000 f92f 	bl	800044c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ee:	2000      	movs	r0, #0
 80001f0:	f000 f808 	bl	8000204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f4:	f002 ff8a 	bl	800310c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x54>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <HAL_InitTick+0x58>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f939 	bl	800049a <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e00e      	b.n	8000250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b0f      	cmp	r3, #15
 8000236:	d80a      	bhi.n	800024e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000238:	2200      	movs	r2, #0
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	f04f 30ff 	mov.w	r0, #4294967295
 8000240:	f000 f90f 	bl	8000462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000244:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_InitTick+0x5c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
 800024c:	e000      	b.n	8000250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024e:	2301      	movs	r3, #1
}
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000008 	.word	0x20000008
 800025c:	20000004 	.word	0x20000004
 8000260:	20000000 	.word	0x20000000

08000264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x20>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	461a      	mov	r2, r3
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <HAL_IncTick+0x24>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4413      	add	r3, r2
 8000274:	4a04      	ldr	r2, [pc, #16]	; (8000288 <HAL_IncTick+0x24>)
 8000276:	6013      	str	r3, [r2, #0]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	20000028 	.word	0x20000028

0800028c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <HAL_GetTick+0x14>)
 8000292:	681b      	ldr	r3, [r3, #0]
}
 8000294:	4618      	mov	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000028 	.word	0x20000028

080002a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ac:	f7ff ffee 	bl	800028c <HAL_GetTick>
 80002b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002bc:	d005      	beq.n	80002ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <HAL_Delay+0x40>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	461a      	mov	r2, r3
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	4413      	add	r3, r2
 80002c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ca:	bf00      	nop
 80002cc:	f7ff ffde 	bl	800028c <HAL_GetTick>
 80002d0:	4602      	mov	r2, r0
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d8f7      	bhi.n	80002cc <HAL_Delay+0x28>
  {
  }
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000004 	.word	0x20000004

080002e8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <NVIC_SetPriorityGrouping+0x44>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000304:	4013      	ands	r3, r2
 8000306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800031a:	4a04      	ldr	r2, [pc, #16]	; (800032c <NVIC_SetPriorityGrouping+0x44>)
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	60d3      	str	r3, [r2, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <NVIC_GetPriorityGrouping+0x18>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	0a1b      	lsrs	r3, r3, #8
 800033a:	f003 0307 	and.w	r3, r3, #7
}
 800033e:	4618      	mov	r0, r3
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	6039      	str	r1, [r7, #0]
 8000356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	da0b      	bge.n	8000378 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	b2da      	uxtb	r2, r3
 8000364:	490c      	ldr	r1, [pc, #48]	; (8000398 <NVIC_SetPriority+0x4c>)
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	f003 030f 	and.w	r3, r3, #15
 800036c:	3b04      	subs	r3, #4
 800036e:	0112      	lsls	r2, r2, #4
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	440b      	add	r3, r1
 8000374:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000376:	e009      	b.n	800038c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4907      	ldr	r1, [pc, #28]	; (800039c <NVIC_SetPriority+0x50>)
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	0112      	lsls	r2, r2, #4
 8000384:	b2d2      	uxtb	r2, r2
 8000386:	440b      	add	r3, r1
 8000388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	e000ed00 	.word	0xe000ed00
 800039c:	e000e100 	.word	0xe000e100

080003a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b089      	sub	sp, #36	; 0x24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f003 0307 	and.w	r3, r3, #7
 80003b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b4:	69fb      	ldr	r3, [r7, #28]
 80003b6:	f1c3 0307 	rsb	r3, r3, #7
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	bf28      	it	cs
 80003be:	2304      	movcs	r3, #4
 80003c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3304      	adds	r3, #4
 80003c6:	2b06      	cmp	r3, #6
 80003c8:	d902      	bls.n	80003d0 <NVIC_EncodePriority+0x30>
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	3b03      	subs	r3, #3
 80003ce:	e000      	b.n	80003d2 <NVIC_EncodePriority+0x32>
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d4:	f04f 32ff 	mov.w	r2, #4294967295
 80003d8:	69bb      	ldr	r3, [r7, #24]
 80003da:	fa02 f303 	lsl.w	r3, r2, r3
 80003de:	43da      	mvns	r2, r3
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	401a      	ands	r2, r3
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e8:	f04f 31ff 	mov.w	r1, #4294967295
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43d9      	mvns	r1, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f8:	4313      	orrs	r3, r2
         );
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3724      	adds	r7, #36	; 0x24
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
	...

08000408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000418:	d301      	bcc.n	800041e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800041a:	2301      	movs	r3, #1
 800041c:	e00f      	b.n	800043e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041e:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <SysTick_Config+0x40>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3b01      	subs	r3, #1
 8000424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000426:	210f      	movs	r1, #15
 8000428:	f04f 30ff 	mov.w	r0, #4294967295
 800042c:	f7ff ff8e 	bl	800034c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <SysTick_Config+0x40>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000436:	4b04      	ldr	r3, [pc, #16]	; (8000448 <SysTick_Config+0x40>)
 8000438:	2207      	movs	r2, #7
 800043a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800043c:	2300      	movs	r3, #0
}
 800043e:	4618      	mov	r0, r3
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	e000e010 	.word	0xe000e010

0800044c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ff47 	bl	80002e8 <NVIC_SetPriorityGrouping>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b086      	sub	sp, #24
 8000466:	af00      	add	r7, sp, #0
 8000468:	4603      	mov	r3, r0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	607a      	str	r2, [r7, #4]
 800046e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000474:	f7ff ff5c 	bl	8000330 <NVIC_GetPriorityGrouping>
 8000478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	68b9      	ldr	r1, [r7, #8]
 800047e:	6978      	ldr	r0, [r7, #20]
 8000480:	f7ff ff8e 	bl	80003a0 <NVIC_EncodePriority>
 8000484:	4602      	mov	r2, r0
 8000486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800048a:	4611      	mov	r1, r2
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff ff5d 	bl	800034c <NVIC_SetPriority>
}
 8000492:	bf00      	nop
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	b082      	sub	sp, #8
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff ffb0 	bl	8000408 <SysTick_Config>
 80004a8:	4603      	mov	r3, r0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b087      	sub	sp, #28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004ca:	e14e      	b.n	800076a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	2101      	movs	r1, #1
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	fa01 f303 	lsl.w	r3, r1, r3
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	f000 8140 	beq.w	8000764 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d003      	beq.n	80004f4 <HAL_GPIO_Init+0x40>
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	2b12      	cmp	r3, #18
 80004f2:	d123      	bne.n	800053c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	08da      	lsrs	r2, r3, #3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3208      	adds	r2, #8
 80004fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000500:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	f003 0307 	and.w	r3, r3, #7
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	220f      	movs	r2, #15
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	43db      	mvns	r3, r3
 8000512:	693a      	ldr	r2, [r7, #16]
 8000514:	4013      	ands	r3, r2
 8000516:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	691a      	ldr	r2, [r3, #16]
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	f003 0307 	and.w	r3, r3, #7
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	fa02 f303 	lsl.w	r3, r2, r3
 8000528:	693a      	ldr	r2, [r7, #16]
 800052a:	4313      	orrs	r3, r2
 800052c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	08da      	lsrs	r2, r3, #3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3208      	adds	r2, #8
 8000536:	6939      	ldr	r1, [r7, #16]
 8000538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2203      	movs	r2, #3
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	f003 0203 	and.w	r2, r3, #3
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	693a      	ldr	r2, [r7, #16]
 8000566:	4313      	orrs	r3, r2
 8000568:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d00b      	beq.n	8000590 <HAL_GPIO_Init+0xdc>
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d007      	beq.n	8000590 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000584:	2b11      	cmp	r3, #17
 8000586:	d003      	beq.n	8000590 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	2b12      	cmp	r3, #18
 800058e:	d130      	bne.n	80005f2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	2203      	movs	r2, #3
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	43db      	mvns	r3, r3
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	4013      	ands	r3, r2
 80005a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	68da      	ldr	r2, [r3, #12]
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	693a      	ldr	r2, [r7, #16]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	693a      	ldr	r2, [r7, #16]
 80005be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005c6:	2201      	movs	r2, #1
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	43db      	mvns	r3, r3
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	4013      	ands	r3, r2
 80005d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	091b      	lsrs	r3, r3, #4
 80005dc:	f003 0201 	and.w	r2, r3, #1
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	2203      	movs	r2, #3
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	43db      	mvns	r3, r3
 8000604:	693a      	ldr	r2, [r7, #16]
 8000606:	4013      	ands	r3, r2
 8000608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	4313      	orrs	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	2b00      	cmp	r3, #0
 800062c:	f000 809a 	beq.w	8000764 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000630:	4b55      	ldr	r3, [pc, #340]	; (8000788 <HAL_GPIO_Init+0x2d4>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a54      	ldr	r2, [pc, #336]	; (8000788 <HAL_GPIO_Init+0x2d4>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b52      	ldr	r3, [pc, #328]	; (8000788 <HAL_GPIO_Init+0x2d4>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000648:	4a50      	ldr	r2, [pc, #320]	; (800078c <HAL_GPIO_Init+0x2d8>)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	089b      	lsrs	r3, r3, #2
 800064e:	3302      	adds	r3, #2
 8000650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000654:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	f003 0303 	and.w	r3, r3, #3
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	220f      	movs	r2, #15
 8000660:	fa02 f303 	lsl.w	r3, r2, r3
 8000664:	43db      	mvns	r3, r3
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	4013      	ands	r3, r2
 800066a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000672:	d013      	beq.n	800069c <HAL_GPIO_Init+0x1e8>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a46      	ldr	r2, [pc, #280]	; (8000790 <HAL_GPIO_Init+0x2dc>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d00d      	beq.n	8000698 <HAL_GPIO_Init+0x1e4>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a45      	ldr	r2, [pc, #276]	; (8000794 <HAL_GPIO_Init+0x2e0>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d007      	beq.n	8000694 <HAL_GPIO_Init+0x1e0>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a44      	ldr	r2, [pc, #272]	; (8000798 <HAL_GPIO_Init+0x2e4>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d101      	bne.n	8000690 <HAL_GPIO_Init+0x1dc>
 800068c:	2303      	movs	r3, #3
 800068e:	e006      	b.n	800069e <HAL_GPIO_Init+0x1ea>
 8000690:	2305      	movs	r3, #5
 8000692:	e004      	b.n	800069e <HAL_GPIO_Init+0x1ea>
 8000694:	2302      	movs	r3, #2
 8000696:	e002      	b.n	800069e <HAL_GPIO_Init+0x1ea>
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <HAL_GPIO_Init+0x1ea>
 800069c:	2300      	movs	r3, #0
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	f002 0203 	and.w	r2, r2, #3
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	4093      	lsls	r3, r2
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006ae:	4937      	ldr	r1, [pc, #220]	; (800078c <HAL_GPIO_Init+0x2d8>)
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	089b      	lsrs	r3, r3, #2
 80006b4:	3302      	adds	r3, #2
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006bc:	4b37      	ldr	r3, [pc, #220]	; (800079c <HAL_GPIO_Init+0x2e8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	43db      	mvns	r3, r3
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	4013      	ands	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	4313      	orrs	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006e0:	4a2e      	ldr	r2, [pc, #184]	; (800079c <HAL_GPIO_Init+0x2e8>)
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <HAL_GPIO_Init+0x2e8>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	43db      	mvns	r3, r3
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	4013      	ands	r3, r2
 80006f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4313      	orrs	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800070a:	4a24      	ldr	r2, [pc, #144]	; (800079c <HAL_GPIO_Init+0x2e8>)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <HAL_GPIO_Init+0x2e8>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	43db      	mvns	r3, r3
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	4013      	ands	r3, r2
 800071e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d003      	beq.n	8000734 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4313      	orrs	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <HAL_GPIO_Init+0x2e8>)
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_GPIO_Init+0x2e8>)
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	43db      	mvns	r3, r3
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	4013      	ands	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000752:	2b00      	cmp	r3, #0
 8000754:	d003      	beq.n	800075e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4313      	orrs	r3, r2
 800075c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <HAL_GPIO_Init+0x2e8>)
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	fa22 f303 	lsr.w	r3, r2, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	f47f aea9 	bne.w	80004cc <HAL_GPIO_Init+0x18>
  }
}
 800077a:	bf00      	nop
 800077c:	371c      	adds	r7, #28
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000
 800078c:	40010000 	.word	0x40010000
 8000790:	48000400 	.word	0x48000400
 8000794:	48000800 	.word	0x48000800
 8000798:	48000c00 	.word	0x48000c00
 800079c:	40010400 	.word	0x40010400

080007a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	807b      	strh	r3, [r7, #2]
 80007ac:	4613      	mov	r3, r2
 80007ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007b0:	787b      	ldrb	r3, [r7, #1]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007b6:	887a      	ldrh	r2, [r7, #2]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007bc:	e002      	b.n	80007c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007be:	887a      	ldrh	r2, [r7, #2]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d101      	bne.n	80007e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e081      	b.n	80008e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d106      	bne.n	80007fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f002 fcac 	bl	8003154 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2224      	movs	r2, #36	; 0x24
 8000800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f022 0201 	bic.w	r2, r2, #1
 8000812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000820:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	689a      	ldr	r2, [r3, #8]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000830:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d107      	bne.n	800084a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	e006      	b.n	8000858 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000856:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d104      	bne.n	800086a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000868:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800087c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800088c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	691a      	ldr	r2, [r3, #16]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	ea42 0103 	orr.w	r1, r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	021a      	lsls	r2, r3, #8
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	430a      	orrs	r2, r1
 80008a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69d9      	ldr	r1, [r3, #28]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6a1a      	ldr	r2, [r3, #32]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	430a      	orrs	r2, r1
 80008b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f042 0201 	orr.w	r2, r2, #1
 80008c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2220      	movs	r2, #32
 80008d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	461a      	mov	r2, r3
 80008fc:	460b      	mov	r3, r1
 80008fe:	817b      	strh	r3, [r7, #10]
 8000900:	4613      	mov	r3, r2
 8000902:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b20      	cmp	r3, #32
 8000912:	f040 80e4 	bne.w	8000ade <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800091c:	2b01      	cmp	r3, #1
 800091e:	d101      	bne.n	8000924 <HAL_I2C_Master_Transmit+0x34>
 8000920:	2302      	movs	r3, #2
 8000922:	e0dd      	b.n	8000ae0 <HAL_I2C_Master_Transmit+0x1f0>
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2201      	movs	r2, #1
 8000928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800092c:	f7ff fcae 	bl	800028c <HAL_GetTick>
 8000930:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2319      	movs	r3, #25
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f000 f9fc 	bl	8000d3c <I2C_WaitOnFlagUntilTimeout>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 800094a:	2303      	movs	r3, #3
 800094c:	e0c8      	b.n	8000ae0 <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2221      	movs	r2, #33	; 0x21
 8000952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2210      	movs	r2, #16
 800095a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2200      	movs	r2, #0
 8000962:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	893a      	ldrh	r2, [r7, #8]
 800096e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2200      	movs	r2, #0
 8000974:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800097a:	b29b      	uxth	r3, r3
 800097c:	2bff      	cmp	r3, #255	; 0xff
 800097e:	d90e      	bls.n	800099e <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	22ff      	movs	r2, #255	; 0xff
 8000984:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800098a:	b2da      	uxtb	r2, r3
 800098c:	8979      	ldrh	r1, [r7, #10]
 800098e:	4b56      	ldr	r3, [pc, #344]	; (8000ae8 <HAL_I2C_Master_Transmit+0x1f8>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f000 fb50 	bl	800103c <I2C_TransferConfig>
 800099c:	e070      	b.n	8000a80 <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	8979      	ldrh	r1, [r7, #10]
 80009b0:	4b4d      	ldr	r3, [pc, #308]	; (8000ae8 <HAL_I2C_Master_Transmit+0x1f8>)
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f000 fb3f 	bl	800103c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80009be:	e05f      	b.n	8000a80 <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	6a39      	ldr	r1, [r7, #32]
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f000 f9f3 	bl	8000db0 <I2C_WaitOnTXISFlagUntilTimeout>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d007      	beq.n	80009e0 <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	d101      	bne.n	80009dc <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e081      	b.n	8000ae0 <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 80009dc:	2303      	movs	r3, #3
 80009de:	e07f      	b.n	8000ae0 <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	1c59      	adds	r1, r3, #1
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	6251      	str	r1, [r2, #36]	; 0x24
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	3b01      	subs	r3, #1
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a04:	3b01      	subs	r3, #1
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d135      	bne.n	8000a80 <HAL_I2C_Master_Transmit+0x190>
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d030      	beq.n	8000a80 <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	6a3b      	ldr	r3, [r7, #32]
 8000a24:	2200      	movs	r2, #0
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f000 f987 	bl	8000d3c <I2C_WaitOnFlagUntilTimeout>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 8000a34:	2303      	movs	r3, #3
 8000a36:	e053      	b.n	8000ae0 <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	2bff      	cmp	r3, #255	; 0xff
 8000a40:	d90e      	bls.n	8000a60 <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	22ff      	movs	r2, #255	; 0xff
 8000a46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	8979      	ldrh	r1, [r7, #10]
 8000a50:	2300      	movs	r3, #0
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f000 faef 	bl	800103c <I2C_TransferConfig>
 8000a5e:	e00f      	b.n	8000a80 <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	8979      	ldrh	r1, [r7, #10]
 8000a72:	2300      	movs	r3, #0
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f000 fade 	bl	800103c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d19a      	bne.n	80009c0 <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	6a39      	ldr	r1, [r7, #32]
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f000 f9ce 	bl	8000e30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d007      	beq.n	8000aaa <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d101      	bne.n	8000aa6 <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e01c      	b.n	8000ae0 <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e01a      	b.n	8000ae0 <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2220      	movs	r2, #32
 8000ab0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6859      	ldr	r1, [r3, #4]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_I2C_Master_Transmit+0x1fc>)
 8000abe:	400b      	ands	r3, r1
 8000ac0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 8000ade:	2302      	movs	r3, #2
  }
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	80002000 	.word	0x80002000
 8000aec:	fe00e800 	.word	0xfe00e800

08000af0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	461a      	mov	r2, r3
 8000afc:	460b      	mov	r3, r1
 8000afe:	817b      	strh	r3, [r7, #10]
 8000b00:	4613      	mov	r3, r2
 8000b02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b20      	cmp	r3, #32
 8000b12:	f040 80e5 	bne.w	8000ce0 <HAL_I2C_Master_Receive+0x1f0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d101      	bne.n	8000b24 <HAL_I2C_Master_Receive+0x34>
 8000b20:	2302      	movs	r3, #2
 8000b22:	e0de      	b.n	8000ce2 <HAL_I2C_Master_Receive+0x1f2>
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000b2c:	f7ff fbae 	bl	800028c <HAL_GetTick>
 8000b30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2319      	movs	r3, #25
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f000 f8fc 	bl	8000d3c <I2C_WaitOnFlagUntilTimeout>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e0c9      	b.n	8000ce2 <HAL_I2C_Master_Receive+0x1f2>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2222      	movs	r2, #34	; 0x22
 8000b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2210      	movs	r2, #16
 8000b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	893a      	ldrh	r2, [r7, #8]
 8000b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	2bff      	cmp	r3, #255	; 0xff
 8000b7e:	d90e      	bls.n	8000b9e <HAL_I2C_Master_Receive+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	8979      	ldrh	r1, [r7, #10]
 8000b8e:	4b57      	ldr	r3, [pc, #348]	; (8000cec <HAL_I2C_Master_Receive+0x1fc>)
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f000 fa50 	bl	800103c <I2C_TransferConfig>
 8000b9c:	e071      	b.n	8000c82 <HAL_I2C_Master_Receive+0x192>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	8979      	ldrh	r1, [r7, #10]
 8000bb0:	4b4e      	ldr	r3, [pc, #312]	; (8000cec <HAL_I2C_Master_Receive+0x1fc>)
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 fa3f 	bl	800103c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000bbe:	e060      	b.n	8000c82 <HAL_I2C_Master_Receive+0x192>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	6a39      	ldr	r1, [r7, #32]
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f000 f96f 	bl	8000ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d007      	beq.n	8000be0 <HAL_I2C_Master_Receive+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d101      	bne.n	8000bdc <HAL_I2C_Master_Receive+0xec>
        {
          return HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e082      	b.n	8000ce2 <HAL_I2C_Master_Receive+0x1f2>
        }
        else
        {
          return HAL_TIMEOUT;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e080      	b.n	8000ce2 <HAL_I2C_Master_Receive+0x1f2>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bea:	1c59      	adds	r1, r3, #1
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	6251      	str	r1, [r2, #36]	; 0x24
 8000bf0:	b2c2      	uxtb	r2, r0
 8000bf2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	3b01      	subs	r3, #1
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d135      	bne.n	8000c82 <HAL_I2C_Master_Receive+0x192>
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d030      	beq.n	8000c82 <HAL_I2C_Master_Receive+0x192>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	2200      	movs	r2, #0
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f000 f886 	bl	8000d3c <I2C_WaitOnFlagUntilTimeout>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_I2C_Master_Receive+0x14a>
        {
          return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e053      	b.n	8000ce2 <HAL_I2C_Master_Receive+0x1f2>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	2bff      	cmp	r3, #255	; 0xff
 8000c42:	d90e      	bls.n	8000c62 <HAL_I2C_Master_Receive+0x172>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	22ff      	movs	r2, #255	; 0xff
 8000c48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	8979      	ldrh	r1, [r7, #10]
 8000c52:	2300      	movs	r3, #0
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f000 f9ee 	bl	800103c <I2C_TransferConfig>
 8000c60:	e00f      	b.n	8000c82 <HAL_I2C_Master_Receive+0x192>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	8979      	ldrh	r1, [r7, #10]
 8000c74:	2300      	movs	r3, #0
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f000 f9dd 	bl	800103c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d199      	bne.n	8000bc0 <HAL_I2C_Master_Receive+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	6a39      	ldr	r1, [r7, #32]
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f000 f8cd 	bl	8000e30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d007      	beq.n	8000cac <HAL_I2C_Master_Receive+0x1bc>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d101      	bne.n	8000ca8 <HAL_I2C_Master_Receive+0x1b8>
      {
        return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e01c      	b.n	8000ce2 <HAL_I2C_Master_Receive+0x1f2>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	e01a      	b.n	8000ce2 <HAL_I2C_Master_Receive+0x1f2>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2220      	movs	r2, #32
 8000cb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6859      	ldr	r1, [r3, #4]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_I2C_Master_Receive+0x200>)
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e000      	b.n	8000ce2 <HAL_I2C_Master_Receive+0x1f2>
  }
  else
  {
    return HAL_BUSY;
 8000ce0:	2302      	movs	r3, #2
  }
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	80002400 	.word	0x80002400
 8000cf0:	fe00e800 	.word	0xfe00e800

08000cf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d103      	bne.n	8000d12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d007      	beq.n	8000d30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 0201 	orr.w	r2, r2, #1
 8000d2e:	619a      	str	r2, [r3, #24]
  }
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d4c:	e01c      	b.n	8000d88 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d018      	beq.n	8000d88 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d007      	beq.n	8000d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8000d5c:	f7ff fa96 	bl	800028c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d20d      	bcs.n	8000d88 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2220      	movs	r2, #32
 8000d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e00f      	b.n	8000da8 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	699a      	ldr	r2, [r3, #24]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	4013      	ands	r3, r2
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	bf0c      	ite	eq
 8000d98:	2301      	moveq	r3, #1
 8000d9a:	2300      	movne	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d0d3      	beq.n	8000d4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000dbc:	e02c      	b.n	8000e18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f000 f8dc 	bl	8000f80 <I2C_IsAcknowledgeFailed>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e02a      	b.n	8000e28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d01e      	beq.n	8000e18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d007      	beq.n	8000df0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000de0:	f7ff fa54 	bl	800028c <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d213      	bcs.n	8000e18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	f043 0220 	orr.w	r2, r3, #32
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2220      	movs	r2, #32
 8000e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e007      	b.n	8000e28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d1cb      	bne.n	8000dbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e3c:	e028      	b.n	8000e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 f89c 	bl	8000f80 <I2C_IsAcknowledgeFailed>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e026      	b.n	8000ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d007      	beq.n	8000e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000e58:	f7ff fa18 	bl	800028c <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d213      	bcs.n	8000e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	f043 0220 	orr.w	r2, r3, #32
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2220      	movs	r2, #32
 8000e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e007      	b.n	8000ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0320 	and.w	r3, r3, #32
 8000e9a:	2b20      	cmp	r3, #32
 8000e9c:	d1cf      	bne.n	8000e3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000eb4:	e055      	b.n	8000f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f000 f860 	bl	8000f80 <I2C_IsAcknowledgeFailed>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e053      	b.n	8000f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	2b20      	cmp	r3, #32
 8000ed6:	d129      	bne.n	8000f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d105      	bne.n	8000ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e03f      	b.n	8000f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6859      	ldr	r1, [r3, #4]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8000f06:	400b      	ands	r3, r1
 8000f08:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2220      	movs	r2, #32
 8000f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e022      	b.n	8000f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8000f32:	f7ff f9ab 	bl	800028c <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d20f      	bcs.n	8000f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f043 0220 	orr.w	r2, r3, #32
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2220      	movs	r2, #32
 8000f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e007      	b.n	8000f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d1a2      	bne.n	8000eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	fe00e800 	.word	0xfe00e800

08000f80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d148      	bne.n	800102c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f9a:	e01c      	b.n	8000fd6 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa2:	d018      	beq.n	8000fd6 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <I2C_IsAcknowledgeFailed+0x3a>
 8000faa:	f7ff f96f 	bl	800028c <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d20d      	bcs.n	8000fd6 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e02b      	b.n	800102e <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	2b20      	cmp	r3, #32
 8000fe2:	d1db      	bne.n	8000f9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2210      	movs	r2, #16
 8000fea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff fe7d 	bl	8000cf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6859      	ldr	r1, [r3, #4]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <I2C_IsAcknowledgeFailed+0xb8>)
 8001006:	400b      	ands	r3, r1
 8001008:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2204      	movs	r2, #4
 800100e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2220      	movs	r2, #32
 8001014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	fe00e800 	.word	0xfe00e800

0800103c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	817b      	strh	r3, [r7, #10]
 800104a:	4613      	mov	r3, r2
 800104c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	0d5b      	lsrs	r3, r3, #21
 8001058:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <I2C_TransferConfig+0x58>)
 800105e:	430b      	orrs	r3, r1
 8001060:	43db      	mvns	r3, r3
 8001062:	ea02 0103 	and.w	r1, r2, r3
 8001066:	897b      	ldrh	r3, [r7, #10]
 8001068:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800106c:	7a7b      	ldrb	r3, [r7, #9]
 800106e:	041b      	lsls	r3, r3, #16
 8001070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	431a      	orrs	r2, r3
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	431a      	orrs	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	03ff63ff 	.word	0x03ff63ff

08001098 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b20      	cmp	r3, #32
 80010ac:	d138      	bne.n	8001120 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e032      	b.n	8001122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2224      	movs	r2, #36	; 0x24
 80010c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6819      	ldr	r1, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2220      	movs	r2, #32
 8001110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	e000      	b.n	8001122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001120:	2302      	movs	r3, #2
  }
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b20      	cmp	r3, #32
 8001146:	d139      	bne.n	80011bc <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001152:	2302      	movs	r3, #2
 8001154:	e033      	b.n	80011be <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2224      	movs	r2, #36	; 0x24
 8001162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001184:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2220      	movs	r2, #32
 80011ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e000      	b.n	80011be <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80011bc:	2302      	movs	r3, #2
  }
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	f000 beda 	b.w	8001f9a <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 816e 	beq.w	80014d2 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011f6:	4bb5      	ldr	r3, [pc, #724]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d00c      	beq.n	800121c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001202:	4bb2      	ldr	r3, [pc, #712]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b08      	cmp	r3, #8
 800120c:	d15a      	bne.n	80012c4 <HAL_RCC_OscConfig+0xf8>
 800120e:	4baf      	ldr	r3, [pc, #700]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121a:	d153      	bne.n	80012c4 <HAL_RCC_OscConfig+0xf8>
 800121c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001220:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001230:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	fab3 f383 	clz	r3, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <HAL_RCC_OscConfig+0x82>
 8001248:	4ba0      	ldr	r3, [pc, #640]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	e015      	b.n	800127a <HAL_RCC_OscConfig+0xae>
 800124e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001252:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001256:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001266:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800126a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001276:	4b95      	ldr	r3, [pc, #596]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001282:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001286:	fa92 f2a2 	rbit	r2, r2
 800128a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800128e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001292:	fab2 f282 	clz	r2, r2
 8001296:	b252      	sxtb	r2, r2
 8001298:	f042 0220 	orr.w	r2, r2, #32
 800129c:	b252      	sxtb	r2, r2
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	f002 021f 	and.w	r2, r2, #31
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f202 	lsl.w	r2, r1, r2
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 810f 	beq.w	80014d0 <HAL_RCC_OscConfig+0x304>
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f040 8109 	bne.w	80014d0 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	f000 be6b 	b.w	8001f9a <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ce:	d106      	bne.n	80012de <HAL_RCC_OscConfig+0x112>
 80012d0:	4b7e      	ldr	r3, [pc, #504]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a7d      	ldr	r2, [pc, #500]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e030      	b.n	8001340 <HAL_RCC_OscConfig+0x174>
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10c      	bne.n	8001302 <HAL_RCC_OscConfig+0x136>
 80012e8:	4b78      	ldr	r3, [pc, #480]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a77      	ldr	r2, [pc, #476]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b75      	ldr	r3, [pc, #468]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a74      	ldr	r2, [pc, #464]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e01e      	b.n	8001340 <HAL_RCC_OscConfig+0x174>
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x15c>
 800130e:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b6c      	ldr	r3, [pc, #432]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6b      	ldr	r2, [pc, #428]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0x174>
 8001328:	4b68      	ldr	r3, [pc, #416]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a67      	ldr	r2, [pc, #412]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b65      	ldr	r3, [pc, #404]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a64      	ldr	r2, [pc, #400]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001340:	4b62      	ldr	r3, [pc, #392]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	f023 020f 	bic.w	r2, r3, #15
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	495f      	ldr	r1, [pc, #380]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001350:	4313      	orrs	r3, r2
 8001352:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d05a      	beq.n	8001414 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7fe ff95 	bl	800028c <HAL_GetTick>
 8001362:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e00a      	b.n	800137e <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7fe ff90 	bl	800028c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b64      	cmp	r3, #100	; 0x64
 8001376:	d902      	bls.n	800137e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	f000 be0e 	b.w	8001f9a <HAL_RCC_OscConfig+0xdce>
 800137e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001382:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001392:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	095b      	lsrs	r3, r3, #5
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1e4>
 80013aa:	4b48      	ldr	r3, [pc, #288]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	e015      	b.n	80013dc <HAL_RCC_OscConfig+0x210>
 80013b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80013c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013cc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013d8:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013e0:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80013e4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80013e8:	fa92 f2a2 	rbit	r2, r2
 80013ec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80013f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013f4:	fab2 f282 	clz	r2, r2
 80013f8:	b252      	sxtb	r2, r2
 80013fa:	f042 0220 	orr.w	r2, r2, #32
 80013fe:	b252      	sxtb	r2, r2
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f002 021f 	and.w	r2, r2, #31
 8001406:	2101      	movs	r1, #1
 8001408:	fa01 f202 	lsl.w	r2, r1, r2
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0aa      	beq.n	8001368 <HAL_RCC_OscConfig+0x19c>
 8001412:	e05e      	b.n	80014d2 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7fe ff3a 	bl	800028c <HAL_GetTick>
 8001418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141e:	f7fe ff35 	bl	800028c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d902      	bls.n	8001434 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	f000 bdb3 	b.w	8001f9a <HAL_RCC_OscConfig+0xdce>
 8001434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001438:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001440:	fa93 f3a3 	rbit	r3, r3
 8001444:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001448:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144c:	fab3 f383 	clz	r3, r3
 8001450:	b2db      	uxtb	r3, r3
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b01      	cmp	r3, #1
 800145e:	d102      	bne.n	8001466 <HAL_RCC_OscConfig+0x29a>
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	e015      	b.n	8001492 <HAL_RCC_OscConfig+0x2c6>
 8001466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800147a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800147e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001482:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_RCC_OscConfig+0x300>)
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001496:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800149a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800149e:	fa92 f2a2 	rbit	r2, r2
 80014a2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80014a6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014aa:	fab2 f282 	clz	r2, r2
 80014ae:	b252      	sxtb	r2, r2
 80014b0:	f042 0220 	orr.w	r2, r2, #32
 80014b4:	b252      	sxtb	r2, r2
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	f002 021f 	and.w	r2, r2, #31
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f202 	lsl.w	r2, r1, r2
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1aa      	bne.n	800141e <HAL_RCC_OscConfig+0x252>
 80014c8:	e003      	b.n	80014d2 <HAL_RCC_OscConfig+0x306>
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8170 	beq.w	80017c2 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014e2:	4bd0      	ldr	r3, [pc, #832]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014ee:	4bcd      	ldr	r3, [pc, #820]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d16d      	bne.n	80015d6 <HAL_RCC_OscConfig+0x40a>
 80014fa:	4bca      	ldr	r3, [pc, #808]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d167      	bne.n	80015d6 <HAL_RCC_OscConfig+0x40a>
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001518:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151c:	fab3 f383 	clz	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d102      	bne.n	8001536 <HAL_RCC_OscConfig+0x36a>
 8001530:	4bbc      	ldr	r3, [pc, #752]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	e013      	b.n	800155e <HAL_RCC_OscConfig+0x392>
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800154e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800155a:	4bb2      	ldr	r3, [pc, #712]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	2202      	movs	r2, #2
 8001560:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001564:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001568:	fa92 f2a2 	rbit	r2, r2
 800156c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001570:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001574:	fab2 f282 	clz	r2, r2
 8001578:	b252      	sxtb	r2, r2
 800157a:	f042 0220 	orr.w	r2, r2, #32
 800157e:	b252      	sxtb	r2, r2
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	f002 021f 	and.w	r2, r2, #31
 8001586:	2101      	movs	r1, #1
 8001588:	fa01 f202 	lsl.w	r2, r1, r2
 800158c:	4013      	ands	r3, r2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3d6>
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d002      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	f000 bcfc 	b.w	8001f9a <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4ba0      	ldr	r3, [pc, #640]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6959      	ldr	r1, [r3, #20]
 80015b0:	23f8      	movs	r3, #248	; 0xf8
 80015b2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 80015c2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	4995      	ldr	r1, [pc, #596]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d4:	e0f5      	b.n	80017c2 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8085 	beq.w	80016ec <HAL_RCC_OscConfig+0x520>
 80015e2:	2301      	movs	r3, #1
 80015e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80015ec:	fa93 f3a3 	rbit	r3, r3
 80015f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80015f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f8:	fab3 f383 	clz	r3, r3
 80015fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001600:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	461a      	mov	r2, r3
 8001608:	2301      	movs	r3, #1
 800160a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7fe fe3e 	bl	800028c <HAL_GetTick>
 8001610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001616:	f7fe fe39 	bl	800028c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d902      	bls.n	800162c <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	f000 bcb7 	b.w	8001f9a <HAL_RCC_OscConfig+0xdce>
 800162c:	2302      	movs	r3, #2
 800162e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800163e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	095b      	lsrs	r3, r3, #5
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <HAL_RCC_OscConfig+0x490>
 8001656:	4b73      	ldr	r3, [pc, #460]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	e013      	b.n	8001684 <HAL_RCC_OscConfig+0x4b8>
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001674:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001680:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	2202      	movs	r2, #2
 8001686:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800168a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800168e:	fa92 f2a2 	rbit	r2, r2
 8001692:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001696:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800169a:	fab2 f282 	clz	r2, r2
 800169e:	b252      	sxtb	r2, r2
 80016a0:	f042 0220 	orr.w	r2, r2, #32
 80016a4:	b252      	sxtb	r2, r2
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	f002 021f 	and.w	r2, r2, #31
 80016ac:	2101      	movs	r1, #1
 80016ae:	fa01 f202 	lsl.w	r2, r1, r2
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ae      	beq.n	8001616 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6959      	ldr	r1, [r3, #20]
 80016c6:	23f8      	movs	r3, #248	; 0xf8
 80016c8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80016d0:	fa93 f3a3 	rbit	r3, r3
 80016d4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 80016d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80016dc:	fab3 f383 	clz	r3, r3
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	494f      	ldr	r1, [pc, #316]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
 80016ea:	e06a      	b.n	80017c2 <HAL_RCC_OscConfig+0x5f6>
 80016ec:	2301      	movs	r3, #1
 80016ee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016f6:	fa93 f3a3 	rbit	r3, r3
 80016fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80016fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800170a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	461a      	mov	r2, r3
 8001712:	2300      	movs	r3, #0
 8001714:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7fe fdb9 	bl	800028c <HAL_GetTick>
 800171a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001720:	f7fe fdb4 	bl	800028c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d902      	bls.n	8001736 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	f000 bc32 	b.w	8001f9a <HAL_RCC_OscConfig+0xdce>
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001748:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0x59a>
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	e013      	b.n	800178e <HAL_RCC_OscConfig+0x5c2>
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001778:	2302      	movs	r3, #2
 800177a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800177e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_RCC_OscConfig+0x658>)
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	2202      	movs	r2, #2
 8001790:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001794:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001798:	fa92 f2a2 	rbit	r2, r2
 800179c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80017a0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017a4:	fab2 f282 	clz	r2, r2
 80017a8:	b252      	sxtb	r2, r2
 80017aa:	f042 0220 	orr.w	r2, r2, #32
 80017ae:	b252      	sxtb	r2, r2
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	f002 021f 	and.w	r2, r2, #31
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f202 	lsl.w	r2, r1, r2
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ae      	bne.n	8001720 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80d8 	beq.w	8001982 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d067      	beq.n	80018ac <HAL_RCC_OscConfig+0x6e0>
 80017dc:	2301      	movs	r3, #1
 80017de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80017ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x65c>)
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	461a      	mov	r2, r3
 8001800:	2301      	movs	r3, #1
 8001802:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7fe fd42 	bl	800028c <HAL_GetTick>
 8001808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180c:	e00e      	b.n	800182c <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7fe fd3d 	bl	800028c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d906      	bls.n	800182c <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e3bb      	b.n	8001f9a <HAL_RCC_OscConfig+0xdce>
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	10908120 	.word	0x10908120
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001856:	2202      	movs	r2, #2
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001868:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	4ba5      	ldr	r3, [pc, #660]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 800186c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001872:	2102      	movs	r1, #2
 8001874:	6019      	str	r1, [r3, #0]
 8001876:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f1a3 	rbit	r1, r3
 8001880:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001884:	6019      	str	r1, [r3, #0]
  return(result);
 8001886:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b25b      	sxtb	r3, r3
 8001892:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001896:	b25b      	sxtb	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2101      	movs	r1, #1
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0b1      	beq.n	800180e <HAL_RCC_OscConfig+0x642>
 80018aa:	e06a      	b.n	8001982 <HAL_RCC_OscConfig+0x7b6>
 80018ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fa93 f2a3 	rbit	r2, r3
 80018be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018c2:	601a      	str	r2, [r3, #0]
  return(result);
 80018c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <HAL_RCC_OscConfig+0x938>)
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	461a      	mov	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7fe fcd6 	bl	800028c <HAL_GetTick>
 80018e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e6:	f7fe fcd1 	bl	800028c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e34f      	b.n	8001f9a <HAL_RCC_OscConfig+0xdce>
 80018fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018fe:	2202      	movs	r2, #2
 8001900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	fa93 f2a3 	rbit	r2, r3
 800190c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001916:	2202      	movs	r2, #2
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800192e:	2202      	movs	r2, #2
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001940:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001942:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001946:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800194a:	2102      	movs	r1, #2
 800194c:	6019      	str	r1, [r3, #0]
 800194e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	fa93 f1a3 	rbit	r1, r3
 8001958:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800195c:	6019      	str	r1, [r3, #0]
  return(result);
 800195e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b25b      	sxtb	r3, r3
 800196a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800196e:	b25b      	sxtb	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1b1      	bne.n	80018e6 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8159 	beq.w	8001c44 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d112      	bne.n	80019ca <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	4a55      	ldr	r2, [pc, #340]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ae:	61d3      	str	r3, [r2, #28]
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ca:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <HAL_RCC_OscConfig+0x93c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d11a      	bne.n	8001a0c <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d6:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <HAL_RCC_OscConfig+0x93c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a4b      	ldr	r2, [pc, #300]	; (8001b08 <HAL_RCC_OscConfig+0x93c>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e2:	f7fe fc53 	bl	800028c <HAL_GetTick>
 80019e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ea:	e009      	b.n	8001a00 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ec:	f7fe fc4e 	bl	800028c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e2cc      	b.n	8001f9a <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_OscConfig+0x93c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0ef      	beq.n	80019ec <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d106      	bne.n	8001a24 <HAL_RCC_OscConfig+0x858>
 8001a16:	4b3a      	ldr	r3, [pc, #232]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a39      	ldr	r2, [pc, #228]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	e02f      	b.n	8001a84 <HAL_RCC_OscConfig+0x8b8>
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x87c>
 8001a2e:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a33      	ldr	r2, [pc, #204]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a30      	ldr	r2, [pc, #192]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	e01d      	b.n	8001a84 <HAL_RCC_OscConfig+0x8b8>
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x8a0>
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6213      	str	r3, [r2, #32]
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a27      	ldr	r2, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0x8b8>
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a23      	ldr	r2, [pc, #140]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001a7e:	f023 0304 	bic.w	r3, r3, #4
 8001a82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d06b      	beq.n	8001b66 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7fe fbfd 	bl	800028c <HAL_GetTick>
 8001a92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7fe fbf8 	bl	800028c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e274      	b.n	8001f9a <HAL_RCC_OscConfig+0xdce>
 8001ab0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001acc:	2202      	movs	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fa93 f2a3 	rbit	r2, r3
 8001ada:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ade:	601a      	str	r2, [r3, #0]
  return(result);
 8001ae0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ae4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d108      	bne.n	8001b0c <HAL_RCC_OscConfig+0x940>
 8001afa:	4b01      	ldr	r3, [pc, #4]	; (8001b00 <HAL_RCC_OscConfig+0x934>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	e013      	b.n	8001b28 <HAL_RCC_OscConfig+0x95c>
 8001b00:	40021000 	.word	0x40021000
 8001b04:	10908120 	.word	0x10908120
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b10:	2202      	movs	r2, #2
 8001b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	4bbb      	ldr	r3, [pc, #748]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	6011      	str	r1, [r2, #0]
 8001b30:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	fa92 f1a2 	rbit	r1, r2
 8001b3a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b3e:	6011      	str	r1, [r2, #0]
  return(result);
 8001b40:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	b252      	sxtb	r2, r2
 8001b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b50:	b252      	sxtb	r2, r2
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	f002 021f 	and.w	r2, r2, #31
 8001b58:	2101      	movs	r1, #1
 8001b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d099      	beq.n	8001a98 <HAL_RCC_OscConfig+0x8cc>
 8001b64:	e064      	b.n	8001c30 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7fe fb91 	bl	800028c <HAL_GetTick>
 8001b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7fe fb8c 	bl	800028c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e208      	b.n	8001f9a <HAL_RCC_OscConfig+0xdce>
 8001b88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	fa93 f2a3 	rbit	r2, r3
 8001b9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bb6:	601a      	str	r2, [r3, #0]
  return(result);
 8001bb8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xa0c>
 8001bd2:	4b90      	ldr	r3, [pc, #576]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	e00d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xa28>
 8001bd8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bdc:	2202      	movs	r2, #2
 8001bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	6011      	str	r1, [r2, #0]
 8001bfc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	fa92 f1a2 	rbit	r1, r2
 8001c06:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c0a:	6011      	str	r1, [r2, #0]
  return(result);
 8001c0c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	b252      	sxtb	r2, r2
 8001c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c1c:	b252      	sxtb	r2, r2
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f002 021f 	and.w	r2, r2, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d19f      	bne.n	8001b70 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c30:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c38:	4b76      	ldr	r3, [pc, #472]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	4a75      	ldr	r2, [pc, #468]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c42:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 81a4 	beq.w	8001f98 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c50:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	f000 819b 	beq.w	8001f94 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f040 8113 	bne.w	8001e90 <HAL_RCC_OscConfig+0xcc4>
 8001c6a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c82:	601a      	str	r2, [r3, #0]
  return(result);
 8001c84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c88:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7fe faf5 	bl	800028c <HAL_GetTick>
 8001ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	e009      	b.n	8001cbc <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe faf0 	bl	800028c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e16e      	b.n	8001f9a <HAL_RCC_OscConfig+0xdce>
 8001cbc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	fa93 f2a3 	rbit	r2, r3
 8001cd0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cd4:	601a      	str	r2, [r3, #0]
  return(result);
 8001cd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0xb2a>
 8001cf0:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	e01b      	b.n	8001d2e <HAL_RCC_OscConfig+0xb62>
 8001cf6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001d32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d36:	6011      	str	r1, [r2, #0]
 8001d38:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	fa92 f1a2 	rbit	r1, r2
 8001d42:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d46:	6011      	str	r1, [r2, #0]
  return(result);
 8001d48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	fab2 f282 	clz	r2, r2
 8001d52:	b252      	sxtb	r2, r2
 8001d54:	f042 0220 	orr.w	r2, r2, #32
 8001d58:	b252      	sxtb	r2, r2
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	f002 021f 	and.w	r2, r2, #31
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f202 	lsl.w	r2, r1, r2
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d19d      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	4924      	ldr	r1, [pc, #144]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
 8001d88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001da0:	601a      	str	r2, [r3, #0]
  return(result);
 8001da2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001da6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	461a      	mov	r2, r3
 8001db8:	2301      	movs	r3, #1
 8001dba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe fa66 	bl	800028c <HAL_GetTick>
 8001dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe fa61 	bl	800028c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e0df      	b.n	8001f9a <HAL_RCC_OscConfig+0xdce>
 8001dda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	fa93 f2a3 	rbit	r2, r3
 8001dee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001df2:	601a      	str	r2, [r3, #0]
  return(result);
 8001df4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001df8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d104      	bne.n	8001e18 <HAL_RCC_OscConfig+0xc4c>
 8001e0e:	4b01      	ldr	r3, [pc, #4]	; (8001e14 <HAL_RCC_OscConfig+0xc48>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xc84>
 8001e14:	40021000 	.word	0x40021000
 8001e18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	4b55      	ldr	r3, [pc, #340]	; (8001fa4 <HAL_RCC_OscConfig+0xdd8>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e58:	6011      	str	r1, [r2, #0]
 8001e5a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	fa92 f1a2 	rbit	r1, r2
 8001e64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e68:	6011      	str	r1, [r2, #0]
  return(result);
 8001e6a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	fab2 f282 	clz	r2, r2
 8001e74:	b252      	sxtb	r2, r2
 8001e76:	f042 0220 	orr.w	r2, r2, #32
 8001e7a:	b252      	sxtb	r2, r2
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f002 021f 	and.w	r2, r2, #31
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d09b      	beq.n	8001dc6 <HAL_RCC_OscConfig+0xbfa>
 8001e8e:	e083      	b.n	8001f98 <HAL_RCC_OscConfig+0xdcc>
 8001e90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	fa93 f2a3 	rbit	r2, r3
 8001ea4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea8:	601a      	str	r2, [r3, #0]
  return(result);
 8001eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eae:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7fe f9e2 	bl	800028c <HAL_GetTick>
 8001ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe f9dd 	bl	800028c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e05b      	b.n	8001f9a <HAL_RCC_OscConfig+0xdce>
 8001ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efa:	601a      	str	r2, [r3, #0]
  return(result);
 8001efc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0xd50>
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_RCC_OscConfig+0xdd8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e01b      	b.n	8001f54 <HAL_RCC_OscConfig+0xd88>
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	fa93 f2a3 	rbit	r2, r3
 8001f30:	f107 0320 	add.w	r3, r7, #32
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f107 0318 	add.w	r3, r7, #24
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_RCC_OscConfig+0xdd8>)
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	f107 0214 	add.w	r2, r7, #20
 8001f58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f5c:	6011      	str	r1, [r2, #0]
 8001f5e:	f107 0214 	add.w	r2, r7, #20
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	fa92 f1a2 	rbit	r1, r2
 8001f68:	f107 0210 	add.w	r2, r7, #16
 8001f6c:	6011      	str	r1, [r2, #0]
  return(result);
 8001f6e:	f107 0210 	add.w	r2, r7, #16
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b252      	sxtb	r2, r2
 8001f7a:	f042 0220 	orr.w	r2, r2, #32
 8001f7e:	b252      	sxtb	r2, r2
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f002 021f 	and.w	r2, r2, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d19d      	bne.n	8001ece <HAL_RCC_OscConfig+0xd02>
 8001f92:	e001      	b.n	8001f98 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b09e      	sub	sp, #120	; 0x78
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e164      	b.n	800228a <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b92      	ldr	r3, [pc, #584]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d910      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b8f      	ldr	r3, [pc, #572]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 0207 	bic.w	r2, r3, #7
 8001fd6:	498d      	ldr	r1, [pc, #564]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b8b      	ldr	r3, [pc, #556]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e14c      	b.n	800228a <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffc:	4b84      	ldr	r3, [pc, #528]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4981      	ldr	r1, [pc, #516]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80df 	beq.w	80021da <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d13d      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xf8>
 8002024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002028:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d102      	bne.n	800204e <HAL_RCC_ClockConfig+0xa6>
 8002048:	4b71      	ldr	r3, [pc, #452]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	e00f      	b.n	800206e <HAL_RCC_ClockConfig+0xc6>
 800204e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002052:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	667b      	str	r3, [r7, #100]	; 0x64
 800205c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002060:	663b      	str	r3, [r7, #96]	; 0x60
 8002062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800206a:	4b69      	ldr	r3, [pc, #420]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002072:	65ba      	str	r2, [r7, #88]	; 0x58
 8002074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002076:	fa92 f2a2 	rbit	r2, r2
 800207a:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 800207c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800207e:	fab2 f282 	clz	r2, r2
 8002082:	b252      	sxtb	r2, r2
 8002084:	f042 0220 	orr.w	r2, r2, #32
 8002088:	b252      	sxtb	r2, r2
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f002 021f 	and.w	r2, r2, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f202 	lsl.w	r2, r1, r2
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d17d      	bne.n	8002198 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0f4      	b.n	800228a <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d13d      	bne.n	8002124 <HAL_RCC_ClockConfig+0x17c>
 80020a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80020b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d102      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x12a>
 80020cc:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	e00f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x14a>
 80020d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
 80020e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e4:	643b      	str	r3, [r7, #64]	; 0x40
 80020e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ee:	4b48      	ldr	r3, [pc, #288]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80020f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b252      	sxtb	r2, r2
 8002108:	f042 0220 	orr.w	r2, r2, #32
 800210c:	b252      	sxtb	r2, r2
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f002 021f 	and.w	r2, r2, #31
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d13b      	bne.n	8002198 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0b2      	b.n	800228a <HAL_RCC_ClockConfig+0x2e2>
 8002124:	2302      	movs	r3, #2
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d102      	bne.n	800214c <HAL_RCC_ClockConfig+0x1a4>
 8002146:	4b32      	ldr	r3, [pc, #200]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	e00d      	b.n	8002168 <HAL_RCC_ClockConfig+0x1c0>
 800214c:	2302      	movs	r3, #2
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
 8002158:	2302      	movs	r3, #2
 800215a:	623b      	str	r3, [r7, #32]
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	2202      	movs	r2, #2
 800216a:	61ba      	str	r2, [r7, #24]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	fa92 f2a2 	rbit	r2, r2
 8002172:	617a      	str	r2, [r7, #20]
  return(result);
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	fab2 f282 	clz	r2, r2
 800217a:	b252      	sxtb	r2, r2
 800217c:	f042 0220 	orr.w	r2, r2, #32
 8002180:	b252      	sxtb	r2, r2
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f002 021f 	and.w	r2, r2, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e078      	b.n	800228a <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f023 0203 	bic.w	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	491a      	ldr	r1, [pc, #104]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021aa:	f7fe f86f 	bl	800028c <HAL_GetTick>
 80021ae:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b2:	f7fe f86b 	bl	800028c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e060      	b.n	800228a <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 020c 	and.w	r2, r3, #12
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d1eb      	bne.n	80021b2 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d215      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 0207 	bic.w	r2, r3, #7
 80021f0:	4906      	ldr	r1, [pc, #24]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d006      	beq.n	8002214 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e03f      	b.n	800228a <HAL_RCC_ClockConfig+0x2e2>
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000
 8002210:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <HAL_RCC_ClockConfig+0x2ec>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4919      	ldr	r1, [pc, #100]	; (8002294 <HAL_RCC_ClockConfig+0x2ec>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_RCC_ClockConfig+0x2ec>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4911      	ldr	r1, [pc, #68]	; (8002294 <HAL_RCC_ClockConfig+0x2ec>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002252:	f000 f825 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 8002256:	4601      	mov	r1, r0
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_RCC_ClockConfig+0x2ec>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002260:	23f0      	movs	r3, #240	; 0xf0
 8002262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	60fb      	str	r3, [r7, #12]
  return(result);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	4a08      	ldr	r2, [pc, #32]	; (8002298 <HAL_RCC_ClockConfig+0x2f0>)
 8002278:	5cd3      	ldrb	r3, [r2, r3]
 800227a:	fa21 f303 	lsr.w	r3, r1, r3
 800227e:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_RCC_ClockConfig+0x2f4>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002282:	2000      	movs	r0, #0
 8002284:	f7fd ffbe 	bl	8000204 <HAL_InitTick>
  
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3778      	adds	r7, #120	; 0x78
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	08003544 	.word	0x08003544
 800229c:	20000008 	.word	0x20000008

080022a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b08b      	sub	sp, #44	; 0x2c
 80022a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x36>
 80022ce:	e03c      	b.n	800234a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d0:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022d2:	623b      	str	r3, [r7, #32]
      break;
 80022d4:	e03c      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022dc:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80022e0:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	607b      	str	r3, [r7, #4]
  return(result);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	f003 020f 	and.w	r2, r3, #15
 8002302:	230f      	movs	r3, #15
 8002304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	60fb      	str	r3, [r7, #12]
  return(result);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <HAL_RCC_GetSysClockFreq+0xcc>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002328:	4a0e      	ldr	r2, [pc, #56]	; (8002364 <HAL_RCC_GetSysClockFreq+0xc4>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
 8002338:	e004      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <HAL_RCC_GetSysClockFreq+0xd0>)
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	623b      	str	r3, [r7, #32]
      break;
 8002348:	e002      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_GetSysClockFreq+0xc4>)
 800234c:	623b      	str	r3, [r7, #32]
      break;
 800234e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002350:	6a3b      	ldr	r3, [r7, #32]
}
 8002352:	4618      	mov	r0, r3
 8002354:	372c      	adds	r7, #44	; 0x2c
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	007a1200 	.word	0x007a1200
 8002368:	08003524 	.word	0x08003524
 800236c:	08003534 	.word	0x08003534
 8002370:	003d0900 	.word	0x003d0900

08002374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_RCC_GetHCLKFreq+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000008 	.word	0x20000008

0800238c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002392:	f7ff ffef 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002396:	4601      	mov	r1, r0
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023a0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80023a4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	603b      	str	r3, [r7, #0]
  return(result);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08003554 	.word	0x08003554

080023d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023d6:	f7ff ffcd 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023da:	4601      	mov	r1, r0
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80023e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80023e8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	603b      	str	r3, [r7, #0]
  return(result);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	08003554 	.word	0x08003554

08002414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b092      	sub	sp, #72	; 0x48
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80cf 	beq.w	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002438:	4b8d      	ldr	r3, [pc, #564]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10e      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b8a      	ldr	r3, [pc, #552]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	4a89      	ldr	r2, [pc, #548]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244e:	61d3      	str	r3, [r2, #28]
 8002450:	4b87      	ldr	r3, [pc, #540]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b84      	ldr	r3, [pc, #528]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b81      	ldr	r3, [pc, #516]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a80      	ldr	r2, [pc, #512]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002478:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7fd ff07 	bl	800028c <HAL_GetTick>
 800247e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e008      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7fd ff03 	bl	800028c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	; 0x64
 800248e:	d901      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0e9      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x254>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b77      	ldr	r3, [pc, #476]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024a0:	4b73      	ldr	r3, [pc, #460]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d07c      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d075      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024be:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	461a      	mov	r2, r3
 80024e6:	2301      	movs	r3, #1
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	461a      	mov	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800250c:	4a58      	ldr	r2, [pc, #352]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002510:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d046      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fd feb6 	bl	800028c <HAL_GetTick>
 8002520:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	e00a      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7fd feb2 	bl	800028c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e096      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800253a:	2302      	movs	r3, #2
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	2302      	movs	r3, #2
 8002548:	623b      	str	r3, [r7, #32]
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	61fb      	str	r3, [r7, #28]
  return(result);
 8002552:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d102      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002568:	4b41      	ldr	r3, [pc, #260]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	e007      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800256e:	2302      	movs	r3, #2
 8002570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2202      	movs	r2, #2
 8002580:	613a      	str	r2, [r7, #16]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	fa92 f2a2 	rbit	r2, r2
 8002588:	60fa      	str	r2, [r7, #12]
  return(result);
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	fab2 f282 	clz	r2, r2
 8002590:	b252      	sxtb	r2, r2
 8002592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002596:	b252      	sxtb	r2, r2
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f002 021f 	and.w	r2, r2, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0bc      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025aa:	4b31      	ldr	r3, [pc, #196]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	492e      	ldr	r1, [pc, #184]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a29      	ldr	r2, [pc, #164]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f023 0203 	bic.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4921      	ldr	r1, [pc, #132]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f023 0210 	bic.w	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	491a      	ldr	r1, [pc, #104]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002608:	4313      	orrs	r3, r2
 800260a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	4912      	ldr	r1, [pc, #72]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002626:	4313      	orrs	r3, r2
 8002628:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	490b      	ldr	r1, [pc, #44]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002644:	4313      	orrs	r3, r2
 8002646:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3748      	adds	r7, #72	; 0x48
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
 8002678:	10908100 	.word	0x10908100

0800267c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e043      	b.n	8002716 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fdb8 	bl	8003218 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8b9 	bl	8002838 <UART_SetConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e022      	b.n	8002716 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fa13 	bl	8002b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026fc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fa9a 	bl	8002c48 <UART_CheckIdleState>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b088      	sub	sp, #32
 8002722:	af02      	add	r7, sp, #8
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b20      	cmp	r3, #32
 800273c:	d177      	bne.n	800282e <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_UART_Transmit+0x2c>
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e070      	b.n	8002830 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_UART_Transmit+0x3e>
 8002758:	2302      	movs	r3, #2
 800275a:	e069      	b.n	8002830 <HAL_UART_Transmit+0x112>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2221      	movs	r2, #33	; 0x21
 800276e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002772:	f7fd fd8b 	bl	800028c <HAL_GetTick>
 8002776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002788:	e034      	b.n	80027f4 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2200      	movs	r2, #0
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fa97 	bl	8002cda <UART_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e03c      	b.n	8002830 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	d111      	bne.n	80027e4 <HAL_UART_Transmit+0xc6>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10d      	bne.n	80027e4 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d8:	b292      	uxth	r2, r2
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3302      	adds	r3, #2
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	e007      	b.n	80027f4 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b292      	uxth	r2, r2
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1c4      	bne.n	800278a <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2200      	movs	r2, #0
 8002808:	2140      	movs	r1, #64	; 0x40
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa65 	bl	8002cda <UART_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e00a      	b.n	8002830 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e000      	b.n	8002830 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002844:	2310      	movs	r3, #16
 8002846:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002848:	2300      	movs	r3, #0
 800284a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800284c:	2300      	movs	r3, #0
 800284e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b9f      	ldr	r3, [pc, #636]	; (8002af0 <UART_SetConfig+0x2b8>)
 8002874:	4013      	ands	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	68f9      	ldr	r1, [r7, #12]
 800287c:	430b      	orrs	r3, r1
 800287e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a8e      	ldr	r2, [pc, #568]	; (8002af4 <UART_SetConfig+0x2bc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d121      	bne.n	8002904 <UART_SetConfig+0xcc>
 80028c0:	4b8d      	ldr	r3, [pc, #564]	; (8002af8 <UART_SetConfig+0x2c0>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d817      	bhi.n	80028fc <UART_SetConfig+0xc4>
 80028cc:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <UART_SetConfig+0x9c>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028f1 	.word	0x080028f1
 80028dc:	080028f7 	.word	0x080028f7
 80028e0:	080028eb 	.word	0x080028eb
 80028e4:	2300      	movs	r3, #0
 80028e6:	75fb      	strb	r3, [r7, #23]
 80028e8:	e01e      	b.n	8002928 <UART_SetConfig+0xf0>
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
 80028ee:	e01b      	b.n	8002928 <UART_SetConfig+0xf0>
 80028f0:	2304      	movs	r3, #4
 80028f2:	75fb      	strb	r3, [r7, #23]
 80028f4:	e018      	b.n	8002928 <UART_SetConfig+0xf0>
 80028f6:	2308      	movs	r3, #8
 80028f8:	75fb      	strb	r3, [r7, #23]
 80028fa:	e015      	b.n	8002928 <UART_SetConfig+0xf0>
 80028fc:	2310      	movs	r3, #16
 80028fe:	75fb      	strb	r3, [r7, #23]
 8002900:	bf00      	nop
 8002902:	e011      	b.n	8002928 <UART_SetConfig+0xf0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a7c      	ldr	r2, [pc, #496]	; (8002afc <UART_SetConfig+0x2c4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d102      	bne.n	8002914 <UART_SetConfig+0xdc>
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
 8002912:	e009      	b.n	8002928 <UART_SetConfig+0xf0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a79      	ldr	r2, [pc, #484]	; (8002b00 <UART_SetConfig+0x2c8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d102      	bne.n	8002924 <UART_SetConfig+0xec>
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
 8002922:	e001      	b.n	8002928 <UART_SetConfig+0xf0>
 8002924:	2310      	movs	r3, #16
 8002926:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002930:	d16f      	bne.n	8002a12 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d857      	bhi.n	80029e8 <UART_SetConfig+0x1b0>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <UART_SetConfig+0x108>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002965 	.word	0x08002965
 8002944:	08002981 	.word	0x08002981
 8002948:	0800299d 	.word	0x0800299d
 800294c:	080029e9 	.word	0x080029e9
 8002950:	080029b7 	.word	0x080029b7
 8002954:	080029e9 	.word	0x080029e9
 8002958:	080029e9 	.word	0x080029e9
 800295c:	080029e9 	.word	0x080029e9
 8002960:	080029d3 	.word	0x080029d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002964:	f7ff fd12 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 8002968:	4603      	mov	r3, r0
 800296a:	005a      	lsls	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	441a      	add	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	82bb      	strh	r3, [r7, #20]
        break;
 800297e:	e036      	b.n	80029ee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002980:	f7ff fd26 	bl	80023d0 <HAL_RCC_GetPCLK2Freq>
 8002984:	4603      	mov	r3, r0
 8002986:	005a      	lsls	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	441a      	add	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	82bb      	strh	r3, [r7, #20]
        break;
 800299a:	e028      	b.n	80029ee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80029a6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6852      	ldr	r2, [r2, #4]
 80029ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80029b2:	82bb      	strh	r3, [r7, #20]
        break;
 80029b4:	e01b      	b.n	80029ee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029b6:	f7ff fc73 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 80029ba:	4603      	mov	r3, r0
 80029bc:	005a      	lsls	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	441a      	add	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	82bb      	strh	r3, [r7, #20]
        break;
 80029d0:	e00d      	b.n	80029ee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	82bb      	strh	r3, [r7, #20]
        break;
 80029e6:	e002      	b.n	80029ee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	74fb      	strb	r3, [r7, #19]
        break;
 80029ec:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80029ee:	8abb      	ldrh	r3, [r7, #20]
 80029f0:	f023 030f 	bic.w	r3, r3, #15
 80029f4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029f6:	8abb      	ldrh	r3, [r7, #20]
 80029f8:	105b      	asrs	r3, r3, #1
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	897a      	ldrh	r2, [r7, #10]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	e069      	b.n	8002ae6 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d863      	bhi.n	8002ae0 <UART_SetConfig+0x2a8>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <UART_SetConfig+0x1e8>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a45 	.word	0x08002a45
 8002a24:	08002a65 	.word	0x08002a65
 8002a28:	08002a85 	.word	0x08002a85
 8002a2c:	08002ae1 	.word	0x08002ae1
 8002a30:	08002aa5 	.word	0x08002aa5
 8002a34:	08002ae1 	.word	0x08002ae1
 8002a38:	08002ae1 	.word	0x08002ae1
 8002a3c:	08002ae1 	.word	0x08002ae1
 8002a40:	08002ac5 	.word	0x08002ac5
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a44:	f7ff fca2 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	441a      	add	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60da      	str	r2, [r3, #12]
        break;
 8002a62:	e040      	b.n	8002ae6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a64:	f7ff fcb4 	bl	80023d0 <HAL_RCC_GetPCLK2Freq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	441a      	add	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60da      	str	r2, [r3, #12]
        break;
 8002a82:	e030      	b.n	8002ae6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002a8e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6852      	ldr	r2, [r2, #4]
 8002a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60da      	str	r2, [r3, #12]
        break;
 8002aa2:	e020      	b.n	8002ae6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002aa4:	f7ff fbfc 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60da      	str	r2, [r3, #12]
        break;
 8002ac2:	e010      	b.n	8002ae6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60da      	str	r2, [r3, #12]
        break;
 8002ade:	e002      	b.n	8002ae6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ae4:	bf00      	nop
    }
  }

  return ret;
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]

}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	efff69f3 	.word	0xefff69f3
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40004400 	.word	0x40004400
 8002b00:	40004800 	.word	0x40004800

08002b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01a      	beq.n	8002c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c02:	d10a      	bne.n	8002c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c5a:	f7fd fb17 	bl	800028c <HAL_GetTick>
 8002c5e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d10e      	bne.n	8002c8c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f82c 	bl	8002cda <UART_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e022      	b.n	8002cd2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d10e      	bne.n	8002cb8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f816 	bl	8002cda <UART_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e00c      	b.n	8002cd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cea:	e02c      	b.n	8002d46 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d028      	beq.n	8002d46 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x30>
 8002cfa:	f7fd fac7 	bl	800028c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d21d      	bcs.n	8002d46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e00f      	b.n	8002d66 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	bf0c      	ite	eq
 8002d56:	2301      	moveq	r3, #1
 8002d58:	2300      	movne	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d0c3      	beq.n	8002cec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d76:	f7fd fa2f 	bl	80001d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d7a:	f000 f88d 	bl	8002e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d7e:	f000 f955 	bl	800302c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d82:	f000 f923 	bl	8002fcc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002d86:	f000 f8e1 	bl	8002f4c <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  data[0] = 0;
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <main+0x104>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
	  data[1] = 1;
 8002d90:	4b38      	ldr	r3, [pc, #224]	; (8002e74 <main+0x104>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	705a      	strb	r2, [r3, #1]
	  data[2] = 5;
 8002d96:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <main+0x104>)
 8002d98:	2205      	movs	r2, #5
 8002d9a:	709a      	strb	r2, [r3, #2]

	  HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDRESS , data, 3, 1000);
 8002d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	2303      	movs	r3, #3
 8002da4:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <main+0x104>)
 8002da6:	21a0      	movs	r1, #160	; 0xa0
 8002da8:	4833      	ldr	r0, [pc, #204]	; (8002e78 <main+0x108>)
 8002daa:	f7fd fda1 	bl	80008f0 <HAL_I2C_Master_Transmit>
	  HAL_Delay(500);
 8002dae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002db2:	f7fd fa77 	bl	80002a4 <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDRESS , data, 2, 1000);
 8002db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	4a2d      	ldr	r2, [pc, #180]	; (8002e74 <main+0x104>)
 8002dc0:	21a0      	movs	r1, #160	; 0xa0
 8002dc2:	482d      	ldr	r0, [pc, #180]	; (8002e78 <main+0x108>)
 8002dc4:	f7fd fd94 	bl	80008f0 <HAL_I2C_Master_Transmit>
	  HAL_Delay(500);
 8002dc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dcc:	f7fd fa6a 	bl	80002a4 <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, EEPROM_ADDRESS, &recebido, 1, 1000);
 8002dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	4a28      	ldr	r2, [pc, #160]	; (8002e7c <main+0x10c>)
 8002dda:	21a0      	movs	r1, #160	; 0xa0
 8002ddc:	4826      	ldr	r0, [pc, #152]	; (8002e78 <main+0x108>)
 8002dde:	f7fd fe87 	bl	8000af0 <HAL_I2C_Master_Receive>

	//  sprintf(timer,"%d:%d:%d\r\n", hour, minute, second);

	  itoa(data[2], (uint8_t*)buffer1, 10);
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <main+0x104>)
 8002de4:	789b      	ldrb	r3, [r3, #2]
 8002de6:	220a      	movs	r2, #10
 8002de8:	4925      	ldr	r1, [pc, #148]	; (8002e80 <main+0x110>)
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fb34 	bl	8003458 <itoa>
	  HAL_UART_Transmit(&huart2, "Valor enviado:", 12, 1000);
 8002df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df4:	220c      	movs	r2, #12
 8002df6:	4923      	ldr	r1, [pc, #140]	; (8002e84 <main+0x114>)
 8002df8:	4823      	ldr	r0, [pc, #140]	; (8002e88 <main+0x118>)
 8002dfa:	f7ff fc90 	bl	800271e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer1, strlen(buffer1), 1000);
 8002dfe:	4820      	ldr	r0, [pc, #128]	; (8002e80 <main+0x110>)
 8002e00:	f7fd f9e2 	bl	80001c8 <strlen>
 8002e04:	4603      	mov	r3, r0
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0c:	491c      	ldr	r1, [pc, #112]	; (8002e80 <main+0x110>)
 8002e0e:	481e      	ldr	r0, [pc, #120]	; (8002e88 <main+0x118>)
 8002e10:	f7ff fc85 	bl	800271e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, "\n\r", 2, 1000);
 8002e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e18:	2202      	movs	r2, #2
 8002e1a:	491c      	ldr	r1, [pc, #112]	; (8002e8c <main+0x11c>)
 8002e1c:	481a      	ldr	r0, [pc, #104]	; (8002e88 <main+0x118>)
 8002e1e:	f7ff fc7e 	bl	800271e <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e26:	f7fd fa3d 	bl	80002a4 <HAL_Delay>

	  itoa(recebido, (uint8_t*)buffer2, 10);
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <main+0x10c>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	220a      	movs	r2, #10
 8002e30:	4917      	ldr	r1, [pc, #92]	; (8002e90 <main+0x120>)
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fb10 	bl	8003458 <itoa>
	  HAL_UART_Transmit(&huart2, "Valor recebido:", 12, 1000);
 8002e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e3c:	220c      	movs	r2, #12
 8002e3e:	4915      	ldr	r1, [pc, #84]	; (8002e94 <main+0x124>)
 8002e40:	4811      	ldr	r0, [pc, #68]	; (8002e88 <main+0x118>)
 8002e42:	f7ff fc6c 	bl	800271e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer2, strlen(buffer2), 1000);
 8002e46:	4812      	ldr	r0, [pc, #72]	; (8002e90 <main+0x120>)
 8002e48:	f7fd f9be 	bl	80001c8 <strlen>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e54:	490e      	ldr	r1, [pc, #56]	; (8002e90 <main+0x120>)
 8002e56:	480c      	ldr	r0, [pc, #48]	; (8002e88 <main+0x118>)
 8002e58:	f7ff fc61 	bl	800271e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, "\n\r", 2, 1000);
 8002e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e60:	2202      	movs	r2, #2
 8002e62:	490a      	ldr	r1, [pc, #40]	; (8002e8c <main+0x11c>)
 8002e64:	4808      	ldr	r0, [pc, #32]	; (8002e88 <main+0x118>)
 8002e66:	f7ff fc5a 	bl	800271e <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002e6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e6e:	f7fd fa19 	bl	80002a4 <HAL_Delay>
  {
 8002e72:	e78a      	b.n	8002d8a <main+0x1a>
 8002e74:	200000ac 	.word	0x200000ac
 8002e78:	2000002c 	.word	0x2000002c
 8002e7c:	200000aa 	.word	0x200000aa
 8002e80:	20000120 	.word	0x20000120
 8002e84:	08003500 	.word	0x08003500
 8002e88:	200000b0 	.word	0x200000b0
 8002e8c:	08003510 	.word	0x08003510
 8002e90:	20000078 	.word	0x20000078
 8002e94:	08003514 	.word	0x08003514

08002e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b096      	sub	sp, #88	; 0x58
 8002e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ea2:	2228      	movs	r2, #40	; 0x28
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fad8 	bl	800345c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eac:	f107 031c 	add.w	r3, r7, #28
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	611a      	str	r2, [r3, #16]
 8002eca:	615a      	str	r2, [r3, #20]
 8002ecc:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ed6:	2310      	movs	r3, #16
 8002ed8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eda:	2302      	movs	r3, #2
 8002edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002ee2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002ee6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f96d 	bl	80011cc <HAL_RCC_OscConfig>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002ef8:	f000 f900 	bl	80030fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002efc:	230f      	movs	r3, #15
 8002efe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f00:	2302      	movs	r3, #2
 8002f02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f12:	f107 031c 	add.w	r3, r7, #28
 8002f16:	2102      	movs	r1, #2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff f845 	bl	8001fa8 <HAL_RCC_ClockConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002f24:	f000 f8ea 	bl	80030fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f30:	463b      	mov	r3, r7
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fa6e 	bl	8002414 <HAL_RCCEx_PeriphCLKConfig>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002f3e:	f000 f8dd 	bl	80030fc <Error_Handler>
  }
}
 8002f42:	bf00      	nop
 8002f44:	3758      	adds	r7, #88	; 0x58
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <MX_I2C1_Init+0x78>)
 8002f54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002f56:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f58:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <MX_I2C1_Init+0x7c>)
 8002f5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f62:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f68:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f86:	480e      	ldr	r0, [pc, #56]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f88:	f7fd fc22 	bl	80007d0 <HAL_I2C_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f92:	f000 f8b3 	bl	80030fc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f96:	2100      	movs	r1, #0
 8002f98:	4809      	ldr	r0, [pc, #36]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002f9a:	f7fe f87d 	bl	8001098 <HAL_I2CEx_ConfigAnalogFilter>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002fa4:	f000 f8aa 	bl	80030fc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <MX_I2C1_Init+0x74>)
 8002fac:	f7fe f8bf 	bl	800112e <HAL_I2CEx_ConfigDigitalFilter>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002fb6:	f000 f8a1 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000002c 	.word	0x2000002c
 8002fc4:	40005400 	.word	0x40005400
 8002fc8:	2000090e 	.word	0x2000090e

08002fcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <MX_USART2_UART_Init+0x58>)
 8002fd2:	4a15      	ldr	r2, [pc, #84]	; (8003028 <MX_USART2_UART_Init+0x5c>)
 8002fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002fd6:	4b13      	ldr	r3, [pc, #76]	; (8003024 <MX_USART2_UART_Init+0x58>)
 8002fd8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <MX_USART2_UART_Init+0x58>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <MX_USART2_UART_Init+0x58>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fea:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <MX_USART2_UART_Init+0x58>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <MX_USART2_UART_Init+0x58>)
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <MX_USART2_UART_Init+0x58>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <MX_USART2_UART_Init+0x58>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <MX_USART2_UART_Init+0x58>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <MX_USART2_UART_Init+0x58>)
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800300e:	4805      	ldr	r0, [pc, #20]	; (8003024 <MX_USART2_UART_Init+0x58>)
 8003010:	f7ff fb34 	bl	800267c <HAL_UART_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800301a:	f000 f86f 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200000b0 	.word	0x200000b0
 8003028:	40004400 	.word	0x40004400

0800302c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	609a      	str	r2, [r3, #8]
 800303e:	60da      	str	r2, [r3, #12]
 8003040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003042:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <MX_GPIO_Init+0xc4>)
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <MX_GPIO_Init+0xc4>)
 8003048:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800304c:	6153      	str	r3, [r2, #20]
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <MX_GPIO_Init+0xc4>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800305a:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <MX_GPIO_Init+0xc4>)
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <MX_GPIO_Init+0xc4>)
 8003060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003064:	6153      	str	r3, [r2, #20]
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <MX_GPIO_Init+0xc4>)
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <MX_GPIO_Init+0xc4>)
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <MX_GPIO_Init+0xc4>)
 8003078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307c:	6153      	str	r3, [r2, #20]
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <MX_GPIO_Init+0xc4>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <MX_GPIO_Init+0xc4>)
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <MX_GPIO_Init+0xc4>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6153      	str	r3, [r2, #20]
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <MX_GPIO_Init+0xc4>)
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2120      	movs	r1, #32
 80030a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030aa:	f7fd fb79 	bl	80007a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80030ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <MX_GPIO_Init+0xc8>)
 80030b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4619      	mov	r1, r3
 80030c2:	480d      	ldr	r0, [pc, #52]	; (80030f8 <MX_GPIO_Init+0xcc>)
 80030c4:	f7fd f9f6 	bl	80004b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80030c8:	2320      	movs	r3, #32
 80030ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030cc:	2301      	movs	r3, #1
 80030ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d4:	2300      	movs	r3, #0
 80030d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	4619      	mov	r1, r3
 80030de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e2:	f7fd f9e7 	bl	80004b4 <HAL_GPIO_Init>

}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	10210000 	.word	0x10210000
 80030f8:	48000800 	.word	0x48000800

080030fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003112:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <HAL_MspInit+0x44>)
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_MspInit+0x44>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6193      	str	r3, [r2, #24]
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_MspInit+0x44>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_MspInit+0x44>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_MspInit+0x44>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	61d3      	str	r3, [r2, #28]
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_MspInit+0x44>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003142:	2007      	movs	r0, #7
 8003144:	f7fd f982 	bl	800044c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a26      	ldr	r2, [pc, #152]	; (800320c <HAL_I2C_MspInit+0xb8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d145      	bne.n	8003202 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003176:	4b26      	ldr	r3, [pc, #152]	; (8003210 <HAL_I2C_MspInit+0xbc>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4a25      	ldr	r2, [pc, #148]	; (8003210 <HAL_I2C_MspInit+0xbc>)
 800317c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003180:	6153      	str	r3, [r2, #20]
 8003182:	4b23      	ldr	r3, [pc, #140]	; (8003210 <HAL_I2C_MspInit+0xbc>)
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_I2C_MspInit+0xbc>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <HAL_I2C_MspInit+0xbc>)
 8003194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003198:	6153      	str	r3, [r2, #20]
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_I2C_MspInit+0xbc>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ac:	2312      	movs	r3, #18
 80031ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b0:	2301      	movs	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031b8:	2304      	movs	r3, #4
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4619      	mov	r1, r3
 80031c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c6:	f7fd f975 	bl	80004b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ce:	2312      	movs	r3, #18
 80031d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031d2:	2301      	movs	r3, #1
 80031d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031d6:	2303      	movs	r3, #3
 80031d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031da:	2304      	movs	r3, #4
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	4619      	mov	r1, r3
 80031e4:	480b      	ldr	r0, [pc, #44]	; (8003214 <HAL_I2C_MspInit+0xc0>)
 80031e6:	f7fd f965 	bl	80004b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_I2C_MspInit+0xbc>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <HAL_I2C_MspInit+0xbc>)
 80031f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031f4:	61d3      	str	r3, [r2, #28]
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_I2C_MspInit+0xbc>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003202:	bf00      	nop
 8003204:	3728      	adds	r7, #40	; 0x28
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40005400 	.word	0x40005400
 8003210:	40021000 	.word	0x40021000
 8003214:	48000400 	.word	0x48000400

08003218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a17      	ldr	r2, [pc, #92]	; (8003294 <HAL_UART_MspInit+0x7c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d128      	bne.n	800328c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_UART_MspInit+0x80>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4a16      	ldr	r2, [pc, #88]	; (8003298 <HAL_UART_MspInit+0x80>)
 8003240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003244:	61d3      	str	r3, [r2, #28]
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_UART_MspInit+0x80>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_UART_MspInit+0x80>)
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HAL_UART_MspInit+0x80>)
 8003258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325c:	6153      	str	r3, [r2, #20]
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <HAL_UART_MspInit+0x80>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800326a:	230c      	movs	r3, #12
 800326c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003276:	2303      	movs	r3, #3
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800327a:	2307      	movs	r3, #7
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003288:	f7fd f914 	bl	80004b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800328c:	bf00      	nop
 800328e:	3728      	adds	r7, #40	; 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40004400 	.word	0x40004400
 8003298:	40021000 	.word	0x40021000

0800329c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ae:	e7fe      	b.n	80032ae <HardFault_Handler+0x4>

080032b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <MemManage_Handler+0x4>

080032b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ba:	e7fe      	b.n	80032ba <BusFault_Handler+0x4>

080032bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <UsageFault_Handler+0x4>

080032c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f0:	f7fc ffb8 	bl	8000264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032fc:	4b1f      	ldr	r3, [pc, #124]	; (800337c <SystemInit+0x84>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	4a1e      	ldr	r2, [pc, #120]	; (800337c <SystemInit+0x84>)
 8003304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <SystemInit+0x88>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <SystemInit+0x88>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <SystemInit+0x88>)
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4918      	ldr	r1, [pc, #96]	; (8003380 <SystemInit+0x88>)
 800331e:	4b19      	ldr	r3, [pc, #100]	; (8003384 <SystemInit+0x8c>)
 8003320:	4013      	ands	r3, r2
 8003322:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <SystemInit+0x88>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a15      	ldr	r2, [pc, #84]	; (8003380 <SystemInit+0x88>)
 800332a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800332e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <SystemInit+0x88>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a11      	ldr	r2, [pc, #68]	; (8003380 <SystemInit+0x88>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <SystemInit+0x88>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <SystemInit+0x88>)
 8003346:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800334a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <SystemInit+0x88>)
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <SystemInit+0x88>)
 8003352:	f023 030f 	bic.w	r3, r3, #15
 8003356:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <SystemInit+0x88>)
 800335a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335c:	4908      	ldr	r1, [pc, #32]	; (8003380 <SystemInit+0x88>)
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <SystemInit+0x90>)
 8003360:	4013      	ands	r3, r2
 8003362:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <SystemInit+0x88>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <SystemInit+0x84>)
 800336c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003370:	609a      	str	r2, [r3, #8]
#endif
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00
 8003380:	40021000 	.word	0x40021000
 8003384:	f87fc00c 	.word	0xf87fc00c
 8003388:	ff00fccc 	.word	0xff00fccc

0800338c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800338c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003390:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003392:	e003      	b.n	800339c <LoopCopyDataInit>

08003394 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003396:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003398:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800339a:	3104      	adds	r1, #4

0800339c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800339c:	480b      	ldr	r0, [pc, #44]	; (80033cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80033a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80033a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80033a4:	d3f6      	bcc.n	8003394 <CopyDataInit>
	ldr	r2, =_sbss
 80033a6:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80033a8:	e002      	b.n	80033b0 <LoopFillZerobss>

080033aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80033aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80033ac:	f842 3b04 	str.w	r3, [r2], #4

080033b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <LoopForever+0x16>)
	cmp	r2, r3
 80033b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80033b4:	d3f9      	bcc.n	80033aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033b6:	f7ff ff9f 	bl	80032f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ba:	f000 f811 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033be:	f7ff fcd7 	bl	8002d70 <main>

080033c2 <LoopForever>:

LoopForever:
    b LoopForever
 80033c2:	e7fe      	b.n	80033c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033c4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80033c8:	0800358c 	.word	0x0800358c
	ldr	r0, =_sdata
 80033cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80033d0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80033d4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80033d8:	20000154 	.word	0x20000154

080033dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033dc:	e7fe      	b.n	80033dc <ADC1_2_IRQHandler>
	...

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4e0d      	ldr	r6, [pc, #52]	; (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e6:	1ba4      	subs	r4, r4, r6
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2500      	movs	r5, #0
 80033ec:	42a5      	cmp	r5, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4e0b      	ldr	r6, [pc, #44]	; (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	; (8003424 <__libc_init_array+0x44>)
 80033f4:	f000 f878 	bl	80034e8 <_init>
 80033f8:	1ba4      	subs	r4, r4, r6
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2500      	movs	r5, #0
 80033fe:	42a5      	cmp	r5, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003408:	4798      	blx	r3
 800340a:	3501      	adds	r5, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003412:	4798      	blx	r3
 8003414:	3501      	adds	r5, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08003584 	.word	0x08003584
 800341c:	08003584 	.word	0x08003584
 8003420:	08003584 	.word	0x08003584
 8003424:	08003588 	.word	0x08003588

08003428 <__itoa>:
 8003428:	1e93      	subs	r3, r2, #2
 800342a:	2b22      	cmp	r3, #34	; 0x22
 800342c:	b510      	push	{r4, lr}
 800342e:	460c      	mov	r4, r1
 8003430:	d904      	bls.n	800343c <__itoa+0x14>
 8003432:	2300      	movs	r3, #0
 8003434:	700b      	strb	r3, [r1, #0]
 8003436:	461c      	mov	r4, r3
 8003438:	4620      	mov	r0, r4
 800343a:	bd10      	pop	{r4, pc}
 800343c:	2a0a      	cmp	r2, #10
 800343e:	d109      	bne.n	8003454 <__itoa+0x2c>
 8003440:	2800      	cmp	r0, #0
 8003442:	da07      	bge.n	8003454 <__itoa+0x2c>
 8003444:	232d      	movs	r3, #45	; 0x2d
 8003446:	700b      	strb	r3, [r1, #0]
 8003448:	4240      	negs	r0, r0
 800344a:	2101      	movs	r1, #1
 800344c:	4421      	add	r1, r4
 800344e:	f000 f80d 	bl	800346c <__utoa>
 8003452:	e7f1      	b.n	8003438 <__itoa+0x10>
 8003454:	2100      	movs	r1, #0
 8003456:	e7f9      	b.n	800344c <__itoa+0x24>

08003458 <itoa>:
 8003458:	f7ff bfe6 	b.w	8003428 <__itoa>

0800345c <memset>:
 800345c:	4402      	add	r2, r0
 800345e:	4603      	mov	r3, r0
 8003460:	4293      	cmp	r3, r2
 8003462:	d100      	bne.n	8003466 <memset+0xa>
 8003464:	4770      	bx	lr
 8003466:	f803 1b01 	strb.w	r1, [r3], #1
 800346a:	e7f9      	b.n	8003460 <memset+0x4>

0800346c <__utoa>:
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <__utoa+0x78>)
 8003470:	b08b      	sub	sp, #44	; 0x2c
 8003472:	4605      	mov	r5, r0
 8003474:	460c      	mov	r4, r1
 8003476:	466e      	mov	r6, sp
 8003478:	f103 0c20 	add.w	ip, r3, #32
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	4637      	mov	r7, r6
 8003482:	c703      	stmia	r7!, {r0, r1}
 8003484:	3308      	adds	r3, #8
 8003486:	4563      	cmp	r3, ip
 8003488:	463e      	mov	r6, r7
 800348a:	d1f7      	bne.n	800347c <__utoa+0x10>
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	791b      	ldrb	r3, [r3, #4]
 8003490:	713b      	strb	r3, [r7, #4]
 8003492:	1e93      	subs	r3, r2, #2
 8003494:	2b22      	cmp	r3, #34	; 0x22
 8003496:	6038      	str	r0, [r7, #0]
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	d904      	bls.n	80034a8 <__utoa+0x3c>
 800349e:	7023      	strb	r3, [r4, #0]
 80034a0:	461c      	mov	r4, r3
 80034a2:	4620      	mov	r0, r4
 80034a4:	b00b      	add	sp, #44	; 0x2c
 80034a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a8:	1e66      	subs	r6, r4, #1
 80034aa:	fbb5 f0f2 	udiv	r0, r5, r2
 80034ae:	af0a      	add	r7, sp, #40	; 0x28
 80034b0:	fb02 5510 	mls	r5, r2, r0, r5
 80034b4:	443d      	add	r5, r7
 80034b6:	1c59      	adds	r1, r3, #1
 80034b8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80034bc:	f806 5f01 	strb.w	r5, [r6, #1]!
 80034c0:	4605      	mov	r5, r0
 80034c2:	b968      	cbnz	r0, 80034e0 <__utoa+0x74>
 80034c4:	5460      	strb	r0, [r4, r1]
 80034c6:	4423      	add	r3, r4
 80034c8:	4622      	mov	r2, r4
 80034ca:	1b19      	subs	r1, r3, r4
 80034cc:	1b10      	subs	r0, r2, r4
 80034ce:	4281      	cmp	r1, r0
 80034d0:	dde7      	ble.n	80034a2 <__utoa+0x36>
 80034d2:	7811      	ldrb	r1, [r2, #0]
 80034d4:	7818      	ldrb	r0, [r3, #0]
 80034d6:	f802 0b01 	strb.w	r0, [r2], #1
 80034da:	f803 1901 	strb.w	r1, [r3], #-1
 80034de:	e7f4      	b.n	80034ca <__utoa+0x5e>
 80034e0:	460b      	mov	r3, r1
 80034e2:	e7e2      	b.n	80034aa <__utoa+0x3e>
 80034e4:	0800355c 	.word	0x0800355c

080034e8 <_init>:
 80034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ea:	bf00      	nop
 80034ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ee:	bc08      	pop	{r3}
 80034f0:	469e      	mov	lr, r3
 80034f2:	4770      	bx	lr

080034f4 <_fini>:
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f6:	bf00      	nop
 80034f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fa:	bc08      	pop	{r3}
 80034fc:	469e      	mov	lr, r3
 80034fe:	4770      	bx	lr
