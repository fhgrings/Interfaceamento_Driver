
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003574  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003994  08003994  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003994  08003994  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003994  08003994  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800399c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  080039a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080039a8  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de27  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a37  00000000  00000000  0002de63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002f8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  000300b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c4d1  00000000  00000000  00030818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000080ac  00000000  00000000  0004cce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d805  00000000  00000000  00054d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f259a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d8  00000000  00000000  000f2618  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036e4 	.word	0x080036e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080036e4 	.word	0x080036e4

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f92f 	bl	800043c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 ffae 	bl	8003144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f939 	bl	800048a <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f90f 	bl	8000452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	2000002c 	.word	0x2000002c

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	2000002c 	.word	0x2000002c

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_Delay+0x40>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8f7      	bhi.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004

080002d8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002f4:	4013      	ands	r3, r2
 80002f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	60d3      	str	r3, [r2, #12]
}
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <NVIC_GetPriorityGrouping+0x18>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	f003 0307 	and.w	r3, r3, #7
}
 800032e:	4618      	mov	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	6039      	str	r1, [r7, #0]
 8000346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034c:	2b00      	cmp	r3, #0
 800034e:	da0b      	bge.n	8000368 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	b2da      	uxtb	r2, r3
 8000354:	490c      	ldr	r1, [pc, #48]	; (8000388 <NVIC_SetPriority+0x4c>)
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f003 030f 	and.w	r3, r3, #15
 800035c:	3b04      	subs	r3, #4
 800035e:	0112      	lsls	r2, r2, #4
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	440b      	add	r3, r1
 8000364:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000366:	e009      	b.n	800037c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4907      	ldr	r1, [pc, #28]	; (800038c <NVIC_SetPriority+0x50>)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	0112      	lsls	r2, r2, #4
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	440b      	add	r3, r1
 8000378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	e000ed00 	.word	0xe000ed00
 800038c:	e000e100 	.word	0xe000e100

08000390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000390:	b480      	push	{r7}
 8000392:	b089      	sub	sp, #36	; 0x24
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f003 0307 	and.w	r3, r3, #7
 80003a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a4:	69fb      	ldr	r3, [r7, #28]
 80003a6:	f1c3 0307 	rsb	r3, r3, #7
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	bf28      	it	cs
 80003ae:	2304      	movcs	r3, #4
 80003b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	3304      	adds	r3, #4
 80003b6:	2b06      	cmp	r3, #6
 80003b8:	d902      	bls.n	80003c0 <NVIC_EncodePriority+0x30>
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3b03      	subs	r3, #3
 80003be:	e000      	b.n	80003c2 <NVIC_EncodePriority+0x32>
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c4:	f04f 32ff 	mov.w	r2, #4294967295
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	43da      	mvns	r2, r3
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	401a      	ands	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003d8:	f04f 31ff 	mov.w	r1, #4294967295
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	43d9      	mvns	r1, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e8:	4313      	orrs	r3, r2
         );
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3724      	adds	r7, #36	; 0x24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000408:	d301      	bcc.n	800040e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2301      	movs	r3, #1
 800040c:	e00f      	b.n	800042e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <SysTick_Config+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000416:	210f      	movs	r1, #15
 8000418:	f04f 30ff 	mov.w	r0, #4294967295
 800041c:	f7ff ff8e 	bl	800033c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x40>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SysTick_Config+0x40>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff47 	bl	80002d8 <NVIC_SetPriorityGrouping>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000464:	f7ff ff5c 	bl	8000320 <NVIC_GetPriorityGrouping>
 8000468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	6978      	ldr	r0, [r7, #20]
 8000470:	f7ff ff8e 	bl	8000390 <NVIC_EncodePriority>
 8000474:	4602      	mov	r2, r0
 8000476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff5d 	bl	800033c <NVIC_SetPriority>
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f7ff ffb0 	bl	80003f8 <SysTick_Config>
 8000498:	4603      	mov	r3, r0
}
 800049a:	4618      	mov	r0, r3
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b087      	sub	sp, #28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004ba:	e14e      	b.n	800075a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	2101      	movs	r1, #1
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	fa01 f303 	lsl.w	r3, r1, r3
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 8140 	beq.w	8000754 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d003      	beq.n	80004e4 <HAL_GPIO_Init+0x40>
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b12      	cmp	r3, #18
 80004e2:	d123      	bne.n	800052c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	08da      	lsrs	r2, r3, #3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3208      	adds	r2, #8
 80004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	f003 0307 	and.w	r3, r3, #7
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	220f      	movs	r2, #15
 80004fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	4013      	ands	r3, r2
 8000506:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	691a      	ldr	r2, [r3, #16]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	4313      	orrs	r3, r2
 800051c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	08da      	lsrs	r2, r3, #3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3208      	adds	r2, #8
 8000526:	6939      	ldr	r1, [r7, #16]
 8000528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	f003 0203 	and.w	r2, r3, #3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	4313      	orrs	r3, r2
 8000558:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d00b      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d007      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000574:	2b11      	cmp	r3, #17
 8000576:	d003      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	2b12      	cmp	r3, #18
 800057e:	d130      	bne.n	80005e2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2203      	movs	r2, #3
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005b6:	2201      	movs	r2, #1
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	4013      	ands	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	091b      	lsrs	r3, r3, #4
 80005cc:	f003 0201 	and.w	r2, r3, #1
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	4313      	orrs	r3, r2
 80005da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2203      	movs	r2, #3
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	693a      	ldr	r2, [r7, #16]
 80005f6:	4013      	ands	r3, r2
 80005f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	4313      	orrs	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	2b00      	cmp	r3, #0
 800061c:	f000 809a 	beq.w	8000754 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000620:	4b55      	ldr	r3, [pc, #340]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a54      	ldr	r2, [pc, #336]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b52      	ldr	r3, [pc, #328]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000638:	4a50      	ldr	r2, [pc, #320]	; (800077c <HAL_GPIO_Init+0x2d8>)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	3302      	adds	r3, #2
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	f003 0303 	and.w	r3, r3, #3
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	220f      	movs	r2, #15
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	43db      	mvns	r3, r3
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000662:	d013      	beq.n	800068c <HAL_GPIO_Init+0x1e8>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a46      	ldr	r2, [pc, #280]	; (8000780 <HAL_GPIO_Init+0x2dc>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d00d      	beq.n	8000688 <HAL_GPIO_Init+0x1e4>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a45      	ldr	r2, [pc, #276]	; (8000784 <HAL_GPIO_Init+0x2e0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d007      	beq.n	8000684 <HAL_GPIO_Init+0x1e0>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a44      	ldr	r2, [pc, #272]	; (8000788 <HAL_GPIO_Init+0x2e4>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d101      	bne.n	8000680 <HAL_GPIO_Init+0x1dc>
 800067c:	2303      	movs	r3, #3
 800067e:	e006      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000680:	2305      	movs	r3, #5
 8000682:	e004      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000684:	2302      	movs	r3, #2
 8000686:	e002      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000688:	2301      	movs	r3, #1
 800068a:	e000      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 800068c:	2300      	movs	r3, #0
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	f002 0203 	and.w	r2, r2, #3
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	4093      	lsls	r3, r2
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	4313      	orrs	r3, r2
 800069c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800069e:	4937      	ldr	r1, [pc, #220]	; (800077c <HAL_GPIO_Init+0x2d8>)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	3302      	adds	r3, #2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	43db      	mvns	r3, r3
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006d0:	4a2e      	ldr	r2, [pc, #184]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	43db      	mvns	r3, r3
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	4013      	ands	r3, r2
 80006e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	43db      	mvns	r3, r3
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4313      	orrs	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_GPIO_Init+0x2e8>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	43db      	mvns	r3, r3
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	4013      	ands	r3, r2
 8000738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4313      	orrs	r3, r2
 800074c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3301      	adds	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	fa22 f303 	lsr.w	r3, r2, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	f47f aea9 	bne.w	80004bc <HAL_GPIO_Init+0x18>
  }
}
 800076a:	bf00      	nop
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000
 8000780:	48000400 	.word	0x48000400
 8000784:	48000800 	.word	0x48000800
 8000788:	48000c00 	.word	0x48000c00
 800078c:	40010400 	.word	0x40010400

08000790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
 800079c:	4613      	mov	r3, r2
 800079e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007a0:	787b      	ldrb	r3, [r7, #1]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007ac:	e002      	b.n	80007b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007ae:	887a      	ldrh	r2, [r7, #2]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d102      	bne.n	80007da <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80007d4:	2301      	movs	r3, #1
 80007d6:	f000 beda 	b.w	800158e <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 816e 	beq.w	8000ac6 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007ea:	4bb5      	ldr	r3, [pc, #724]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f003 030c 	and.w	r3, r3, #12
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d00c      	beq.n	8000810 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007f6:	4bb2      	ldr	r3, [pc, #712]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	f003 030c 	and.w	r3, r3, #12
 80007fe:	2b08      	cmp	r3, #8
 8000800:	d15a      	bne.n	80008b8 <HAL_RCC_OscConfig+0xf8>
 8000802:	4baf      	ldr	r3, [pc, #700]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800080a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800080e:	d153      	bne.n	80008b8 <HAL_RCC_OscConfig+0xf8>
 8000810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000814:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000818:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800081c:	fa93 f3a3 	rbit	r3, r3
 8000820:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000824:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000828:	fab3 f383 	clz	r3, r3
 800082c:	b2db      	uxtb	r3, r3
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	b2db      	uxtb	r3, r3
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b01      	cmp	r3, #1
 800083a:	d102      	bne.n	8000842 <HAL_RCC_OscConfig+0x82>
 800083c:	4ba0      	ldr	r3, [pc, #640]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	e015      	b.n	800086e <HAL_RCC_OscConfig+0xae>
 8000842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000846:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800084a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800084e:	fa93 f3a3 	rbit	r3, r3
 8000852:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000856:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800085a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800085e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000862:	fa93 f3a3 	rbit	r3, r3
 8000866:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800086a:	4b95      	ldr	r3, [pc, #596]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 800086c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000872:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000876:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800087a:	fa92 f2a2 	rbit	r2, r2
 800087e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000882:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000886:	fab2 f282 	clz	r2, r2
 800088a:	b252      	sxtb	r2, r2
 800088c:	f042 0220 	orr.w	r2, r2, #32
 8000890:	b252      	sxtb	r2, r2
 8000892:	b2d2      	uxtb	r2, r2
 8000894:	f002 021f 	and.w	r2, r2, #31
 8000898:	2101      	movs	r1, #1
 800089a:	fa01 f202 	lsl.w	r2, r1, r2
 800089e:	4013      	ands	r3, r2
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f000 810f 	beq.w	8000ac4 <HAL_RCC_OscConfig+0x304>
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f040 8109 	bne.w	8000ac4 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f000 be6b 	b.w	800158e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c2:	d106      	bne.n	80008d2 <HAL_RCC_OscConfig+0x112>
 80008c4:	4b7e      	ldr	r3, [pc, #504]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a7d      	ldr	r2, [pc, #500]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 80008ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	e030      	b.n	8000934 <HAL_RCC_OscConfig+0x174>
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10c      	bne.n	80008f6 <HAL_RCC_OscConfig+0x136>
 80008dc:	4b78      	ldr	r3, [pc, #480]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a77      	ldr	r2, [pc, #476]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 80008e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b75      	ldr	r3, [pc, #468]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a74      	ldr	r2, [pc, #464]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 80008ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	e01e      	b.n	8000934 <HAL_RCC_OscConfig+0x174>
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000900:	d10c      	bne.n	800091c <HAL_RCC_OscConfig+0x15c>
 8000902:	4b6f      	ldr	r3, [pc, #444]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a6e      	ldr	r2, [pc, #440]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 8000908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	4b6c      	ldr	r3, [pc, #432]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a6b      	ldr	r2, [pc, #428]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 8000914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e00b      	b.n	8000934 <HAL_RCC_OscConfig+0x174>
 800091c:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a67      	ldr	r2, [pc, #412]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 8000922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b65      	ldr	r3, [pc, #404]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a64      	ldr	r2, [pc, #400]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 800092e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000932:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000934:	4b62      	ldr	r3, [pc, #392]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 8000936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000938:	f023 020f 	bic.w	r2, r3, #15
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	495f      	ldr	r1, [pc, #380]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 8000944:	4313      	orrs	r3, r2
 8000946:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d05a      	beq.n	8000a08 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000952:	f7ff fc93 	bl	800027c <HAL_GetTick>
 8000956:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095a:	e00a      	b.n	8000972 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800095c:	f7ff fc8e 	bl	800027c <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	2b64      	cmp	r3, #100	; 0x64
 800096a:	d902      	bls.n	8000972 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 800096c:	2303      	movs	r3, #3
 800096e:	f000 be0e 	b.w	800158e <HAL_RCC_OscConfig+0xdce>
 8000972:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000976:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800097e:	fa93 f3a3 	rbit	r3, r3
 8000982:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000986:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	095b      	lsrs	r3, r3, #5
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b01      	cmp	r3, #1
 800099c:	d102      	bne.n	80009a4 <HAL_RCC_OscConfig+0x1e4>
 800099e:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	e015      	b.n	80009d0 <HAL_RCC_OscConfig+0x210>
 80009a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009a8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80009b0:	fa93 f3a3 	rbit	r3, r3
 80009b4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80009b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009bc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80009c0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80009c4:	fa93 f3a3 	rbit	r3, r3
 80009c8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80009cc:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009d8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80009dc:	fa92 f2a2 	rbit	r2, r2
 80009e0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80009e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b252      	sxtb	r2, r2
 80009ee:	f042 0220 	orr.w	r2, r2, #32
 80009f2:	b252      	sxtb	r2, r2
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	f002 021f 	and.w	r2, r2, #31
 80009fa:	2101      	movs	r1, #1
 80009fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0aa      	beq.n	800095c <HAL_RCC_OscConfig+0x19c>
 8000a06:	e05e      	b.n	8000ac6 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a08:	f7ff fc38 	bl	800027c <HAL_GetTick>
 8000a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a10:	e00a      	b.n	8000a28 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a12:	f7ff fc33 	bl	800027c <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b64      	cmp	r3, #100	; 0x64
 8000a20:	d902      	bls.n	8000a28 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000a22:	2303      	movs	r3, #3
 8000a24:	f000 bdb3 	b.w	800158e <HAL_RCC_OscConfig+0xdce>
 8000a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a2c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a34:	fa93 f3a3 	rbit	r3, r3
 8000a38:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000a3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a40:	fab3 f383 	clz	r3, r3
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d102      	bne.n	8000a5a <HAL_RCC_OscConfig+0x29a>
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	e015      	b.n	8000a86 <HAL_RCC_OscConfig+0x2c6>
 8000a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a5e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a66:	fa93 f3a3 	rbit	r3, r3
 8000a6a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a7a:	fa93 f3a3 	rbit	r3, r3
 8000a7e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_RCC_OscConfig+0x300>)
 8000a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a8a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000a8e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000a92:	fa92 f2a2 	rbit	r2, r2
 8000a96:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000a9a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	b252      	sxtb	r2, r2
 8000aa4:	f042 0220 	orr.w	r2, r2, #32
 8000aa8:	b252      	sxtb	r2, r2
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	f002 021f 	and.w	r2, r2, #31
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1aa      	bne.n	8000a12 <HAL_RCC_OscConfig+0x252>
 8000abc:	e003      	b.n	8000ac6 <HAL_RCC_OscConfig+0x306>
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f000 8170 	beq.w	8000db6 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ad6:	4bd0      	ldr	r3, [pc, #832]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 030c 	and.w	r3, r3, #12
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00b      	beq.n	8000afa <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ae2:	4bcd      	ldr	r3, [pc, #820]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d16d      	bne.n	8000bca <HAL_RCC_OscConfig+0x40a>
 8000aee:	4bca      	ldr	r3, [pc, #808]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d167      	bne.n	8000bca <HAL_RCC_OscConfig+0x40a>
 8000afa:	2302      	movs	r3, #2
 8000afc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b00:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b04:	fa93 f3a3 	rbit	r3, r3
 8000b08:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000b0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b10:	fab3 f383 	clz	r3, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d102      	bne.n	8000b2a <HAL_RCC_OscConfig+0x36a>
 8000b24:	4bbc      	ldr	r3, [pc, #752]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	e013      	b.n	8000b52 <HAL_RCC_OscConfig+0x392>
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b30:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b34:	fa93 f3a3 	rbit	r3, r3
 8000b38:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b42:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b46:	fa93 f3a3 	rbit	r3, r3
 8000b4a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b4e:	4bb2      	ldr	r3, [pc, #712]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	2202      	movs	r2, #2
 8000b54:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b58:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b5c:	fa92 f2a2 	rbit	r2, r2
 8000b60:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000b64:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	b252      	sxtb	r2, r2
 8000b6e:	f042 0220 	orr.w	r2, r2, #32
 8000b72:	b252      	sxtb	r2, r2
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	f002 021f 	and.w	r2, r2, #31
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b80:	4013      	ands	r3, r2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d007      	beq.n	8000b96 <HAL_RCC_OscConfig+0x3d6>
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d002      	beq.n	8000b96 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f000 bcfc 	b.w	800158e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b96:	4ba0      	ldr	r3, [pc, #640]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6959      	ldr	r1, [r3, #20]
 8000ba4:	23f8      	movs	r3, #248	; 0xf8
 8000ba6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000baa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000bae:	fa93 f3a3 	rbit	r3, r3
 8000bb2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000bb6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000bba:	fab3 f383 	clz	r3, r3
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	4995      	ldr	r1, [pc, #596]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc8:	e0f5      	b.n	8000db6 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 8085 	beq.w	8000ce0 <HAL_RCC_OscConfig+0x520>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bdc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000be0:	fa93 f3a3 	rbit	r3, r3
 8000be4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000be8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bec:	fab3 f383 	clz	r3, r3
 8000bf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c00:	f7ff fb3c 	bl	800027c <HAL_GetTick>
 8000c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c08:	e00a      	b.n	8000c20 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fb37 	bl	800027c <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d902      	bls.n	8000c20 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	f000 bcb7 	b.w	800158e <HAL_RCC_OscConfig+0xdce>
 8000c20:	2302      	movs	r3, #2
 8000c22:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c26:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000c32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c36:	fab3 f383 	clz	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	095b      	lsrs	r3, r3, #5
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d102      	bne.n	8000c50 <HAL_RCC_OscConfig+0x490>
 8000c4a:	4b73      	ldr	r3, [pc, #460]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	e013      	b.n	8000c78 <HAL_RCC_OscConfig+0x4b8>
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c56:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c5a:	fa93 f3a3 	rbit	r3, r3
 8000c5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c62:	2302      	movs	r3, #2
 8000c64:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c68:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c6c:	fa93 f3a3 	rbit	r3, r3
 8000c70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c74:	4b68      	ldr	r3, [pc, #416]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c78:	2202      	movs	r2, #2
 8000c7a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c7e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c82:	fa92 f2a2 	rbit	r2, r2
 8000c86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000c8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b252      	sxtb	r2, r2
 8000c94:	f042 0220 	orr.w	r2, r2, #32
 8000c98:	b252      	sxtb	r2, r2
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	f002 021f 	and.w	r2, r2, #31
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d0ae      	beq.n	8000c0a <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cac:	4b5a      	ldr	r3, [pc, #360]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6959      	ldr	r1, [r3, #20]
 8000cba:	23f8      	movs	r3, #248	; 0xf8
 8000cbc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000cc4:	fa93 f3a3 	rbit	r3, r3
 8000cc8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000ccc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000cd0:	fab3 f383 	clz	r3, r3
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	494f      	ldr	r1, [pc, #316]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
 8000cde:	e06a      	b.n	8000db6 <HAL_RCC_OscConfig+0x5f6>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000cea:	fa93 f3a3 	rbit	r3, r3
 8000cee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000cf2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cf6:	fab3 f383 	clz	r3, r3
 8000cfa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cfe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	461a      	mov	r2, r3
 8000d06:	2300      	movs	r3, #0
 8000d08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0a:	f7ff fab7 	bl	800027c <HAL_GetTick>
 8000d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d12:	e00a      	b.n	8000d2a <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d14:	f7ff fab2 	bl	800027c <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d902      	bls.n	8000d2a <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	f000 bc32 	b.w	800158e <HAL_RCC_OscConfig+0xdce>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d34:	fa93 f3a3 	rbit	r3, r3
 8000d38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000d3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d40:	fab3 f383 	clz	r3, r3
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d102      	bne.n	8000d5a <HAL_RCC_OscConfig+0x59a>
 8000d54:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	e013      	b.n	8000d82 <HAL_RCC_OscConfig+0x5c2>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d76:	fa93 f3a3 	rbit	r3, r3
 8000d7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <HAL_RCC_OscConfig+0x658>)
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	2202      	movs	r2, #2
 8000d84:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000d88:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000d8c:	fa92 f2a2 	rbit	r2, r2
 8000d90:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000d94:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b252      	sxtb	r2, r2
 8000d9e:	f042 0220 	orr.w	r2, r2, #32
 8000da2:	b252      	sxtb	r2, r2
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	f002 021f 	and.w	r2, r2, #31
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1ae      	bne.n	8000d14 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 80d8 	beq.w	8000f76 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d067      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x6e0>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000dda:	fa93 f3a3 	rbit	r3, r3
 8000dde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000de2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000de6:	fab3 f383 	clz	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_RCC_OscConfig+0x65c>)
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	461a      	mov	r2, r3
 8000df4:	2301      	movs	r3, #1
 8000df6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df8:	f7ff fa40 	bl	800027c <HAL_GetTick>
 8000dfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e00:	e00e      	b.n	8000e20 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e02:	f7ff fa3b 	bl	800027c <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d906      	bls.n	8000e20 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e3bb      	b.n	800158e <HAL_RCC_OscConfig+0xdce>
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	10908120 	.word	0x10908120
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e3c:	fa93 f2a3 	rbit	r2, r3
 8000e40:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	fa93 f2a3 	rbit	r2, r3
 8000e58:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5e:	4ba5      	ldr	r3, [pc, #660]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8000e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e62:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e66:	2102      	movs	r1, #2
 8000e68:	6019      	str	r1, [r3, #0]
 8000e6a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	fa93 f1a3 	rbit	r1, r3
 8000e74:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e78:	6019      	str	r1, [r3, #0]
  return(result);
 8000e7a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	fab3 f383 	clz	r3, r3
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0b1      	beq.n	8000e02 <HAL_RCC_OscConfig+0x642>
 8000e9e:	e06a      	b.n	8000f76 <HAL_RCC_OscConfig+0x7b6>
 8000ea0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	fa93 f2a3 	rbit	r2, r3
 8000eb2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000eb6:	601a      	str	r2, [r3, #0]
  return(result);
 8000eb8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ebc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b8c      	ldr	r3, [pc, #560]	; (80010f8 <HAL_RCC_OscConfig+0x938>)
 8000ec6:	4413      	add	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	461a      	mov	r2, r3
 8000ecc:	2300      	movs	r3, #0
 8000ece:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed0:	f7ff f9d4 	bl	800027c <HAL_GetTick>
 8000ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed8:	e009      	b.n	8000eee <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eda:	f7ff f9cf 	bl	800027c <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e34f      	b.n	800158e <HAL_RCC_OscConfig+0xdce>
 8000eee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	fa93 f2a3 	rbit	r2, r3
 8000f00:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	fa93 f2a3 	rbit	r2, r3
 8000f18:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f22:	2202      	movs	r2, #2
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	fa93 f2a3 	rbit	r2, r3
 8000f30:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f36:	4b6f      	ldr	r3, [pc, #444]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8000f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f3e:	2102      	movs	r1, #2
 8000f40:	6019      	str	r1, [r3, #0]
 8000f42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	fa93 f1a3 	rbit	r1, r3
 8000f4c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f50:	6019      	str	r1, [r3, #0]
  return(result);
 8000f52:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	fab3 f383 	clz	r3, r3
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1b1      	bne.n	8000eda <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 8159 	beq.w	8001238 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f8c:	4b59      	ldr	r3, [pc, #356]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d112      	bne.n	8000fbe <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	4b56      	ldr	r3, [pc, #344]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	4a55      	ldr	r2, [pc, #340]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8000f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	61d3      	str	r3, [r2, #28]
 8000fa4:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbe:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <HAL_RCC_OscConfig+0x93c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d11a      	bne.n	8001000 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fca:	4b4c      	ldr	r3, [pc, #304]	; (80010fc <HAL_RCC_OscConfig+0x93c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a4b      	ldr	r2, [pc, #300]	; (80010fc <HAL_RCC_OscConfig+0x93c>)
 8000fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff f951 	bl	800027c <HAL_GetTick>
 8000fda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fde:	e009      	b.n	8000ff4 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe0:	f7ff f94c 	bl	800027c <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b64      	cmp	r3, #100	; 0x64
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e2cc      	b.n	800158e <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff4:	4b41      	ldr	r3, [pc, #260]	; (80010fc <HAL_RCC_OscConfig+0x93c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0ef      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d106      	bne.n	8001018 <HAL_RCC_OscConfig+0x858>
 800100a:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4a39      	ldr	r2, [pc, #228]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6213      	str	r3, [r2, #32]
 8001016:	e02f      	b.n	8001078 <HAL_RCC_OscConfig+0x8b8>
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x87c>
 8001022:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a33      	ldr	r2, [pc, #204]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a30      	ldr	r2, [pc, #192]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	e01d      	b.n	8001078 <HAL_RCC_OscConfig+0x8b8>
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b05      	cmp	r3, #5
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x8a0>
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4a2a      	ldr	r2, [pc, #168]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6213      	str	r3, [r2, #32]
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6213      	str	r3, [r2, #32]
 800105e:	e00b      	b.n	8001078 <HAL_RCC_OscConfig+0x8b8>
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001066:	f023 0301 	bic.w	r3, r3, #1
 800106a:	6213      	str	r3, [r2, #32]
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d06b      	beq.n	800115a <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001082:	f7ff f8fb 	bl	800027c <HAL_GetTick>
 8001086:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108a:	e00b      	b.n	80010a4 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800108c:	f7ff f8f6 	bl	800027c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f241 3288 	movw	r2, #5000	; 0x1388
 800109c:	4293      	cmp	r3, r2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e274      	b.n	800158e <HAL_RCC_OscConfig+0xdce>
 80010a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010a8:	2202      	movs	r2, #2
 80010aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	fa93 f2a3 	rbit	r2, r3
 80010b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010c0:	2202      	movs	r2, #2
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	fa93 f2a3 	rbit	r2, r3
 80010ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010d2:	601a      	str	r2, [r3, #0]
  return(result);
 80010d4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	095b      	lsrs	r3, r3, #5
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d108      	bne.n	8001100 <HAL_RCC_OscConfig+0x940>
 80010ee:	4b01      	ldr	r3, [pc, #4]	; (80010f4 <HAL_RCC_OscConfig+0x934>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	e013      	b.n	800111c <HAL_RCC_OscConfig+0x95c>
 80010f4:	40021000 	.word	0x40021000
 80010f8:	10908120 	.word	0x10908120
 80010fc:	40007000 	.word	0x40007000
 8001100:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001104:	2202      	movs	r2, #2
 8001106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001108:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	fa93 f2a3 	rbit	r2, r3
 8001112:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4bbb      	ldr	r3, [pc, #748]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001120:	2102      	movs	r1, #2
 8001122:	6011      	str	r1, [r2, #0]
 8001124:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	fa92 f1a2 	rbit	r1, r2
 800112e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001132:	6011      	str	r1, [r2, #0]
  return(result);
 8001134:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	fab2 f282 	clz	r2, r2
 800113e:	b252      	sxtb	r2, r2
 8001140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001144:	b252      	sxtb	r2, r2
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	f002 021f 	and.w	r2, r2, #31
 800114c:	2101      	movs	r1, #1
 800114e:	fa01 f202 	lsl.w	r2, r1, r2
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d099      	beq.n	800108c <HAL_RCC_OscConfig+0x8cc>
 8001158:	e064      	b.n	8001224 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff f88f 	bl	800027c <HAL_GetTick>
 800115e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001164:	f7ff f88a 	bl	800027c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	; 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e208      	b.n	800158e <HAL_RCC_OscConfig+0xdce>
 800117c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001180:	2202      	movs	r2, #2
 8001182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	fa93 f2a3 	rbit	r2, r3
 800118e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001198:	2202      	movs	r2, #2
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	fa93 f2a3 	rbit	r2, r3
 80011a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011aa:	601a      	str	r2, [r3, #0]
  return(result);
 80011ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	095b      	lsrs	r3, r3, #5
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d102      	bne.n	80011cc <HAL_RCC_OscConfig+0xa0c>
 80011c6:	4b90      	ldr	r3, [pc, #576]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	e00d      	b.n	80011e8 <HAL_RCC_OscConfig+0xa28>
 80011cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011d0:	2202      	movs	r2, #2
 80011d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	fa93 f2a3 	rbit	r2, r3
 80011de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	4b88      	ldr	r3, [pc, #544]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011ec:	2102      	movs	r1, #2
 80011ee:	6011      	str	r1, [r2, #0]
 80011f0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	fa92 f1a2 	rbit	r1, r2
 80011fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011fe:	6011      	str	r1, [r2, #0]
  return(result);
 8001200:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	fab2 f282 	clz	r2, r2
 800120a:	b252      	sxtb	r2, r2
 800120c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001210:	b252      	sxtb	r2, r2
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	f002 021f 	and.w	r2, r2, #31
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d19f      	bne.n	8001164 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001224:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001228:	2b01      	cmp	r3, #1
 800122a:	d105      	bne.n	8001238 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800122c:	4b76      	ldr	r3, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	4a75      	ldr	r2, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 8001232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001236:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 81a4 	beq.w	800158c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001244:	4b70      	ldr	r3, [pc, #448]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b08      	cmp	r3, #8
 800124e:	f000 819b 	beq.w	8001588 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	2b02      	cmp	r3, #2
 800125a:	f040 8113 	bne.w	8001484 <HAL_RCC_OscConfig+0xcc4>
 800125e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001262:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001268:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	fa93 f2a3 	rbit	r2, r3
 8001272:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001276:	601a      	str	r2, [r3, #0]
  return(result);
 8001278:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800127c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001286:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	461a      	mov	r2, r3
 800128e:	2300      	movs	r3, #0
 8001290:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7fe fff3 	bl	800027c <HAL_GetTick>
 8001296:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129a:	e009      	b.n	80012b0 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129c:	f7fe ffee 	bl	800027c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e16e      	b.n	800158e <HAL_RCC_OscConfig+0xdce>
 80012b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	fa93 f2a3 	rbit	r2, r3
 80012c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012c8:	601a      	str	r2, [r3, #0]
  return(result);
 80012ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d102      	bne.n	80012ea <HAL_RCC_OscConfig+0xb2a>
 80012e4:	4b48      	ldr	r3, [pc, #288]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	e01b      	b.n	8001322 <HAL_RCC_OscConfig+0xb62>
 80012ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	fa93 f2a3 	rbit	r2, r3
 80012fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001308:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	fa93 f2a3 	rbit	r2, r3
 8001318:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001326:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800132a:	6011      	str	r1, [r2, #0]
 800132c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	fa92 f1a2 	rbit	r1, r2
 8001336:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800133a:	6011      	str	r1, [r2, #0]
  return(result);
 800133c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	fab2 f282 	clz	r2, r2
 8001346:	b252      	sxtb	r2, r2
 8001348:	f042 0220 	orr.w	r2, r2, #32
 800134c:	b252      	sxtb	r2, r2
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	f002 021f 	and.w	r2, r2, #31
 8001354:	2101      	movs	r1, #1
 8001356:	fa01 f202 	lsl.w	r2, r1, r2
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d19d      	bne.n	800129c <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	430b      	orrs	r3, r1
 8001376:	4924      	ldr	r1, [pc, #144]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
 800137c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fa93 f2a3 	rbit	r2, r3
 8001390:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001394:	601a      	str	r2, [r3, #0]
  return(result);
 8001396:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800139a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139c:	fab3 f383 	clz	r3, r3
 80013a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	461a      	mov	r2, r3
 80013ac:	2301      	movs	r3, #1
 80013ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7fe ff64 	bl	800027c <HAL_GetTick>
 80013b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b8:	e009      	b.n	80013ce <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ba:	f7fe ff5f 	bl	800027c <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e0df      	b.n	800158e <HAL_RCC_OscConfig+0xdce>
 80013ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	fa93 f2a3 	rbit	r2, r3
 80013e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013e6:	601a      	str	r2, [r3, #0]
  return(result);
 80013e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	095b      	lsrs	r3, r3, #5
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d104      	bne.n	800140c <HAL_RCC_OscConfig+0xc4c>
 8001402:	4b01      	ldr	r3, [pc, #4]	; (8001408 <HAL_RCC_OscConfig+0xc48>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	e01d      	b.n	8001444 <HAL_RCC_OscConfig+0xc84>
 8001408:	40021000 	.word	0x40021000
 800140c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fa93 f2a3 	rbit	r2, r3
 8001420:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800142a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	fa93 f2a3 	rbit	r2, r3
 800143a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	4b55      	ldr	r3, [pc, #340]	; (8001598 <HAL_RCC_OscConfig+0xdd8>)
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001448:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800144c:	6011      	str	r1, [r2, #0]
 800144e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	fa92 f1a2 	rbit	r1, r2
 8001458:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800145c:	6011      	str	r1, [r2, #0]
  return(result);
 800145e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	fab2 f282 	clz	r2, r2
 8001468:	b252      	sxtb	r2, r2
 800146a:	f042 0220 	orr.w	r2, r2, #32
 800146e:	b252      	sxtb	r2, r2
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f002 021f 	and.w	r2, r2, #31
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d09b      	beq.n	80013ba <HAL_RCC_OscConfig+0xbfa>
 8001482:	e083      	b.n	800158c <HAL_RCC_OscConfig+0xdcc>
 8001484:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800148c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	fa93 f2a3 	rbit	r2, r3
 8001498:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800149c:	601a      	str	r2, [r3, #0]
  return(result);
 800149e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	461a      	mov	r2, r3
 80014b4:	2300      	movs	r3, #0
 80014b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7fe fee0 	bl	800027c <HAL_GetTick>
 80014bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c0:	e009      	b.n	80014d6 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c2:	f7fe fedb 	bl	800027c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e05b      	b.n	800158e <HAL_RCC_OscConfig+0xdce>
 80014d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	fa93 f2a3 	rbit	r2, r3
 80014ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ee:	601a      	str	r2, [r3, #0]
  return(result);
 80014f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	095b      	lsrs	r3, r3, #5
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <HAL_RCC_OscConfig+0xd50>
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_RCC_OscConfig+0xdd8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	e01b      	b.n	8001548 <HAL_RCC_OscConfig+0xd88>
 8001510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	fa93 f2a3 	rbit	r2, r3
 8001524:	f107 0320 	add.w	r3, r7, #32
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	fa93 f2a3 	rbit	r2, r3
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_RCC_OscConfig+0xdd8>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	f107 0214 	add.w	r2, r7, #20
 800154c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001550:	6011      	str	r1, [r2, #0]
 8001552:	f107 0214 	add.w	r2, r7, #20
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	fa92 f1a2 	rbit	r1, r2
 800155c:	f107 0210 	add.w	r2, r7, #16
 8001560:	6011      	str	r1, [r2, #0]
  return(result);
 8001562:	f107 0210 	add.w	r2, r7, #16
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	fab2 f282 	clz	r2, r2
 800156c:	b252      	sxtb	r2, r2
 800156e:	f042 0220 	orr.w	r2, r2, #32
 8001572:	b252      	sxtb	r2, r2
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	f002 021f 	and.w	r2, r2, #31
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	4013      	ands	r3, r2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d19d      	bne.n	80014c2 <HAL_RCC_OscConfig+0xd02>
 8001586:	e001      	b.n	800158c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b09e      	sub	sp, #120	; 0x78
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e164      	b.n	800187e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b92      	ldr	r3, [pc, #584]	; (8001800 <HAL_RCC_ClockConfig+0x264>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d910      	bls.n	80015e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b8f      	ldr	r3, [pc, #572]	; (8001800 <HAL_RCC_ClockConfig+0x264>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 0207 	bic.w	r2, r3, #7
 80015ca:	498d      	ldr	r1, [pc, #564]	; (8001800 <HAL_RCC_ClockConfig+0x264>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b8b      	ldr	r3, [pc, #556]	; (8001800 <HAL_RCC_ClockConfig+0x264>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e14c      	b.n	800187e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b84      	ldr	r3, [pc, #528]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4981      	ldr	r1, [pc, #516]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 80df 	beq.w	80017ce <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d13d      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf8>
 8001618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d102      	bne.n	8001642 <HAL_RCC_ClockConfig+0xa6>
 800163c:	4b71      	ldr	r3, [pc, #452]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	e00f      	b.n	8001662 <HAL_RCC_ClockConfig+0xc6>
 8001642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001646:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	667b      	str	r3, [r7, #100]	; 0x64
 8001650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001654:	663b      	str	r3, [r7, #96]	; 0x60
 8001656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800165e:	4b69      	ldr	r3, [pc, #420]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001666:	65ba      	str	r2, [r7, #88]	; 0x58
 8001668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800166a:	fa92 f2a2 	rbit	r2, r2
 800166e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001672:	fab2 f282 	clz	r2, r2
 8001676:	b252      	sxtb	r2, r2
 8001678:	f042 0220 	orr.w	r2, r2, #32
 800167c:	b252      	sxtb	r2, r2
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	f002 021f 	and.w	r2, r2, #31
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d17d      	bne.n	800178c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0f4      	b.n	800187e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d13d      	bne.n	8001718 <HAL_RCC_ClockConfig+0x17c>
 800169c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80016aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x12a>
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	e00f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x14a>
 80016c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
 80016d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016d8:	643b      	str	r3, [r7, #64]	; 0x40
 80016da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e2:	4b48      	ldr	r3, [pc, #288]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80016ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016ee:	fa92 f2a2 	rbit	r2, r2
 80016f2:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80016f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016f6:	fab2 f282 	clz	r2, r2
 80016fa:	b252      	sxtb	r2, r2
 80016fc:	f042 0220 	orr.w	r2, r2, #32
 8001700:	b252      	sxtb	r2, r2
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f002 021f 	and.w	r2, r2, #31
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d13b      	bne.n	800178c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0b2      	b.n	800187e <HAL_RCC_ClockConfig+0x2e2>
 8001718:	2302      	movs	r3, #2
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d102      	bne.n	8001740 <HAL_RCC_ClockConfig+0x1a4>
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	e00d      	b.n	800175c <HAL_RCC_ClockConfig+0x1c0>
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
 800174c:	2302      	movs	r3, #2
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	61fb      	str	r3, [r7, #28]
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2202      	movs	r2, #2
 800175e:	61ba      	str	r2, [r7, #24]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	fa92 f2a2 	rbit	r2, r2
 8001766:	617a      	str	r2, [r7, #20]
  return(result);
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	fab2 f282 	clz	r2, r2
 800176e:	b252      	sxtb	r2, r2
 8001770:	f042 0220 	orr.w	r2, r2, #32
 8001774:	b252      	sxtb	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f002 021f 	and.w	r2, r2, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e078      	b.n	800187e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f023 0203 	bic.w	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	491a      	ldr	r1, [pc, #104]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800179e:	f7fe fd6d 	bl	800027c <HAL_GetTick>
 80017a2:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a6:	f7fe fd69 	bl	800027c <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e060      	b.n	800187e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_RCC_ClockConfig+0x268>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 020c 	and.w	r2, r3, #12
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d1eb      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_RCC_ClockConfig+0x264>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d215      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_RCC_ClockConfig+0x264>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 0207 	bic.w	r2, r3, #7
 80017e4:	4906      	ldr	r1, [pc, #24]	; (8001800 <HAL_RCC_ClockConfig+0x264>)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_RCC_ClockConfig+0x264>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d006      	beq.n	8001808 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e03f      	b.n	800187e <HAL_RCC_ClockConfig+0x2e2>
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000
 8001804:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_RCC_ClockConfig+0x2ec>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4919      	ldr	r1, [pc, #100]	; (8001888 <HAL_RCC_ClockConfig+0x2ec>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_RCC_ClockConfig+0x2ec>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4911      	ldr	r1, [pc, #68]	; (8001888 <HAL_RCC_ClockConfig+0x2ec>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001846:	f000 f825 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 800184a:	4601      	mov	r1, r0
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x2ec>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001854:	23f0      	movs	r3, #240	; 0xf0
 8001856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_RCC_ClockConfig+0x2f0>)
 800186c:	5cd3      	ldrb	r3, [r2, r3]
 800186e:	fa21 f303 	lsr.w	r3, r1, r3
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_RCC_ClockConfig+0x2f4>)
 8001874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001876:	2000      	movs	r0, #0
 8001878:	f7fe fcbc 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3778      	adds	r7, #120	; 0x78
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	0800372c 	.word	0x0800372c
 8001890:	20000008 	.word	0x20000008

08001894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80018ae:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d002      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x30>
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x36>
 80018c2:	e03c      	b.n	800193e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018c6:	623b      	str	r3, [r7, #32]
      break;
 80018c8:	e03c      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018d0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80018d4:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	607b      	str	r3, [r7, #4]
  return(result);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	4a1c      	ldr	r2, [pc, #112]	; (800195c <HAL_RCC_GetSysClockFreq+0xc8>)
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	f003 020f 	and.w	r2, r3, #15
 80018f6:	230f      	movs	r3, #15
 80018f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	60fb      	str	r3, [r7, #12]
  return(result);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <HAL_RCC_GetSysClockFreq+0xcc>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_RCC_GetSysClockFreq+0xc4>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	fbb2 f2f3 	udiv	r2, r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
 800192c:	e004      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	623b      	str	r3, [r7, #32]
      break;
 800193c:	e002      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001940:	623b      	str	r3, [r7, #32]
      break;
 8001942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001944:	6a3b      	ldr	r3, [r7, #32]
}
 8001946:	4618      	mov	r0, r3
 8001948:	372c      	adds	r7, #44	; 0x2c
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	007a1200 	.word	0x007a1200
 800195c:	0800370c 	.word	0x0800370c
 8001960:	0800371c 	.word	0x0800371c
 8001964:	003d0900 	.word	0x003d0900

08001968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_RCC_GetHCLKFreq+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000008 	.word	0x20000008

08001980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001986:	f7ff ffef 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 800198a:	4601      	mov	r1, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001994:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001998:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	603b      	str	r3, [r7, #0]
  return(result);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
 80019b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	0800373c 	.word	0x0800373c

080019c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80019ca:	f7ff ffcd 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 80019ce:	4601      	mov	r1, r0
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80019d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019dc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	603b      	str	r3, [r7, #0]
  return(result);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x40>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	0800373c 	.word	0x0800373c

08001a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e07c      	b.n	8001b14 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d106      	bne.n	8001a3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f001 fba9 	bl	800318c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a50:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a5a:	d902      	bls.n	8001a62 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e002      	b.n	8001a68 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001a70:	d007      	beq.n	8001a82 <HAL_SPI_Init+0x7a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a7a:	d002      	beq.n	8001a82 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10b      	bne.n	8001aa2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a92:	d903      	bls.n	8001a9c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9a:	e002      	b.n	8001aa2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	ea42 0103 	orr.w	r1, r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	f003 0204 	and.w	r2, r3, #4
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	ea42 0103 	orr.w	r1, r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_SPI_Transmit+0x26>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e13e      	b.n	8001dc0 <HAL_SPI_Transmit+0x2a4>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b4a:	f7fe fb97 	bl	800027c <HAL_GetTick>
 8001b4e:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d002      	beq.n	8001b62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b60:	e125      	b.n	8001dae <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_SPI_Transmit+0x52>
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b72:	e11c      	b.n	8001dae <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2203      	movs	r2, #3
 8001b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	88fa      	ldrh	r2, [r7, #6]
 8001b8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	88fa      	ldrh	r2, [r7, #6]
 8001b92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bbe:	d107      	bne.n	8001bd0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	2b40      	cmp	r3, #64	; 0x40
 8001bdc:	d007      	beq.n	8001bee <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bf6:	d947      	bls.n	8001c88 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <HAL_SPI_Transmit+0xee>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d138      	bne.n	8001c7c <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	881a      	ldrh	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	3302      	adds	r3, #2
 8001c18:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c28:	e028      	b.n	8001c7c <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d10f      	bne.n	8001c58 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	881a      	ldrh	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3302      	adds	r3, #2
 8001c46:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c56:	e011      	b.n	8001c7c <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_SPI_Transmit+0x15a>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d00a      	beq.n	8001c7c <HAL_SPI_Transmit+0x160>
 8001c66:	f7fe fb09 	bl	800027c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d802      	bhi.n	8001c7c <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c7a:	e098      	b.n	8001dae <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1d1      	bne.n	8001c2a <HAL_SPI_Transmit+0x10e>
 8001c86:	e070      	b.n	8001d6a <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_SPI_Transmit+0x17e>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d162      	bne.n	8001d60 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d90f      	bls.n	8001cc4 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	881a      	ldrh	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b02      	subs	r3, #2
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cc2:	e04d      	b.n	8001d60 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	60ba      	str	r2, [r7, #8]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	320c      	adds	r2, #12
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001ce2:	e03d      	b.n	8001d60 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d124      	bne.n	8001d3c <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d90f      	bls.n	8001d1c <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	881a      	ldrh	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3302      	adds	r3, #2
 8001d0a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b02      	subs	r3, #2
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d1a:	e021      	b.n	8001d60 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	60ba      	str	r2, [r7, #8]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	320c      	adds	r2, #12
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d3a:	e011      	b.n	8001d60 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_SPI_Transmit+0x23e>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d00a      	beq.n	8001d60 <HAL_SPI_Transmit+0x244>
 8001d4a:	f7fe fa97 	bl	800027c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d802      	bhi.n	8001d60 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d5e:	e026      	b.n	8001dae <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1bc      	bne.n	8001ce4 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fc7d 	bl	800266e <SPI_EndRxTxTransaction>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10a      	bne.n	8001d9e <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	77fb      	strb	r3, [r7, #31]
 8001daa:	e000      	b.n	8001dae <HAL_SPI_Transmit+0x292>
  }

error:
 8001dac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001dbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	75fb      	strb	r3, [r7, #23]


  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001de8:	d112      	bne.n	8001e10 <HAL_SPI_Receive+0x48>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10e      	bne.n	8001e10 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2204      	movs	r2, #4
 8001df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001dfa:	88fa      	ldrh	r2, [r7, #6]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f901 	bl	800200e <HAL_SPI_TransmitReceive>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	e0fa      	b.n	8002006 <HAL_SPI_Receive+0x23e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_SPI_Receive+0x56>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e0f3      	b.n	8002006 <HAL_SPI_Receive+0x23e>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e26:	f7fe fa29 	bl	800027c <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d002      	beq.n	8001e3e <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e3c:	e0da      	b.n	8001ff4 <HAL_SPI_Receive+0x22c>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_SPI_Receive+0x82>
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e4e:	e0d1      	b.n	8001ff4 <HAL_SPI_Receive+0x22c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2204      	movs	r2, #4
 8001e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	88fa      	ldrh	r2, [r7, #6]
 8001e68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	88fa      	ldrh	r2, [r7, #6]
 8001e70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e9a:	d908      	bls.n	8001eae <HAL_SPI_Receive+0xe6>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	e007      	b.n	8001ebe <HAL_SPI_Receive+0xf6>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ebc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec6:	d107      	bne.n	8001ed8 <HAL_SPI_Receive+0x110>
  {
    SPI_1LINE_RX(hspi);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee2:	2b40      	cmp	r3, #64	; 0x40
 8001ee4:	d007      	beq.n	8001ef6 <HAL_SPI_Receive+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001efe:	d860      	bhi.n	8001fc2 <HAL_SPI_Receive+0x1fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001f00:	e02c      	b.n	8001f5c <HAL_SPI_Receive+0x194>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d113      	bne.n	8001f38 <HAL_SPI_Receive+0x170>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	330c      	adds	r3, #12
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001f36:	e011      	b.n	8001f5c <HAL_SPI_Receive+0x194>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_SPI_Receive+0x18e>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d00a      	beq.n	8001f5c <HAL_SPI_Receive+0x194>
 8001f46:	f7fe f999 	bl	800027c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d802      	bhi.n	8001f5c <HAL_SPI_Receive+0x194>
        {
          errorcode = HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f5a:	e04b      	b.n	8001ff4 <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1cc      	bne.n	8001f02 <HAL_SPI_Receive+0x13a>
 8001f68:	e031      	b.n	8001fce <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d112      	bne.n	8001f9e <HAL_SPI_Receive+0x1d6>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	3302      	adds	r3, #2
 8001f88:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001f9c:	e011      	b.n	8001fc2 <HAL_SPI_Receive+0x1fa>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_SPI_Receive+0x1f4>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	d00a      	beq.n	8001fc2 <HAL_SPI_Receive+0x1fa>
 8001fac:	f7fe f966 	bl	800027c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d802      	bhi.n	8001fc2 <HAL_SPI_Receive+0x1fa>
        {
          errorcode = HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001fc0:	e018      	b.n	8001ff4 <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1cd      	bne.n	8001f6a <HAL_SPI_Receive+0x1a2>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	6839      	ldr	r1, [r7, #0]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 faf3 	bl	80025be <SPI_EndRxTransaction>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_SPI_Receive+0x21c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_SPI_Receive+0x22a>
  {
    errorcode = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	75fb      	strb	r3, [r7, #23]
 8001ff0:	e000      	b.n	8001ff4 <HAL_SPI_Receive+0x22c>
  }

error :
 8001ff2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002004:	7dfb      	ldrb	r3, [r7, #23]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b08a      	sub	sp, #40	; 0x28
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002028:	2301      	movs	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_SPI_TransmitReceive+0x32>
 800203c:	2302      	movs	r3, #2
 800203e:	e1e2      	b.n	8002406 <HAL_SPI_TransmitReceive+0x3f8>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002048:	f7fe f918 	bl	800027c <HAL_GetTick>
 800204c:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002054:	b2db      	uxtb	r3, r3
 8002056:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d00e      	beq.n	8002082 <HAL_SPI_TransmitReceive+0x74>
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800206a:	d106      	bne.n	800207a <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <HAL_SPI_TransmitReceive+0x6c>
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b04      	cmp	r3, #4
 8002078:	d003      	beq.n	8002082 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800207a:	2302      	movs	r3, #2
 800207c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002080:	e1b7      	b.n	80023f2 <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_SPI_TransmitReceive+0x86>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_SPI_TransmitReceive+0x86>
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d103      	bne.n	800209c <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800209a:	e1aa      	b.n	80023f2 <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d003      	beq.n	80020b0 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2205      	movs	r2, #5
 80020ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	887a      	ldrh	r2, [r7, #2]
 80020d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020f2:	d805      	bhi.n	8002100 <HAL_SPI_TransmitReceive+0xf2>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d908      	bls.n	8002112 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	e007      	b.n	8002122 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002120:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b40      	cmp	r3, #64	; 0x40
 800212e:	d007      	beq.n	8002140 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800213e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002148:	d975      	bls.n	8002236 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <HAL_SPI_TransmitReceive+0x14e>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d160      	bne.n	800221e <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	881a      	ldrh	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	3302      	adds	r3, #2
 800216a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002170:	b29b      	uxth	r3, r3
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800217a:	e050      	b.n	800221e <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01c      	beq.n	80021bc <HAL_SPI_TransmitReceive+0x1ae>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d017      	beq.n	80021bc <HAL_SPI_TransmitReceive+0x1ae>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b02      	cmp	r3, #2
 8002198:	d110      	bne.n	80021bc <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3302      	adds	r3, #2
 80021a8:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01a      	beq.n	80021fe <HAL_SPI_TransmitReceive+0x1f0>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d113      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3302      	adds	r3, #2
 80021e6:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021fa:	2301      	movs	r3, #1
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d00b      	beq.n	800221e <HAL_SPI_TransmitReceive+0x210>
 8002206:	f7fe f839 	bl	800027c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002212:	429a      	cmp	r2, r3
 8002214:	d803      	bhi.n	800221e <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800221c:	e0e9      	b.n	80023f2 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1a9      	bne.n	800217c <HAL_SPI_TransmitReceive+0x16e>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1a3      	bne.n	800217c <HAL_SPI_TransmitReceive+0x16e>
 8002234:	e0c9      	b.n	80023ca <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_SPI_TransmitReceive+0x23c>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	f040 80b3 	bne.w	80023b0 <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800224e:	b29b      	uxth	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d90f      	bls.n	8002274 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3302      	adds	r3, #2
 8002262:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b02      	subs	r3, #2
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002272:	e09d      	b.n	80023b0 <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60ba      	str	r2, [r7, #8]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	320c      	adds	r2, #12
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002288:	b29b      	uxth	r3, r3
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002292:	e08d      	b.n	80023b0 <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d031      	beq.n	80022fe <HAL_SPI_TransmitReceive+0x2f0>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02c      	beq.n	80022fe <HAL_SPI_TransmitReceive+0x2f0>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d125      	bne.n	80022fe <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d90f      	bls.n	80022dc <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	881a      	ldrh	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3302      	adds	r3, #2
 80022ca:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b02      	subs	r3, #2
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022da:	e00e      	b.n	80022fa <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	320c      	adds	r2, #12
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d042      	beq.n	8002390 <HAL_SPI_TransmitReceive+0x382>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d13b      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d920      	bls.n	8002366 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	b29a      	uxth	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3302      	adds	r3, #2
 8002334:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b02      	subs	r3, #2
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d81b      	bhi.n	800238c <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	e012      	b.n	800238c <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f103 020c 	add.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	1c59      	adds	r1, r3, #1
 8002372:	6079      	str	r1, [r7, #4]
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800238c:	2301      	movs	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002396:	d00b      	beq.n	80023b0 <HAL_SPI_TransmitReceive+0x3a2>
 8002398:	f7fd ff70 	bl	800027c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d803      	bhi.n	80023b0 <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80023ae:	e020      	b.n	80023f2 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f47f af6c 	bne.w	8002294 <HAL_SPI_TransmitReceive+0x286>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f47f af65 	bne.w	8002294 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f94d 	bl	800266e <SPI_EndRxTxTransaction>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023ee:	e000      	b.n	80023f2 <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 80023f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002406:	4618      	mov	r0, r3
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800241c:	e04c      	b.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d048      	beq.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <SPI_WaitFlagStateUntilTimeout+0x2e>
 800242c:	f7fd ff26 	bl	800027c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d83d      	bhi.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800244a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002454:	d111      	bne.n	800247a <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800245e:	d004      	beq.n	800246a <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002468:	d107      	bne.n	800247a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002478:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002482:	d10f      	bne.n	80024a4 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e00e      	b.n	80024d6 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4013      	ands	r3, r2
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d101      	bne.n	80024cc <SPI_WaitFlagStateUntilTimeout+0xbe>
 80024c8:	2201      	movs	r2, #1
 80024ca:	e000      	b.n	80024ce <SPI_WaitFlagStateUntilTimeout+0xc0>
 80024cc:	2200      	movs	r2, #0
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1a4      	bne.n	800241e <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80024ec:	e05a      	b.n	80025a4 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024f4:	d109      	bne.n	800250a <SPI_WaitFifoStateUntilTimeout+0x2c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	330c      	adds	r3, #12
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002508:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d048      	beq.n	80025a4 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002518:	f7fd feb0 	bl	800027c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d83d      	bhi.n	80025a4 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002536:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002540:	d111      	bne.n	8002566 <SPI_WaitFifoStateUntilTimeout+0x88>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254a:	d004      	beq.n	8002556 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002554:	d107      	bne.n	8002566 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002564:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256e:	d10f      	bne.n	8002590 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800258e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e008      	b.n	80025b6 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d19c      	bne.n	80024ee <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af02      	add	r7, sp, #8
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025d2:	d111      	bne.n	80025f8 <SPI_EndRxTransaction+0x3a>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025dc:	d004      	beq.n	80025e8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e6:	d107      	bne.n	80025f8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2200      	movs	r2, #0
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff ff03 	bl	800240e <SPI_WaitFlagStateUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	f043 0220 	orr.w	r2, r3, #32
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e023      	b.n	8002666 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002626:	d11d      	bne.n	8002664 <SPI_EndRxTransaction+0xa6>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002630:	d004      	beq.n	800263c <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263a:	d113      	bne.n	8002664 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2200      	movs	r2, #0
 8002644:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff ff48 	bl	80024de <SPI_WaitFifoStateUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e000      	b.n	8002666 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af02      	add	r7, sp, #8
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2200      	movs	r2, #0
 8002682:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff ff29 	bl	80024de <SPI_WaitFifoStateUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e027      	b.n	80026f2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff feae 	bl	800240e <SPI_WaitFlagStateUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e014      	b.n	80026f2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7ff ff02 	bl	80024de <SPI_WaitFifoStateUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e000      	b.n	80026f2 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e043      	b.n	8002794 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fd77 	bl	8003214 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2224      	movs	r2, #36	; 0x24
 800272a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8ba 	bl	80028b8 <UART_SetConfig>
 8002744:	4603      	mov	r3, r0
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e022      	b.n	8002794 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fa14 	bl	8002b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800276a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800277a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fa9b 	bl	8002cc8 <UART_CheckIdleState>
 8002792:	4603      	mov	r3, r0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d177      	bne.n	80028ac <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_UART_Transmit+0x2c>
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e070      	b.n	80028ae <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_UART_Transmit+0x3e>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e069      	b.n	80028ae <HAL_UART_Transmit+0x112>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2221      	movs	r2, #33	; 0x21
 80027ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80027f0:	f7fd fd44 	bl	800027c <HAL_GetTick>
 80027f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002806:	e034      	b.n	8002872 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2200      	movs	r2, #0
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 fa98 	bl	8002d5a <UART_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e03c      	b.n	80028ae <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283c:	d111      	bne.n	8002862 <HAL_UART_Transmit+0xc6>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	881a      	ldrh	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002856:	b292      	uxth	r2, r2
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3302      	adds	r3, #2
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	e007      	b.n	8002872 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	60ba      	str	r2, [r7, #8]
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b292      	uxth	r2, r2
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1c4      	bne.n	8002808 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2200      	movs	r2, #0
 8002886:	2140      	movs	r1, #64	; 0x40
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fa66 	bl	8002d5a <UART_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e00a      	b.n	80028ae <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80028c4:	2310      	movs	r3, #16
 80028c6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b9f      	ldr	r3, [pc, #636]	; (8002b70 <UART_SetConfig+0x2b8>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	68f9      	ldr	r1, [r7, #12]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	430a      	orrs	r2, r1
 8002934:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a8e      	ldr	r2, [pc, #568]	; (8002b74 <UART_SetConfig+0x2bc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d121      	bne.n	8002984 <UART_SetConfig+0xcc>
 8002940:	4b8d      	ldr	r3, [pc, #564]	; (8002b78 <UART_SetConfig+0x2c0>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b03      	cmp	r3, #3
 800294a:	d817      	bhi.n	800297c <UART_SetConfig+0xc4>
 800294c:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <UART_SetConfig+0x9c>)
 800294e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002952:	bf00      	nop
 8002954:	08002965 	.word	0x08002965
 8002958:	08002971 	.word	0x08002971
 800295c:	08002977 	.word	0x08002977
 8002960:	0800296b 	.word	0x0800296b
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]
 8002968:	e01e      	b.n	80029a8 <UART_SetConfig+0xf0>
 800296a:	2302      	movs	r3, #2
 800296c:	75fb      	strb	r3, [r7, #23]
 800296e:	e01b      	b.n	80029a8 <UART_SetConfig+0xf0>
 8002970:	2304      	movs	r3, #4
 8002972:	75fb      	strb	r3, [r7, #23]
 8002974:	e018      	b.n	80029a8 <UART_SetConfig+0xf0>
 8002976:	2308      	movs	r3, #8
 8002978:	75fb      	strb	r3, [r7, #23]
 800297a:	e015      	b.n	80029a8 <UART_SetConfig+0xf0>
 800297c:	2310      	movs	r3, #16
 800297e:	75fb      	strb	r3, [r7, #23]
 8002980:	bf00      	nop
 8002982:	e011      	b.n	80029a8 <UART_SetConfig+0xf0>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7c      	ldr	r2, [pc, #496]	; (8002b7c <UART_SetConfig+0x2c4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d102      	bne.n	8002994 <UART_SetConfig+0xdc>
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
 8002992:	e009      	b.n	80029a8 <UART_SetConfig+0xf0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a79      	ldr	r2, [pc, #484]	; (8002b80 <UART_SetConfig+0x2c8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d102      	bne.n	80029a4 <UART_SetConfig+0xec>
 800299e:	2300      	movs	r3, #0
 80029a0:	75fb      	strb	r3, [r7, #23]
 80029a2:	e001      	b.n	80029a8 <UART_SetConfig+0xf0>
 80029a4:	2310      	movs	r3, #16
 80029a6:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b0:	d16f      	bne.n	8002a92 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d857      	bhi.n	8002a68 <UART_SetConfig+0x1b0>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <UART_SetConfig+0x108>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029e5 	.word	0x080029e5
 80029c4:	08002a01 	.word	0x08002a01
 80029c8:	08002a1d 	.word	0x08002a1d
 80029cc:	08002a69 	.word	0x08002a69
 80029d0:	08002a37 	.word	0x08002a37
 80029d4:	08002a69 	.word	0x08002a69
 80029d8:	08002a69 	.word	0x08002a69
 80029dc:	08002a69 	.word	0x08002a69
 80029e0:	08002a53 	.word	0x08002a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029e4:	f7fe ffcc 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 80029e8:	4603      	mov	r3, r0
 80029ea:	005a      	lsls	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	441a      	add	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	82bb      	strh	r3, [r7, #20]
        break;
 80029fe:	e036      	b.n	8002a6e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a00:	f7fe ffe0 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8002a04:	4603      	mov	r3, r0
 8002a06:	005a      	lsls	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	441a      	add	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	82bb      	strh	r3, [r7, #20]
        break;
 8002a1a:	e028      	b.n	8002a6e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002a26:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6852      	ldr	r2, [r2, #4]
 8002a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a32:	82bb      	strh	r3, [r7, #20]
        break;
 8002a34:	e01b      	b.n	8002a6e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a36:	f7fe ff2d 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	005a      	lsls	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	441a      	add	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4e:	82bb      	strh	r3, [r7, #20]
        break;
 8002a50:	e00d      	b.n	8002a6e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	82bb      	strh	r3, [r7, #20]
        break;
 8002a66:	e002      	b.n	8002a6e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	74fb      	strb	r3, [r7, #19]
        break;
 8002a6c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002a6e:	8abb      	ldrh	r3, [r7, #20]
 8002a70:	f023 030f 	bic.w	r3, r3, #15
 8002a74:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a76:	8abb      	ldrh	r3, [r7, #20]
 8002a78:	105b      	asrs	r3, r3, #1
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	897b      	ldrh	r3, [r7, #10]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	897a      	ldrh	r2, [r7, #10]
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	e069      	b.n	8002b66 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d863      	bhi.n	8002b60 <UART_SetConfig+0x2a8>
 8002a98:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <UART_SetConfig+0x1e8>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002ac5 	.word	0x08002ac5
 8002aa4:	08002ae5 	.word	0x08002ae5
 8002aa8:	08002b05 	.word	0x08002b05
 8002aac:	08002b61 	.word	0x08002b61
 8002ab0:	08002b25 	.word	0x08002b25
 8002ab4:	08002b61 	.word	0x08002b61
 8002ab8:	08002b61 	.word	0x08002b61
 8002abc:	08002b61 	.word	0x08002b61
 8002ac0:	08002b45 	.word	0x08002b45
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ac4:	f7fe ff5c 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60da      	str	r2, [r3, #12]
        break;
 8002ae2:	e040      	b.n	8002b66 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ae4:	f7fe ff6e 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60da      	str	r2, [r3, #12]
        break;
 8002b02:	e030      	b.n	8002b66 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002b0e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6852      	ldr	r2, [r2, #4]
 8002b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60da      	str	r2, [r3, #12]
        break;
 8002b22:	e020      	b.n	8002b66 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b24:	f7fe feb6 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	441a      	add	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60da      	str	r2, [r3, #12]
        break;
 8002b42:	e010      	b.n	8002b66 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60da      	str	r2, [r3, #12]
        break;
 8002b5e:	e002      	b.n	8002b66 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	74fb      	strb	r3, [r7, #19]
        break;
 8002b64:	bf00      	nop
    }
  }

  return ret;
 8002b66:	7cfb      	ldrb	r3, [r7, #19]

}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	efff69f3 	.word	0xefff69f3
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40004400 	.word	0x40004400
 8002b80:	40004800 	.word	0x40004800

08002b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01a      	beq.n	8002c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c82:	d10a      	bne.n	8002c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002cda:	f7fd facf 	bl	800027c <HAL_GetTick>
 8002cde:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d10e      	bne.n	8002d0c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f82c 	bl	8002d5a <UART_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e022      	b.n	8002d52 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d10e      	bne.n	8002d38 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f816 	bl	8002d5a <UART_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e00c      	b.n	8002d52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	4613      	mov	r3, r2
 8002d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d6a:	e02c      	b.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d028      	beq.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d7a:	f7fd fa7f 	bl	800027c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d21d      	bcs.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e00f      	b.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	bf0c      	ite	eq
 8002dd6:	2301      	moveq	r3, #1
 8002dd8:	2300      	movne	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d0c3      	beq.n	8002d6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002df4:	f7fd f9e8 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002df8:	f000 f858 	bl	8002eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dfc:	f000 f906 	bl	800300c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e00:	f000 f8d4 	bl	8002fac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002e04:	f000 f894 	bl	8002f30 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8002e08:	f000 fabe 	bl	8003388 <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e14:	f7fd fcbc 	bl	8000790 <HAL_GPIO_WritePin>
	  init = 0xE;
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <main+0xa4>)
 8002e1a:	220e      	movs	r2, #14
 8002e1c:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit(&hspi1, &init, 1, 1000);
 8002e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e22:	2201      	movs	r2, #1
 8002e24:	491b      	ldr	r1, [pc, #108]	; (8002e94 <main+0xa4>)
 8002e26:	481c      	ldr	r0, [pc, #112]	; (8002e98 <main+0xa8>)
 8002e28:	f7fe fe78 	bl	8001b1c <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, &init, 1, 1000);
 8002e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e30:	2201      	movs	r2, #1
 8002e32:	4918      	ldr	r1, [pc, #96]	; (8002e94 <main+0xa4>)
 8002e34:	4818      	ldr	r0, [pc, #96]	; (8002e98 <main+0xa8>)
 8002e36:	f7fe ffc7 	bl	8001dc8 <HAL_SPI_Receive>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e42:	f7fd fca5 	bl	8000790 <HAL_GPIO_WritePin>
	  itoa(init, (uint8_t*)buffer, 10);
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <main+0xa4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	220a      	movs	r2, #10
 8002e4c:	4913      	ldr	r1, [pc, #76]	; (8002e9c <main+0xac>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fc00 	bl	8003654 <itoa>

	  HAL_UART_Transmit(&huart2, "Valor lido:", 12, 100);
 8002e54:	2364      	movs	r3, #100	; 0x64
 8002e56:	220c      	movs	r2, #12
 8002e58:	4911      	ldr	r1, [pc, #68]	; (8002ea0 <main+0xb0>)
 8002e5a:	4812      	ldr	r0, [pc, #72]	; (8002ea4 <main+0xb4>)
 8002e5c:	f7ff fc9e 	bl	800279c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, 3, 100);
 8002e60:	2364      	movs	r3, #100	; 0x64
 8002e62:	2203      	movs	r2, #3
 8002e64:	490d      	ldr	r1, [pc, #52]	; (8002e9c <main+0xac>)
 8002e66:	480f      	ldr	r0, [pc, #60]	; (8002ea4 <main+0xb4>)
 8002e68:	f7ff fc98 	bl	800279c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8002e6c:	2364      	movs	r3, #100	; 0x64
 8002e6e:	2202      	movs	r2, #2
 8002e70:	490d      	ldr	r1, [pc, #52]	; (8002ea8 <main+0xb8>)
 8002e72:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <main+0xb4>)
 8002e74:	f7ff fc92 	bl	800279c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e7c:	f7fd fa0a 	bl	8000294 <HAL_Delay>

	  LCD_Write_String(0, 0, buffer);
 8002e80:	4a06      	ldr	r2, [pc, #24]	; (8002e9c <main+0xac>)
 8002e82:	2100      	movs	r1, #0
 8002e84:	2000      	movs	r0, #0
 8002e86:	f000 fb07 	bl	8003498 <LCD_Write_String>
	  HAL_Delay(100);
 8002e8a:	2064      	movs	r0, #100	; 0x64
 8002e8c:	f7fd fa02 	bl	8000294 <HAL_Delay>
  {
 8002e90:	e7bc      	b.n	8002e0c <main+0x1c>
 8002e92:	bf00      	nop
 8002e94:	20000028 	.word	0x20000028
 8002e98:	20000064 	.word	0x20000064
 8002e9c:	20000030 	.word	0x20000030
 8002ea0:	080036fc 	.word	0x080036fc
 8002ea4:	200000c8 	.word	0x200000c8
 8002ea8:	08003708 	.word	0x08003708

08002eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b090      	sub	sp, #64	; 0x40
 8002eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eb2:	f107 0318 	add.w	r3, r7, #24
 8002eb6:	2228      	movs	r2, #40	; 0x28
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fbcc 	bl	8003658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	60da      	str	r2, [r3, #12]
 8002ecc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ed6:	2310      	movs	r3, #16
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eda:	2302      	movs	r3, #2
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002ee2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee8:	f107 0318 	add.w	r3, r7, #24
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd fc67 	bl	80007c0 <HAL_RCC_OscConfig>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002ef8:	f000 f91c 	bl	8003134 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002efc:	230f      	movs	r3, #15
 8002efe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f00:	2302      	movs	r3, #2
 8002f02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	2102      	movs	r1, #2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fb40 	bl	800159c <HAL_RCC_ClockConfig>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002f22:	f000 f907 	bl	8003134 <Error_Handler>
  }
}
 8002f26:	bf00      	nop
 8002f28:	3740      	adds	r7, #64	; 0x40
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f36:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <MX_SPI1_Init+0x78>)
 8002f38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f66:	2238      	movs	r2, #56	; 0x38
 8002f68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f7e:	2207      	movs	r2, #7
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f8e:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f90:	f7fe fd3a 	bl	8001a08 <HAL_SPI_Init>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f9a:	f000 f8cb 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000064 	.word	0x20000064
 8002fa8:	40013000 	.word	0x40013000

08002fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002fb2:	4a15      	ldr	r2, [pc, #84]	; (8003008 <MX_USART2_UART_Init+0x5c>)
 8002fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002fb8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fee:	4805      	ldr	r0, [pc, #20]	; (8003004 <MX_USART2_UART_Init+0x58>)
 8002ff0:	f7ff fb83 	bl	80026fa <HAL_UART_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ffa:	f000 f89b 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200000c8 	.word	0x200000c8
 8003008:	40004400 	.word	0x40004400

0800300c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003022:	4b40      	ldr	r3, [pc, #256]	; (8003124 <MX_GPIO_Init+0x118>)
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	4a3f      	ldr	r2, [pc, #252]	; (8003124 <MX_GPIO_Init+0x118>)
 8003028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800302c:	6153      	str	r3, [r2, #20]
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <MX_GPIO_Init+0x118>)
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800303a:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <MX_GPIO_Init+0x118>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	4a39      	ldr	r2, [pc, #228]	; (8003124 <MX_GPIO_Init+0x118>)
 8003040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003044:	6153      	str	r3, [r2, #20]
 8003046:	4b37      	ldr	r3, [pc, #220]	; (8003124 <MX_GPIO_Init+0x118>)
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <MX_GPIO_Init+0x118>)
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	4a33      	ldr	r2, [pc, #204]	; (8003124 <MX_GPIO_Init+0x118>)
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	6153      	str	r3, [r2, #20]
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <MX_GPIO_Init+0x118>)
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800306a:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <MX_GPIO_Init+0x118>)
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <MX_GPIO_Init+0x118>)
 8003070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003074:	6153      	str	r3, [r2, #20]
 8003076:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <MX_GPIO_Init+0x118>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800307e:	607b      	str	r3, [r7, #4]
 8003080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003082:	2201      	movs	r2, #1
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800308a:	f7fd fb81 	bl	8000790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|LED_D2_Pin|LED_D3_Pin, GPIO_PIN_RESET);
 800308e:	2200      	movs	r2, #0
 8003090:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003094:	4824      	ldr	r0, [pc, #144]	; (8003128 <MX_GPIO_Init+0x11c>)
 8003096:	f7fd fb7b 	bl	8000790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|DC_Pin, GPIO_PIN_RESET);
 800309a:	2200      	movs	r2, #0
 800309c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80030a0:	4822      	ldr	r0, [pc, #136]	; (800312c <MX_GPIO_Init+0x120>)
 80030a2:	f7fd fb75 	bl	8000790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80030a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030ac:	4b20      	ldr	r3, [pc, #128]	; (8003130 <MX_GPIO_Init+0x124>)
 80030ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4619      	mov	r1, r3
 80030ba:	481c      	ldr	r0, [pc, #112]	; (800312c <MX_GPIO_Init+0x120>)
 80030bc:	f7fd f9f2 	bl	80004a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c4:	2301      	movs	r3, #1
 80030c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4619      	mov	r1, r3
 80030d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030da:	f7fd f9e3 	bl	80004a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = RST_Pin|LED_D2_Pin|LED_D3_Pin;
 80030de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80030e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	2301      	movs	r3, #1
 80030e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	4619      	mov	r1, r3
 80030f6:	480c      	ldr	r0, [pc, #48]	; (8003128 <MX_GPIO_Init+0x11c>)
 80030f8:	f7fd f9d4 	bl	80004a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin DC_Pin */
  GPIO_InitStruct.Pin = CE_Pin|DC_Pin;
 80030fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003102:	2301      	movs	r3, #1
 8003104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	4805      	ldr	r0, [pc, #20]	; (800312c <MX_GPIO_Init+0x120>)
 8003116:	f7fd f9c5 	bl	80004a4 <HAL_GPIO_Init>

}
 800311a:	bf00      	nop
 800311c:	3728      	adds	r7, #40	; 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	48000400 	.word	0x48000400
 800312c:	48000800 	.word	0x48000800
 8003130:	10210000 	.word	0x10210000

08003134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <HAL_MspInit+0x44>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	4a0e      	ldr	r2, [pc, #56]	; (8003188 <HAL_MspInit+0x44>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6193      	str	r3, [r2, #24]
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_MspInit+0x44>)
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_MspInit+0x44>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	4a08      	ldr	r2, [pc, #32]	; (8003188 <HAL_MspInit+0x44>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316c:	61d3      	str	r3, [r2, #28]
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_MspInit+0x44>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800317a:	2007      	movs	r0, #7
 800317c:	f7fd f95e 	bl	800043c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_SPI_MspInit+0x7c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d127      	bne.n	80031fe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_SPI_MspInit+0x80>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	4a16      	ldr	r2, [pc, #88]	; (800320c <HAL_SPI_MspInit+0x80>)
 80031b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031b8:	6193      	str	r3, [r2, #24]
 80031ba:	4b14      	ldr	r3, [pc, #80]	; (800320c <HAL_SPI_MspInit+0x80>)
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_SPI_MspInit+0x80>)
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4a10      	ldr	r2, [pc, #64]	; (800320c <HAL_SPI_MspInit+0x80>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d0:	6153      	str	r3, [r2, #20]
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_SPI_MspInit+0x80>)
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80031de:	2338      	movs	r3, #56	; 0x38
 80031e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ea:	2303      	movs	r3, #3
 80031ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031ee:	2305      	movs	r3, #5
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	4619      	mov	r1, r3
 80031f8:	4805      	ldr	r0, [pc, #20]	; (8003210 <HAL_SPI_MspInit+0x84>)
 80031fa:	f7fd f953 	bl	80004a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031fe:	bf00      	nop
 8003200:	3728      	adds	r7, #40	; 0x28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40013000 	.word	0x40013000
 800320c:	40021000 	.word	0x40021000
 8003210:	48000400 	.word	0x48000400

08003214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a17      	ldr	r2, [pc, #92]	; (8003290 <HAL_UART_MspInit+0x7c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d128      	bne.n	8003288 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_UART_MspInit+0x80>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_UART_MspInit+0x80>)
 800323c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003240:	61d3      	str	r3, [r2, #28]
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_UART_MspInit+0x80>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_UART_MspInit+0x80>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <HAL_UART_MspInit+0x80>)
 8003254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003258:	6153      	str	r3, [r2, #20]
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_UART_MspInit+0x80>)
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003266:	230c      	movs	r3, #12
 8003268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326a:	2302      	movs	r3, #2
 800326c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003272:	2303      	movs	r3, #3
 8003274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003276:	2307      	movs	r3, #7
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327a:	f107 0314 	add.w	r3, r7, #20
 800327e:	4619      	mov	r1, r3
 8003280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003284:	f7fd f90e 	bl	80004a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003288:	bf00      	nop
 800328a:	3728      	adds	r7, #40	; 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40004400 	.word	0x40004400
 8003294:	40021000 	.word	0x40021000

08003298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032aa:	e7fe      	b.n	80032aa <HardFault_Handler+0x4>

080032ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <MemManage_Handler+0x4>

080032b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032b6:	e7fe      	b.n	80032b6 <BusFault_Handler+0x4>

080032b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032bc:	e7fe      	b.n	80032bc <UsageFault_Handler+0x4>

080032be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ec:	f7fc ffb2 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032f8:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <SystemInit+0x84>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <SystemInit+0x84>)
 8003300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003308:	4b1c      	ldr	r3, [pc, #112]	; (800337c <SystemInit+0x88>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1b      	ldr	r2, [pc, #108]	; (800337c <SystemInit+0x88>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <SystemInit+0x88>)
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4918      	ldr	r1, [pc, #96]	; (800337c <SystemInit+0x88>)
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <SystemInit+0x8c>)
 800331c:	4013      	ands	r3, r2
 800331e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003320:	4b16      	ldr	r3, [pc, #88]	; (800337c <SystemInit+0x88>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a15      	ldr	r2, [pc, #84]	; (800337c <SystemInit+0x88>)
 8003326:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800332a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <SystemInit+0x88>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a11      	ldr	r2, [pc, #68]	; (800337c <SystemInit+0x88>)
 8003336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <SystemInit+0x88>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a0e      	ldr	r2, [pc, #56]	; (800337c <SystemInit+0x88>)
 8003342:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003346:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <SystemInit+0x88>)
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	4a0b      	ldr	r2, [pc, #44]	; (800337c <SystemInit+0x88>)
 800334e:	f023 030f 	bic.w	r3, r3, #15
 8003352:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <SystemInit+0x88>)
 8003356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003358:	4908      	ldr	r1, [pc, #32]	; (800337c <SystemInit+0x88>)
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <SystemInit+0x90>)
 800335c:	4013      	ands	r3, r2
 800335e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <SystemInit+0x88>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <SystemInit+0x84>)
 8003368:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800336c:	609a      	str	r2, [r3, #8]
#endif
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00
 800337c:	40021000 	.word	0x40021000
 8003380:	f87fc00c 	.word	0xf87fc00c
 8003384:	ff00fccc 	.word	0xff00fccc

08003388 <LCD_Init>:
uint8_t spiOK = 0U;

/**
 * Initialize LCD.
 */
void LCD_Init(void) {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  LCD_Reset();
 800338c:	f000 f810 	bl	80033b0 <LCD_Reset>
  LCD_Write_Command(0x21);
 8003390:	2021      	movs	r0, #33	; 0x21
 8003392:	f000 f8a1 	bl	80034d8 <LCD_Write_Command>
  LCD_Write_Command(0xD0);
 8003396:	20d0      	movs	r0, #208	; 0xd0
 8003398:	f000 f89e 	bl	80034d8 <LCD_Write_Command>
  LCD_Write_Command(0x20);
 800339c:	2020      	movs	r0, #32
 800339e:	f000 f89b 	bl	80034d8 <LCD_Write_Command>
  LCD_Write_Command(0x0C);
 80033a2:	200c      	movs	r0, #12
 80033a4:	f000 f898 	bl	80034d8 <LCD_Write_Command>
  LCD_Clear();
 80033a8:	f000 f832 	bl	8003410 <LCD_Clear>
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <LCD_Reset>:

/**
 * Reset LCD.
 */
void LCD_Reset(void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ba:	4807      	ldr	r0, [pc, #28]	; (80033d8 <LCD_Reset+0x28>)
 80033bc:	f7fd f9e8 	bl	8000790 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80033c0:	2032      	movs	r0, #50	; 0x32
 80033c2:	f7fc ff67 	bl	8000294 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80033c6:	2201      	movs	r2, #1
 80033c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033cc:	4802      	ldr	r0, [pc, #8]	; (80033d8 <LCD_Reset+0x28>)
 80033ce:	f7fd f9df 	bl	8000790 <HAL_GPIO_WritePin>
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	48000400 	.word	0x48000400

080033dc <LCD_Set_Postion>:
/**
 * Set LCD cursor position.
 * @param PosX X Position
 * @param PosY Y Position
 */
void LCD_Set_Postion(uint8_t PosX, uint8_t PosY) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	460a      	mov	r2, r1
 80033e6:	71fb      	strb	r3, [r7, #7]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71bb      	strb	r3, [r7, #6]
  LCD_Write_Command(0x40 | PosY);
 80033ec:	79bb      	ldrb	r3, [r7, #6]
 80033ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f86f 	bl	80034d8 <LCD_Write_Command>
  LCD_Write_Command(0x80 | PosX);
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003400:	b2db      	uxtb	r3, r3
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f868 	bl	80034d8 <LCD_Write_Command>
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <LCD_Clear>:

/**
 * Clear all contents on LCD.
 */
void LCD_Clear(void) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
  uint8_t t;
  uint8_t k;
  LCD_Set_Postion(0,0);
 8003416:	2100      	movs	r1, #0
 8003418:	2000      	movs	r0, #0
 800341a:	f7ff ffdf 	bl	80033dc <LCD_Set_Postion>
  for(t=0;t<6;t++)
 800341e:	2300      	movs	r3, #0
 8003420:	71fb      	strb	r3, [r7, #7]
 8003422:	e00e      	b.n	8003442 <LCD_Clear+0x32>
  {
    for(k=0;k<84;k++)
 8003424:	2300      	movs	r3, #0
 8003426:	71bb      	strb	r3, [r7, #6]
 8003428:	e005      	b.n	8003436 <LCD_Clear+0x26>
    {
      LCD_Write_Data(0x00);
 800342a:	2000      	movs	r0, #0
 800342c:	f000 f880 	bl	8003530 <LCD_Write_Data>
    for(k=0;k<84;k++)
 8003430:	79bb      	ldrb	r3, [r7, #6]
 8003432:	3301      	adds	r3, #1
 8003434:	71bb      	strb	r3, [r7, #6]
 8003436:	79bb      	ldrb	r3, [r7, #6]
 8003438:	2b53      	cmp	r3, #83	; 0x53
 800343a:	d9f6      	bls.n	800342a <LCD_Clear+0x1a>
  for(t=0;t<6;t++)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	3301      	adds	r3, #1
 8003440:	71fb      	strb	r3, [r7, #7]
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d9ed      	bls.n	8003424 <LCD_Clear+0x14>
    }
  }
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <LCD_Write_Char>:

/**
 * Write a single char to LCD.
 * @param ch char to write.
 */
void LCD_Write_Char(uint8_t ch) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	3b20      	subs	r3, #32
 800345e:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++) LCD_Write_Data(font6x8[ch][line]);
 8003460:	2300      	movs	r3, #0
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e00f      	b.n	8003486 <LCD_Write_Char+0x36>
 8003466:	79fa      	ldrb	r2, [r7, #7]
 8003468:	7bf9      	ldrb	r1, [r7, #15]
 800346a:	480a      	ldr	r0, [pc, #40]	; (8003494 <LCD_Write_Char+0x44>)
 800346c:	4613      	mov	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4403      	add	r3, r0
 8003476:	440b      	add	r3, r1
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f858 	bl	8003530 <LCD_Write_Data>
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	3301      	adds	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	2b05      	cmp	r3, #5
 800348a:	d9ec      	bls.n	8003466 <LCD_Write_Char+0x16>
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	08003744 	.word	0x08003744

08003498 <LCD_Write_String>:
 * Write a string to LCD.
 * @param PosX X start point
 * @param PosY Y start point
 * @param str  string to write.
 */
void LCD_Write_String(uint8_t PosX, uint8_t PosY, char * str) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	603a      	str	r2, [r7, #0]
 80034a2:	71fb      	strb	r3, [r7, #7]
 80034a4:	460b      	mov	r3, r1
 80034a6:	71bb      	strb	r3, [r7, #6]
  LCD_Set_Postion(PosX, PosY);
 80034a8:	79ba      	ldrb	r2, [r7, #6]
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ff94 	bl	80033dc <LCD_Set_Postion>
  while(* str) {
 80034b4:	e007      	b.n	80034c6 <LCD_Write_String+0x2e>
    LCD_Write_Char(* str);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ffc8 	bl	8003450 <LCD_Write_Char>
    str ++;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	3301      	adds	r3, #1
 80034c4:	603b      	str	r3, [r7, #0]
  while(* str) {
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f3      	bne.n	80034b6 <LCD_Write_String+0x1e>
  }
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <LCD_Write_Command>:

/**
 * Write LCD command to SPI
 * @param cmd command to write.
 */
void LCD_Write_Command(uint8_t cmd) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 80034e2:	2200      	movs	r2, #0
 80034e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034e8:	480f      	ldr	r0, [pc, #60]	; (8003528 <LCD_Write_Command+0x50>)
 80034ea:	f7fd f951 	bl	8000790 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80034ee:	2200      	movs	r2, #0
 80034f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034f4:	480c      	ldr	r0, [pc, #48]	; (8003528 <LCD_Write_Command+0x50>)
 80034f6:	f7fd f94b 	bl	8000790 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &cmd, 0x01, 1000);
 80034fa:	1df9      	adds	r1, r7, #7
 80034fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003500:	2201      	movs	r2, #1
 8003502:	480a      	ldr	r0, [pc, #40]	; (800352c <LCD_Write_Command+0x54>)
 8003504:	f7fe fb0a 	bl	8001b1c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8003508:	2201      	movs	r2, #1
 800350a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800350e:	4806      	ldr	r0, [pc, #24]	; (8003528 <LCD_Write_Command+0x50>)
 8003510:	f7fd f93e 	bl	8000790 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003514:	2201      	movs	r2, #1
 8003516:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800351a:	4803      	ldr	r0, [pc, #12]	; (8003528 <LCD_Write_Command+0x50>)
 800351c:	f7fd f938 	bl	8000790 <HAL_GPIO_WritePin>
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	48000800 	.word	0x48000800
 800352c:	20000064 	.word	0x20000064

08003530 <LCD_Write_Data>:

/**
 * Write LCD data to SPI
 * @param data data to write.
 */
void LCD_Write_Data(uint8_t data) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 800353a:	2200      	movs	r2, #0
 800353c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003540:	480f      	ldr	r0, [pc, #60]	; (8003580 <LCD_Write_Data+0x50>)
 8003542:	f7fd f925 	bl	8000790 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003546:	2201      	movs	r2, #1
 8003548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800354c:	480c      	ldr	r0, [pc, #48]	; (8003580 <LCD_Write_Data+0x50>)
 800354e:	f7fd f91f 	bl	8000790 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &data, 0x01, 1000);
 8003552:	1df9      	adds	r1, r7, #7
 8003554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003558:	2201      	movs	r2, #1
 800355a:	480a      	ldr	r0, [pc, #40]	; (8003584 <LCD_Write_Data+0x54>)
 800355c:	f7fe fade 	bl	8001b1c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8003560:	2201      	movs	r2, #1
 8003562:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003566:	4806      	ldr	r0, [pc, #24]	; (8003580 <LCD_Write_Data+0x50>)
 8003568:	f7fd f912 	bl	8000790 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800356c:	2200      	movs	r2, #0
 800356e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003572:	4803      	ldr	r0, [pc, #12]	; (8003580 <LCD_Write_Data+0x50>)
 8003574:	f7fd f90c 	bl	8000790 <HAL_GPIO_WritePin>
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	48000800 	.word	0x48000800
 8003584:	20000064 	.word	0x20000064

08003588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800358c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800358e:	e003      	b.n	8003598 <LoopCopyDataInit>

08003590 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003592:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003594:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003596:	3104      	adds	r1, #4

08003598 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003598:	480b      	ldr	r0, [pc, #44]	; (80035c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800359c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800359e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035a0:	d3f6      	bcc.n	8003590 <CopyDataInit>
	ldr	r2, =_sbss
 80035a2:	4a0b      	ldr	r2, [pc, #44]	; (80035d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80035a4:	e002      	b.n	80035ac <LoopFillZerobss>

080035a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035a8:	f842 3b04 	str.w	r3, [r2], #4

080035ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <LoopForever+0x16>)
	cmp	r2, r3
 80035ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80035b0:	d3f9      	bcc.n	80035a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035b2:	f7ff fe9f 	bl	80032f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035b6:	f000 f811 	bl	80035dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035ba:	f7ff fc19 	bl	8002df0 <main>

080035be <LoopForever>:

LoopForever:
    b LoopForever
 80035be:	e7fe      	b.n	80035be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035c0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80035c4:	0800399c 	.word	0x0800399c
	ldr	r0, =_sdata
 80035c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80035cc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80035d0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80035d4:	20000138 	.word	0x20000138

080035d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035d8:	e7fe      	b.n	80035d8 <ADC1_2_IRQHandler>
	...

080035dc <__libc_init_array>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	4e0d      	ldr	r6, [pc, #52]	; (8003614 <__libc_init_array+0x38>)
 80035e0:	4c0d      	ldr	r4, [pc, #52]	; (8003618 <__libc_init_array+0x3c>)
 80035e2:	1ba4      	subs	r4, r4, r6
 80035e4:	10a4      	asrs	r4, r4, #2
 80035e6:	2500      	movs	r5, #0
 80035e8:	42a5      	cmp	r5, r4
 80035ea:	d109      	bne.n	8003600 <__libc_init_array+0x24>
 80035ec:	4e0b      	ldr	r6, [pc, #44]	; (800361c <__libc_init_array+0x40>)
 80035ee:	4c0c      	ldr	r4, [pc, #48]	; (8003620 <__libc_init_array+0x44>)
 80035f0:	f000 f878 	bl	80036e4 <_init>
 80035f4:	1ba4      	subs	r4, r4, r6
 80035f6:	10a4      	asrs	r4, r4, #2
 80035f8:	2500      	movs	r5, #0
 80035fa:	42a5      	cmp	r5, r4
 80035fc:	d105      	bne.n	800360a <__libc_init_array+0x2e>
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003604:	4798      	blx	r3
 8003606:	3501      	adds	r5, #1
 8003608:	e7ee      	b.n	80035e8 <__libc_init_array+0xc>
 800360a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800360e:	4798      	blx	r3
 8003610:	3501      	adds	r5, #1
 8003612:	e7f2      	b.n	80035fa <__libc_init_array+0x1e>
 8003614:	08003994 	.word	0x08003994
 8003618:	08003994 	.word	0x08003994
 800361c:	08003994 	.word	0x08003994
 8003620:	08003998 	.word	0x08003998

08003624 <__itoa>:
 8003624:	1e93      	subs	r3, r2, #2
 8003626:	2b22      	cmp	r3, #34	; 0x22
 8003628:	b510      	push	{r4, lr}
 800362a:	460c      	mov	r4, r1
 800362c:	d904      	bls.n	8003638 <__itoa+0x14>
 800362e:	2300      	movs	r3, #0
 8003630:	700b      	strb	r3, [r1, #0]
 8003632:	461c      	mov	r4, r3
 8003634:	4620      	mov	r0, r4
 8003636:	bd10      	pop	{r4, pc}
 8003638:	2a0a      	cmp	r2, #10
 800363a:	d109      	bne.n	8003650 <__itoa+0x2c>
 800363c:	2800      	cmp	r0, #0
 800363e:	da07      	bge.n	8003650 <__itoa+0x2c>
 8003640:	232d      	movs	r3, #45	; 0x2d
 8003642:	700b      	strb	r3, [r1, #0]
 8003644:	4240      	negs	r0, r0
 8003646:	2101      	movs	r1, #1
 8003648:	4421      	add	r1, r4
 800364a:	f000 f80d 	bl	8003668 <__utoa>
 800364e:	e7f1      	b.n	8003634 <__itoa+0x10>
 8003650:	2100      	movs	r1, #0
 8003652:	e7f9      	b.n	8003648 <__itoa+0x24>

08003654 <itoa>:
 8003654:	f7ff bfe6 	b.w	8003624 <__itoa>

08003658 <memset>:
 8003658:	4402      	add	r2, r0
 800365a:	4603      	mov	r3, r0
 800365c:	4293      	cmp	r3, r2
 800365e:	d100      	bne.n	8003662 <memset+0xa>
 8003660:	4770      	bx	lr
 8003662:	f803 1b01 	strb.w	r1, [r3], #1
 8003666:	e7f9      	b.n	800365c <memset+0x4>

08003668 <__utoa>:
 8003668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <__utoa+0x78>)
 800366c:	b08b      	sub	sp, #44	; 0x2c
 800366e:	4605      	mov	r5, r0
 8003670:	460c      	mov	r4, r1
 8003672:	466e      	mov	r6, sp
 8003674:	f103 0c20 	add.w	ip, r3, #32
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	4637      	mov	r7, r6
 800367e:	c703      	stmia	r7!, {r0, r1}
 8003680:	3308      	adds	r3, #8
 8003682:	4563      	cmp	r3, ip
 8003684:	463e      	mov	r6, r7
 8003686:	d1f7      	bne.n	8003678 <__utoa+0x10>
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	791b      	ldrb	r3, [r3, #4]
 800368c:	713b      	strb	r3, [r7, #4]
 800368e:	1e93      	subs	r3, r2, #2
 8003690:	2b22      	cmp	r3, #34	; 0x22
 8003692:	6038      	str	r0, [r7, #0]
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	d904      	bls.n	80036a4 <__utoa+0x3c>
 800369a:	7023      	strb	r3, [r4, #0]
 800369c:	461c      	mov	r4, r3
 800369e:	4620      	mov	r0, r4
 80036a0:	b00b      	add	sp, #44	; 0x2c
 80036a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a4:	1e66      	subs	r6, r4, #1
 80036a6:	fbb5 f0f2 	udiv	r0, r5, r2
 80036aa:	af0a      	add	r7, sp, #40	; 0x28
 80036ac:	fb02 5510 	mls	r5, r2, r0, r5
 80036b0:	443d      	add	r5, r7
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80036b8:	f806 5f01 	strb.w	r5, [r6, #1]!
 80036bc:	4605      	mov	r5, r0
 80036be:	b968      	cbnz	r0, 80036dc <__utoa+0x74>
 80036c0:	5460      	strb	r0, [r4, r1]
 80036c2:	4423      	add	r3, r4
 80036c4:	4622      	mov	r2, r4
 80036c6:	1b19      	subs	r1, r3, r4
 80036c8:	1b10      	subs	r0, r2, r4
 80036ca:	4281      	cmp	r1, r0
 80036cc:	dde7      	ble.n	800369e <__utoa+0x36>
 80036ce:	7811      	ldrb	r1, [r2, #0]
 80036d0:	7818      	ldrb	r0, [r3, #0]
 80036d2:	f802 0b01 	strb.w	r0, [r2], #1
 80036d6:	f803 1901 	strb.w	r1, [r3], #-1
 80036da:	e7f4      	b.n	80036c6 <__utoa+0x5e>
 80036dc:	460b      	mov	r3, r1
 80036de:	e7e2      	b.n	80036a6 <__utoa+0x3e>
 80036e0:	0800396c 	.word	0x0800396c

080036e4 <_init>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr

080036f0 <_fini>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	bf00      	nop
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr
