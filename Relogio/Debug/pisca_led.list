
pisca_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ebc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003044  08003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a8  080030a8  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080030a8  080030a8  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030a8  080030a8  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080030b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000048  080030f8  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080030f8  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd56  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b2a  00000000  00000000  0002fdce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae0  00000000  00000000  000318f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a28  00000000  00000000  000323d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cbee  00000000  00000000  00032e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e25  00000000  00000000  0004f9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3bf3  00000000  00000000  00058813  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fc406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e24  00000000  00000000  000fc484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800302c 	.word	0x0800302c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	0800302c 	.word	0x0800302c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <HAL_Init+0x28>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_Init+0x28>)
 80001e2:	f043 0310 	orr.w	r3, r3, #16
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e8:	2003      	movs	r0, #3
 80001ea:	f000 f949 	bl	8000480 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ee:	2000      	movs	r0, #0
 80001f0:	f000 f808 	bl	8000204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f4:	f002 fd4e 	bl	8002c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x54>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <HAL_InitTick+0x58>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f961 	bl	80004ea <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e00e      	b.n	8000250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b0f      	cmp	r3, #15
 8000236:	d80a      	bhi.n	800024e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000238:	2200      	movs	r2, #0
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	f04f 30ff 	mov.w	r0, #4294967295
 8000240:	f000 f929 	bl	8000496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000244:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_InitTick+0x5c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
 800024c:	e000      	b.n	8000250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024e:	2301      	movs	r3, #1
}
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000044 	.word	0x20000044
 800025c:	20000004 	.word	0x20000004
 8000260:	20000000 	.word	0x20000000

08000264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x20>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	461a      	mov	r2, r3
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <HAL_IncTick+0x24>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4413      	add	r3, r2
 8000274:	4a04      	ldr	r2, [pc, #16]	; (8000288 <HAL_IncTick+0x24>)
 8000276:	6013      	str	r3, [r2, #0]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	20000070 	.word	0x20000070

0800028c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <HAL_GetTick+0x14>)
 8000292:	681b      	ldr	r3, [r3, #0]
}
 8000294:	4618      	mov	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000070 	.word	0x20000070

080002a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ac:	f7ff ffee 	bl	800028c <HAL_GetTick>
 80002b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002bc:	d005      	beq.n	80002ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <HAL_Delay+0x40>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	461a      	mov	r2, r3
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	4413      	add	r3, r2
 80002c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ca:	bf00      	nop
 80002cc:	f7ff ffde 	bl	800028c <HAL_GetTick>
 80002d0:	4602      	mov	r2, r0
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d8f7      	bhi.n	80002cc <HAL_Delay+0x28>
  {
  }
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000004 	.word	0x20000004

080002e8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <NVIC_SetPriorityGrouping+0x44>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000304:	4013      	ands	r3, r2
 8000306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800031a:	4a04      	ldr	r2, [pc, #16]	; (800032c <NVIC_SetPriorityGrouping+0x44>)
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	60d3      	str	r3, [r2, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <NVIC_GetPriorityGrouping+0x18>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	0a1b      	lsrs	r3, r3, #8
 800033a:	f003 0307 	and.w	r3, r3, #7
}
 800033e:	4618      	mov	r0, r3
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f003 021f 	and.w	r2, r3, #31
 800035c:	4907      	ldr	r1, [pc, #28]	; (800037c <NVIC_EnableIRQ+0x30>)
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	095b      	lsrs	r3, r3, #5
 8000364:	2001      	movs	r0, #1
 8000366:	fa00 f202 	lsl.w	r2, r0, r2
 800036a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	e000e100 	.word	0xe000e100

08000380 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	6039      	str	r1, [r7, #0]
 800038a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800038c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000390:	2b00      	cmp	r3, #0
 8000392:	da0b      	bge.n	80003ac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	b2da      	uxtb	r2, r3
 8000398:	490c      	ldr	r1, [pc, #48]	; (80003cc <NVIC_SetPriority+0x4c>)
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	f003 030f 	and.w	r3, r3, #15
 80003a0:	3b04      	subs	r3, #4
 80003a2:	0112      	lsls	r2, r2, #4
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	440b      	add	r3, r1
 80003a8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003aa:	e009      	b.n	80003c0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	4907      	ldr	r1, [pc, #28]	; (80003d0 <NVIC_SetPriority+0x50>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	0112      	lsls	r2, r2, #4
 80003b8:	b2d2      	uxtb	r2, r2
 80003ba:	440b      	add	r3, r1
 80003bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	e000ed00 	.word	0xe000ed00
 80003d0:	e000e100 	.word	0xe000e100

080003d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b089      	sub	sp, #36	; 0x24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f003 0307 	and.w	r3, r3, #7
 80003e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003e8:	69fb      	ldr	r3, [r7, #28]
 80003ea:	f1c3 0307 	rsb	r3, r3, #7
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	bf28      	it	cs
 80003f2:	2304      	movcs	r3, #4
 80003f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	3304      	adds	r3, #4
 80003fa:	2b06      	cmp	r3, #6
 80003fc:	d902      	bls.n	8000404 <NVIC_EncodePriority+0x30>
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	3b03      	subs	r3, #3
 8000402:	e000      	b.n	8000406 <NVIC_EncodePriority+0x32>
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000408:	f04f 32ff 	mov.w	r2, #4294967295
 800040c:	69bb      	ldr	r3, [r7, #24]
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	43da      	mvns	r2, r3
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	401a      	ands	r2, r3
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800041c:	f04f 31ff 	mov.w	r1, #4294967295
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	fa01 f303 	lsl.w	r3, r1, r3
 8000426:	43d9      	mvns	r1, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800042c:	4313      	orrs	r3, r2
         );
}
 800042e:	4618      	mov	r0, r3
 8000430:	3724      	adds	r7, #36	; 0x24
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
	...

0800043c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800044c:	d301      	bcc.n	8000452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800044e:	2301      	movs	r3, #1
 8000450:	e00f      	b.n	8000472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <SysTick_Config+0x40>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3b01      	subs	r3, #1
 8000458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800045a:	210f      	movs	r1, #15
 800045c:	f04f 30ff 	mov.w	r0, #4294967295
 8000460:	f7ff ff8e 	bl	8000380 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <SysTick_Config+0x40>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800046a:	4b04      	ldr	r3, [pc, #16]	; (800047c <SysTick_Config+0x40>)
 800046c:	2207      	movs	r2, #7
 800046e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	e000e010 	.word	0xe000e010

08000480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f7ff ff2d 	bl	80002e8 <NVIC_SetPriorityGrouping>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b086      	sub	sp, #24
 800049a:	af00      	add	r7, sp, #0
 800049c:	4603      	mov	r3, r0
 800049e:	60b9      	str	r1, [r7, #8]
 80004a0:	607a      	str	r2, [r7, #4]
 80004a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004a8:	f7ff ff42 	bl	8000330 <NVIC_GetPriorityGrouping>
 80004ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	68b9      	ldr	r1, [r7, #8]
 80004b2:	6978      	ldr	r0, [r7, #20]
 80004b4:	f7ff ff8e 	bl	80003d4 <NVIC_EncodePriority>
 80004b8:	4602      	mov	r2, r0
 80004ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004be:	4611      	mov	r1, r2
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff5d 	bl	8000380 <NVIC_SetPriority>
}
 80004c6:	bf00      	nop
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	4603      	mov	r3, r0
 80004d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ff35 	bl	800034c <NVIC_EnableIRQ>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b082      	sub	sp, #8
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff ffa2 	bl	800043c <SysTick_Config>
 80004f8:	4603      	mov	r3, r0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000504:	b480      	push	{r7}
 8000506:	b087      	sub	sp, #28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800051a:	e14e      	b.n	80007ba <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	2101      	movs	r1, #1
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	4013      	ands	r3, r2
 800052a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2b00      	cmp	r3, #0
 8000530:	f000 8140 	beq.w	80007b4 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d003      	beq.n	8000544 <HAL_GPIO_Init+0x40>
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2b12      	cmp	r3, #18
 8000542:	d123      	bne.n	800058c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	08da      	lsrs	r2, r3, #3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3208      	adds	r2, #8
 800054c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000550:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	f003 0307 	and.w	r3, r3, #7
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	220f      	movs	r2, #15
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	4013      	ands	r3, r2
 8000566:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	691a      	ldr	r2, [r3, #16]
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	693a      	ldr	r2, [r7, #16]
 800057a:	4313      	orrs	r3, r2
 800057c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	08da      	lsrs	r2, r3, #3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3208      	adds	r2, #8
 8000586:	6939      	ldr	r1, [r7, #16]
 8000588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	2203      	movs	r2, #3
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	43db      	mvns	r3, r3
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	4013      	ands	r3, r2
 80005a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f003 0203 	and.w	r2, r3, #3
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	693a      	ldr	r2, [r7, #16]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	693a      	ldr	r2, [r7, #16]
 80005be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d00b      	beq.n	80005e0 <HAL_GPIO_Init+0xdc>
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d007      	beq.n	80005e0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005d4:	2b11      	cmp	r3, #17
 80005d6:	d003      	beq.n	80005e0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	2b12      	cmp	r3, #18
 80005de:	d130      	bne.n	8000642 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	2203      	movs	r2, #3
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	4013      	ands	r3, r2
 80005f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	68da      	ldr	r2, [r3, #12]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	693a      	ldr	r2, [r7, #16]
 8000606:	4313      	orrs	r3, r2
 8000608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000616:	2201      	movs	r2, #1
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	43db      	mvns	r3, r3
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	4013      	ands	r3, r2
 8000624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	091b      	lsrs	r3, r3, #4
 800062c:	f003 0201 	and.w	r2, r3, #1
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	4313      	orrs	r3, r2
 800063a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	2203      	movs	r2, #3
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	43db      	mvns	r3, r3
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	4013      	ands	r3, r2
 8000658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	4313      	orrs	r3, r2
 800066a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	2b00      	cmp	r3, #0
 800067c:	f000 809a 	beq.w	80007b4 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000680:	4b55      	ldr	r3, [pc, #340]	; (80007d8 <HAL_GPIO_Init+0x2d4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a54      	ldr	r2, [pc, #336]	; (80007d8 <HAL_GPIO_Init+0x2d4>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b52      	ldr	r3, [pc, #328]	; (80007d8 <HAL_GPIO_Init+0x2d4>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000698:	4a50      	ldr	r2, [pc, #320]	; (80007dc <HAL_GPIO_Init+0x2d8>)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	089b      	lsrs	r3, r3, #2
 800069e:	3302      	adds	r3, #2
 80006a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	f003 0303 	and.w	r3, r3, #3
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	220f      	movs	r2, #15
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	43db      	mvns	r3, r3
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006c2:	d013      	beq.n	80006ec <HAL_GPIO_Init+0x1e8>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a46      	ldr	r2, [pc, #280]	; (80007e0 <HAL_GPIO_Init+0x2dc>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d00d      	beq.n	80006e8 <HAL_GPIO_Init+0x1e4>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a45      	ldr	r2, [pc, #276]	; (80007e4 <HAL_GPIO_Init+0x2e0>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d007      	beq.n	80006e4 <HAL_GPIO_Init+0x1e0>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a44      	ldr	r2, [pc, #272]	; (80007e8 <HAL_GPIO_Init+0x2e4>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d101      	bne.n	80006e0 <HAL_GPIO_Init+0x1dc>
 80006dc:	2303      	movs	r3, #3
 80006de:	e006      	b.n	80006ee <HAL_GPIO_Init+0x1ea>
 80006e0:	2305      	movs	r3, #5
 80006e2:	e004      	b.n	80006ee <HAL_GPIO_Init+0x1ea>
 80006e4:	2302      	movs	r3, #2
 80006e6:	e002      	b.n	80006ee <HAL_GPIO_Init+0x1ea>
 80006e8:	2301      	movs	r3, #1
 80006ea:	e000      	b.n	80006ee <HAL_GPIO_Init+0x1ea>
 80006ec:	2300      	movs	r3, #0
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	f002 0203 	and.w	r2, r2, #3
 80006f4:	0092      	lsls	r2, r2, #2
 80006f6:	4093      	lsls	r3, r2
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006fe:	4937      	ldr	r1, [pc, #220]	; (80007dc <HAL_GPIO_Init+0x2d8>)
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	3302      	adds	r3, #2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800070c:	4b37      	ldr	r3, [pc, #220]	; (80007ec <HAL_GPIO_Init+0x2e8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	43db      	mvns	r3, r3
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	4013      	ands	r3, r2
 800071a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000724:	2b00      	cmp	r3, #0
 8000726:	d003      	beq.n	8000730 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000728:	693a      	ldr	r2, [r7, #16]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4313      	orrs	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000730:	4a2e      	ldr	r2, [pc, #184]	; (80007ec <HAL_GPIO_Init+0x2e8>)
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <HAL_GPIO_Init+0x2e8>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	43db      	mvns	r3, r3
 8000740:	693a      	ldr	r2, [r7, #16]
 8000742:	4013      	ands	r3, r2
 8000744:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	2b00      	cmp	r3, #0
 8000750:	d003      	beq.n	800075a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4313      	orrs	r3, r2
 8000758:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800075a:	4a24      	ldr	r2, [pc, #144]	; (80007ec <HAL_GPIO_Init+0x2e8>)
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <HAL_GPIO_Init+0x2e8>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	43db      	mvns	r3, r3
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	4013      	ands	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000778:	2b00      	cmp	r3, #0
 800077a:	d003      	beq.n	8000784 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4313      	orrs	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000784:	4a19      	ldr	r2, [pc, #100]	; (80007ec <HAL_GPIO_Init+0x2e8>)
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <HAL_GPIO_Init+0x2e8>)
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	43db      	mvns	r3, r3
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	4013      	ands	r3, r2
 8000798:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <HAL_GPIO_Init+0x2e8>)
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	3301      	adds	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	fa22 f303 	lsr.w	r3, r2, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	f47f aea9 	bne.w	800051c <HAL_GPIO_Init+0x18>
  }
}
 80007ca:	bf00      	nop
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010000 	.word	0x40010000
 80007e0:	48000400 	.word	0x48000400
 80007e4:	48000800 	.word	0x48000800
 80007e8:	48000c00 	.word	0x48000c00
 80007ec:	40010400 	.word	0x40010400

080007f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	807b      	strh	r3, [r7, #2]
 80007fc:	4613      	mov	r3, r2
 80007fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000800:	787b      	ldrb	r3, [r7, #1]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d003      	beq.n	800080e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000806:	887a      	ldrh	r2, [r7, #2]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800080c:	e002      	b.n	8000814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800080e:	887a      	ldrh	r2, [r7, #2]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000826:	af00      	add	r7, sp, #0
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	f000 beda 	b.w	80015ee <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	2b00      	cmp	r3, #0
 8000846:	f000 816e 	beq.w	8000b26 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800084a:	4bb5      	ldr	r3, [pc, #724]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f003 030c 	and.w	r3, r3, #12
 8000852:	2b04      	cmp	r3, #4
 8000854:	d00c      	beq.n	8000870 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000856:	4bb2      	ldr	r3, [pc, #712]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f003 030c 	and.w	r3, r3, #12
 800085e:	2b08      	cmp	r3, #8
 8000860:	d15a      	bne.n	8000918 <HAL_RCC_OscConfig+0xf8>
 8000862:	4baf      	ldr	r3, [pc, #700]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800086a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800086e:	d153      	bne.n	8000918 <HAL_RCC_OscConfig+0xf8>
 8000870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000874:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000878:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800087c:	fa93 f3a3 	rbit	r3, r3
 8000880:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000884:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000888:	fab3 f383 	clz	r3, r3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	b2db      	uxtb	r3, r3
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b01      	cmp	r3, #1
 800089a:	d102      	bne.n	80008a2 <HAL_RCC_OscConfig+0x82>
 800089c:	4ba0      	ldr	r3, [pc, #640]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	e015      	b.n	80008ce <HAL_RCC_OscConfig+0xae>
 80008a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80008ae:	fa93 f3a3 	rbit	r3, r3
 80008b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80008b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80008be:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80008c2:	fa93 f3a3 	rbit	r3, r3
 80008c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80008ca:	4b95      	ldr	r3, [pc, #596]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 80008cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008d2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80008d6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80008da:	fa92 f2a2 	rbit	r2, r2
 80008de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80008e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80008e6:	fab2 f282 	clz	r2, r2
 80008ea:	b252      	sxtb	r2, r2
 80008ec:	f042 0220 	orr.w	r2, r2, #32
 80008f0:	b252      	sxtb	r2, r2
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	f002 021f 	and.w	r2, r2, #31
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	4013      	ands	r3, r2
 8000900:	2b00      	cmp	r3, #0
 8000902:	f000 810f 	beq.w	8000b24 <HAL_RCC_OscConfig+0x304>
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	f040 8109 	bne.w	8000b24 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	f000 be6b 	b.w	80015ee <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000922:	d106      	bne.n	8000932 <HAL_RCC_OscConfig+0x112>
 8000924:	4b7e      	ldr	r3, [pc, #504]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a7d      	ldr	r2, [pc, #500]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 800092a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	e030      	b.n	8000994 <HAL_RCC_OscConfig+0x174>
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10c      	bne.n	8000956 <HAL_RCC_OscConfig+0x136>
 800093c:	4b78      	ldr	r3, [pc, #480]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a77      	ldr	r2, [pc, #476]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b75      	ldr	r3, [pc, #468]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a74      	ldr	r2, [pc, #464]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 800094e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	e01e      	b.n	8000994 <HAL_RCC_OscConfig+0x174>
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000960:	d10c      	bne.n	800097c <HAL_RCC_OscConfig+0x15c>
 8000962:	4b6f      	ldr	r3, [pc, #444]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a6e      	ldr	r2, [pc, #440]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	4b6c      	ldr	r3, [pc, #432]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a6b      	ldr	r2, [pc, #428]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	e00b      	b.n	8000994 <HAL_RCC_OscConfig+0x174>
 800097c:	4b68      	ldr	r3, [pc, #416]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a67      	ldr	r2, [pc, #412]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b65      	ldr	r3, [pc, #404]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a64      	ldr	r2, [pc, #400]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 800098e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000992:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000994:	4b62      	ldr	r3, [pc, #392]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000998:	f023 020f 	bic.w	r2, r3, #15
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	495f      	ldr	r1, [pc, #380]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 80009a4:	4313      	orrs	r3, r2
 80009a6:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d05a      	beq.n	8000a68 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b2:	f7ff fc6b 	bl	800028c <HAL_GetTick>
 80009b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ba:	e00a      	b.n	80009d2 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009bc:	f7ff fc66 	bl	800028c <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	2b64      	cmp	r3, #100	; 0x64
 80009ca:	d902      	bls.n	80009d2 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80009cc:	2303      	movs	r3, #3
 80009ce:	f000 be0e 	b.w	80015ee <HAL_RCC_OscConfig+0xdce>
 80009d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009d6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009da:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80009de:	fa93 f3a3 	rbit	r3, r3
 80009e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80009e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ea:	fab3 f383 	clz	r3, r3
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	095b      	lsrs	r3, r3, #5
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d102      	bne.n	8000a04 <HAL_RCC_OscConfig+0x1e4>
 80009fe:	4b48      	ldr	r3, [pc, #288]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	e015      	b.n	8000a30 <HAL_RCC_OscConfig+0x210>
 8000a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a08:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a0c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a10:	fa93 f3a3 	rbit	r3, r3
 8000a14:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a1c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000a20:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000a24:	fa93 f3a3 	rbit	r3, r3
 8000a28:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000a2c:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a34:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000a38:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000a3c:	fa92 f2a2 	rbit	r2, r2
 8000a40:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000a44:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b252      	sxtb	r2, r2
 8000a4e:	f042 0220 	orr.w	r2, r2, #32
 8000a52:	b252      	sxtb	r2, r2
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	f002 021f 	and.w	r2, r2, #31
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a60:	4013      	ands	r3, r2
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0aa      	beq.n	80009bc <HAL_RCC_OscConfig+0x19c>
 8000a66:	e05e      	b.n	8000b26 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a68:	f7ff fc10 	bl	800028c <HAL_GetTick>
 8000a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a70:	e00a      	b.n	8000a88 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a72:	f7ff fc0b 	bl	800028c <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b64      	cmp	r3, #100	; 0x64
 8000a80:	d902      	bls.n	8000a88 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000a82:	2303      	movs	r3, #3
 8000a84:	f000 bdb3 	b.w	80015ee <HAL_RCC_OscConfig+0xdce>
 8000a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a8c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a94:	fa93 f3a3 	rbit	r3, r3
 8000a98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000a9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aa0:	fab3 f383 	clz	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d102      	bne.n	8000aba <HAL_RCC_OscConfig+0x29a>
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	e015      	b.n	8000ae6 <HAL_RCC_OscConfig+0x2c6>
 8000aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000abe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000ac6:	fa93 f3a3 	rbit	r3, r3
 8000aca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ad2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000ad6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000ada:	fa93 f3a3 	rbit	r3, r3
 8000ade:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_RCC_OscConfig+0x300>)
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000aee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000af2:	fa92 f2a2 	rbit	r2, r2
 8000af6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000afa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	b252      	sxtb	r2, r2
 8000b04:	f042 0220 	orr.w	r2, r2, #32
 8000b08:	b252      	sxtb	r2, r2
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	f002 021f 	and.w	r2, r2, #31
 8000b10:	2101      	movs	r1, #1
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	4013      	ands	r3, r2
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1aa      	bne.n	8000a72 <HAL_RCC_OscConfig+0x252>
 8000b1c:	e003      	b.n	8000b26 <HAL_RCC_OscConfig+0x306>
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f000 8170 	beq.w	8000e16 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b36:	4bd0      	ldr	r3, [pc, #832]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 030c 	and.w	r3, r3, #12
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00b      	beq.n	8000b5a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b42:	4bcd      	ldr	r3, [pc, #820]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 030c 	and.w	r3, r3, #12
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d16d      	bne.n	8000c2a <HAL_RCC_OscConfig+0x40a>
 8000b4e:	4bca      	ldr	r3, [pc, #808]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d167      	bne.n	8000c2a <HAL_RCC_OscConfig+0x40a>
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b60:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b64:	fa93 f3a3 	rbit	r3, r3
 8000b68:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000b6c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b70:	fab3 f383 	clz	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d102      	bne.n	8000b8a <HAL_RCC_OscConfig+0x36a>
 8000b84:	4bbc      	ldr	r3, [pc, #752]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	e013      	b.n	8000bb2 <HAL_RCC_OscConfig+0x392>
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b94:	fa93 f3a3 	rbit	r3, r3
 8000b98:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ba2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000ba6:	fa93 f3a3 	rbit	r3, r3
 8000baa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000bae:	4bb2      	ldr	r3, [pc, #712]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000bb8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000bbc:	fa92 f2a2 	rbit	r2, r2
 8000bc0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000bc4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	b252      	sxtb	r2, r2
 8000bce:	f042 0220 	orr.w	r2, r2, #32
 8000bd2:	b252      	sxtb	r2, r2
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	f002 021f 	and.w	r2, r2, #31
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	4013      	ands	r3, r2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x3d6>
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d002      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f000 bcfc 	b.w	80015ee <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf6:	4ba0      	ldr	r3, [pc, #640]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6959      	ldr	r1, [r3, #20]
 8000c04:	23f8      	movs	r3, #248	; 0xf8
 8000c06:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c0e:	fa93 f3a3 	rbit	r3, r3
 8000c12:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000c16:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000c1a:	fab3 f383 	clz	r3, r3
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	4995      	ldr	r1, [pc, #596]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000c24:	4313      	orrs	r3, r2
 8000c26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c28:	e0f5      	b.n	8000e16 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 8085 	beq.w	8000d40 <HAL_RCC_OscConfig+0x520>
 8000c36:	2301      	movs	r3, #1
 8000c38:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c40:	fa93 f3a3 	rbit	r3, r3
 8000c44:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000c48:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c4c:	fab3 f383 	clz	r3, r3
 8000c50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fb14 	bl	800028c <HAL_GetTick>
 8000c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c68:	e00a      	b.n	8000c80 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c6a:	f7ff fb0f 	bl	800028c <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d902      	bls.n	8000c80 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f000 bcb7 	b.w	80015ee <HAL_RCC_OscConfig+0xdce>
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c8a:	fa93 f3a3 	rbit	r3, r3
 8000c8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000c92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c96:	fab3 f383 	clz	r3, r3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	095b      	lsrs	r3, r3, #5
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d102      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x490>
 8000caa:	4b73      	ldr	r3, [pc, #460]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	e013      	b.n	8000cd8 <HAL_RCC_OscConfig+0x4b8>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000cba:	fa93 f3a3 	rbit	r3, r3
 8000cbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000cc8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000ccc:	fa93 f3a3 	rbit	r3, r3
 8000cd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000cd4:	4b68      	ldr	r3, [pc, #416]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	2202      	movs	r2, #2
 8000cda:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000cde:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000ce2:	fa92 f2a2 	rbit	r2, r2
 8000ce6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000cea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b252      	sxtb	r2, r2
 8000cf4:	f042 0220 	orr.w	r2, r2, #32
 8000cf8:	b252      	sxtb	r2, r2
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	f002 021f 	and.w	r2, r2, #31
 8000d00:	2101      	movs	r1, #1
 8000d02:	fa01 f202 	lsl.w	r2, r1, r2
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0ae      	beq.n	8000c6a <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0c:	4b5a      	ldr	r3, [pc, #360]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6959      	ldr	r1, [r3, #20]
 8000d1a:	23f8      	movs	r3, #248	; 0xf8
 8000d1c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d20:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000d24:	fa93 f3a3 	rbit	r3, r3
 8000d28:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000d2c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000d30:	fab3 f383 	clz	r3, r3
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	494f      	ldr	r1, [pc, #316]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]
 8000d3e:	e06a      	b.n	8000e16 <HAL_RCC_OscConfig+0x5f6>
 8000d40:	2301      	movs	r3, #1
 8000d42:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d46:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d4a:	fa93 f3a3 	rbit	r3, r3
 8000d4e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000d52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d56:	fab3 f383 	clz	r3, r3
 8000d5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	461a      	mov	r2, r3
 8000d66:	2300      	movs	r3, #0
 8000d68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fa8f 	bl	800028c <HAL_GetTick>
 8000d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	e00a      	b.n	8000d8a <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d74:	f7ff fa8a 	bl	800028c <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d902      	bls.n	8000d8a <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	f000 bc32 	b.w	80015ee <HAL_RCC_OscConfig+0xdce>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d94:	fa93 f3a3 	rbit	r3, r3
 8000d98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000d9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d102      	bne.n	8000dba <HAL_RCC_OscConfig+0x59a>
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	e013      	b.n	8000de2 <HAL_RCC_OscConfig+0x5c2>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000dd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_RCC_OscConfig+0x658>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	2202      	movs	r2, #2
 8000de4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000de8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000dec:	fa92 f2a2 	rbit	r2, r2
 8000df0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000df4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000df8:	fab2 f282 	clz	r2, r2
 8000dfc:	b252      	sxtb	r2, r2
 8000dfe:	f042 0220 	orr.w	r2, r2, #32
 8000e02:	b252      	sxtb	r2, r2
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	f002 021f 	and.w	r2, r2, #31
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1ae      	bne.n	8000d74 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80d8 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d067      	beq.n	8000f00 <HAL_RCC_OscConfig+0x6e0>
 8000e30:	2301      	movs	r3, #1
 8000e32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e3a:	fa93 f3a3 	rbit	r3, r3
 8000e3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000e42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e46:	fab3 f383 	clz	r3, r3
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_RCC_OscConfig+0x65c>)
 8000e4e:	4413      	add	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	461a      	mov	r2, r3
 8000e54:	2301      	movs	r3, #1
 8000e56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fa18 	bl	800028c <HAL_GetTick>
 8000e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e60:	e00e      	b.n	8000e80 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e62:	f7ff fa13 	bl	800028c <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d906      	bls.n	8000e80 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e3bb      	b.n	80015ee <HAL_RCC_OscConfig+0xdce>
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	10908120 	.word	0x10908120
 8000e80:	2302      	movs	r3, #2
 8000e82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e8a:	fa93 f3a3 	rbit	r3, r3
 8000e8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e92:	2302      	movs	r3, #2
 8000e94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e9c:	fa93 f2a3 	rbit	r2, r3
 8000ea0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000eaa:	2202      	movs	r2, #2
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	fa93 f2a3 	rbit	r2, r3
 8000eb8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000ebc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ebe:	4ba5      	ldr	r3, [pc, #660]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8000ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ec2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	6019      	str	r1, [r3, #0]
 8000eca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	fa93 f1a3 	rbit	r1, r3
 8000ed4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ed8:	6019      	str	r1, [r3, #0]
  return(result);
 8000eda:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	fab3 f383 	clz	r3, r3
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0b1      	beq.n	8000e62 <HAL_RCC_OscConfig+0x642>
 8000efe:	e06a      	b.n	8000fd6 <HAL_RCC_OscConfig+0x7b6>
 8000f00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	fa93 f2a3 	rbit	r2, r3
 8000f12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f16:	601a      	str	r2, [r3, #0]
  return(result);
 8000f18:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f1c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b8c      	ldr	r3, [pc, #560]	; (8001158 <HAL_RCC_OscConfig+0x938>)
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f30:	f7ff f9ac 	bl	800028c <HAL_GetTick>
 8000f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	e009      	b.n	8000f4e <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3a:	f7ff f9a7 	bl	800028c <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e34f      	b.n	80015ee <HAL_RCC_OscConfig+0xdce>
 8000f4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f52:	2202      	movs	r2, #2
 8000f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	fa93 f2a3 	rbit	r2, r3
 8000f60:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	fa93 f2a3 	rbit	r2, r3
 8000f78:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f82:	2202      	movs	r2, #2
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	fa93 f2a3 	rbit	r2, r3
 8000f90:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f96:	4b6f      	ldr	r3, [pc, #444]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8000f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	6019      	str	r1, [r3, #0]
 8000fa2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	fa93 f1a3 	rbit	r1, r3
 8000fac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fb0:	6019      	str	r1, [r3, #0]
  return(result);
 8000fb2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	fab3 f383 	clz	r3, r3
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1b1      	bne.n	8000f3a <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 8159 	beq.w	8001298 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fec:	4b59      	ldr	r3, [pc, #356]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d112      	bne.n	800101e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	4b56      	ldr	r3, [pc, #344]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	4a55      	ldr	r2, [pc, #340]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	61d3      	str	r3, [r2, #28]
 8001004:	4b53      	ldr	r3, [pc, #332]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001018:	2301      	movs	r3, #1
 800101a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101e:	4b4f      	ldr	r3, [pc, #316]	; (800115c <HAL_RCC_OscConfig+0x93c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	2b00      	cmp	r3, #0
 8001028:	d11a      	bne.n	8001060 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102a:	4b4c      	ldr	r3, [pc, #304]	; (800115c <HAL_RCC_OscConfig+0x93c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a4b      	ldr	r2, [pc, #300]	; (800115c <HAL_RCC_OscConfig+0x93c>)
 8001030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001034:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001036:	f7ff f929 	bl	800028c <HAL_GetTick>
 800103a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103e:	e009      	b.n	8001054 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001040:	f7ff f924 	bl	800028c <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b64      	cmp	r3, #100	; 0x64
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e2cc      	b.n	80015ee <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001054:	4b41      	ldr	r3, [pc, #260]	; (800115c <HAL_RCC_OscConfig+0x93c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0ef      	beq.n	8001040 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d106      	bne.n	8001078 <HAL_RCC_OscConfig+0x858>
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a39      	ldr	r2, [pc, #228]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	e02f      	b.n	80010d8 <HAL_RCC_OscConfig+0x8b8>
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x87c>
 8001082:	4b34      	ldr	r3, [pc, #208]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a33      	ldr	r2, [pc, #204]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4a30      	ldr	r2, [pc, #192]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8001094:	f023 0304 	bic.w	r3, r3, #4
 8001098:	6213      	str	r3, [r2, #32]
 800109a:	e01d      	b.n	80010d8 <HAL_RCC_OscConfig+0x8b8>
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x8a0>
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a2a      	ldr	r2, [pc, #168]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a27      	ldr	r2, [pc, #156]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6213      	str	r3, [r2, #32]
 80010be:	e00b      	b.n	80010d8 <HAL_RCC_OscConfig+0x8b8>
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a23      	ldr	r2, [pc, #140]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	6213      	str	r3, [r2, #32]
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 80010d2:	f023 0304 	bic.w	r3, r3, #4
 80010d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d06b      	beq.n	80011ba <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff f8d3 	bl	800028c <HAL_GetTick>
 80010e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ea:	e00b      	b.n	8001104 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ec:	f7ff f8ce 	bl	800028c <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e274      	b.n	80015ee <HAL_RCC_OscConfig+0xdce>
 8001104:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001108:	2202      	movs	r2, #2
 800110a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	fa93 f2a3 	rbit	r2, r3
 8001116:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001120:	2202      	movs	r2, #2
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	fa93 f2a3 	rbit	r2, r3
 800112e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001132:	601a      	str	r2, [r3, #0]
  return(result);
 8001134:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001138:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	095b      	lsrs	r3, r3, #5
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d108      	bne.n	8001160 <HAL_RCC_OscConfig+0x940>
 800114e:	4b01      	ldr	r3, [pc, #4]	; (8001154 <HAL_RCC_OscConfig+0x934>)
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	e013      	b.n	800117c <HAL_RCC_OscConfig+0x95c>
 8001154:	40021000 	.word	0x40021000
 8001158:	10908120 	.word	0x10908120
 800115c:	40007000 	.word	0x40007000
 8001160:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001164:	2202      	movs	r2, #2
 8001166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	fa93 f2a3 	rbit	r2, r3
 8001172:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	4bbb      	ldr	r3, [pc, #748]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001180:	2102      	movs	r1, #2
 8001182:	6011      	str	r1, [r2, #0]
 8001184:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	fa92 f1a2 	rbit	r1, r2
 800118e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001192:	6011      	str	r1, [r2, #0]
  return(result);
 8001194:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	fab2 f282 	clz	r2, r2
 800119e:	b252      	sxtb	r2, r2
 80011a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011a4:	b252      	sxtb	r2, r2
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	f002 021f 	and.w	r2, r2, #31
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d099      	beq.n	80010ec <HAL_RCC_OscConfig+0x8cc>
 80011b8:	e064      	b.n	8001284 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ba:	f7ff f867 	bl	800028c <HAL_GetTick>
 80011be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c2:	e00b      	b.n	80011dc <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011c4:	f7ff f862 	bl	800028c <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e208      	b.n	80015ee <HAL_RCC_OscConfig+0xdce>
 80011dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011e0:	2202      	movs	r2, #2
 80011e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	fa93 f2a3 	rbit	r2, r3
 80011ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f8:	2202      	movs	r2, #2
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	fa93 f2a3 	rbit	r2, r3
 8001206:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800120a:	601a      	str	r2, [r3, #0]
  return(result);
 800120c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001210:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	095b      	lsrs	r3, r3, #5
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d102      	bne.n	800122c <HAL_RCC_OscConfig+0xa0c>
 8001226:	4b90      	ldr	r3, [pc, #576]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	e00d      	b.n	8001248 <HAL_RCC_OscConfig+0xa28>
 800122c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001230:	2202      	movs	r2, #2
 8001232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001234:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	fa93 f2a3 	rbit	r2, r3
 800123e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	4b88      	ldr	r3, [pc, #544]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800124c:	2102      	movs	r1, #2
 800124e:	6011      	str	r1, [r2, #0]
 8001250:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	fa92 f1a2 	rbit	r1, r2
 800125a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800125e:	6011      	str	r1, [r2, #0]
  return(result);
 8001260:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	fab2 f282 	clz	r2, r2
 800126a:	b252      	sxtb	r2, r2
 800126c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001270:	b252      	sxtb	r2, r2
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	f002 021f 	and.w	r2, r2, #31
 8001278:	2101      	movs	r1, #1
 800127a:	fa01 f202 	lsl.w	r2, r1, r2
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d19f      	bne.n	80011c4 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001284:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001288:	2b01      	cmp	r3, #1
 800128a:	d105      	bne.n	8001298 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800128c:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	4a75      	ldr	r2, [pc, #468]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 8001292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001296:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 81a4 	beq.w	80015ec <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a4:	4b70      	ldr	r3, [pc, #448]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	f000 819b 	beq.w	80015e8 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	f040 8113 	bne.w	80014e4 <HAL_RCC_OscConfig+0xcc4>
 80012be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	fa93 f2a3 	rbit	r2, r3
 80012d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012d6:	601a      	str	r2, [r3, #0]
  return(result);
 80012d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	461a      	mov	r2, r3
 80012ee:	2300      	movs	r3, #0
 80012f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7fe ffcb 	bl	800028c <HAL_GetTick>
 80012f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fa:	e009      	b.n	8001310 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fc:	f7fe ffc6 	bl	800028c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e16e      	b.n	80015ee <HAL_RCC_OscConfig+0xdce>
 8001310:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	fa93 f2a3 	rbit	r2, r3
 8001324:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001328:	601a      	str	r2, [r3, #0]
  return(result);
 800132a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800132e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d102      	bne.n	800134a <HAL_RCC_OscConfig+0xb2a>
 8001344:	4b48      	ldr	r3, [pc, #288]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	e01b      	b.n	8001382 <HAL_RCC_OscConfig+0xb62>
 800134a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800134e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	fa93 f2a3 	rbit	r2, r3
 800135e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001368:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	fa93 f2a3 	rbit	r2, r3
 8001378:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001386:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800138a:	6011      	str	r1, [r2, #0]
 800138c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	fa92 f1a2 	rbit	r1, r2
 8001396:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800139a:	6011      	str	r1, [r2, #0]
  return(result);
 800139c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	b252      	sxtb	r2, r2
 80013a8:	f042 0220 	orr.w	r2, r2, #32
 80013ac:	b252      	sxtb	r2, r2
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	f002 021f 	and.w	r2, r2, #31
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d19d      	bne.n	80012fc <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c0:	4b29      	ldr	r3, [pc, #164]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	4924      	ldr	r1, [pc, #144]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
 80013dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	fa93 f2a3 	rbit	r2, r3
 80013f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013f4:	601a      	str	r2, [r3, #0]
  return(result);
 80013f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013fa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001404:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	461a      	mov	r2, r3
 800140c:	2301      	movs	r3, #1
 800140e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7fe ff3c 	bl	800028c <HAL_GetTick>
 8001414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001418:	e009      	b.n	800142e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141a:	f7fe ff37 	bl	800028c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e0df      	b.n	80015ee <HAL_RCC_OscConfig+0xdce>
 800142e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001432:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001438:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	fa93 f2a3 	rbit	r2, r3
 8001442:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001446:	601a      	str	r2, [r3, #0]
  return(result);
 8001448:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800144c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	095b      	lsrs	r3, r3, #5
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d104      	bne.n	800146c <HAL_RCC_OscConfig+0xc4c>
 8001462:	4b01      	ldr	r3, [pc, #4]	; (8001468 <HAL_RCC_OscConfig+0xc48>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	e01d      	b.n	80014a4 <HAL_RCC_OscConfig+0xc84>
 8001468:	40021000 	.word	0x40021000
 800146c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fa93 f2a3 	rbit	r2, r3
 8001480:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800148a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <HAL_RCC_OscConfig+0xdd8>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80014a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80014ac:	6011      	str	r1, [r2, #0]
 80014ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	fa92 f1a2 	rbit	r1, r2
 80014b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014bc:	6011      	str	r1, [r2, #0]
  return(result);
 80014be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	fab2 f282 	clz	r2, r2
 80014c8:	b252      	sxtb	r2, r2
 80014ca:	f042 0220 	orr.w	r2, r2, #32
 80014ce:	b252      	sxtb	r2, r2
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	f002 021f 	and.w	r2, r2, #31
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d09b      	beq.n	800141a <HAL_RCC_OscConfig+0xbfa>
 80014e2:	e083      	b.n	80015ec <HAL_RCC_OscConfig+0xdcc>
 80014e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fa93 f2a3 	rbit	r2, r3
 80014f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014fc:	601a      	str	r2, [r3, #0]
  return(result);
 80014fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001502:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800150c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	461a      	mov	r2, r3
 8001514:	2300      	movs	r3, #0
 8001516:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7fe feb8 	bl	800028c <HAL_GetTick>
 800151c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001520:	e009      	b.n	8001536 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001522:	f7fe feb3 	bl	800028c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e05b      	b.n	80015ee <HAL_RCC_OscConfig+0xdce>
 8001536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800153e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154e:	601a      	str	r2, [r3, #0]
  return(result);
 8001550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001554:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	095b      	lsrs	r3, r3, #5
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d102      	bne.n	8001570 <HAL_RCC_OscConfig+0xd50>
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_RCC_OscConfig+0xdd8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	e01b      	b.n	80015a8 <HAL_RCC_OscConfig+0xd88>
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fa93 f2a3 	rbit	r2, r3
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	fa93 f2a3 	rbit	r2, r3
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_RCC_OscConfig+0xdd8>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	f107 0214 	add.w	r2, r7, #20
 80015ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015b0:	6011      	str	r1, [r2, #0]
 80015b2:	f107 0214 	add.w	r2, r7, #20
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	fa92 f1a2 	rbit	r1, r2
 80015bc:	f107 0210 	add.w	r2, r7, #16
 80015c0:	6011      	str	r1, [r2, #0]
  return(result);
 80015c2:	f107 0210 	add.w	r2, r7, #16
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	fab2 f282 	clz	r2, r2
 80015cc:	b252      	sxtb	r2, r2
 80015ce:	f042 0220 	orr.w	r2, r2, #32
 80015d2:	b252      	sxtb	r2, r2
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	f002 021f 	and.w	r2, r2, #31
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d19d      	bne.n	8001522 <HAL_RCC_OscConfig+0xd02>
 80015e6:	e001      	b.n	80015ec <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b09e      	sub	sp, #120	; 0x78
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e164      	b.n	80018de <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b92      	ldr	r3, [pc, #584]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d910      	bls.n	8001644 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b8f      	ldr	r3, [pc, #572]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 0207 	bic.w	r2, r3, #7
 800162a:	498d      	ldr	r1, [pc, #564]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b8b      	ldr	r3, [pc, #556]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e14c      	b.n	80018de <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b84      	ldr	r3, [pc, #528]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4981      	ldr	r1, [pc, #516]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80df 	beq.w	800182e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d13d      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xf8>
 8001678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001680:	fa93 f3a3 	rbit	r3, r3
 8001684:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001688:	fab3 f383 	clz	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d102      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xa6>
 800169c:	4b71      	ldr	r3, [pc, #452]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	e00f      	b.n	80016c2 <HAL_RCC_ClockConfig+0xc6>
 80016a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	667b      	str	r3, [r7, #100]	; 0x64
 80016b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b4:	663b      	str	r3, [r7, #96]	; 0x60
 80016b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016be:	4b69      	ldr	r3, [pc, #420]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80016c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016ca:	fa92 f2a2 	rbit	r2, r2
 80016ce:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80016d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016d2:	fab2 f282 	clz	r2, r2
 80016d6:	b252      	sxtb	r2, r2
 80016d8:	f042 0220 	orr.w	r2, r2, #32
 80016dc:	b252      	sxtb	r2, r2
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	f002 021f 	and.w	r2, r2, #31
 80016e4:	2101      	movs	r1, #1
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d17d      	bne.n	80017ec <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0f4      	b.n	80018de <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d13d      	bne.n	8001778 <HAL_RCC_ClockConfig+0x17c>
 80016fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001700:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800170a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	fab3 f383 	clz	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d102      	bne.n	8001726 <HAL_RCC_ClockConfig+0x12a>
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	e00f      	b.n	8001746 <HAL_RCC_ClockConfig+0x14a>
 8001726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	647b      	str	r3, [r7, #68]	; 0x44
 8001734:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001738:	643b      	str	r3, [r7, #64]	; 0x40
 800173a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800173c:	fa93 f3a3 	rbit	r3, r3
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001742:	4b48      	ldr	r3, [pc, #288]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800174a:	63ba      	str	r2, [r7, #56]	; 0x38
 800174c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800174e:	fa92 f2a2 	rbit	r2, r2
 8001752:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001756:	fab2 f282 	clz	r2, r2
 800175a:	b252      	sxtb	r2, r2
 800175c:	f042 0220 	orr.w	r2, r2, #32
 8001760:	b252      	sxtb	r2, r2
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	f002 021f 	and.w	r2, r2, #31
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d13b      	bne.n	80017ec <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b2      	b.n	80018de <HAL_RCC_ClockConfig+0x2e2>
 8001778:	2302      	movs	r3, #2
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177e:	fa93 f3a3 	rbit	r3, r3
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	095b      	lsrs	r3, r3, #5
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d102      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x1a4>
 800179a:	4b32      	ldr	r3, [pc, #200]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	e00d      	b.n	80017bc <HAL_RCC_ClockConfig+0x1c0>
 80017a0:	2302      	movs	r3, #2
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
 80017ac:	2302      	movs	r3, #2
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	2202      	movs	r2, #2
 80017be:	61ba      	str	r2, [r7, #24]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	fa92 f2a2 	rbit	r2, r2
 80017c6:	617a      	str	r2, [r7, #20]
  return(result);
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	fab2 f282 	clz	r2, r2
 80017ce:	b252      	sxtb	r2, r2
 80017d0:	f042 0220 	orr.w	r2, r2, #32
 80017d4:	b252      	sxtb	r2, r2
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	f002 021f 	and.w	r2, r2, #31
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e078      	b.n	80018de <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 0203 	bic.w	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	491a      	ldr	r1, [pc, #104]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fe:	f7fe fd45 	bl	800028c <HAL_GetTick>
 8001802:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001804:	e00a      	b.n	800181c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001806:	f7fe fd41 	bl	800028c <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e060      	b.n	80018de <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 020c 	and.w	r2, r3, #12
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	429a      	cmp	r2, r3
 800182c:	d1eb      	bne.n	8001806 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d215      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 0207 	bic.w	r2, r3, #7
 8001844:	4906      	ldr	r1, [pc, #24]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	4313      	orrs	r3, r2
 800184a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d006      	beq.n	8001868 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e03f      	b.n	80018de <HAL_RCC_ClockConfig+0x2e2>
 800185e:	bf00      	nop
 8001860:	40022000 	.word	0x40022000
 8001864:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_RCC_ClockConfig+0x2ec>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4919      	ldr	r1, [pc, #100]	; (80018e8 <HAL_RCC_ClockConfig+0x2ec>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_RCC_ClockConfig+0x2ec>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4911      	ldr	r1, [pc, #68]	; (80018e8 <HAL_RCC_ClockConfig+0x2ec>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018a6:	f000 f825 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018aa:	4601      	mov	r1, r0
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x2ec>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018b4:	23f0      	movs	r3, #240	; 0xf0
 80018b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	60fb      	str	r3, [r7, #12]
  return(result);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_RCC_ClockConfig+0x2f0>)
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	fa21 f303 	lsr.w	r3, r1, r3
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_RCC_ClockConfig+0x2f4>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7fe fc94 	bl	8000204 <HAL_InitTick>
  
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3778      	adds	r7, #120	; 0x78
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	08003068 	.word	0x08003068
 80018f0:	20000044 	.word	0x20000044

080018f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b08b      	sub	sp, #44	; 0x2c
 80018f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800190e:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b04      	cmp	r3, #4
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x30>
 800191e:	2b08      	cmp	r3, #8
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x36>
 8001922:	e03c      	b.n	800199e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001926:	623b      	str	r3, [r7, #32]
      break;
 8001928:	e03c      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001930:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001934:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	607b      	str	r3, [r7, #4]
  return(result);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	f003 020f 	and.w	r2, r3, #15
 8001956:	230f      	movs	r3, #15
 8001958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	60fb      	str	r3, [r7, #12]
  return(result);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	fbb2 f2f3 	udiv	r2, r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
 800198c:	e004      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	623b      	str	r3, [r7, #32]
      break;
 800199c:	e002      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019a0:	623b      	str	r3, [r7, #32]
      break;
 80019a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a4:	6a3b      	ldr	r3, [r7, #32]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	372c      	adds	r7, #44	; 0x2c
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	007a1200 	.word	0x007a1200
 80019bc:	08003048 	.word	0x08003048
 80019c0:	08003058 	.word	0x08003058
 80019c4:	003d0900 	.word	0x003d0900

080019c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000044 	.word	0x20000044

080019e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80019e6:	f7ff ffef 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 80019ea:	4601      	mov	r1, r0
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019f4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80019f8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	603b      	str	r3, [r7, #0]
  return(result);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	08003078 	.word	0x08003078

08001a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a2a:	f7ff ffcd 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 8001a2e:	4601      	mov	r1, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001a38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a3c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	603b      	str	r3, [r7, #0]
  return(result);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001a52:	5cd3      	ldrb	r3, [r2, r3]
 8001a54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08003078 	.word	0x08003078

08001a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e01d      	b.n	8001ab6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 f924 	bl	8002cdc <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f000 fa3c 	bl	8001f24 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d122      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d11b      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f06f 0202 	mvn.w	r2, #2
 8001aea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f9f1 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001b06:	e005      	b.n	8001b14 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f9e3 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f9f4 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d122      	bne.n	8001b6e <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d11b      	bne.n	8001b6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f06f 0204 	mvn.w	r2, #4
 8001b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f9c7 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001b5a:	e005      	b.n	8001b68 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f9b9 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f9ca 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d122      	bne.n	8001bc2 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11b      	bne.n	8001bc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f06f 0208 	mvn.w	r2, #8
 8001b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2204      	movs	r2, #4
 8001b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f99d 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001bae:	e005      	b.n	8001bbc <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f98f 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f9a0 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b10      	cmp	r3, #16
 8001bce:	d122      	bne.n	8001c16 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d11b      	bne.n	8001c16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 0210 	mvn.w	r2, #16
 8001be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2208      	movs	r2, #8
 8001bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f973 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001c02:	e005      	b.n	8001c10 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f965 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f976 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10e      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0201 	mvn.w	r2, #1
 8001c3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f93f 	bl	8001ec0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	2b80      	cmp	r3, #128	; 0x80
 8001c4e:	d10e      	bne.n	8001c6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5a:	2b80      	cmp	r3, #128	; 0x80
 8001c5c:	d107      	bne.n	8001c6e <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fad7 	bl	800221c <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7c:	d10e      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c88:	2b80      	cmp	r3, #128	; 0x80
 8001c8a:	d107      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c94:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 faca 	bl	8002230 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	2b40      	cmp	r3, #64	; 0x40
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d107      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cc0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f924 	bl	8001f10 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d107      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0220 	mvn.w	r2, #32
 8001cec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa8a 	bl	8002208 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_TIM_ConfigClockSource+0x1c>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e0cf      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b40      	cmp	r3, #64	; 0x40
 8001d52:	d07c      	beq.n	8001e4e <HAL_TIM_ConfigClockSource+0x152>
 8001d54:	2b40      	cmp	r3, #64	; 0x40
 8001d56:	d80f      	bhi.n	8001d78 <HAL_TIM_ConfigClockSource+0x7c>
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	f000 808f 	beq.w	8001e7c <HAL_TIM_ConfigClockSource+0x180>
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d803      	bhi.n	8001d6a <HAL_TIM_ConfigClockSource+0x6e>
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8083 	beq.w	8001e6e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8001d68:	e09d      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	f000 808d 	beq.w	8001e8a <HAL_TIM_ConfigClockSource+0x18e>
 8001d70:	2b30      	cmp	r3, #48	; 0x30
 8001d72:	f000 8091 	beq.w	8001e98 <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8001d76:	e096      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001d78:	2b70      	cmp	r3, #112	; 0x70
 8001d7a:	d018      	beq.n	8001dae <HAL_TIM_ConfigClockSource+0xb2>
 8001d7c:	2b70      	cmp	r3, #112	; 0x70
 8001d7e:	d804      	bhi.n	8001d8a <HAL_TIM_ConfigClockSource+0x8e>
 8001d80:	2b50      	cmp	r3, #80	; 0x50
 8001d82:	d044      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0x112>
 8001d84:	2b60      	cmp	r3, #96	; 0x60
 8001d86:	d052      	beq.n	8001e2e <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8001d88:	e08d      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d8e:	d003      	beq.n	8001d98 <HAL_TIM_ConfigClockSource+0x9c>
 8001d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d94:	d028      	beq.n	8001de8 <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8001d96:	e086      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	f023 0307 	bic.w	r3, r3, #7
 8001daa:	6093      	str	r3, [r2, #8]
    break;
 8001dac:	e07b      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6899      	ldr	r1, [r3, #8]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f000 f9b2 	bl	8002126 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001dd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ddc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	609a      	str	r2, [r3, #8]
    break;
 8001de6:	e05e      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6899      	ldr	r1, [r3, #8]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f000 f995 	bl	8002126 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e0a:	609a      	str	r2, [r3, #8]
    break;
 8001e0c:	e04b      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f000 f8fc 	bl	8002018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2150      	movs	r1, #80	; 0x50
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f95d 	bl	80020e6 <TIM_ITRx_SetConfig>
    break;
 8001e2c:	e03b      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f000 f91f 	bl	800207e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2160      	movs	r1, #96	; 0x60
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f94d 	bl	80020e6 <TIM_ITRx_SetConfig>
    break;
 8001e4c:	e02b      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f000 f8dc 	bl	8002018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2140      	movs	r1, #64	; 0x40
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f93d 	bl	80020e6 <TIM_ITRx_SetConfig>
    break;
 8001e6c:	e01b      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f936 	bl	80020e6 <TIM_ITRx_SetConfig>
    break;
 8001e7a:	e014      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2110      	movs	r1, #16
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f92f 	bl	80020e6 <TIM_ITRx_SetConfig>
    break;
 8001e88:	e00d      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2120      	movs	r1, #32
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f928 	bl	80020e6 <TIM_ITRx_SetConfig>
    break;
 8001e96:	e006      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2130      	movs	r1, #48	; 0x30
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f921 	bl	80020e6 <TIM_ITRx_SetConfig>
    break;
 8001ea4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a32      	ldr	r2, [pc, #200]	; (8002004 <TIM_Base_SetConfig+0xe0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_Base_SetConfig+0x2c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0x2c>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <TIM_Base_SetConfig+0xe4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a27      	ldr	r2, [pc, #156]	; (8002004 <TIM_Base_SetConfig+0xe0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <TIM_Base_SetConfig+0x6e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d00f      	beq.n	8001f92 <TIM_Base_SetConfig+0x6e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <TIM_Base_SetConfig+0xe4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00b      	beq.n	8001f92 <TIM_Base_SetConfig+0x6e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a23      	ldr	r2, [pc, #140]	; (800200c <TIM_Base_SetConfig+0xe8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <TIM_Base_SetConfig+0x6e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a22      	ldr	r2, [pc, #136]	; (8002010 <TIM_Base_SetConfig+0xec>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <TIM_Base_SetConfig+0x6e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a21      	ldr	r2, [pc, #132]	; (8002014 <TIM_Base_SetConfig+0xf0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d108      	bne.n	8001fa4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <TIM_Base_SetConfig+0xe0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00b      	beq.n	8001fe8 <TIM_Base_SetConfig+0xc4>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <TIM_Base_SetConfig+0xe8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <TIM_Base_SetConfig+0xc4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <TIM_Base_SetConfig+0xec>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <TIM_Base_SetConfig+0xc4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <TIM_Base_SetConfig+0xf0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d103      	bne.n	8001ff0 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	615a      	str	r2, [r3, #20]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40000400 	.word	0x40000400
 800200c:	40014000 	.word	0x40014000
 8002010:	40014400 	.word	0x40014400
 8002014:	40014800 	.word	0x40014800

08002018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	f023 0201 	bic.w	r2, r3, #1
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800204a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f023 030a 	bic.w	r3, r3, #10
 800205c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	621a      	str	r2, [r3, #32]
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	f023 0210 	bic.w	r2, r3, #16
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	031b      	lsls	r3, r3, #12
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	621a      	str	r2, [r3, #32]
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	f043 0307 	orr.w	r3, r3, #7
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	609a      	str	r2, [r3, #8]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002126:	b480      	push	{r7}
 8002128:	b087      	sub	sp, #28
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002144:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	021a      	lsls	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	431a      	orrs	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	4313      	orrs	r3, r2
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	609a      	str	r2, [r3, #8]
} 
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002180:	2302      	movs	r3, #2
 8002182:	e038      	b.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d108      	bne.n	80021b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80021ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021d0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
} 
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40012c00 	.word	0x40012c00

08002208 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e043      	b.n	80022de <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fd5c 	bl	8002d28 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2224      	movs	r2, #36	; 0x24
 8002274:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f8b9 	bl	8002400 <UART_SetConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e022      	b.n	80022de <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fa13 	bl	80026cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa9a 	bl	8002810 <UART_CheckIdleState>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b088      	sub	sp, #32
 80022ea:	af02      	add	r7, sp, #8
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	d177      	bne.n	80023f6 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_UART_Transmit+0x2c>
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e070      	b.n	80023f8 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_UART_Transmit+0x3e>
 8002320:	2302      	movs	r3, #2
 8002322:	e069      	b.n	80023f8 <HAL_UART_Transmit+0x112>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2221      	movs	r2, #33	; 0x21
 8002336:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800233a:	f7fd ffa7 	bl	800028c <HAL_GetTick>
 800233e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002350:	e034      	b.n	80023bc <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2200      	movs	r2, #0
 800236c:	2180      	movs	r1, #128	; 0x80
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fa97 	bl	80028a2 <UART_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e03c      	b.n	80023f8 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002386:	d111      	bne.n	80023ac <HAL_UART_Transmit+0xc6>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10d      	bne.n	80023ac <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a0:	b292      	uxth	r2, r2
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	3302      	adds	r3, #2
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	e007      	b.n	80023bc <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	60ba      	str	r2, [r7, #8]
 80023b2:	781a      	ldrb	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b292      	uxth	r2, r2
 80023ba:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1c4      	bne.n	8002352 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2200      	movs	r2, #0
 80023d0:	2140      	movs	r1, #64	; 0x40
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fa65 	bl	80028a2 <UART_WaitOnFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e00a      	b.n	80023f8 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e000      	b.n	80023f8 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
  }
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800240c:	2310      	movs	r3, #16
 800240e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002410:	2300      	movs	r3, #0
 8002412:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002414:	2300      	movs	r3, #0
 8002416:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b9f      	ldr	r3, [pc, #636]	; (80026b8 <UART_SetConfig+0x2b8>)
 800243c:	4013      	ands	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	68f9      	ldr	r1, [r7, #12]
 8002444:	430b      	orrs	r3, r1
 8002446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	430a      	orrs	r2, r1
 800247c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a8e      	ldr	r2, [pc, #568]	; (80026bc <UART_SetConfig+0x2bc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d121      	bne.n	80024cc <UART_SetConfig+0xcc>
 8002488:	4b8d      	ldr	r3, [pc, #564]	; (80026c0 <UART_SetConfig+0x2c0>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b03      	cmp	r3, #3
 8002492:	d817      	bhi.n	80024c4 <UART_SetConfig+0xc4>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <UART_SetConfig+0x9c>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024b9 	.word	0x080024b9
 80024a4:	080024bf 	.word	0x080024bf
 80024a8:	080024b3 	.word	0x080024b3
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]
 80024b0:	e01e      	b.n	80024f0 <UART_SetConfig+0xf0>
 80024b2:	2302      	movs	r3, #2
 80024b4:	75fb      	strb	r3, [r7, #23]
 80024b6:	e01b      	b.n	80024f0 <UART_SetConfig+0xf0>
 80024b8:	2304      	movs	r3, #4
 80024ba:	75fb      	strb	r3, [r7, #23]
 80024bc:	e018      	b.n	80024f0 <UART_SetConfig+0xf0>
 80024be:	2308      	movs	r3, #8
 80024c0:	75fb      	strb	r3, [r7, #23]
 80024c2:	e015      	b.n	80024f0 <UART_SetConfig+0xf0>
 80024c4:	2310      	movs	r3, #16
 80024c6:	75fb      	strb	r3, [r7, #23]
 80024c8:	bf00      	nop
 80024ca:	e011      	b.n	80024f0 <UART_SetConfig+0xf0>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a7c      	ldr	r2, [pc, #496]	; (80026c4 <UART_SetConfig+0x2c4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d102      	bne.n	80024dc <UART_SetConfig+0xdc>
 80024d6:	2300      	movs	r3, #0
 80024d8:	75fb      	strb	r3, [r7, #23]
 80024da:	e009      	b.n	80024f0 <UART_SetConfig+0xf0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a79      	ldr	r2, [pc, #484]	; (80026c8 <UART_SetConfig+0x2c8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d102      	bne.n	80024ec <UART_SetConfig+0xec>
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]
 80024ea:	e001      	b.n	80024f0 <UART_SetConfig+0xf0>
 80024ec:	2310      	movs	r3, #16
 80024ee:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024f8:	d16f      	bne.n	80025da <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d857      	bhi.n	80025b0 <UART_SetConfig+0x1b0>
 8002500:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <UART_SetConfig+0x108>)
 8002502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002506:	bf00      	nop
 8002508:	0800252d 	.word	0x0800252d
 800250c:	08002549 	.word	0x08002549
 8002510:	08002565 	.word	0x08002565
 8002514:	080025b1 	.word	0x080025b1
 8002518:	0800257f 	.word	0x0800257f
 800251c:	080025b1 	.word	0x080025b1
 8002520:	080025b1 	.word	0x080025b1
 8002524:	080025b1 	.word	0x080025b1
 8002528:	0800259b 	.word	0x0800259b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800252c:	f7ff fa58 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 8002530:	4603      	mov	r3, r0
 8002532:	005a      	lsls	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	441a      	add	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	82bb      	strh	r3, [r7, #20]
        break;
 8002546:	e036      	b.n	80025b6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002548:	f7ff fa6c 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 800254c:	4603      	mov	r3, r0
 800254e:	005a      	lsls	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	441a      	add	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	82bb      	strh	r3, [r7, #20]
        break;
 8002562:	e028      	b.n	80025b6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800256e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6852      	ldr	r2, [r2, #4]
 8002576:	fbb3 f3f2 	udiv	r3, r3, r2
 800257a:	82bb      	strh	r3, [r7, #20]
        break;
 800257c:	e01b      	b.n	80025b6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800257e:	f7ff f9b9 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 8002582:	4603      	mov	r3, r0
 8002584:	005a      	lsls	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	441a      	add	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	82bb      	strh	r3, [r7, #20]
        break;
 8002598:	e00d      	b.n	80025b6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	82bb      	strh	r3, [r7, #20]
        break;
 80025ae:	e002      	b.n	80025b6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	74fb      	strb	r3, [r7, #19]
        break;
 80025b4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80025b6:	8abb      	ldrh	r3, [r7, #20]
 80025b8:	f023 030f 	bic.w	r3, r3, #15
 80025bc:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025be:	8abb      	ldrh	r3, [r7, #20]
 80025c0:	105b      	asrs	r3, r3, #1
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	897b      	ldrh	r3, [r7, #10]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	897a      	ldrh	r2, [r7, #10]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	e069      	b.n	80026ae <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d863      	bhi.n	80026a8 <UART_SetConfig+0x2a8>
 80025e0:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <UART_SetConfig+0x1e8>)
 80025e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e6:	bf00      	nop
 80025e8:	0800260d 	.word	0x0800260d
 80025ec:	0800262d 	.word	0x0800262d
 80025f0:	0800264d 	.word	0x0800264d
 80025f4:	080026a9 	.word	0x080026a9
 80025f8:	0800266d 	.word	0x0800266d
 80025fc:	080026a9 	.word	0x080026a9
 8002600:	080026a9 	.word	0x080026a9
 8002604:	080026a9 	.word	0x080026a9
 8002608:	0800268d 	.word	0x0800268d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800260c:	f7ff f9e8 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 8002610:	4602      	mov	r2, r0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	441a      	add	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60da      	str	r2, [r3, #12]
        break;
 800262a:	e040      	b.n	80026ae <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800262c:	f7ff f9fa 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8002630:	4602      	mov	r2, r0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	441a      	add	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	b29a      	uxth	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60da      	str	r2, [r3, #12]
        break;
 800264a:	e030      	b.n	80026ae <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002656:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6852      	ldr	r2, [r2, #4]
 800265e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002662:	b29a      	uxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60da      	str	r2, [r3, #12]
        break;
 800266a:	e020      	b.n	80026ae <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800266c:	f7ff f942 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	441a      	add	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	b29a      	uxth	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60da      	str	r2, [r3, #12]
        break;
 800268a:	e010      	b.n	80026ae <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60da      	str	r2, [r3, #12]
        break;
 80026a6:	e002      	b.n	80026ae <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	74fb      	strb	r3, [r7, #19]
        break;
 80026ac:	bf00      	nop
    }
  }

  return ret;
 80026ae:	7cfb      	ldrb	r3, [r7, #19]

}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	efff69f3 	.word	0xefff69f3
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40004400 	.word	0x40004400
 80026c8:	40004800 	.word	0x40004800

080026cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01a      	beq.n	80027e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ca:	d10a      	bne.n	80027e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
  }
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af02      	add	r7, sp, #8
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002822:	f7fd fd33 	bl	800028c <HAL_GetTick>
 8002826:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b08      	cmp	r3, #8
 8002834:	d10e      	bne.n	8002854 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002836:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f82c 	bl	80028a2 <UART_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e022      	b.n	800289a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b04      	cmp	r3, #4
 8002860:	d10e      	bne.n	8002880 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002862:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f816 	bl	80028a2 <UART_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e00c      	b.n	800289a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	4613      	mov	r3, r2
 80028b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028b2:	e02c      	b.n	800290e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d028      	beq.n	800290e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80028c2:	f7fd fce3 	bl	800028c <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d21d      	bcs.n	800290e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e00f      	b.n	800292e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4013      	ands	r3, r2
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	429a      	cmp	r2, r3
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	429a      	cmp	r2, r3
 800292a:	d0c3      	beq.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800293c:	f7fd fc4c 	bl	80001d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002940:	f000 f876 	bl	8002a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002944:	f000 f936 	bl	8002bb4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002948:	f000 f8b4 	bl	8002ab4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800294c:	f000 f902 	bl	8002b54 <MX_USART2_UART_Init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002950:	2200      	movs	r2, #0
 8002952:	2120      	movs	r1, #32
 8002954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002958:	f7fd ff4a 	bl	80007f0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800295c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002960:	f7fd fca0 	bl	80002a4 <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8002964:	2201      	movs	r2, #1
 8002966:	2120      	movs	r1, #32
 8002968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296c:	f7fd ff40 	bl	80007f0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002970:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002974:	f7fd fc96 	bl	80002a4 <HAL_Delay>


		itoa(hour,Buffer, 10);
 8002978:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <main+0xdc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	220a      	movs	r2, #10
 800297e:	4926      	ldr	r1, [pc, #152]	; (8002a18 <main+0xe0>)
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fafb 	bl	8002f7c <itoa>
		strcat (timer, Buffer);
 8002986:	4924      	ldr	r1, [pc, #144]	; (8002a18 <main+0xe0>)
 8002988:	4824      	ldr	r0, [pc, #144]	; (8002a1c <main+0xe4>)
 800298a:	f000 fb01 	bl	8002f90 <strcat>

		strcat (timer, ":");
 800298e:	4823      	ldr	r0, [pc, #140]	; (8002a1c <main+0xe4>)
 8002990:	f7fd fc1a 	bl	80001c8 <strlen>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <main+0xe4>)
 800299a:	4413      	add	r3, r2
 800299c:	4920      	ldr	r1, [pc, #128]	; (8002a20 <main+0xe8>)
 800299e:	461a      	mov	r2, r3
 80029a0:	460b      	mov	r3, r1
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	8013      	strh	r3, [r2, #0]

		itoa(minute, Buffer, 10);
 80029a6:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <main+0xec>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	220a      	movs	r2, #10
 80029ac:	491a      	ldr	r1, [pc, #104]	; (8002a18 <main+0xe0>)
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fae4 	bl	8002f7c <itoa>
		strcat (timer, Buffer);
 80029b4:	4918      	ldr	r1, [pc, #96]	; (8002a18 <main+0xe0>)
 80029b6:	4819      	ldr	r0, [pc, #100]	; (8002a1c <main+0xe4>)
 80029b8:	f000 faea 	bl	8002f90 <strcat>


		strcat (timer, ":");
 80029bc:	4817      	ldr	r0, [pc, #92]	; (8002a1c <main+0xe4>)
 80029be:	f7fd fc03 	bl	80001c8 <strlen>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <main+0xe4>)
 80029c8:	4413      	add	r3, r2
 80029ca:	4915      	ldr	r1, [pc, #84]	; (8002a20 <main+0xe8>)
 80029cc:	461a      	mov	r2, r3
 80029ce:	460b      	mov	r3, r1
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	8013      	strh	r3, [r2, #0]

		itoa(second, Buffer, 10);
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <main+0xf0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	220a      	movs	r2, #10
 80029da:	490f      	ldr	r1, [pc, #60]	; (8002a18 <main+0xe0>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 facd 	bl	8002f7c <itoa>
		strcat (timer, Buffer);
 80029e2:	490d      	ldr	r1, [pc, #52]	; (8002a18 <main+0xe0>)
 80029e4:	480d      	ldr	r0, [pc, #52]	; (8002a1c <main+0xe4>)
 80029e6:	f000 fad3 	bl	8002f90 <strcat>

		if (HAL_UART_Transmit(&huart2, (uint8_t*) timer, 8, 100) != HAL_OK) {
 80029ea:	2364      	movs	r3, #100	; 0x64
 80029ec:	2208      	movs	r2, #8
 80029ee:	490b      	ldr	r1, [pc, #44]	; (8002a1c <main+0xe4>)
 80029f0:	480e      	ldr	r0, [pc, #56]	; (8002a2c <main+0xf4>)
 80029f2:	f7ff fc78 	bl	80022e6 <HAL_UART_Transmit>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <main+0xc8>
			Error_Handler();
 80029fc:	f000 f942 	bl	8002c84 <Error_Handler>
		}

		minute ++;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <main+0xec>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <main+0xec>)
 8002a08:	6013      	str	r3, [r2, #0]


		HAL_Delay(100);
 8002a0a:	2064      	movs	r0, #100	; 0x64
 8002a0c:	f7fd fc4a 	bl	80002a4 <HAL_Delay>
	while (1) {
 8002a10:	e79e      	b.n	8002950 <main+0x18>
 8002a12:	bf00      	nop
 8002a14:	2000006c 	.word	0x2000006c
 8002a18:	20000008 	.word	0x20000008
 8002a1c:	2000003c 	.word	0x2000003c
 8002a20:	08003044 	.word	0x08003044
 8002a24:	20000068 	.word	0x20000068
 8002a28:	20000064 	.word	0x20000064
 8002a2c:	200000b4 	.word	0x200000b4

08002a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b090      	sub	sp, #64	; 0x40
 8002a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a36:	f107 0318 	add.w	r3, r7, #24
 8002a3a:	2228      	movs	r2, #40	; 0x28
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fa9e 	bl	8002f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a52:	2302      	movs	r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a56:	2301      	movs	r3, #1
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a62:	2300      	movs	r3, #0
 8002a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002a66:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a6c:	f107 0318 	add.w	r3, r7, #24
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fed5 	bl	8000820 <HAL_RCC_OscConfig>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002a7c:	f000 f902 	bl	8002c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a80:	230f      	movs	r3, #15
 8002a82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a84:	2302      	movs	r3, #2
 8002a86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	2102      	movs	r1, #2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fdae 	bl	80015fc <HAL_RCC_ClockConfig>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002aa6:	f000 f8ed 	bl	8002c84 <Error_Handler>
  }
}
 8002aaa:	bf00      	nop
 8002aac:	3740      	adds	r7, #64	; 0x40
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aba:	f107 0310 	add.w	r3, r7, #16
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <MX_TIM3_Init+0x98>)
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <MX_TIM3_Init+0x9c>)
 8002ad6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8002ad8:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <MX_TIM3_Init+0x98>)
 8002ada:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002ade:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <MX_TIM3_Init+0x98>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <MX_TIM3_Init+0x98>)
 8002ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002aec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <MX_TIM3_Init+0x98>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <MX_TIM3_Init+0x98>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002afa:	4814      	ldr	r0, [pc, #80]	; (8002b4c <MX_TIM3_Init+0x98>)
 8002afc:	f7fe ffb4 	bl	8001a68 <HAL_TIM_Base_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002b06:	f000 f8bd 	bl	8002c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	4619      	mov	r1, r3
 8002b16:	480d      	ldr	r0, [pc, #52]	; (8002b4c <MX_TIM3_Init+0x98>)
 8002b18:	f7ff f8f0 	bl	8001cfc <HAL_TIM_ConfigClockSource>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002b22:	f000 f8af 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <MX_TIM3_Init+0x98>)
 8002b34:	f7ff fb1a 	bl	800216c <HAL_TIMEx_MasterConfigSynchronization>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002b3e:	f000 f8a1 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000074 	.word	0x20000074
 8002b50:	40000400 	.word	0x40000400

08002b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <MX_USART2_UART_Init+0x5c>)
 8002b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b96:	4805      	ldr	r0, [pc, #20]	; (8002bac <MX_USART2_UART_Init+0x58>)
 8002b98:	f7ff fb54 	bl	8002244 <HAL_UART_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ba2:	f000 f86f 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200000b4 	.word	0x200000b4
 8002bb0:	40004400 	.word	0x40004400

08002bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bca:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002bd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bd4:	6153      	str	r3, [r2, #20]
 8002bd6:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002be2:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bec:	6153      	str	r3, [r2, #20]
 8002bee:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c04:	6153      	str	r3, [r2, #20]
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c12:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1c:	6153      	str	r3, [r2, #20]
 8002c1e:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <MX_GPIO_Init+0xc4>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c32:	f7fd fddd 	bl	80007f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <MX_GPIO_Init+0xc8>)
 8002c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480d      	ldr	r0, [pc, #52]	; (8002c80 <MX_GPIO_Init+0xcc>)
 8002c4c:	f7fd fc5a 	bl	8000504 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c50:	2320      	movs	r3, #32
 8002c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c54:	2301      	movs	r3, #1
 8002c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	4619      	mov	r1, r3
 8002c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c6a:	f7fd fc4b 	bl	8000504 <HAL_GPIO_Init>

}
 8002c6e:	bf00      	nop
 8002c70:	3728      	adds	r7, #40	; 0x28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	10210000 	.word	0x10210000
 8002c80:	48000800 	.word	0x48000800

08002c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_MspInit+0x44>)
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <HAL_MspInit+0x44>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6193      	str	r3, [r2, #24]
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <HAL_MspInit+0x44>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_MspInit+0x44>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <HAL_MspInit+0x44>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	61d3      	str	r3, [r2, #28]
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_MspInit+0x44>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002cca:	2007      	movs	r0, #7
 8002ccc:	f7fd fbd8 	bl	8000480 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000

08002cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <HAL_TIM_Base_MspInit+0x44>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d113      	bne.n	8002d16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_TIM_Base_MspInit+0x48>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <HAL_TIM_Base_MspInit+0x48>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	61d3      	str	r3, [r2, #28]
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_TIM_Base_MspInit+0x48>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	201d      	movs	r0, #29
 8002d0c:	f7fd fbc3 	bl	8000496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d10:	201d      	movs	r0, #29
 8002d12:	f7fd fbdc 	bl	80004ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <HAL_UART_MspInit+0x7c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d128      	bne.n	8002d9c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HAL_UART_MspInit+0x80>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	4a16      	ldr	r2, [pc, #88]	; (8002da8 <HAL_UART_MspInit+0x80>)
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d54:	61d3      	str	r3, [r2, #28]
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_UART_MspInit+0x80>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_UART_MspInit+0x80>)
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <HAL_UART_MspInit+0x80>)
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	6153      	str	r3, [r2, #20]
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_UART_MspInit+0x80>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d8a:	2307      	movs	r3, #7
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	4619      	mov	r1, r3
 8002d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d98:	f7fd fbb4 	bl	8000504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d9c:	bf00      	nop
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40004400 	.word	0x40004400
 8002da8:	40021000 	.word	0x40021000

08002dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <HardFault_Handler+0x4>

08002dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <MemManage_Handler+0x4>

08002dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dca:	e7fe      	b.n	8002dca <BusFault_Handler+0x4>

08002dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <UsageFault_Handler+0x4>

08002dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e00:	f7fd fa30 	bl	8000264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <TIM3_IRQHandler+0x10>)
 8002e0e:	f7fe fe56 	bl	8001abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000074 	.word	0x20000074

08002e1c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <SystemInit+0x84>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <SystemInit+0x84>)
 8002e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002e30:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <SystemInit+0x88>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <SystemInit+0x88>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <SystemInit+0x88>)
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4918      	ldr	r1, [pc, #96]	; (8002ea4 <SystemInit+0x88>)
 8002e42:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <SystemInit+0x8c>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <SystemInit+0x88>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a15      	ldr	r2, [pc, #84]	; (8002ea4 <SystemInit+0x88>)
 8002e4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <SystemInit+0x88>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <SystemInit+0x88>)
 8002e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <SystemInit+0x88>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <SystemInit+0x88>)
 8002e6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002e6e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <SystemInit+0x88>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <SystemInit+0x88>)
 8002e76:	f023 030f 	bic.w	r3, r3, #15
 8002e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <SystemInit+0x88>)
 8002e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e80:	4908      	ldr	r1, [pc, #32]	; (8002ea4 <SystemInit+0x88>)
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <SystemInit+0x90>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <SystemInit+0x88>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SystemInit+0x84>)
 8002e90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e94:	609a      	str	r2, [r3, #8]
#endif
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000ed00 	.word	0xe000ed00
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	f87fc00c 	.word	0xf87fc00c
 8002eac:	ff00fccc 	.word	0xff00fccc

08002eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002eb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002eb6:	e003      	b.n	8002ec0 <LoopCopyDataInit>

08002eb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002eba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ebc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ebe:	3104      	adds	r1, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ec0:	480b      	ldr	r0, [pc, #44]	; (8002ef0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ec4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ec6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ec8:	d3f6      	bcc.n	8002eb8 <CopyDataInit>
	ldr	r2, =_sbss
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ecc:	e002      	b.n	8002ed4 <LoopFillZerobss>

08002ece <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ece:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ed0:	f842 3b04 	str.w	r3, [r2], #4

08002ed4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <LoopForever+0x16>)
	cmp	r2, r3
 8002ed6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ed8:	d3f9      	bcc.n	8002ece <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002eda:	f7ff ff9f 	bl	8002e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ede:	f000 f811 	bl	8002f04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ee2:	f7ff fd29 	bl	8002938 <main>

08002ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ee6:	e7fe      	b.n	8002ee6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ee8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002eec:	080030b0 	.word	0x080030b0
	ldr	r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ef4:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 8002ef8:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 8002efc:	20000124 	.word	0x20000124

08002f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC1_2_IRQHandler>
	...

08002f04 <__libc_init_array>:
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	4e0d      	ldr	r6, [pc, #52]	; (8002f3c <__libc_init_array+0x38>)
 8002f08:	4c0d      	ldr	r4, [pc, #52]	; (8002f40 <__libc_init_array+0x3c>)
 8002f0a:	1ba4      	subs	r4, r4, r6
 8002f0c:	10a4      	asrs	r4, r4, #2
 8002f0e:	2500      	movs	r5, #0
 8002f10:	42a5      	cmp	r5, r4
 8002f12:	d109      	bne.n	8002f28 <__libc_init_array+0x24>
 8002f14:	4e0b      	ldr	r6, [pc, #44]	; (8002f44 <__libc_init_array+0x40>)
 8002f16:	4c0c      	ldr	r4, [pc, #48]	; (8002f48 <__libc_init_array+0x44>)
 8002f18:	f000 f888 	bl	800302c <_init>
 8002f1c:	1ba4      	subs	r4, r4, r6
 8002f1e:	10a4      	asrs	r4, r4, #2
 8002f20:	2500      	movs	r5, #0
 8002f22:	42a5      	cmp	r5, r4
 8002f24:	d105      	bne.n	8002f32 <__libc_init_array+0x2e>
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f2c:	4798      	blx	r3
 8002f2e:	3501      	adds	r5, #1
 8002f30:	e7ee      	b.n	8002f10 <__libc_init_array+0xc>
 8002f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f36:	4798      	blx	r3
 8002f38:	3501      	adds	r5, #1
 8002f3a:	e7f2      	b.n	8002f22 <__libc_init_array+0x1e>
 8002f3c:	080030a8 	.word	0x080030a8
 8002f40:	080030a8 	.word	0x080030a8
 8002f44:	080030a8 	.word	0x080030a8
 8002f48:	080030ac 	.word	0x080030ac

08002f4c <__itoa>:
 8002f4c:	1e93      	subs	r3, r2, #2
 8002f4e:	2b22      	cmp	r3, #34	; 0x22
 8002f50:	b510      	push	{r4, lr}
 8002f52:	460c      	mov	r4, r1
 8002f54:	d904      	bls.n	8002f60 <__itoa+0x14>
 8002f56:	2300      	movs	r3, #0
 8002f58:	700b      	strb	r3, [r1, #0]
 8002f5a:	461c      	mov	r4, r3
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	bd10      	pop	{r4, pc}
 8002f60:	2a0a      	cmp	r2, #10
 8002f62:	d109      	bne.n	8002f78 <__itoa+0x2c>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	da07      	bge.n	8002f78 <__itoa+0x2c>
 8002f68:	232d      	movs	r3, #45	; 0x2d
 8002f6a:	700b      	strb	r3, [r1, #0]
 8002f6c:	4240      	negs	r0, r0
 8002f6e:	2101      	movs	r1, #1
 8002f70:	4421      	add	r1, r4
 8002f72:	f000 f81d 	bl	8002fb0 <__utoa>
 8002f76:	e7f1      	b.n	8002f5c <__itoa+0x10>
 8002f78:	2100      	movs	r1, #0
 8002f7a:	e7f9      	b.n	8002f70 <__itoa+0x24>

08002f7c <itoa>:
 8002f7c:	f7ff bfe6 	b.w	8002f4c <__itoa>

08002f80 <memset>:
 8002f80:	4402      	add	r2, r0
 8002f82:	4603      	mov	r3, r0
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d100      	bne.n	8002f8a <memset+0xa>
 8002f88:	4770      	bx	lr
 8002f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8e:	e7f9      	b.n	8002f84 <memset+0x4>

08002f90 <strcat>:
 8002f90:	b510      	push	{r4, lr}
 8002f92:	4603      	mov	r3, r0
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	1c5c      	adds	r4, r3, #1
 8002f98:	b93a      	cbnz	r2, 8002faa <strcat+0x1a>
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d1f9      	bne.n	8002f9c <strcat+0xc>
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	4623      	mov	r3, r4
 8002fac:	e7f2      	b.n	8002f94 <strcat+0x4>
	...

08002fb0 <__utoa>:
 8002fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <__utoa+0x78>)
 8002fb4:	b08b      	sub	sp, #44	; 0x2c
 8002fb6:	4605      	mov	r5, r0
 8002fb8:	460c      	mov	r4, r1
 8002fba:	466e      	mov	r6, sp
 8002fbc:	f103 0c20 	add.w	ip, r3, #32
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	4637      	mov	r7, r6
 8002fc6:	c703      	stmia	r7!, {r0, r1}
 8002fc8:	3308      	adds	r3, #8
 8002fca:	4563      	cmp	r3, ip
 8002fcc:	463e      	mov	r6, r7
 8002fce:	d1f7      	bne.n	8002fc0 <__utoa+0x10>
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	791b      	ldrb	r3, [r3, #4]
 8002fd4:	713b      	strb	r3, [r7, #4]
 8002fd6:	1e93      	subs	r3, r2, #2
 8002fd8:	2b22      	cmp	r3, #34	; 0x22
 8002fda:	6038      	str	r0, [r7, #0]
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	d904      	bls.n	8002fec <__utoa+0x3c>
 8002fe2:	7023      	strb	r3, [r4, #0]
 8002fe4:	461c      	mov	r4, r3
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	b00b      	add	sp, #44	; 0x2c
 8002fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fec:	1e66      	subs	r6, r4, #1
 8002fee:	fbb5 f0f2 	udiv	r0, r5, r2
 8002ff2:	af0a      	add	r7, sp, #40	; 0x28
 8002ff4:	fb02 5510 	mls	r5, r2, r0, r5
 8002ff8:	443d      	add	r5, r7
 8002ffa:	1c59      	adds	r1, r3, #1
 8002ffc:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8003000:	f806 5f01 	strb.w	r5, [r6, #1]!
 8003004:	4605      	mov	r5, r0
 8003006:	b968      	cbnz	r0, 8003024 <__utoa+0x74>
 8003008:	5460      	strb	r0, [r4, r1]
 800300a:	4423      	add	r3, r4
 800300c:	4622      	mov	r2, r4
 800300e:	1b19      	subs	r1, r3, r4
 8003010:	1b10      	subs	r0, r2, r4
 8003012:	4281      	cmp	r1, r0
 8003014:	dde7      	ble.n	8002fe6 <__utoa+0x36>
 8003016:	7811      	ldrb	r1, [r2, #0]
 8003018:	7818      	ldrb	r0, [r3, #0]
 800301a:	f802 0b01 	strb.w	r0, [r2], #1
 800301e:	f803 1901 	strb.w	r1, [r3], #-1
 8003022:	e7f4      	b.n	800300e <__utoa+0x5e>
 8003024:	460b      	mov	r3, r1
 8003026:	e7e2      	b.n	8002fee <__utoa+0x3e>
 8003028:	08003080 	.word	0x08003080

0800302c <_init>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	bf00      	nop
 8003030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003032:	bc08      	pop	{r3}
 8003034:	469e      	mov	lr, r3
 8003036:	4770      	bx	lr

08003038 <_fini>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	bf00      	nop
 800303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303e:	bc08      	pop	{r3}
 8003040:	469e      	mov	lr, r3
 8003042:	4770      	bx	lr
