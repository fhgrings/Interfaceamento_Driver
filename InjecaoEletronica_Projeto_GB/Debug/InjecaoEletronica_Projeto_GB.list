
InjecaoEletronica_Projeto_GB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006218  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006574  08006574  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006574  08006574  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006574  08006574  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800657c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002210  20000074  080065f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002284  080065f0  00022284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014faa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a4b  00000000  00000000  0003504e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  00037aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00038810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e09a  00000000  00000000  00039468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bed0  00000000  00000000  00057502  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6021  00000000  00000000  000633d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001093f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000398c  00000000  00000000  00109470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006390 	.word	0x08006390

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006390 	.word	0x08006390

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f92f 	bl	80004f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	200f      	movs	r0, #15
 8000298:	f000 f808 	bl	80002ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f005 fac8 	bl	8005830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_InitTick+0x54>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_InitTick+0x58>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f939 	bl	8000542 <HAL_SYSTICK_Config>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00e      	b.n	80002f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d80a      	bhi.n	80002f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e0:	2200      	movs	r2, #0
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295
 80002e8:	f000 f90f 	bl	800050a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <HAL_InitTick+0x5c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e000      	b.n	80002f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002f6:	2301      	movs	r3, #1
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000000c 	.word	0x2000000c
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000

0800030c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x20>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x24>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4413      	add	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_IncTick+0x24>)
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004
 8000330:	20002128 	.word	0x20002128

08000334 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return uwTick;  
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <HAL_GetTick+0x14>)
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20002128 	.word	0x20002128

0800034c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000354:	f7ff ffee 	bl	8000334 <HAL_GetTick>
 8000358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000364:	d005      	beq.n	8000372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_Delay+0x40>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	461a      	mov	r2, r3
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	4413      	add	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000372:	bf00      	nop
 8000374:	f7ff ffde 	bl	8000334 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	429a      	cmp	r2, r3
 8000382:	d8f7      	bhi.n	8000374 <HAL_Delay+0x28>
  {
  }
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000004 	.word	0x20000004

08000390 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f003 0307 	and.w	r3, r3, #7
 800039e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ac:	4013      	ands	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <NVIC_GetPriorityGrouping+0x18>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	f003 0307 	and.w	r3, r3, #7
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	2b00      	cmp	r3, #0
 8000406:	da0b      	bge.n	8000420 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	490c      	ldr	r1, [pc, #48]	; (8000440 <NVIC_SetPriority+0x4c>)
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f003 030f 	and.w	r3, r3, #15
 8000414:	3b04      	subs	r3, #4
 8000416:	0112      	lsls	r2, r2, #4
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	440b      	add	r3, r1
 800041c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800041e:	e009      	b.n	8000434 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4907      	ldr	r1, [pc, #28]	; (8000444 <NVIC_SetPriority+0x50>)
 8000426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042a:	0112      	lsls	r2, r2, #4
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	440b      	add	r3, r1
 8000430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	e000ed00 	.word	0xe000ed00
 8000444:	e000e100 	.word	0xe000e100

08000448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000448:	b480      	push	{r7}
 800044a:	b089      	sub	sp, #36	; 0x24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	f1c3 0307 	rsb	r3, r3, #7
 8000462:	2b04      	cmp	r3, #4
 8000464:	bf28      	it	cs
 8000466:	2304      	movcs	r3, #4
 8000468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	3304      	adds	r3, #4
 800046e:	2b06      	cmp	r3, #6
 8000470:	d902      	bls.n	8000478 <NVIC_EncodePriority+0x30>
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	3b03      	subs	r3, #3
 8000476:	e000      	b.n	800047a <NVIC_EncodePriority+0x32>
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047c:	f04f 32ff 	mov.w	r2, #4294967295
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	43da      	mvns	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	401a      	ands	r2, r3
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000490:	f04f 31ff 	mov.w	r1, #4294967295
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	43d9      	mvns	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	4313      	orrs	r3, r2
         );
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3724      	adds	r7, #36	; 0x24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004c0:	d301      	bcc.n	80004c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004c2:	2301      	movs	r3, #1
 80004c4:	e00f      	b.n	80004e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <SysTick_Config+0x40>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ce:	210f      	movs	r1, #15
 80004d0:	f04f 30ff 	mov.w	r0, #4294967295
 80004d4:	f7ff ff8e 	bl	80003f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <SysTick_Config+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <SysTick_Config+0x40>)
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff47 	bl	8000390 <NVIC_SetPriorityGrouping>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	4603      	mov	r3, r0
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800051c:	f7ff ff5c 	bl	80003d8 <NVIC_GetPriorityGrouping>
 8000520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	68b9      	ldr	r1, [r7, #8]
 8000526:	6978      	ldr	r0, [r7, #20]
 8000528:	f7ff ff8e 	bl	8000448 <NVIC_EncodePriority>
 800052c:	4602      	mov	r2, r0
 800052e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff5d 	bl	80003f4 <NVIC_SetPriority>
}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffb0 	bl	80004b0 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800055c:	b480      	push	{r7}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000572:	e14e      	b.n	8000812 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	2101      	movs	r1, #1
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f000 8140 	beq.w	800080c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d003      	beq.n	800059c <HAL_GPIO_Init+0x40>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b12      	cmp	r3, #18
 800059a:	d123      	bne.n	80005e4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	08da      	lsrs	r2, r3, #3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	220f      	movs	r2, #15
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	691a      	ldr	r2, [r3, #16]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	08da      	lsrs	r2, r3, #3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3208      	adds	r2, #8
 80005de:	6939      	ldr	r1, [r7, #16]
 80005e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2203      	movs	r2, #3
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f003 0203 	and.w	r2, r3, #3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	4313      	orrs	r3, r2
 8000610:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d00b      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d007      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800062c:	2b11      	cmp	r3, #17
 800062e:	d003      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2b12      	cmp	r3, #18
 8000636:	d130      	bne.n	800069a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	2203      	movs	r2, #3
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	4013      	ands	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	4313      	orrs	r3, r2
 8000660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800066e:	2201      	movs	r2, #1
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	091b      	lsrs	r3, r3, #4
 8000684:	f003 0201 	and.w	r2, r3, #1
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	4313      	orrs	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2203      	movs	r2, #3
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	4013      	ands	r3, r2
 80006b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f000 809a 	beq.w	800080c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d8:	4b55      	ldr	r3, [pc, #340]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a54      	ldr	r2, [pc, #336]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b52      	ldr	r3, [pc, #328]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006f0:	4a50      	ldr	r2, [pc, #320]	; (8000834 <HAL_GPIO_Init+0x2d8>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	3302      	adds	r3, #2
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	f003 0303 	and.w	r3, r3, #3
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	220f      	movs	r2, #15
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800071a:	d013      	beq.n	8000744 <HAL_GPIO_Init+0x1e8>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a46      	ldr	r2, [pc, #280]	; (8000838 <HAL_GPIO_Init+0x2dc>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d00d      	beq.n	8000740 <HAL_GPIO_Init+0x1e4>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a45      	ldr	r2, [pc, #276]	; (800083c <HAL_GPIO_Init+0x2e0>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d007      	beq.n	800073c <HAL_GPIO_Init+0x1e0>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a44      	ldr	r2, [pc, #272]	; (8000840 <HAL_GPIO_Init+0x2e4>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d101      	bne.n	8000738 <HAL_GPIO_Init+0x1dc>
 8000734:	2303      	movs	r3, #3
 8000736:	e006      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000738:	2305      	movs	r3, #5
 800073a:	e004      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 800073c:	2302      	movs	r3, #2
 800073e:	e002      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000740:	2301      	movs	r3, #1
 8000742:	e000      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000744:	2300      	movs	r3, #0
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	f002 0203 	and.w	r2, r2, #3
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	4093      	lsls	r3, r2
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	4313      	orrs	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000756:	4937      	ldr	r1, [pc, #220]	; (8000834 <HAL_GPIO_Init+0x2d8>)
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	089b      	lsrs	r3, r3, #2
 800075c:	3302      	adds	r3, #2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000764:	4b37      	ldr	r3, [pc, #220]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	43db      	mvns	r3, r3
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4313      	orrs	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000788:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	43db      	mvns	r3, r3
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	4013      	ands	r3, r2
 800079c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	43db      	mvns	r3, r3
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4013      	ands	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4313      	orrs	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	43db      	mvns	r3, r3
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4013      	ands	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4313      	orrs	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	fa22 f303 	lsr.w	r3, r2, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	f47f aea9 	bne.w	8000574 <HAL_GPIO_Init+0x18>
  }
}
 8000822:	bf00      	nop
 8000824:	371c      	adds	r7, #28
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000
 8000838:	48000400 	.word	0x48000400
 800083c:	48000800 	.word	0x48000800
 8000840:	48000c00 	.word	0x48000c00
 8000844:	40010400 	.word	0x40010400

08000848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	807b      	strh	r3, [r7, #2]
 8000854:	4613      	mov	r3, r2
 8000856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000858:	787b      	ldrb	r3, [r7, #1]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800085e:	887a      	ldrh	r2, [r7, #2]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000864:	e002      	b.n	800086c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000866:	887a      	ldrh	r2, [r7, #2]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800087e:	af00      	add	r7, sp, #0
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	f000 beda 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	f000 816e 	beq.w	8000b7e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008a2:	4bb5      	ldr	r3, [pc, #724]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f003 030c 	and.w	r3, r3, #12
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d00c      	beq.n	80008c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008ae:	4bb2      	ldr	r3, [pc, #712]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f003 030c 	and.w	r3, r3, #12
 80008b6:	2b08      	cmp	r3, #8
 80008b8:	d15a      	bne.n	8000970 <HAL_RCC_OscConfig+0xf8>
 80008ba:	4baf      	ldr	r3, [pc, #700]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c6:	d153      	bne.n	8000970 <HAL_RCC_OscConfig+0xf8>
 80008c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80008d4:	fa93 f3a3 	rbit	r3, r3
 80008d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80008dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008e0:	fab3 f383 	clz	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d102      	bne.n	80008fa <HAL_RCC_OscConfig+0x82>
 80008f4:	4ba0      	ldr	r3, [pc, #640]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	e015      	b.n	8000926 <HAL_RCC_OscConfig+0xae>
 80008fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000902:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000906:	fa93 f3a3 	rbit	r3, r3
 800090a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800090e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000912:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000916:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800091a:	fa93 f3a3 	rbit	r3, r3
 800091e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000922:	4b95      	ldr	r3, [pc, #596]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800092a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800092e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000932:	fa92 f2a2 	rbit	r2, r2
 8000936:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800093a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800093e:	fab2 f282 	clz	r2, r2
 8000942:	b252      	sxtb	r2, r2
 8000944:	f042 0220 	orr.w	r2, r2, #32
 8000948:	b252      	sxtb	r2, r2
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	f002 021f 	and.w	r2, r2, #31
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f202 	lsl.w	r2, r1, r2
 8000956:	4013      	ands	r3, r2
 8000958:	2b00      	cmp	r3, #0
 800095a:	f000 810f 	beq.w	8000b7c <HAL_RCC_OscConfig+0x304>
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	f040 8109 	bne.w	8000b7c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	f000 be6b 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800097a:	d106      	bne.n	800098a <HAL_RCC_OscConfig+0x112>
 800097c:	4b7e      	ldr	r3, [pc, #504]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a7d      	ldr	r2, [pc, #500]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	e030      	b.n	80009ec <HAL_RCC_OscConfig+0x174>
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10c      	bne.n	80009ae <HAL_RCC_OscConfig+0x136>
 8000994:	4b78      	ldr	r3, [pc, #480]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a77      	ldr	r2, [pc, #476]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 800099a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b75      	ldr	r3, [pc, #468]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a74      	ldr	r2, [pc, #464]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e01e      	b.n	80009ec <HAL_RCC_OscConfig+0x174>
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009b8:	d10c      	bne.n	80009d4 <HAL_RCC_OscConfig+0x15c>
 80009ba:	4b6f      	ldr	r3, [pc, #444]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a6e      	ldr	r2, [pc, #440]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	4b6c      	ldr	r3, [pc, #432]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a6b      	ldr	r2, [pc, #428]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	e00b      	b.n	80009ec <HAL_RCC_OscConfig+0x174>
 80009d4:	4b68      	ldr	r3, [pc, #416]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a67      	ldr	r2, [pc, #412]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b65      	ldr	r3, [pc, #404]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a64      	ldr	r2, [pc, #400]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009ec:	4b62      	ldr	r3, [pc, #392]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f0:	f023 020f 	bic.w	r2, r3, #15
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	495f      	ldr	r1, [pc, #380]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d05a      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0a:	f7ff fc93 	bl	8000334 <HAL_GetTick>
 8000a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a12:	e00a      	b.n	8000a2a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a14:	f7ff fc8e 	bl	8000334 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b64      	cmp	r3, #100	; 0x64
 8000a22:	d902      	bls.n	8000a2a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	f000 be0e 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a2e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a32:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a36:	fa93 f3a3 	rbit	r3, r3
 8000a3a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a42:	fab3 f383 	clz	r3, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	095b      	lsrs	r3, r3, #5
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d102      	bne.n	8000a5c <HAL_RCC_OscConfig+0x1e4>
 8000a56:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	e015      	b.n	8000a88 <HAL_RCC_OscConfig+0x210>
 8000a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a60:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a68:	fa93 f3a3 	rbit	r3, r3
 8000a6c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a74:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000a78:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000a7c:	fa93 f3a3 	rbit	r3, r3
 8000a80:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000a84:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a8c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000a90:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000a94:	fa92 f2a2 	rbit	r2, r2
 8000a98:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000a9c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b252      	sxtb	r2, r2
 8000aa6:	f042 0220 	orr.w	r2, r2, #32
 8000aaa:	b252      	sxtb	r2, r2
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	f002 021f 	and.w	r2, r2, #31
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0aa      	beq.n	8000a14 <HAL_RCC_OscConfig+0x19c>
 8000abe:	e05e      	b.n	8000b7e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fc38 	bl	8000334 <HAL_GetTick>
 8000ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ac8:	e00a      	b.n	8000ae0 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aca:	f7ff fc33 	bl	8000334 <HAL_GetTick>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b64      	cmp	r3, #100	; 0x64
 8000ad8:	d902      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000ada:	2303      	movs	r3, #3
 8000adc:	f000 bdb3 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000aec:	fa93 f3a3 	rbit	r3, r3
 8000af0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000af4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af8:	fab3 f383 	clz	r3, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d102      	bne.n	8000b12 <HAL_RCC_OscConfig+0x29a>
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	e015      	b.n	8000b3e <HAL_RCC_OscConfig+0x2c6>
 8000b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b1e:	fa93 f3a3 	rbit	r3, r3
 8000b22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b32:	fa93 f3a3 	rbit	r3, r3
 8000b36:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b42:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b46:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b4a:	fa92 f2a2 	rbit	r2, r2
 8000b4e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b52:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	b252      	sxtb	r2, r2
 8000b5c:	f042 0220 	orr.w	r2, r2, #32
 8000b60:	b252      	sxtb	r2, r2
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	f002 021f 	and.w	r2, r2, #31
 8000b68:	2101      	movs	r1, #1
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	4013      	ands	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1aa      	bne.n	8000aca <HAL_RCC_OscConfig+0x252>
 8000b74:	e003      	b.n	8000b7e <HAL_RCC_OscConfig+0x306>
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 8170 	beq.w	8000e6e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b8e:	4bd0      	ldr	r3, [pc, #832]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 030c 	and.w	r3, r3, #12
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00b      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b9a:	4bcd      	ldr	r3, [pc, #820]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 030c 	and.w	r3, r3, #12
 8000ba2:	2b08      	cmp	r3, #8
 8000ba4:	d16d      	bne.n	8000c82 <HAL_RCC_OscConfig+0x40a>
 8000ba6:	4bca      	ldr	r3, [pc, #808]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d167      	bne.n	8000c82 <HAL_RCC_OscConfig+0x40a>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000bc4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc8:	fab3 f383 	clz	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d102      	bne.n	8000be2 <HAL_RCC_OscConfig+0x36a>
 8000bdc:	4bbc      	ldr	r3, [pc, #752]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	e013      	b.n	8000c0a <HAL_RCC_OscConfig+0x392>
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000bec:	fa93 f3a3 	rbit	r3, r3
 8000bf0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000bfa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c06:	4bb2      	ldr	r3, [pc, #712]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c10:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c14:	fa92 f2a2 	rbit	r2, r2
 8000c18:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000c1c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b252      	sxtb	r2, r2
 8000c26:	f042 0220 	orr.w	r2, r2, #32
 8000c2a:	b252      	sxtb	r2, r2
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	f002 021f 	and.w	r2, r2, #31
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	4013      	ands	r3, r2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <HAL_RCC_OscConfig+0x3d6>
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d002      	beq.n	8000c4e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f000 bcfc 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c4e:	4ba0      	ldr	r3, [pc, #640]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6959      	ldr	r1, [r3, #20]
 8000c5c:	23f8      	movs	r3, #248	; 0xf8
 8000c5e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c62:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000c6e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	4995      	ldr	r1, [pc, #596]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c80:	e0f5      	b.n	8000e6e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 8085 	beq.w	8000d98 <HAL_RCC_OscConfig+0x520>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c94:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c98:	fa93 f3a3 	rbit	r3, r3
 8000c9c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000ca0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ca4:	fab3 f383 	clz	r3, r3
 8000ca8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fb3c 	bl	8000334 <HAL_GetTick>
 8000cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc0:	e00a      	b.n	8000cd8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc2:	f7ff fb37 	bl	8000334 <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d902      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f000 bcb7 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cde:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000ce2:	fa93 f3a3 	rbit	r3, r3
 8000ce6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000cea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cee:	fab3 f383 	clz	r3, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	095b      	lsrs	r3, r3, #5
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d102      	bne.n	8000d08 <HAL_RCC_OscConfig+0x490>
 8000d02:	4b73      	ldr	r3, [pc, #460]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	e013      	b.n	8000d30 <HAL_RCC_OscConfig+0x4b8>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d20:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d24:	fa93 f3a3 	rbit	r3, r3
 8000d28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d2c:	4b68      	ldr	r3, [pc, #416]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	2202      	movs	r2, #2
 8000d32:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d36:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d42:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	b252      	sxtb	r2, r2
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	b252      	sxtb	r2, r2
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	f002 021f 	and.w	r2, r2, #31
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0ae      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d64:	4b5a      	ldr	r3, [pc, #360]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6959      	ldr	r1, [r3, #20]
 8000d72:	23f8      	movs	r3, #248	; 0xf8
 8000d74:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000d84:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	494f      	ldr	r1, [pc, #316]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
 8000d96:	e06a      	b.n	8000e6e <HAL_RCC_OscConfig+0x5f6>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000da2:	fa93 f3a3 	rbit	r3, r3
 8000da6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000daa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dae:	fab3 f383 	clz	r3, r3
 8000db2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000db6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fab7 	bl	8000334 <HAL_GetTick>
 8000dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dca:	e00a      	b.n	8000de2 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fab2 	bl	8000334 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d902      	bls.n	8000de2 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f000 bc32 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000df4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df8:	fab3 f383 	clz	r3, r3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <HAL_RCC_OscConfig+0x59a>
 8000e0c:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	e013      	b.n	8000e3a <HAL_RCC_OscConfig+0x5c2>
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e40:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e44:	fa92 f2a2 	rbit	r2, r2
 8000e48:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e4c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	b252      	sxtb	r2, r2
 8000e56:	f042 0220 	orr.w	r2, r2, #32
 8000e5a:	b252      	sxtb	r2, r2
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	f002 021f 	and.w	r2, r2, #31
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f202 	lsl.w	r2, r1, r2
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1ae      	bne.n	8000dcc <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80d8 	beq.w	800102e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d067      	beq.n	8000f58 <HAL_RCC_OscConfig+0x6e0>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e92:	fa93 f3a3 	rbit	r3, r3
 8000e96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000e9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e9e:	fab3 f383 	clz	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_RCC_OscConfig+0x65c>)
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2301      	movs	r3, #1
 8000eae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fa40 	bl	8000334 <HAL_GetTick>
 8000eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb8:	e00e      	b.n	8000ed8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eba:	f7ff fa3b 	bl	8000334 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d906      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e3bb      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	10908120 	.word	0x10908120
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ef4:	fa93 f2a3 	rbit	r2, r3
 8000ef8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f02:	2202      	movs	r2, #2
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	fa93 f2a3 	rbit	r2, r3
 8000f10:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f16:	4ba5      	ldr	r3, [pc, #660]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8000f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f1e:	2102      	movs	r1, #2
 8000f20:	6019      	str	r1, [r3, #0]
 8000f22:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	fa93 f1a3 	rbit	r1, r3
 8000f2c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f30:	6019      	str	r1, [r3, #0]
  return(result);
 8000f32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0b1      	beq.n	8000eba <HAL_RCC_OscConfig+0x642>
 8000f56:	e06a      	b.n	800102e <HAL_RCC_OscConfig+0x7b6>
 8000f58:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	fa93 f2a3 	rbit	r2, r3
 8000f6a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f6e:	601a      	str	r2, [r3, #0]
  return(result);
 8000f70:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f76:	fab3 f383 	clz	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b8c      	ldr	r3, [pc, #560]	; (80011b0 <HAL_RCC_OscConfig+0x938>)
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	461a      	mov	r2, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f88:	f7ff f9d4 	bl	8000334 <HAL_GetTick>
 8000f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f90:	e009      	b.n	8000fa6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f92:	f7ff f9cf 	bl	8000334 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e34f      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8000fa6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000faa:	2202      	movs	r2, #2
 8000fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	fa93 f2a3 	rbit	r2, r3
 8000fb8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	fa93 f2a3 	rbit	r2, r3
 8000fd0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fda:	2202      	movs	r2, #2
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	fa93 f2a3 	rbit	r2, r3
 8000fe8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000fec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fee:	4b6f      	ldr	r3, [pc, #444]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8000ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	6019      	str	r1, [r3, #0]
 8000ffa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	fa93 f1a3 	rbit	r1, r3
 8001004:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001008:	6019      	str	r1, [r3, #0]
  return(result);
 800100a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b25b      	sxtb	r3, r3
 8001016:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800101a:	b25b      	sxtb	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1b1      	bne.n	8000f92 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 8159 	beq.w	80012f0 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001044:	4b59      	ldr	r3, [pc, #356]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d112      	bne.n	8001076 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	4b56      	ldr	r3, [pc, #344]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a55      	ldr	r2, [pc, #340]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	61d3      	str	r3, [r2, #28]
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001070:	2301      	movs	r3, #1
 8001072:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d11a      	bne.n	80010b8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff f951 	bl	8000334 <HAL_GetTick>
 8001092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001096:	e009      	b.n	80010ac <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001098:	f7ff f94c 	bl	8000334 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	; 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e2cc      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ef      	beq.n	8001098 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x858>
 80010c2:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a39      	ldr	r2, [pc, #228]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6213      	str	r3, [r2, #32]
 80010ce:	e02f      	b.n	8001130 <HAL_RCC_OscConfig+0x8b8>
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x87c>
 80010da:	4b34      	ldr	r3, [pc, #208]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4a33      	ldr	r2, [pc, #204]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	6213      	str	r3, [r2, #32]
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4a30      	ldr	r2, [pc, #192]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010ec:	f023 0304 	bic.w	r3, r3, #4
 80010f0:	6213      	str	r3, [r2, #32]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0x8b8>
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x8a0>
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0x8b8>
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800112a:	f023 0304 	bic.w	r3, r3, #4
 800112e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d06b      	beq.n	8001212 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff f8fb 	bl	8000334 <HAL_GetTick>
 800113e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001144:	f7ff f8f6 	bl	8000334 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e274      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 800115c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001160:	2202      	movs	r2, #2
 8001162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	fa93 f2a3 	rbit	r2, r3
 800116e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001178:	2202      	movs	r2, #2
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	fa93 f2a3 	rbit	r2, r3
 8001186:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800118a:	601a      	str	r2, [r3, #0]
  return(result);
 800118c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001190:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d108      	bne.n	80011b8 <HAL_RCC_OscConfig+0x940>
 80011a6:	4b01      	ldr	r3, [pc, #4]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x95c>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	10908120 	.word	0x10908120
 80011b4:	40007000 	.word	0x40007000
 80011b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011bc:	2202      	movs	r2, #2
 80011be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	fa93 f2a3 	rbit	r2, r3
 80011ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	4bbb      	ldr	r3, [pc, #748]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011d8:	2102      	movs	r1, #2
 80011da:	6011      	str	r1, [r2, #0]
 80011dc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	fa92 f1a2 	rbit	r1, r2
 80011e6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011ea:	6011      	str	r1, [r2, #0]
  return(result);
 80011ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	b252      	sxtb	r2, r2
 80011f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011fc:	b252      	sxtb	r2, r2
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f002 021f 	and.w	r2, r2, #31
 8001204:	2101      	movs	r1, #1
 8001206:	fa01 f202 	lsl.w	r2, r1, r2
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d099      	beq.n	8001144 <HAL_RCC_OscConfig+0x8cc>
 8001210:	e064      	b.n	80012dc <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff f88f 	bl	8000334 <HAL_GetTick>
 8001216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121c:	f7ff f88a 	bl	8000334 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e208      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8001234:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001238:	2202      	movs	r2, #2
 800123a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	fa93 f2a3 	rbit	r2, r3
 8001246:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001250:	2202      	movs	r2, #2
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	fa93 f2a3 	rbit	r2, r3
 800125e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001262:	601a      	str	r2, [r3, #0]
  return(result);
 8001264:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001268:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	095b      	lsrs	r3, r3, #5
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d102      	bne.n	8001284 <HAL_RCC_OscConfig+0xa0c>
 800127e:	4b90      	ldr	r3, [pc, #576]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	e00d      	b.n	80012a0 <HAL_RCC_OscConfig+0xa28>
 8001284:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001288:	2202      	movs	r2, #2
 800128a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	fa93 f2a3 	rbit	r2, r3
 8001296:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012a4:	2102      	movs	r1, #2
 80012a6:	6011      	str	r1, [r2, #0]
 80012a8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	fa92 f1a2 	rbit	r1, r2
 80012b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012b6:	6011      	str	r1, [r2, #0]
  return(result);
 80012b8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	fab2 f282 	clz	r2, r2
 80012c2:	b252      	sxtb	r2, r2
 80012c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012c8:	b252      	sxtb	r2, r2
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	f002 021f 	and.w	r2, r2, #31
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d19f      	bne.n	800121c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e4:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	4a75      	ldr	r2, [pc, #468]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80012ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 81a4 	beq.w	8001644 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	f000 819b 	beq.w	8001640 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b02      	cmp	r3, #2
 8001312:	f040 8113 	bne.w	800153c <HAL_RCC_OscConfig+0xcc4>
 8001316:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800131a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800131e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fa93 f2a3 	rbit	r2, r3
 800132a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800132e:	601a      	str	r2, [r3, #0]
  return(result);
 8001330:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001334:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800133e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	461a      	mov	r2, r3
 8001346:	2300      	movs	r3, #0
 8001348:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7fe fff3 	bl	8000334 <HAL_GetTick>
 800134e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001352:	e009      	b.n	8001368 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7fe ffee 	bl	8000334 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e16e      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8001368:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800136c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001380:	601a      	str	r2, [r3, #0]
  return(result);
 8001382:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001386:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0xb2a>
 800139c:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	e01b      	b.n	80013da <HAL_RCC_OscConfig+0xb62>
 80013a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fa93 f2a3 	rbit	r2, r3
 80013b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	fa93 f2a3 	rbit	r2, r3
 80013d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013e2:	6011      	str	r1, [r2, #0]
 80013e4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	fa92 f1a2 	rbit	r1, r2
 80013ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013f2:	6011      	str	r1, [r2, #0]
  return(result);
 80013f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	fab2 f282 	clz	r2, r2
 80013fe:	b252      	sxtb	r2, r2
 8001400:	f042 0220 	orr.w	r2, r2, #32
 8001404:	b252      	sxtb	r2, r2
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f002 021f 	and.w	r2, r2, #31
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d19d      	bne.n	8001354 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	430b      	orrs	r3, r1
 800142e:	4924      	ldr	r1, [pc, #144]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001438:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800143c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800144c:	601a      	str	r2, [r3, #0]
  return(result);
 800144e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001452:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800145c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	461a      	mov	r2, r3
 8001464:	2301      	movs	r3, #1
 8001466:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7fe ff64 	bl	8000334 <HAL_GetTick>
 800146c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001470:	e009      	b.n	8001486 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001472:	f7fe ff5f 	bl	8000334 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0df      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8001486:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800148a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800148e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800149e:	601a      	str	r2, [r3, #0]
  return(result);
 80014a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	095b      	lsrs	r3, r3, #5
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d104      	bne.n	80014c4 <HAL_RCC_OscConfig+0xc4c>
 80014ba:	4b01      	ldr	r3, [pc, #4]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xc84>
 80014c0:	40021000 	.word	0x40021000
 80014c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f2a3 	rbit	r2, r3
 80014f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	4b55      	ldr	r3, [pc, #340]	; (8001650 <HAL_RCC_OscConfig+0xdd8>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001500:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001504:	6011      	str	r1, [r2, #0]
 8001506:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	fa92 f1a2 	rbit	r1, r2
 8001510:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001514:	6011      	str	r1, [r2, #0]
  return(result);
 8001516:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	fab2 f282 	clz	r2, r2
 8001520:	b252      	sxtb	r2, r2
 8001522:	f042 0220 	orr.w	r2, r2, #32
 8001526:	b252      	sxtb	r2, r2
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	f002 021f 	and.w	r2, r2, #31
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d09b      	beq.n	8001472 <HAL_RCC_OscConfig+0xbfa>
 800153a:	e083      	b.n	8001644 <HAL_RCC_OscConfig+0xdcc>
 800153c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	fa93 f2a3 	rbit	r2, r3
 8001550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001554:	601a      	str	r2, [r3, #0]
  return(result);
 8001556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001564:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	461a      	mov	r2, r3
 800156c:	2300      	movs	r3, #0
 800156e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7fe fee0 	bl	8000334 <HAL_GetTick>
 8001574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	e009      	b.n	800158e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157a:	f7fe fedb 	bl	8000334 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e05b      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 800158e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fa93 f2a3 	rbit	r2, r3
 80015a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a6:	601a      	str	r2, [r3, #0]
  return(result);
 80015a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	095b      	lsrs	r3, r3, #5
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d102      	bne.n	80015c8 <HAL_RCC_OscConfig+0xd50>
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_RCC_OscConfig+0xdd8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	e01b      	b.n	8001600 <HAL_RCC_OscConfig+0xd88>
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	fa93 f2a3 	rbit	r2, r3
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_RCC_OscConfig+0xdd8>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f107 0214 	add.w	r2, r7, #20
 8001604:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001608:	6011      	str	r1, [r2, #0]
 800160a:	f107 0214 	add.w	r2, r7, #20
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	fa92 f1a2 	rbit	r1, r2
 8001614:	f107 0210 	add.w	r2, r7, #16
 8001618:	6011      	str	r1, [r2, #0]
  return(result);
 800161a:	f107 0210 	add.w	r2, r7, #16
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	fab2 f282 	clz	r2, r2
 8001624:	b252      	sxtb	r2, r2
 8001626:	f042 0220 	orr.w	r2, r2, #32
 800162a:	b252      	sxtb	r2, r2
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	f002 021f 	and.w	r2, r2, #31
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d19d      	bne.n	800157a <HAL_RCC_OscConfig+0xd02>
 800163e:	e001      	b.n	8001644 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b09e      	sub	sp, #120	; 0x78
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e164      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d910      	bls.n	800169c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 0207 	bic.w	r2, r3, #7
 8001682:	498d      	ldr	r1, [pc, #564]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e14c      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b84      	ldr	r3, [pc, #528]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4981      	ldr	r1, [pc, #516]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80df 	beq.w	8001886 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d13d      	bne.n	800174c <HAL_RCC_ClockConfig+0xf8>
 80016d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80016de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_ClockConfig+0xa6>
 80016f4:	4b71      	ldr	r3, [pc, #452]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	e00f      	b.n	800171a <HAL_RCC_ClockConfig+0xc6>
 80016fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	667b      	str	r3, [r7, #100]	; 0x64
 8001708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170c:	663b      	str	r3, [r7, #96]	; 0x60
 800170e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001716:	4b69      	ldr	r3, [pc, #420]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800171e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001722:	fa92 f2a2 	rbit	r2, r2
 8001726:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001728:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800172a:	fab2 f282 	clz	r2, r2
 800172e:	b252      	sxtb	r2, r2
 8001730:	f042 0220 	orr.w	r2, r2, #32
 8001734:	b252      	sxtb	r2, r2
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	f002 021f 	and.w	r2, r2, #31
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d17d      	bne.n	8001844 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0f4      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d13d      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x17c>
 8001754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001758:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <HAL_RCC_ClockConfig+0x12a>
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	e00f      	b.n	800179e <HAL_RCC_ClockConfig+0x14a>
 800177e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	647b      	str	r3, [r7, #68]	; 0x44
 800178c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
 8001792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800179a:	4b48      	ldr	r3, [pc, #288]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80017a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017a6:	fa92 f2a2 	rbit	r2, r2
 80017aa:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80017ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ae:	fab2 f282 	clz	r2, r2
 80017b2:	b252      	sxtb	r2, r2
 80017b4:	f042 0220 	orr.w	r2, r2, #32
 80017b8:	b252      	sxtb	r2, r2
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	f002 021f 	and.w	r2, r2, #31
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f202 	lsl.w	r2, r1, r2
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d13b      	bne.n	8001844 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b2      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
 80017d0:	2302      	movs	r3, #2
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	095b      	lsrs	r3, r3, #5
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x1a4>
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	e00d      	b.n	8001814 <HAL_RCC_ClockConfig+0x1c0>
 80017f8:	2302      	movs	r3, #2
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2202      	movs	r2, #2
 8001816:	61ba      	str	r2, [r7, #24]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	fa92 f2a2 	rbit	r2, r2
 800181e:	617a      	str	r2, [r7, #20]
  return(result);
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b252      	sxtb	r2, r2
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	b252      	sxtb	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f002 021f 	and.w	r2, r2, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f202 	lsl.w	r2, r1, r2
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e078      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 0203 	bic.w	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	491a      	ldr	r1, [pc, #104]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001856:	f7fe fd6d 	bl	8000334 <HAL_GetTick>
 800185a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185c:	e00a      	b.n	8001874 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185e:	f7fe fd69 	bl	8000334 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e060      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 020c 	and.w	r2, r3, #12
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	429a      	cmp	r2, r3
 8001884:	d1eb      	bne.n	800185e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d215      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 0207 	bic.w	r2, r3, #7
 800189c:	4906      	ldr	r1, [pc, #24]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d006      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e03f      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000
 80018bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4919      	ldr	r1, [pc, #100]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4911      	ldr	r1, [pc, #68]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018fe:	f000 f825 	bl	800194c <HAL_RCC_GetSysClockFreq>
 8001902:	4601      	mov	r1, r0
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800190c:	23f0      	movs	r3, #240	; 0xf0
 800190e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	60fb      	str	r3, [r7, #12]
  return(result);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_RCC_ClockConfig+0x2f0>)
 8001924:	5cd3      	ldrb	r3, [r2, r3]
 8001926:	fa21 f303 	lsr.w	r3, r1, r3
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_RCC_ClockConfig+0x2f4>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f7fe fcbc 	bl	80002ac <HAL_InitTick>
  
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3778      	adds	r7, #120	; 0x78
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	08006528 	.word	0x08006528
 8001948:	2000000c 	.word	0x2000000c

0800194c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b08b      	sub	sp, #44	; 0x2c
 8001950:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b04      	cmp	r3, #4
 8001974:	d002      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x30>
 8001976:	2b08      	cmp	r3, #8
 8001978:	d003      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x36>
 800197a:	e03c      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc4>)
 800197e:	623b      	str	r3, [r7, #32]
      break;
 8001980:	e03c      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001988:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800198c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	607b      	str	r3, [r7, #4]
  return(result);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
 80019a0:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	f003 020f 	and.w	r2, r3, #15
 80019ae:	230f      	movs	r3, #15
 80019b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xcc>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e004      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xd0>)
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	623b      	str	r3, [r7, #32]
      break;
 80019f4:	e002      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019f8:	623b      	str	r3, [r7, #32]
      break;
 80019fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fc:	6a3b      	ldr	r3, [r7, #32]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	372c      	adds	r7, #44	; 0x2c
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	007a1200 	.word	0x007a1200
 8001a14:	08006508 	.word	0x08006508
 8001a18:	08006518 	.word	0x08006518
 8001a1c:	003d0900 	.word	0x003d0900

08001a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	2000000c 	.word	0x2000000c

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a3e:	f7ff ffef 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a42:	4601      	mov	r1, r0
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a4c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a50:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	603b      	str	r3, [r7, #0]
  return(result);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08006538 	.word	0x08006538

08001a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a82:	f7ff ffcd 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a86:	4601      	mov	r1, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001a90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a94:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	603b      	str	r3, [r7, #0]
  return(result);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x40>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08006538 	.word	0x08006538

08001ac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e07c      	b.n	8001bcc <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f003 fec7 	bl	8005880 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b08:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b12:	d902      	bls.n	8001b1a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e002      	b.n	8001b20 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001b28:	d007      	beq.n	8001b3a <HAL_SPI_Init+0x7a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b32:	d002      	beq.n	8001b3a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b4a:	d903      	bls.n	8001b54 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
 8001b52:	e002      	b.n	8001b5a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	ea42 0103 	orr.w	r1, r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	f003 0204 	and.w	r2, r3, #4
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	ea42 0103 	orr.w	r1, r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	75fb      	strb	r3, [r7, #23]


  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bf4:	d112      	bne.n	8001c1c <HAL_SPI_Receive+0x48>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10e      	bne.n	8001c1c <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2204      	movs	r2, #4
 8001c02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c06:	88fa      	ldrh	r2, [r7, #6]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f901 	bl	8001e1a <HAL_SPI_TransmitReceive>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	e0fa      	b.n	8001e12 <HAL_SPI_Receive+0x23e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_SPI_Receive+0x56>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e0f3      	b.n	8001e12 <HAL_SPI_Receive+0x23e>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c32:	f7fe fb7f 	bl	8000334 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d002      	beq.n	8001c4a <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8001c44:	2302      	movs	r3, #2
 8001c46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c48:	e0da      	b.n	8001e00 <HAL_SPI_Receive+0x22c>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_SPI_Receive+0x82>
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c5a:	e0d1      	b.n	8001e00 <HAL_SPI_Receive+0x22c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2204      	movs	r2, #4
 8001c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	88fa      	ldrh	r2, [r7, #6]
 8001c74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	88fa      	ldrh	r2, [r7, #6]
 8001c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ca6:	d908      	bls.n	8001cba <HAL_SPI_Receive+0xe6>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	e007      	b.n	8001cca <HAL_SPI_Receive+0xf6>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001cc8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd2:	d107      	bne.n	8001ce4 <HAL_SPI_Receive+0x110>
  {
    SPI_1LINE_RX(hspi);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d007      	beq.n	8001d02 <HAL_SPI_Receive+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d0a:	d860      	bhi.n	8001dce <HAL_SPI_Receive+0x1fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d0c:	e02c      	b.n	8001d68 <HAL_SPI_Receive+0x194>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d113      	bne.n	8001d44 <HAL_SPI_Receive+0x170>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	330c      	adds	r3, #12
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001d42:	e011      	b.n	8001d68 <HAL_SPI_Receive+0x194>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_SPI_Receive+0x18e>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d00a      	beq.n	8001d68 <HAL_SPI_Receive+0x194>
 8001d52:	f7fe faef 	bl	8000334 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d802      	bhi.n	8001d68 <HAL_SPI_Receive+0x194>
        {
          errorcode = HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001d66:	e04b      	b.n	8001e00 <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1cc      	bne.n	8001d0e <HAL_SPI_Receive+0x13a>
 8001d74:	e031      	b.n	8001dda <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d112      	bne.n	8001daa <HAL_SPI_Receive+0x1d6>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3302      	adds	r3, #2
 8001d94:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001da8:	e011      	b.n	8001dce <HAL_SPI_Receive+0x1fa>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <HAL_SPI_Receive+0x1f4>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db6:	d00a      	beq.n	8001dce <HAL_SPI_Receive+0x1fa>
 8001db8:	f7fe fabc 	bl	8000334 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d802      	bhi.n	8001dce <HAL_SPI_Receive+0x1fa>
        {
          errorcode = HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001dcc:	e018      	b.n	8001e00 <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1cd      	bne.n	8001d76 <HAL_SPI_Receive+0x1a2>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	6839      	ldr	r1, [r7, #0]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 faf3 	bl	80023ca <SPI_EndRxTransaction>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <HAL_SPI_Receive+0x21c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2220      	movs	r2, #32
 8001dee:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_SPI_Receive+0x22a>
  {
    errorcode = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	75fb      	strb	r3, [r7, #23]
 8001dfc:	e000      	b.n	8001e00 <HAL_SPI_Receive+0x22c>
  }

error :
 8001dfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b08a      	sub	sp, #40	; 0x28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_SPI_TransmitReceive+0x32>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e1e2      	b.n	8002212 <HAL_SPI_TransmitReceive+0x3f8>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e54:	f7fe fa6e 	bl	8000334 <HAL_GetTick>
 8001e58:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d00e      	beq.n	8001e8e <HAL_SPI_TransmitReceive+0x74>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e76:	d106      	bne.n	8001e86 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <HAL_SPI_TransmitReceive+0x6c>
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d003      	beq.n	8001e8e <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001e8c:	e1b7      	b.n	80021fe <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_SPI_TransmitReceive+0x86>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_SPI_TransmitReceive+0x86>
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d103      	bne.n	8001ea8 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001ea6:	e1aa      	b.n	80021fe <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d003      	beq.n	8001ebc <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2205      	movs	r2, #5
 8001eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	887a      	ldrh	r2, [r7, #2]
 8001ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001efe:	d805      	bhi.n	8001f0c <HAL_SPI_TransmitReceive+0xf2>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d908      	bls.n	8001f1e <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	e007      	b.n	8001f2e <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f2c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d007      	beq.n	8001f4c <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f54:	d975      	bls.n	8002042 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <HAL_SPI_TransmitReceive+0x14e>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d160      	bne.n	800202a <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	881a      	ldrh	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3302      	adds	r3, #2
 8001f76:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f86:	e050      	b.n	800202a <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01c      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x1ae>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d017      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x1ae>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d110      	bne.n	8001fc8 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01a      	beq.n	800200a <HAL_SPI_TransmitReceive+0x1f0>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d113      	bne.n	800200a <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002006:	2301      	movs	r3, #1
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d00b      	beq.n	800202a <HAL_SPI_TransmitReceive+0x210>
 8002012:	f7fe f98f 	bl	8000334 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800201e:	429a      	cmp	r2, r3
 8002020:	d803      	bhi.n	800202a <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002028:	e0e9      	b.n	80021fe <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1a9      	bne.n	8001f88 <HAL_SPI_TransmitReceive+0x16e>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800203a:	b29b      	uxth	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1a3      	bne.n	8001f88 <HAL_SPI_TransmitReceive+0x16e>
 8002040:	e0c9      	b.n	80021d6 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_SPI_TransmitReceive+0x23c>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b01      	cmp	r3, #1
 8002052:	f040 80b3 	bne.w	80021bc <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d90f      	bls.n	8002080 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	881a      	ldrh	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	3302      	adds	r3, #2
 800206e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b02      	subs	r3, #2
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800207e:	e09d      	b.n	80021bc <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	60ba      	str	r2, [r7, #8]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	320c      	adds	r2, #12
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800209e:	e08d      	b.n	80021bc <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d031      	beq.n	800210a <HAL_SPI_TransmitReceive+0x2f0>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d02c      	beq.n	800210a <HAL_SPI_TransmitReceive+0x2f0>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d125      	bne.n	800210a <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d90f      	bls.n	80020e8 <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	881a      	ldrh	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3302      	adds	r3, #2
 80020d6:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b02      	subs	r3, #2
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020e6:	e00e      	b.n	8002106 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	320c      	adds	r2, #12
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d042      	beq.n	800219c <HAL_SPI_TransmitReceive+0x382>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d13b      	bne.n	800219c <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800212a:	b29b      	uxth	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d920      	bls.n	8002172 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3302      	adds	r3, #2
 8002140:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b02      	subs	r3, #2
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d81b      	bhi.n	8002198 <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	e012      	b.n	8002198 <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f103 020c 	add.w	r2, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1c59      	adds	r1, r3, #1
 800217e:	6079      	str	r1, [r7, #4]
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002198:	2301      	movs	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d00b      	beq.n	80021bc <HAL_SPI_TransmitReceive+0x3a2>
 80021a4:	f7fe f8c6 	bl	8000334 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d803      	bhi.n	80021bc <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80021ba:	e020      	b.n	80021fe <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f47f af6c 	bne.w	80020a0 <HAL_SPI_TransmitReceive+0x286>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f47f af65 	bne.w	80020a0 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f94d 	bl	800247a <SPI_EndRxTxTransaction>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2220      	movs	r2, #32
 80021ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021fa:	e000      	b.n	80021fe <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 80021fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800220e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002212:	4618      	mov	r0, r3
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002228:	e04c      	b.n	80022c4 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d048      	beq.n	80022c4 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002238:	f7fe f87c 	bl	8000334 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d83d      	bhi.n	80022c4 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002256:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002260:	d111      	bne.n	8002286 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800226a:	d004      	beq.n	8002276 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002274:	d107      	bne.n	8002286 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002284:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800228e:	d10f      	bne.n	80022b0 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e00e      	b.n	80022e2 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4013      	ands	r3, r2
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d101      	bne.n	80022d8 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80022d4:	2201      	movs	r2, #1
 80022d6:	e000      	b.n	80022da <SPI_WaitFlagStateUntilTimeout+0xc0>
 80022d8:	2200      	movs	r2, #0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1a4      	bne.n	800222a <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80022f8:	e05a      	b.n	80023b0 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002300:	d109      	bne.n	8002316 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d106      	bne.n	8002316 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	330c      	adds	r3, #12
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002314:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d048      	beq.n	80023b0 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002324:	f7fe f806 	bl	8000334 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d83d      	bhi.n	80023b0 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002342:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800234c:	d111      	bne.n	8002372 <SPI_WaitFifoStateUntilTimeout+0x88>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002356:	d004      	beq.n	8002362 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002360:	d107      	bne.n	8002372 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002370:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237a:	d10f      	bne.n	800239c <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800239a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e008      	b.n	80023c2 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d19c      	bne.n	80022fa <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af02      	add	r7, sp, #8
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023de:	d111      	bne.n	8002404 <SPI_EndRxTransaction+0x3a>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e8:	d004      	beq.n	80023f4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f2:	d107      	bne.n	8002404 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002402:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff ff03 	bl	800221a <SPI_WaitFlagStateUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e023      	b.n	8002472 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002432:	d11d      	bne.n	8002470 <SPI_EndRxTransaction+0xa6>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800243c:	d004      	beq.n	8002448 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002446:	d113      	bne.n	8002470 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f7ff ff48 	bl	80022ea <SPI_WaitFifoStateUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e000      	b.n	8002472 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af02      	add	r7, sp, #8
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff ff29 	bl	80022ea <SPI_WaitFifoStateUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	f043 0220 	orr.w	r2, r3, #32
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e027      	b.n	80024fe <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff feae 	bl	800221a <SPI_WaitFlagStateUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e014      	b.n	80024fe <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2200      	movs	r2, #0
 80024dc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f7ff ff02 	bl	80022ea <SPI_WaitFifoStateUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e000      	b.n	80024fe <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e043      	b.n	80025a0 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f003 f9eb 	bl	8005908 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2224      	movs	r2, #36	; 0x24
 8002536:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f8ba 	bl	80026c4 <UART_SetConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e022      	b.n	80025a0 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa14 	bl	8002990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002586:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fa9b 	bl	8002ad4 <UART_CheckIdleState>
 800259e:	4603      	mov	r3, r0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d177      	bne.n	80026b8 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_UART_Transmit+0x2c>
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e070      	b.n	80026ba <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_UART_Transmit+0x3e>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e069      	b.n	80026ba <HAL_UART_Transmit+0x112>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2221      	movs	r2, #33	; 0x21
 80025f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80025fc:	f7fd fe9a 	bl	8000334 <HAL_GetTick>
 8002600:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002612:	e034      	b.n	800267e <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fa98 	bl	8002b66 <UART_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e03c      	b.n	80026ba <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002648:	d111      	bne.n	800266e <HAL_UART_Transmit+0xc6>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002662:	b292      	uxth	r2, r2
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3302      	adds	r3, #2
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	e007      	b.n	800267e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	60ba      	str	r2, [r7, #8]
 8002674:	781a      	ldrb	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b292      	uxth	r2, r2
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1c4      	bne.n	8002614 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	2140      	movs	r1, #64	; 0x40
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fa66 	bl	8002b66 <UART_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e00a      	b.n	80026ba <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
  }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80026d0:	2310      	movs	r3, #16
 80026d2:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80026d8:	2300      	movs	r3, #0
 80026da:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b9f      	ldr	r3, [pc, #636]	; (800297c <UART_SetConfig+0x2b8>)
 8002700:	4013      	ands	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	68f9      	ldr	r1, [r7, #12]
 8002708:	430b      	orrs	r3, r1
 800270a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a8e      	ldr	r2, [pc, #568]	; (8002980 <UART_SetConfig+0x2bc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d121      	bne.n	8002790 <UART_SetConfig+0xcc>
 800274c:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <UART_SetConfig+0x2c0>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b03      	cmp	r3, #3
 8002756:	d817      	bhi.n	8002788 <UART_SetConfig+0xc4>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <UART_SetConfig+0x9c>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002771 	.word	0x08002771
 8002764:	0800277d 	.word	0x0800277d
 8002768:	08002783 	.word	0x08002783
 800276c:	08002777 	.word	0x08002777
 8002770:	2300      	movs	r3, #0
 8002772:	75fb      	strb	r3, [r7, #23]
 8002774:	e01e      	b.n	80027b4 <UART_SetConfig+0xf0>
 8002776:	2302      	movs	r3, #2
 8002778:	75fb      	strb	r3, [r7, #23]
 800277a:	e01b      	b.n	80027b4 <UART_SetConfig+0xf0>
 800277c:	2304      	movs	r3, #4
 800277e:	75fb      	strb	r3, [r7, #23]
 8002780:	e018      	b.n	80027b4 <UART_SetConfig+0xf0>
 8002782:	2308      	movs	r3, #8
 8002784:	75fb      	strb	r3, [r7, #23]
 8002786:	e015      	b.n	80027b4 <UART_SetConfig+0xf0>
 8002788:	2310      	movs	r3, #16
 800278a:	75fb      	strb	r3, [r7, #23]
 800278c:	bf00      	nop
 800278e:	e011      	b.n	80027b4 <UART_SetConfig+0xf0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a7c      	ldr	r2, [pc, #496]	; (8002988 <UART_SetConfig+0x2c4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d102      	bne.n	80027a0 <UART_SetConfig+0xdc>
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]
 800279e:	e009      	b.n	80027b4 <UART_SetConfig+0xf0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a79      	ldr	r2, [pc, #484]	; (800298c <UART_SetConfig+0x2c8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d102      	bne.n	80027b0 <UART_SetConfig+0xec>
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]
 80027ae:	e001      	b.n	80027b4 <UART_SetConfig+0xf0>
 80027b0:	2310      	movs	r3, #16
 80027b2:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027bc:	d16f      	bne.n	800289e <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d857      	bhi.n	8002874 <UART_SetConfig+0x1b0>
 80027c4:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <UART_SetConfig+0x108>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	080027f1 	.word	0x080027f1
 80027d0:	0800280d 	.word	0x0800280d
 80027d4:	08002829 	.word	0x08002829
 80027d8:	08002875 	.word	0x08002875
 80027dc:	08002843 	.word	0x08002843
 80027e0:	08002875 	.word	0x08002875
 80027e4:	08002875 	.word	0x08002875
 80027e8:	08002875 	.word	0x08002875
 80027ec:	0800285f 	.word	0x0800285f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027f0:	f7ff f922 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 80027f4:	4603      	mov	r3, r0
 80027f6:	005a      	lsls	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	085b      	lsrs	r3, r3, #1
 80027fe:	441a      	add	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	82bb      	strh	r3, [r7, #20]
        break;
 800280a:	e036      	b.n	800287a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800280c:	f7ff f936 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
 8002810:	4603      	mov	r3, r0
 8002812:	005a      	lsls	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	441a      	add	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	82bb      	strh	r3, [r7, #20]
        break;
 8002826:	e028      	b.n	800287a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002832:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6852      	ldr	r2, [r2, #4]
 800283a:	fbb3 f3f2 	udiv	r3, r3, r2
 800283e:	82bb      	strh	r3, [r7, #20]
        break;
 8002840:	e01b      	b.n	800287a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002842:	f7ff f883 	bl	800194c <HAL_RCC_GetSysClockFreq>
 8002846:	4603      	mov	r3, r0
 8002848:	005a      	lsls	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	441a      	add	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	82bb      	strh	r3, [r7, #20]
        break;
 800285c:	e00d      	b.n	800287a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	82bb      	strh	r3, [r7, #20]
        break;
 8002872:	e002      	b.n	800287a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	74fb      	strb	r3, [r7, #19]
        break;
 8002878:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800287a:	8abb      	ldrh	r3, [r7, #20]
 800287c:	f023 030f 	bic.w	r3, r3, #15
 8002880:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002882:	8abb      	ldrh	r3, [r7, #20]
 8002884:	105b      	asrs	r3, r3, #1
 8002886:	b29b      	uxth	r3, r3
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	b29a      	uxth	r2, r3
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	4313      	orrs	r3, r2
 8002892:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	897a      	ldrh	r2, [r7, #10]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	e069      	b.n	8002972 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d863      	bhi.n	800296c <UART_SetConfig+0x2a8>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <UART_SetConfig+0x1e8>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028d1 	.word	0x080028d1
 80028b0:	080028f1 	.word	0x080028f1
 80028b4:	08002911 	.word	0x08002911
 80028b8:	0800296d 	.word	0x0800296d
 80028bc:	08002931 	.word	0x08002931
 80028c0:	0800296d 	.word	0x0800296d
 80028c4:	0800296d 	.word	0x0800296d
 80028c8:	0800296d 	.word	0x0800296d
 80028cc:	08002951 	.word	0x08002951
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80028d0:	f7ff f8b2 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	441a      	add	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60da      	str	r2, [r3, #12]
        break;
 80028ee:	e040      	b.n	8002972 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80028f0:	f7ff f8c4 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	441a      	add	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	b29a      	uxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60da      	str	r2, [r3, #12]
        break;
 800290e:	e030      	b.n	8002972 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800291a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6852      	ldr	r2, [r2, #4]
 8002922:	fbb3 f3f2 	udiv	r3, r3, r2
 8002926:	b29a      	uxth	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60da      	str	r2, [r3, #12]
        break;
 800292e:	e020      	b.n	8002972 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002930:	f7ff f80c 	bl	800194c <HAL_RCC_GetSysClockFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	085b      	lsrs	r3, r3, #1
 800293c:	441a      	add	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	b29a      	uxth	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60da      	str	r2, [r3, #12]
        break;
 800294e:	e010      	b.n	8002972 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	b29a      	uxth	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60da      	str	r2, [r3, #12]
        break;
 800296a:	e002      	b.n	8002972 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	74fb      	strb	r3, [r7, #19]
        break;
 8002970:	bf00      	nop
    }
  }

  return ret;
 8002972:	7cfb      	ldrb	r3, [r7, #19]

}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	efff69f3 	.word	0xefff69f3
 8002980:	40013800 	.word	0x40013800
 8002984:	40021000 	.word	0x40021000
 8002988:	40004400 	.word	0x40004400
 800298c:	40004800 	.word	0x40004800

08002990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01a      	beq.n	8002aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a8e:	d10a      	bne.n	8002aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
  }
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ae6:	f7fd fc25 	bl	8000334 <HAL_GetTick>
 8002aea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d10e      	bne.n	8002b18 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002afa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f82c 	bl	8002b66 <UART_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e022      	b.n	8002b5e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d10e      	bne.n	8002b44 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f816 	bl	8002b66 <UART_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e00c      	b.n	8002b5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	4613      	mov	r3, r2
 8002b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b76:	e02c      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7e:	d028      	beq.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b86:	f7fd fbd5 	bl	8000334 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d21d      	bcs.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ba4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e00f      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d0c3      	beq.n	8002b78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0c:	2b84      	cmp	r3, #132	; 0x84
 8002c0e:	d005      	beq.n	8002c1c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002c10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	3303      	adds	r3, #3
 8002c1a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c30:	f3ef 8305 	mrs	r3, IPSR
 8002c34:	607b      	str	r3, [r7, #4]
  return(result);
 8002c36:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002c52:	f001 f853 	bl	8003cfc <vTaskStartScheduler>
  
  return osOK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685c      	ldr	r4, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c72:	b29e      	uxth	r6, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ffbd 	bl	8002bfa <makeFreeRtosPriority>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	9200      	str	r2, [sp, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	4632      	mov	r2, r6
 8002c8e:	4629      	mov	r1, r5
 8002c90:	4620      	mov	r0, r4
 8002c92:	f000 fed5 	bl	8003a40 <xTaskCreate>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d001      	beq.n	8002ca0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e000      	b.n	8002ca2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002caa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <osDelay+0x16>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	e000      	b.n	8002cc2 <osDelay+0x18>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 ffe6 	bl	8003c94 <vTaskDelay>
  
  return osOK;
 8002cc8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f000 fa2e 	bl	800313c <xQueueCreateMutex>
 8002ce0:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <osMutexWait+0x18>
    return osErrorParameter;
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	e03c      	b.n	8002d7e <osMutexWait+0x92>
  }
  
  ticks = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d103      	bne.n	8002d18 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	e009      	b.n	8002d2c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <osMutexWait+0x40>
      ticks = 1;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002d2c:	f7ff ff7d 	bl	8002c2a <inHandlerMode>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d017      	beq.n	8002d66 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fcaa 	bl	8003698 <xQueueReceiveFromISR>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d001      	beq.n	8002d4e <osMutexWait+0x62>
      return osErrorOS;
 8002d4a:	23ff      	movs	r3, #255	; 0xff
 8002d4c:	e017      	b.n	8002d7e <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <osMutexWait+0x90>
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <osMutexWait+0x9c>)
 8002d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	e00a      	b.n	8002d7c <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002d66:	2300      	movs	r3, #0
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fb81 	bl	8003474 <xQueueGenericReceive>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d001      	beq.n	8002d7c <osMutexWait+0x90>
    return osErrorOS;
 8002d78:	23ff      	movs	r3, #255	; 0xff
 8002d7a:	e000      	b.n	8002d7e <osMutexWait+0x92>
  }
  
  return osOK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000ed04 	.word	0xe000ed04

08002d8c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002d9c:	f7ff ff45 	bl	8002c2a <inHandlerMode>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fad7 	bl	8003360 <xQueueGiveFromISR>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d001      	beq.n	8002dbc <osMutexRelease+0x30>
      return osErrorOS;
 8002db8:	23ff      	movs	r3, #255	; 0xff
 8002dba:	e017      	b.n	8002dec <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d013      	beq.n	8002dea <osMutexRelease+0x5e>
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <osMutexRelease+0x68>)
 8002dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	e00a      	b.n	8002dea <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2100      	movs	r1, #0
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9c6 	bl	800316c <xQueueGenericSend>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d001      	beq.n	8002dea <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002de6:	23ff      	movs	r3, #255	; 0xff
 8002de8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	e000ed04 	.word	0xe000ed04

08002df8 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8002e00:	f7ff ff13 	bl	8002c2a <inHandlerMode>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <osMutexDelete+0x16>
    return osErrorISR;
 8002e0a:	2382      	movs	r3, #130	; 0x82
 8002e0c:	e003      	b.n	8002e16 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fcbf 	bl	8003792 <vQueueDelete>

  return osOK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f103 0208 	add.w	r2, r3, #8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295
 8002e36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f103 0208 	add.w	r2, r3, #8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f103 0208 	add.w	r2, r3, #8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d103      	bne.n	8002ee0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	e00c      	b.n	8002efa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e002      	b.n	8002eee <vListInsert+0x2e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d2f6      	bcs.n	8002ee8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6852      	ldr	r2, [r2, #4]
 8002f52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d103      	bne.n	8002f66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1e5a      	subs	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	e7fe      	b.n	8002fae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002fb0:	f001 fd1e 	bl	80049f0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbc:	68f9      	ldr	r1, [r7, #12]
 8002fbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	441a      	add	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	441a      	add	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	22ff      	movs	r2, #255	; 0xff
 8002ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	22ff      	movs	r2, #255	; 0xff
 8002ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d114      	bne.n	8003030 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01a      	beq.n	8003044 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3310      	adds	r3, #16
 8003012:	4618      	mov	r0, r3
 8003014:	f001 f89c 	bl	8004150 <xTaskRemoveFromEventList>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d012      	beq.n	8003044 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <xQueueGenericReset+0xcc>)
 8003020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	e009      	b.n	8003044 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3310      	adds	r3, #16
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fef2 	bl	8002e1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3324      	adds	r3, #36	; 0x24
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff feed 	bl	8002e1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003044:	f001 fd02 	bl	8004a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003048:	2301      	movs	r3, #1
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <xQueueGenericCreate+0x28>
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	e7fe      	b.n	800307e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	e004      	b.n	8003096 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3348      	adds	r3, #72	; 0x48
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fdb8 	bl	8004c10 <pvPortMalloc>
 80030a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	3348      	adds	r3, #72	; 0x48
 80030ac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030ae:	79fa      	ldrb	r2, [r7, #7]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f805 	bl	80030ca <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80030c0:	69bb      	ldr	r3, [r7, #24]
	}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e002      	b.n	80030ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030f8:	2101      	movs	r1, #1
 80030fa:	69b8      	ldr	r0, [r7, #24]
 80030fc:	f7ff ff44 	bl	8002f88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00e      	beq.n	8003134 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003128:	2300      	movs	r3, #0
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f81c 	bl	800316c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003146:	2301      	movs	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	461a      	mov	r2, r3
 8003152:	6939      	ldr	r1, [r7, #16]
 8003154:	6978      	ldr	r0, [r7, #20]
 8003156:	f7ff ff7f 	bl	8003058 <xQueueGenericCreate>
 800315a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff ffd3 	bl	8003108 <prvInitialiseMutex>

		return pxNewQueue;
 8003162:	68fb      	ldr	r3, [r7, #12]
	}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08e      	sub	sp, #56	; 0x38
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800317a:	2300      	movs	r3, #0
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <xQueueGenericSend+0x30>
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
 800319a:	e7fe      	b.n	800319a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <xQueueGenericSend+0x3e>
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <xQueueGenericSend+0x42>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <xQueueGenericSend+0x44>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <xQueueGenericSend+0x5c>
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	e7fe      	b.n	80031c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d103      	bne.n	80031d6 <xQueueGenericSend+0x6a>
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <xQueueGenericSend+0x6e>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <xQueueGenericSend+0x70>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <xQueueGenericSend+0x88>
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	623b      	str	r3, [r7, #32]
 80031f2:	e7fe      	b.n	80031f2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031f4:	f001 f966 	bl	80044c4 <xTaskGetSchedulerState>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <xQueueGenericSend+0x98>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <xQueueGenericSend+0x9c>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <xQueueGenericSend+0x9e>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <xQueueGenericSend+0xb6>
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	e7fe      	b.n	8003220 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003222:	f001 fbe5 	bl	80049f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <xQueueGenericSend+0xcc>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d129      	bne.n	800328c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800323e:	f000 fac5 	bl	80037cc <prvCopyDataToQueue>
 8003242:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	3324      	adds	r3, #36	; 0x24
 8003250:	4618      	mov	r0, r3
 8003252:	f000 ff7d 	bl	8004150 <xTaskRemoveFromEventList>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <xQueueGenericSend+0x1f0>)
 800325e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	e00a      	b.n	8003284 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003274:	4b39      	ldr	r3, [pc, #228]	; (800335c <xQueueGenericSend+0x1f0>)
 8003276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003284:	f001 fbe2 	bl	8004a4c <vPortExitCritical>
				return pdPASS;
 8003288:	2301      	movs	r3, #1
 800328a:	e063      	b.n	8003354 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003292:	f001 fbdb 	bl	8004a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003296:	2300      	movs	r3, #0
 8003298:	e05c      	b.n	8003354 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	2b00      	cmp	r3, #0
 800329e:	d106      	bne.n	80032ae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 ffb5 	bl	8004214 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032aa:	2301      	movs	r3, #1
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ae:	f001 fbcd 	bl	8004a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032b2:	f000 fd69 	bl	8003d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032b6:	f001 fb9b 	bl	80049f0 <vPortEnterCritical>
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d103      	bne.n	80032d0 <xQueueGenericSend+0x164>
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d103      	bne.n	80032e6 <xQueueGenericSend+0x17a>
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032e6:	f001 fbb1 	bl	8004a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ea:	1d3a      	adds	r2, r7, #4
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 ffb2 	bl	800425c <xTaskCheckForTimeOut>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d124      	bne.n	8003348 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003300:	f000 fb5c 	bl	80039bc <prvIsQueueFull>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	3310      	adds	r3, #16
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fef8 	bl	8004108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800331a:	f000 fae7 	bl	80038ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800331e:	f000 fd41 	bl	8003da4 <xTaskResumeAll>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f47f af7c 	bne.w	8003222 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <xQueueGenericSend+0x1f0>)
 800332c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	e772      	b.n	8003222 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800333c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333e:	f000 fad5 	bl	80038ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003342:	f000 fd2f 	bl	8003da4 <xTaskResumeAll>
 8003346:	e76c      	b.n	8003222 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800334a:	f000 facf 	bl	80038ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800334e:	f000 fd29 	bl	8003da4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003352:	2300      	movs	r3, #0
		}
	}
}
 8003354:	4618      	mov	r0, r3
 8003356:	3738      	adds	r7, #56	; 0x38
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	e000ed04 	.word	0xe000ed04

08003360 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <xQueueGiveFromISR+0x28>
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	623b      	str	r3, [r7, #32]
 8003386:	e7fe      	b.n	8003386 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <xQueueGiveFromISR+0x44>
 8003390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e7fe      	b.n	80033a2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <xQueueGiveFromISR+0x54>
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <xQueueGiveFromISR+0x58>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <xQueueGiveFromISR+0x5a>
 80033b8:	2300      	movs	r3, #0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <xQueueGiveFromISR+0x72>
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	e7fe      	b.n	80033d0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033d2:	f001 fbdf 	bl	8004b94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033d6:	f3ef 8211 	mrs	r2, BASEPRI
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	617a      	str	r2, [r7, #20]
 80033ec:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033fe:	429a      	cmp	r2, r3
 8003400:	d22b      	bcs.n	800345a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003414:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d112      	bne.n	8003444 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d016      	beq.n	8003454 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	3324      	adds	r3, #36	; 0x24
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fe90 	bl	8004150 <xTaskRemoveFromEventList>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00e      	beq.n	8003454 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e007      	b.n	8003454 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003448:	3301      	adds	r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	b25a      	sxtb	r2, r3
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003454:	2301      	movs	r3, #1
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
 8003458:	e001      	b.n	800345e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800345a:	2300      	movs	r3, #0
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800346a:	4618      	mov	r0, r3
 800346c:	3738      	adds	r7, #56	; 0x38
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08e      	sub	sp, #56	; 0x38
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003482:	2300      	movs	r3, #0
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <xQueueGenericReceive+0x30>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
 80034a2:	e7fe      	b.n	80034a2 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <xQueueGenericReceive+0x3e>
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <xQueueGenericReceive+0x42>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <xQueueGenericReceive+0x44>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <xQueueGenericReceive+0x5c>
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	e7fe      	b.n	80034ce <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034d0:	f000 fff8 	bl	80044c4 <xTaskGetSchedulerState>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <xQueueGenericReceive+0x6c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <xQueueGenericReceive+0x70>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <xQueueGenericReceive+0x72>
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <xQueueGenericReceive+0x8a>
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80034fe:	f001 fa77 	bl	80049f0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d046      	beq.n	800359c <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003518:	f000 f9c2 	bl	80038a0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d121      	bne.n	8003566 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	1e5a      	subs	r2, r3, #1
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003532:	f001 f8df 	bl	80046f4 <pvTaskIncrementMutexHeldCount>
 8003536:	4602      	mov	r2, r0
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d027      	beq.n	8003594 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	3310      	adds	r3, #16
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fe01 	bl	8004150 <xTaskRemoveFromEventList>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01f      	beq.n	8003594 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8003554:	4b4f      	ldr	r3, [pc, #316]	; (8003694 <xQueueGenericReceive+0x220>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	e016      	b.n	8003594 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800356a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00f      	beq.n	8003594 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	3324      	adds	r3, #36	; 0x24
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fde9 	bl	8004150 <xTaskRemoveFromEventList>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8003584:	4b43      	ldr	r3, [pc, #268]	; (8003694 <xQueueGenericReceive+0x220>)
 8003586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003594:	f001 fa5a 	bl	8004a4c <vPortExitCritical>
				return pdPASS;
 8003598:	2301      	movs	r3, #1
 800359a:	e077      	b.n	800368c <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035a2:	f001 fa53 	bl	8004a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e070      	b.n	800368c <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fe2d 	bl	8004214 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035ba:	2301      	movs	r3, #1
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035be:	f001 fa45 	bl	8004a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035c2:	f000 fbe1 	bl	8003d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035c6:	f001 fa13 	bl	80049f0 <vPortEnterCritical>
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d0:	b25b      	sxtb	r3, r3
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d103      	bne.n	80035e0 <xQueueGenericReceive+0x16c>
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d103      	bne.n	80035f6 <xQueueGenericReceive+0x182>
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f6:	f001 fa29 	bl	8004a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035fa:	1d3a      	adds	r2, r7, #4
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fe2a 	bl	800425c <xTaskCheckForTimeOut>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d131      	bne.n	8003672 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800360e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003610:	f000 f9be 	bl	8003990 <prvIsQueueEmpty>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d025      	beq.n	8003666 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d108      	bne.n	8003634 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8003622:	f001 f9e5 	bl	80049f0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 ff68 	bl	8004500 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003630:	f001 fa0c 	bl	8004a4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	3324      	adds	r3, #36	; 0x24
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fd63 	bl	8004108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003644:	f000 f952 	bl	80038ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003648:	f000 fbac 	bl	8003da4 <xTaskResumeAll>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	f47f af55 	bne.w	80034fe <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <xQueueGenericReceive+0x220>)
 8003656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	e74b      	b.n	80034fe <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003668:	f000 f940 	bl	80038ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800366c:	f000 fb9a 	bl	8003da4 <xTaskResumeAll>
 8003670:	e745      	b.n	80034fe <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8003672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003674:	f000 f93a 	bl	80038ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003678:	f000 fb94 	bl	8003da4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800367c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800367e:	f000 f987 	bl	8003990 <prvIsQueueEmpty>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	f43f af3a 	beq.w	80034fe <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800368a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800368c:	4618      	mov	r0, r3
 800368e:	3738      	adds	r7, #56	; 0x38
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <xQueueReceiveFromISR+0x2a>
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	623b      	str	r3, [r7, #32]
 80036c0:	e7fe      	b.n	80036c0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <xQueueReceiveFromISR+0x38>
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <xQueueReceiveFromISR+0x3c>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <xQueueReceiveFromISR+0x3e>
 80036d4:	2300      	movs	r3, #0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <xQueueReceiveFromISR+0x56>
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	e7fe      	b.n	80036ec <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ee:	f001 fa51 	bl	8004b94 <vPortValidateInterruptPriority>
	__asm volatile
 80036f2:	f3ef 8211 	mrs	r2, BASEPRI
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	61ba      	str	r2, [r7, #24]
 8003708:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800370a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	d02f      	beq.n	800377a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003728:	f000 f8ba 	bl	80038a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	1e5a      	subs	r2, r3, #1
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003734:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d112      	bne.n	8003764 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d016      	beq.n	8003774 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	3310      	adds	r3, #16
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fd00 	bl	8004150 <xTaskRemoveFromEventList>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00e      	beq.n	8003774 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e007      	b.n	8003774 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003768:	3301      	adds	r3, #1
 800376a:	b2db      	uxtb	r3, r3
 800376c:	b25a      	sxtb	r2, r3
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003774:	2301      	movs	r3, #1
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
 8003778:	e001      	b.n	800377e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800377a:	2300      	movs	r3, #0
 800377c:	637b      	str	r3, [r7, #52]	; 0x34
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800378a:	4618      	mov	r0, r3
 800378c:	3738      	adds	r7, #56	; 0x38
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <vQueueDelete+0x26>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	e7fe      	b.n	80037b6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f917 	bl	80039ec <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f001 fae8 	bl	8004d94 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10d      	bne.n	8003806 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d14d      	bne.n	800388e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fef8 	bl	80045ec <xTaskPriorityDisinherit>
 80037fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	e043      	b.n	800388e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d119      	bne.n	8003840 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6898      	ldr	r0, [r3, #8]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	461a      	mov	r2, r3
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	f002 f9aa 	bl	8005b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	441a      	add	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d32b      	bcc.n	800388e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	e026      	b.n	800388e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	68d8      	ldr	r0, [r3, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	461a      	mov	r2, r3
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	f002 f990 	bl	8005b70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	425b      	negs	r3, r3
 800385a:	441a      	add	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d207      	bcs.n	800387c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	425b      	negs	r3, r3
 8003876:	441a      	add	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d105      	bne.n	800388e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	3b01      	subs	r3, #1
 800388c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003896:	697b      	ldr	r3, [r7, #20]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d018      	beq.n	80038e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	441a      	add	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d303      	bcc.n	80038d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68d9      	ldr	r1, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	461a      	mov	r2, r3
 80038de:	6838      	ldr	r0, [r7, #0]
 80038e0:	f002 f946 	bl	8005b70 <memcpy>
	}
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038f4:	f001 f87c 	bl	80049f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003900:	e011      	b.n	8003926 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d012      	beq.n	8003930 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3324      	adds	r3, #36	; 0x24
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fc1e 	bl	8004150 <xTaskRemoveFromEventList>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800391a:	f000 fcfd 	bl	8004318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	3b01      	subs	r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	dce9      	bgt.n	8003902 <prvUnlockQueue+0x16>
 800392e:	e000      	b.n	8003932 <prvUnlockQueue+0x46>
					break;
 8003930:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800393a:	f001 f887 	bl	8004a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800393e:	f001 f857 	bl	80049f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003948:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800394a:	e011      	b.n	8003970 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d012      	beq.n	800397a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3310      	adds	r3, #16
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fbf9 	bl	8004150 <xTaskRemoveFromEventList>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003964:	f000 fcd8 	bl	8004318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003968:	7bbb      	ldrb	r3, [r7, #14]
 800396a:	3b01      	subs	r3, #1
 800396c:	b2db      	uxtb	r3, r3
 800396e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003974:	2b00      	cmp	r3, #0
 8003976:	dce9      	bgt.n	800394c <prvUnlockQueue+0x60>
 8003978:	e000      	b.n	800397c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800397a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	22ff      	movs	r2, #255	; 0xff
 8003980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003984:	f001 f862 	bl	8004a4c <vPortExitCritical>
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003998:	f001 f82a 	bl	80049f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d102      	bne.n	80039aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e001      	b.n	80039ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039ae:	f001 f84d 	bl	8004a4c <vPortExitCritical>

	return xReturn;
 80039b2:	68fb      	ldr	r3, [r7, #12]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039c4:	f001 f814 	bl	80049f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d102      	bne.n	80039da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	e001      	b.n	80039de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039de:	f001 f835 	bl	8004a4c <vPortExitCritical>

	return xReturn;
 80039e2:	68fb      	ldr	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e016      	b.n	8003a28 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80039fa:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <vQueueUnregisterQueue+0x50>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d10b      	bne.n	8003a22 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003a0a:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <vQueueUnregisterQueue+0x50>)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2100      	movs	r1, #0
 8003a10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003a14:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <vQueueUnregisterQueue+0x50>)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	605a      	str	r2, [r3, #4]
				break;
 8003a20:	e005      	b.n	8003a2e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3301      	adds	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b07      	cmp	r3, #7
 8003a2c:	d9e5      	bls.n	80039fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	2000212c 	.word	0x2000212c

08003a40 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af04      	add	r7, sp, #16
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 f8db 	bl	8004c10 <pvPortMalloc>
 8003a5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00e      	beq.n	8003a80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a62:	2054      	movs	r0, #84	; 0x54
 8003a64:	f001 f8d4 	bl	8004c10 <pvPortMalloc>
 8003a68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
 8003a76:	e005      	b.n	8003a84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a78:	6978      	ldr	r0, [r7, #20]
 8003a7a:	f001 f98b 	bl	8004d94 <vPortFree>
 8003a7e:	e001      	b.n	8003a84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d013      	beq.n	8003ab2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9303      	str	r3, [sp, #12]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	9302      	str	r3, [sp, #8]
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f80e 	bl	8003ac2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aa6:	69f8      	ldr	r0, [r7, #28]
 8003aa8:	f000 f88a 	bl	8003bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003aac:	2301      	movs	r3, #1
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	e002      	b.n	8003ab8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
	}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b088      	sub	sp, #32
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ada:	3b01      	subs	r3, #1
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f023 0307 	bic.w	r3, r3, #7
 8003ae8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <prvInitialiseNewTask+0x46>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e7fe      	b.n	8003b06 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	e012      	b.n	8003b34 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	7819      	ldrb	r1, [r3, #0]
 8003b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3334      	adds	r3, #52	; 0x34
 8003b1e:	460a      	mov	r2, r1
 8003b20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d006      	beq.n	8003b3c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3301      	adds	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	d9e9      	bls.n	8003b0e <prvInitialiseNewTask+0x4c>
 8003b3a:	e000      	b.n	8003b3e <prvInitialiseNewTask+0x7c>
		{
			break;
 8003b3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d901      	bls.n	8003b50 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b4c:	2306      	movs	r3, #6
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	2200      	movs	r2, #0
 8003b60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	3304      	adds	r3, #4
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff f979 	bl	8002e5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	3318      	adds	r3, #24
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff f974 	bl	8002e5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	f1c3 0207 	rsb	r2, r3, #7
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	2200      	movs	r2, #0
 8003b90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	69b8      	ldr	r0, [r7, #24]
 8003ba0:	f000 fe22 	bl	80047e8 <pxPortInitialiseStack>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bb6:	bf00      	nop
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bc8:	f000 ff12 	bl	80049f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <prvAddNewTaskToReadyList+0xb8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <prvAddNewTaskToReadyList+0xb8>)
 8003bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bd6:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <prvAddNewTaskToReadyList+0xbc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bde:	4a27      	ldr	r2, [pc, #156]	; (8003c7c <prvAddNewTaskToReadyList+0xbc>)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003be4:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <prvAddNewTaskToReadyList+0xb8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d110      	bne.n	8003c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bec:	f000 fbb8 	bl	8004360 <prvInitialiseTaskLists>
 8003bf0:	e00d      	b.n	8003c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <prvAddNewTaskToReadyList+0xc0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bfa:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <prvAddNewTaskToReadyList+0xbc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d802      	bhi.n	8003c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c08:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <prvAddNewTaskToReadyList+0xbc>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <prvAddNewTaskToReadyList+0xc4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <prvAddNewTaskToReadyList+0xc4>)
 8003c16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <prvAddNewTaskToReadyList+0xc8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <prvAddNewTaskToReadyList+0xc8>)
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <prvAddNewTaskToReadyList+0xcc>)
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f7ff f919 	bl	8002e78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c46:	f000 ff01 	bl	8004a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <prvAddNewTaskToReadyList+0xc0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00e      	beq.n	8003c70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <prvAddNewTaskToReadyList+0xbc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d207      	bcs.n	8003c70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <prvAddNewTaskToReadyList+0xd0>)
 8003c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000190 	.word	0x20000190
 8003c7c:	20000090 	.word	0x20000090
 8003c80:	2000019c 	.word	0x2000019c
 8003c84:	200001ac 	.word	0x200001ac
 8003c88:	20000198 	.word	0x20000198
 8003c8c:	20000094 	.word	0x20000094
 8003c90:	e000ed04 	.word	0xe000ed04

08003c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <vTaskDelay+0x60>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <vTaskDelay+0x2e>
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	e7fe      	b.n	8003cc0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003cc2:	f000 f861 	bl	8003d88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fd27 	bl	800471c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cce:	f000 f869 	bl	8003da4 <xTaskResumeAll>
 8003cd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <vTaskDelay+0x64>)
 8003cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	200001b8 	.word	0x200001b8
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003d02:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <vTaskStartScheduler+0x74>)
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	2300      	movs	r3, #0
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2280      	movs	r2, #128	; 0x80
 8003d0e:	4919      	ldr	r1, [pc, #100]	; (8003d74 <vTaskStartScheduler+0x78>)
 8003d10:	4819      	ldr	r0, [pc, #100]	; (8003d78 <vTaskStartScheduler+0x7c>)
 8003d12:	f7ff fe95 	bl	8003a40 <xTaskCreate>
 8003d16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d115      	bne.n	8003d4a <vTaskStartScheduler+0x4e>
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <vTaskStartScheduler+0x80>)
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295
 8003d36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <vTaskStartScheduler+0x84>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <vTaskStartScheduler+0x88>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d44:	f000 fdc8 	bl	80048d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d48:	e00d      	b.n	8003d66 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d109      	bne.n	8003d66 <vTaskStartScheduler+0x6a>
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	e7fe      	b.n	8003d64 <vTaskStartScheduler+0x68>
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200001b4 	.word	0x200001b4
 8003d74:	080063a8 	.word	0x080063a8
 8003d78:	08004331 	.word	0x08004331
 8003d7c:	200001b0 	.word	0x200001b0
 8003d80:	2000019c 	.word	0x2000019c
 8003d84:	20000194 	.word	0x20000194

08003d88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <vTaskSuspendAll+0x18>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <vTaskSuspendAll+0x18>)
 8003d94:	6013      	str	r3, [r2, #0]
}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	200001b8 	.word	0x200001b8

08003da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003db2:	4b41      	ldr	r3, [pc, #260]	; (8003eb8 <xTaskResumeAll+0x114>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <xTaskResumeAll+0x2a>
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	e7fe      	b.n	8003dcc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dce:	f000 fe0f 	bl	80049f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dd2:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <xTaskResumeAll+0x114>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	4a37      	ldr	r2, [pc, #220]	; (8003eb8 <xTaskResumeAll+0x114>)
 8003dda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ddc:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <xTaskResumeAll+0x114>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d161      	bne.n	8003ea8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003de4:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <xTaskResumeAll+0x118>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05d      	beq.n	8003ea8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dec:	e02e      	b.n	8003e4c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003dee:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <xTaskResumeAll+0x11c>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3318      	adds	r3, #24
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff f899 	bl	8002f32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff f894 	bl	8002f32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	2201      	movs	r2, #1
 8003e10:	409a      	lsls	r2, r3
 8003e12:	4b2c      	ldr	r3, [pc, #176]	; (8003ec4 <xTaskResumeAll+0x120>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <xTaskResumeAll+0x120>)
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4a27      	ldr	r2, [pc, #156]	; (8003ec8 <xTaskResumeAll+0x124>)
 8003e2a:	441a      	add	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4610      	mov	r0, r2
 8003e34:	f7ff f820 	bl	8002e78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3c:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <xTaskResumeAll+0x128>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d302      	bcc.n	8003e4c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003e46:	4b22      	ldr	r3, [pc, #136]	; (8003ed0 <xTaskResumeAll+0x12c>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <xTaskResumeAll+0x11c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1cc      	bne.n	8003dee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e5a:	f000 fb0d 	bl	8004478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <xTaskResumeAll+0x130>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d010      	beq.n	8003e8c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e6a:	f000 f837 	bl	8003edc <xTaskIncrementTick>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003e74:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <xTaskResumeAll+0x12c>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f1      	bne.n	8003e6a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <xTaskResumeAll+0x130>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <xTaskResumeAll+0x12c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d009      	beq.n	8003ea8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <xTaskResumeAll+0x134>)
 8003e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ea8:	f000 fdd0 	bl	8004a4c <vPortExitCritical>

	return xAlreadyYielded;
 8003eac:	68bb      	ldr	r3, [r7, #8]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200001b8 	.word	0x200001b8
 8003ebc:	20000190 	.word	0x20000190
 8003ec0:	20000150 	.word	0x20000150
 8003ec4:	20000198 	.word	0x20000198
 8003ec8:	20000094 	.word	0x20000094
 8003ecc:	20000090 	.word	0x20000090
 8003ed0:	200001a4 	.word	0x200001a4
 8003ed4:	200001a0 	.word	0x200001a0
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b50      	ldr	r3, [pc, #320]	; (8004028 <xTaskIncrementTick+0x14c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 808c 	bne.w	8004008 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003ef0:	4b4e      	ldr	r3, [pc, #312]	; (800402c <xTaskIncrementTick+0x150>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ef8:	4a4c      	ldr	r2, [pc, #304]	; (800402c <xTaskIncrementTick+0x150>)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11f      	bne.n	8003f44 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f04:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <xTaskIncrementTick+0x154>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <xTaskIncrementTick+0x46>
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	e7fe      	b.n	8003f20 <xTaskIncrementTick+0x44>
 8003f22:	4b43      	ldr	r3, [pc, #268]	; (8004030 <xTaskIncrementTick+0x154>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	4b42      	ldr	r3, [pc, #264]	; (8004034 <xTaskIncrementTick+0x158>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a40      	ldr	r2, [pc, #256]	; (8004030 <xTaskIncrementTick+0x154>)
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	4a40      	ldr	r2, [pc, #256]	; (8004034 <xTaskIncrementTick+0x158>)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b40      	ldr	r3, [pc, #256]	; (8004038 <xTaskIncrementTick+0x15c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	4a3e      	ldr	r2, [pc, #248]	; (8004038 <xTaskIncrementTick+0x15c>)
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	f000 fa9a 	bl	8004478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f44:	4b3d      	ldr	r3, [pc, #244]	; (800403c <xTaskIncrementTick+0x160>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d34d      	bcc.n	8003fea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f4e:	4b38      	ldr	r3, [pc, #224]	; (8004030 <xTaskIncrementTick+0x154>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <xTaskIncrementTick+0x80>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <xTaskIncrementTick+0x82>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f62:	4b36      	ldr	r3, [pc, #216]	; (800403c <xTaskIncrementTick+0x160>)
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295
 8003f68:	601a      	str	r2, [r3, #0]
					break;
 8003f6a:	e03e      	b.n	8003fea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f6c:	4b30      	ldr	r3, [pc, #192]	; (8004030 <xTaskIncrementTick+0x154>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d203      	bcs.n	8003f8c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f84:	4a2d      	ldr	r2, [pc, #180]	; (800403c <xTaskIncrementTick+0x160>)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6013      	str	r3, [r2, #0]
						break;
 8003f8a:	e02e      	b.n	8003fea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe ffce 	bl	8002f32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	3318      	adds	r3, #24
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe ffc5 	bl	8002f32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	2201      	movs	r2, #1
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	4b23      	ldr	r3, [pc, #140]	; (8004040 <xTaskIncrementTick+0x164>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	4a22      	ldr	r2, [pc, #136]	; (8004040 <xTaskIncrementTick+0x164>)
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <xTaskIncrementTick+0x168>)
 8003fc8:	441a      	add	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7fe ff51 	bl	8002e78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <xTaskIncrementTick+0x16c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3b4      	bcc.n	8003f4e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe8:	e7b1      	b.n	8003f4e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fea:	4b17      	ldr	r3, [pc, #92]	; (8004048 <xTaskIncrementTick+0x16c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4914      	ldr	r1, [pc, #80]	; (8004044 <xTaskIncrementTick+0x168>)
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d907      	bls.n	8004012 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004002:	2301      	movs	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e004      	b.n	8004012 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004008:	4b10      	ldr	r3, [pc, #64]	; (800404c <xTaskIncrementTick+0x170>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	4a0f      	ldr	r2, [pc, #60]	; (800404c <xTaskIncrementTick+0x170>)
 8004010:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <xTaskIncrementTick+0x174>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800401a:	2301      	movs	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800401e:	697b      	ldr	r3, [r7, #20]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	200001b8 	.word	0x200001b8
 800402c:	20000194 	.word	0x20000194
 8004030:	20000148 	.word	0x20000148
 8004034:	2000014c 	.word	0x2000014c
 8004038:	200001a8 	.word	0x200001a8
 800403c:	200001b0 	.word	0x200001b0
 8004040:	20000198 	.word	0x20000198
 8004044:	20000094 	.word	0x20000094
 8004048:	20000090 	.word	0x20000090
 800404c:	200001a0 	.word	0x200001a0
 8004050:	200001a4 	.word	0x200001a4

08004054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800405a:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <vTaskSwitchContext+0xa0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004062:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <vTaskSwitchContext+0xa4>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004068:	e03e      	b.n	80040e8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <vTaskSwitchContext+0xa4>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004070:	4b22      	ldr	r3, [pc, #136]	; (80040fc <vTaskSwitchContext+0xa8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800407e:	7afb      	ldrb	r3, [r7, #11]
 8004080:	f1c3 031f 	rsb	r3, r3, #31
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	491e      	ldr	r1, [pc, #120]	; (8004100 <vTaskSwitchContext+0xac>)
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <vTaskSwitchContext+0x5a>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	e7fe      	b.n	80040ac <vTaskSwitchContext+0x58>
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4a11      	ldr	r2, [pc, #68]	; (8004100 <vTaskSwitchContext+0xac>)
 80040ba:	4413      	add	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	3308      	adds	r3, #8
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d104      	bne.n	80040de <vTaskSwitchContext+0x8a>
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a07      	ldr	r2, [pc, #28]	; (8004104 <vTaskSwitchContext+0xb0>)
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	200001b8 	.word	0x200001b8
 80040f8:	200001a4 	.word	0x200001a4
 80040fc:	20000198 	.word	0x20000198
 8004100:	20000094 	.word	0x20000094
 8004104:	20000090 	.word	0x20000090

08004108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d109      	bne.n	800412c <vTaskPlaceOnEventList+0x24>
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e7fe      	b.n	800412a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <vTaskPlaceOnEventList+0x44>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3318      	adds	r3, #24
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7fe fec3 	bl	8002ec0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800413a:	2101      	movs	r1, #1
 800413c:	6838      	ldr	r0, [r7, #0]
 800413e:	f000 faed 	bl	800471c <prvAddCurrentTaskToDelayedList>
}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000090 	.word	0x20000090

08004150 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <xTaskRemoveFromEventList+0x2a>
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e7fe      	b.n	8004178 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	3318      	adds	r3, #24
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fed7 	bl	8002f32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004184:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <xTaskRemoveFromEventList+0xac>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d11c      	bne.n	80041c6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	3304      	adds	r3, #4
 8004190:	4618      	mov	r0, r3
 8004192:	f7fe fece 	bl	8002f32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	2201      	movs	r2, #1
 800419c:	409a      	lsls	r2, r3
 800419e:	4b18      	ldr	r3, [pc, #96]	; (8004200 <xTaskRemoveFromEventList+0xb0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	4a16      	ldr	r2, [pc, #88]	; (8004200 <xTaskRemoveFromEventList+0xb0>)
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4a13      	ldr	r2, [pc, #76]	; (8004204 <xTaskRemoveFromEventList+0xb4>)
 80041b6:	441a      	add	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f7fe fe5a 	bl	8002e78 <vListInsertEnd>
 80041c4:	e005      	b.n	80041d2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	3318      	adds	r3, #24
 80041ca:	4619      	mov	r1, r3
 80041cc:	480e      	ldr	r0, [pc, #56]	; (8004208 <xTaskRemoveFromEventList+0xb8>)
 80041ce:	f7fe fe53 	bl	8002e78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <xTaskRemoveFromEventList+0xbc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	429a      	cmp	r2, r3
 80041de:	d905      	bls.n	80041ec <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <xTaskRemoveFromEventList+0xc0>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e001      	b.n	80041f0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80041f0:	697b      	ldr	r3, [r7, #20]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	200001b8 	.word	0x200001b8
 8004200:	20000198 	.word	0x20000198
 8004204:	20000094 	.word	0x20000094
 8004208:	20000150 	.word	0x20000150
 800420c:	20000090 	.word	0x20000090
 8004210:	200001a4 	.word	0x200001a4

08004214 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <vTaskSetTimeOutState+0x22>
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e7fe      	b.n	8004234 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004236:	4b07      	ldr	r3, [pc, #28]	; (8004254 <vTaskSetTimeOutState+0x40>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <vTaskSetTimeOutState+0x44>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	605a      	str	r2, [r3, #4]
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	200001a8 	.word	0x200001a8
 8004258:	20000194 	.word	0x20000194

0800425c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <xTaskCheckForTimeOut+0x24>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e7fe      	b.n	800427e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <xTaskCheckForTimeOut+0x3e>
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	e7fe      	b.n	8004298 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800429a:	f000 fba9 	bl	80049f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800429e:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <xTaskCheckForTimeOut+0xb4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d102      	bne.n	80042b4 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e026      	b.n	8004302 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <xTaskCheckForTimeOut+0xb8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d007      	beq.n	80042d0 <xTaskCheckForTimeOut+0x74>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d302      	bcc.n	80042d0 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042ca:	2301      	movs	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e018      	b.n	8004302 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	1ad2      	subs	r2, r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d20e      	bcs.n	80042fe <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	441a      	add	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ff8e 	bl	8004214 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e001      	b.n	8004302 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 80042fe:	2301      	movs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004302:	f000 fba3 	bl	8004a4c <vPortExitCritical>

	return xReturn;
 8004306:	697b      	ldr	r3, [r7, #20]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000194 	.word	0x20000194
 8004314:	200001a8 	.word	0x200001a8

08004318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <vTaskMissedYield+0x14>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]
}
 8004322:	bf00      	nop
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	200001a4 	.word	0x200001a4

08004330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004338:	f000 f852 	bl	80043e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <prvIdleTask+0x28>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d9f9      	bls.n	8004338 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <prvIdleTask+0x2c>)
 8004346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004354:	e7f0      	b.n	8004338 <prvIdleTask+0x8>
 8004356:	bf00      	nop
 8004358:	20000094 	.word	0x20000094
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	e00c      	b.n	8004386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <prvInitialiseTaskLists+0x60>)
 8004378:	4413      	add	r3, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fd4f 	bl	8002e1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3301      	adds	r3, #1
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b06      	cmp	r3, #6
 800438a:	d9ef      	bls.n	800436c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800438c:	480d      	ldr	r0, [pc, #52]	; (80043c4 <prvInitialiseTaskLists+0x64>)
 800438e:	f7fe fd46 	bl	8002e1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004392:	480d      	ldr	r0, [pc, #52]	; (80043c8 <prvInitialiseTaskLists+0x68>)
 8004394:	f7fe fd43 	bl	8002e1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004398:	480c      	ldr	r0, [pc, #48]	; (80043cc <prvInitialiseTaskLists+0x6c>)
 800439a:	f7fe fd40 	bl	8002e1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800439e:	480c      	ldr	r0, [pc, #48]	; (80043d0 <prvInitialiseTaskLists+0x70>)
 80043a0:	f7fe fd3d 	bl	8002e1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043a4:	480b      	ldr	r0, [pc, #44]	; (80043d4 <prvInitialiseTaskLists+0x74>)
 80043a6:	f7fe fd3a 	bl	8002e1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <prvInitialiseTaskLists+0x78>)
 80043ac:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <prvInitialiseTaskLists+0x64>)
 80043ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <prvInitialiseTaskLists+0x7c>)
 80043b2:	4a05      	ldr	r2, [pc, #20]	; (80043c8 <prvInitialiseTaskLists+0x68>)
 80043b4:	601a      	str	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000094 	.word	0x20000094
 80043c4:	20000120 	.word	0x20000120
 80043c8:	20000134 	.word	0x20000134
 80043cc:	20000150 	.word	0x20000150
 80043d0:	20000164 	.word	0x20000164
 80043d4:	2000017c 	.word	0x2000017c
 80043d8:	20000148 	.word	0x20000148
 80043dc:	2000014c 	.word	0x2000014c

080043e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043e6:	e028      	b.n	800443a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80043e8:	f7ff fcce 	bl	8003d88 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80043ec:	4b17      	ldr	r3, [pc, #92]	; (800444c <prvCheckTasksWaitingTermination+0x6c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80043fc:	f7ff fcd2 	bl	8003da4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d119      	bne.n	800443a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8004406:	f000 faf3 	bl	80049f0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800440a:	4b10      	ldr	r3, [pc, #64]	; (800444c <prvCheckTasksWaitingTermination+0x6c>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	3304      	adds	r3, #4
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fd8b 	bl	8002f32 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <prvCheckTasksWaitingTermination+0x70>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3b01      	subs	r3, #1
 8004422:	4a0b      	ldr	r2, [pc, #44]	; (8004450 <prvCheckTasksWaitingTermination+0x70>)
 8004424:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <prvCheckTasksWaitingTermination+0x74>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3b01      	subs	r3, #1
 800442c:	4a09      	ldr	r2, [pc, #36]	; (8004454 <prvCheckTasksWaitingTermination+0x74>)
 800442e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8004430:	f000 fb0c 	bl	8004a4c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8004434:	6838      	ldr	r0, [r7, #0]
 8004436:	f000 f80f 	bl	8004458 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <prvCheckTasksWaitingTermination+0x74>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1d2      	bne.n	80043e8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000164 	.word	0x20000164
 8004450:	20000190 	.word	0x20000190
 8004454:	20000178 	.word	0x20000178

08004458 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fc95 	bl	8004d94 <vPortFree>
			vPortFree( pxTCB );
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fc92 	bl	8004d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800447e:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <prvResetNextTaskUnblockTime+0x44>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <prvResetNextTaskUnblockTime+0x14>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <prvResetNextTaskUnblockTime+0x16>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <prvResetNextTaskUnblockTime+0x48>)
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800449a:	e008      	b.n	80044ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800449c:	4b07      	ldr	r3, [pc, #28]	; (80044bc <prvResetNextTaskUnblockTime+0x44>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <prvResetNextTaskUnblockTime+0x48>)
 80044ac:	6013      	str	r3, [r2, #0]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20000148 	.word	0x20000148
 80044c0:	200001b0 	.word	0x200001b0

080044c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <xTaskGetSchedulerState+0x34>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044d2:	2301      	movs	r3, #1
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	e008      	b.n	80044ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044d8:	4b08      	ldr	r3, [pc, #32]	; (80044fc <xTaskGetSchedulerState+0x38>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044e0:	2302      	movs	r3, #2
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	e001      	b.n	80044ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044ea:	687b      	ldr	r3, [r7, #4]
	}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	2000019c 	.word	0x2000019c
 80044fc:	200001b8 	.word	0x200001b8

08004500 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d062      	beq.n	80045d8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004516:	4b32      	ldr	r3, [pc, #200]	; (80045e0 <vTaskPriorityInherit+0xe0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	429a      	cmp	r2, r3
 800451e:	d25b      	bcs.n	80045d8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	db06      	blt.n	8004536 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004528:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <vTaskPriorityInherit+0xe0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	f1c3 0207 	rsb	r2, r3, #7
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6959      	ldr	r1, [r3, #20]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4a27      	ldr	r2, [pc, #156]	; (80045e4 <vTaskPriorityInherit+0xe4>)
 8004548:	4413      	add	r3, r2
 800454a:	4299      	cmp	r1, r3
 800454c:	d101      	bne.n	8004552 <vTaskPriorityInherit+0x52>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <vTaskPriorityInherit+0x54>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d03a      	beq.n	80045ce <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3304      	adds	r3, #4
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fce8 	bl	8002f32 <uxListRemove>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d115      	bne.n	8004594 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	491d      	ldr	r1, [pc, #116]	; (80045e4 <vTaskPriorityInherit+0xe4>)
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <vTaskPriorityInherit+0x94>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	2201      	movs	r2, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43da      	mvns	r2, r3
 800458a:	4b17      	ldr	r3, [pc, #92]	; (80045e8 <vTaskPriorityInherit+0xe8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4013      	ands	r3, r2
 8004590:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <vTaskPriorityInherit+0xe8>)
 8004592:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <vTaskPriorityInherit+0xe0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	2201      	movs	r2, #1
 80045a4:	409a      	lsls	r2, r3
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <vTaskPriorityInherit+0xe8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <vTaskPriorityInherit+0xe8>)
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <vTaskPriorityInherit+0xe4>)
 80045be:	441a      	add	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f7fe fc56 	bl	8002e78 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045cc:	e004      	b.n	80045d8 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <vTaskPriorityInherit+0xe0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000090 	.word	0x20000090
 80045e4:	20000094 	.word	0x20000094
 80045e8:	20000198 	.word	0x20000198

080045ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d06c      	beq.n	80046dc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004602:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <xTaskPriorityDisinherit+0xfc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	429a      	cmp	r2, r3
 800460a:	d009      	beq.n	8004620 <xTaskPriorityDisinherit+0x34>
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	e7fe      	b.n	800461e <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <xTaskPriorityDisinherit+0x50>
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	e7fe      	b.n	800463a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004640:	1e5a      	subs	r2, r3, #1
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	429a      	cmp	r2, r3
 8004650:	d044      	beq.n	80046dc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004656:	2b00      	cmp	r3, #0
 8004658:	d140      	bne.n	80046dc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3304      	adds	r3, #4
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fc67 	bl	8002f32 <uxListRemove>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d115      	bne.n	8004696 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466e:	491f      	ldr	r1, [pc, #124]	; (80046ec <xTaskPriorityDisinherit+0x100>)
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <xTaskPriorityDisinherit+0xaa>
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	2201      	movs	r2, #1
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43da      	mvns	r2, r3
 800468c:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <xTaskPriorityDisinherit+0x104>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4013      	ands	r3, r2
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <xTaskPriorityDisinherit+0x104>)
 8004694:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	f1c3 0207 	rsb	r2, r3, #7
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	2201      	movs	r2, #1
 80046b0:	409a      	lsls	r2, r3
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <xTaskPriorityDisinherit+0x104>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	4a0d      	ldr	r2, [pc, #52]	; (80046f0 <xTaskPriorityDisinherit+0x104>)
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4a08      	ldr	r2, [pc, #32]	; (80046ec <xTaskPriorityDisinherit+0x100>)
 80046ca:	441a      	add	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f7fe fbd0 	bl	8002e78 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046d8:	2301      	movs	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046dc:	697b      	ldr	r3, [r7, #20]
	}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000090 	.word	0x20000090
 80046ec:	20000094 	.word	0x20000094
 80046f0:	20000198 	.word	0x20000198

080046f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80046f8:	4b07      	ldr	r3, [pc, #28]	; (8004718 <pvTaskIncrementMutexHeldCount+0x24>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <pvTaskIncrementMutexHeldCount+0x24>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004706:	3201      	adds	r2, #1
 8004708:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800470a:	4b03      	ldr	r3, [pc, #12]	; (8004718 <pvTaskIncrementMutexHeldCount+0x24>)
 800470c:	681b      	ldr	r3, [r3, #0]
	}
 800470e:	4618      	mov	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	20000090 	.word	0x20000090

0800471c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004726:	4b29      	ldr	r3, [pc, #164]	; (80047cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800472c:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3304      	adds	r3, #4
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fbfd 	bl	8002f32 <uxListRemove>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	2201      	movs	r2, #1
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4013      	ands	r3, r2
 8004752:	4a20      	ldr	r2, [pc, #128]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004754:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d10a      	bne.n	8004774 <prvAddCurrentTaskToDelayedList+0x58>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004764:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	481a      	ldr	r0, [pc, #104]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800476e:	f7fe fb83 	bl	8002e78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004772:	e026      	b.n	80047c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800477c:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	429a      	cmp	r2, r3
 800478a:	d209      	bcs.n	80047a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7fe fb91 	bl	8002ec0 <vListInsert>
}
 800479e:	e010      	b.n	80047c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047a0:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7fe fb87 	bl	8002ec0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d202      	bcs.n	80047c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047bc:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6013      	str	r3, [r2, #0]
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000194 	.word	0x20000194
 80047d0:	20000090 	.word	0x20000090
 80047d4:	20000198 	.word	0x20000198
 80047d8:	2000017c 	.word	0x2000017c
 80047dc:	2000014c 	.word	0x2000014c
 80047e0:	20000148 	.word	0x20000148
 80047e4:	200001b0 	.word	0x200001b0

080047e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3b04      	subs	r3, #4
 80047f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3b04      	subs	r3, #4
 8004806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f023 0201 	bic.w	r2, r3, #1
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3b04      	subs	r3, #4
 8004816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004818:	4a0c      	ldr	r2, [pc, #48]	; (800484c <pxPortInitialiseStack+0x64>)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3b14      	subs	r3, #20
 8004822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3b04      	subs	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f06f 0202 	mvn.w	r2, #2
 8004836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3b20      	subs	r3, #32
 800483c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	08004851 	.word	0x08004851

08004850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <prvTaskExitError+0x38>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d009      	beq.n	8004874 <prvTaskExitError+0x24>
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	e7fe      	b.n	8004872 <prvTaskExitError+0x22>
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8004886:	e7fe      	b.n	8004886 <prvTaskExitError+0x36>
 8004888:	20000008 	.word	0x20000008
 800488c:	00000000 	.word	0x00000000

08004890 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <pxCurrentTCBConst2>)
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	6808      	ldr	r0, [r1, #0]
 8004896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	f380 8809 	msr	PSP, r0
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f380 8811 	msr	BASEPRI, r0
 80048aa:	4770      	bx	lr
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst2>:
 80048b0:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80048b8:	4806      	ldr	r0, [pc, #24]	; (80048d4 <prvPortStartFirstTask+0x1c>)
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	6800      	ldr	r0, [r0, #0]
 80048be:	f380 8808 	msr	MSP, r0
 80048c2:	b662      	cpsie	i
 80048c4:	b661      	cpsie	f
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	df00      	svc	0
 80048d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048d2:	bf00      	nop
 80048d4:	e000ed08 	.word	0xe000ed08

080048d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048de:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <xPortStartScheduler+0xf4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a3b      	ldr	r2, [pc, #236]	; (80049d0 <xPortStartScheduler+0xf8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d109      	bne.n	80048fc <xPortStartScheduler+0x24>
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	e7fe      	b.n	80048fa <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048fc:	4b33      	ldr	r3, [pc, #204]	; (80049cc <xPortStartScheduler+0xf4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a34      	ldr	r2, [pc, #208]	; (80049d4 <xPortStartScheduler+0xfc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d109      	bne.n	800491a <xPortStartScheduler+0x42>
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e7fe      	b.n	8004918 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800491a:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <xPortStartScheduler+0x100>)
 800491c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	22ff      	movs	r2, #255	; 0xff
 800492a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800493c:	b2da      	uxtb	r2, r3
 800493e:	4b27      	ldr	r3, [pc, #156]	; (80049dc <xPortStartScheduler+0x104>)
 8004940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004942:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <xPortStartScheduler+0x108>)
 8004944:	2207      	movs	r2, #7
 8004946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004948:	e009      	b.n	800495e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800494a:	4b25      	ldr	r3, [pc, #148]	; (80049e0 <xPortStartScheduler+0x108>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3b01      	subs	r3, #1
 8004950:	4a23      	ldr	r2, [pc, #140]	; (80049e0 <xPortStartScheduler+0x108>)
 8004952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	b2db      	uxtb	r3, r3
 800495c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d0ef      	beq.n	800494a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800496a:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <xPortStartScheduler+0x108>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <xPortStartScheduler+0x108>)
 8004972:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004974:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <xPortStartScheduler+0x108>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800497c:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <xPortStartScheduler+0x108>)
 800497e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004988:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <xPortStartScheduler+0x10c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <xPortStartScheduler+0x10c>)
 800498e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004992:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <xPortStartScheduler+0x10c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <xPortStartScheduler+0x10c>)
 800499a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800499e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049a0:	f000 f8d2 	bl	8004b48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <xPortStartScheduler+0x110>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049aa:	f000 f8e9 	bl	8004b80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049ae:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <xPortStartScheduler+0x114>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a0e      	ldr	r2, [pc, #56]	; (80049ec <xPortStartScheduler+0x114>)
 80049b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049ba:	f7ff ff7d 	bl	80048b8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80049be:	f7ff ff47 	bl	8004850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	e000ed00 	.word	0xe000ed00
 80049d0:	410fc271 	.word	0x410fc271
 80049d4:	410fc270 	.word	0x410fc270
 80049d8:	e000e400 	.word	0xe000e400
 80049dc:	200001bc 	.word	0x200001bc
 80049e0:	200001c0 	.word	0x200001c0
 80049e4:	e000ed20 	.word	0xe000ed20
 80049e8:	20000008 	.word	0x20000008
 80049ec:	e000ef34 	.word	0xe000ef34

080049f0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <vPortEnterCritical+0x54>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	4a0d      	ldr	r2, [pc, #52]	; (8004a44 <vPortEnterCritical+0x54>)
 8004a10:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <vPortEnterCritical+0x54>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10e      	bne.n	8004a38 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <vPortEnterCritical+0x58>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <vPortEnterCritical+0x48>
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	e7fe      	b.n	8004a36 <vPortEnterCritical+0x46>
	}
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	20000008 	.word	0x20000008
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a52:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <vPortExitCritical+0x4c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <vPortExitCritical+0x22>
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	e7fe      	b.n	8004a6c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <vPortExitCritical+0x4c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <vPortExitCritical+0x4c>)
 8004a76:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <vPortExitCritical+0x4c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d104      	bne.n	8004a8a <vPortExitCritical+0x3e>
 8004a80:	2300      	movs	r3, #0
 8004a82:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000008 	.word	0x20000008
 8004a9c:	00000000 	.word	0x00000000

08004aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004aa0:	f3ef 8009 	mrs	r0, PSP
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <pxCurrentTCBConst>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	f01e 0f10 	tst.w	lr, #16
 8004ab0:	bf08      	it	eq
 8004ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aba:	6010      	str	r0, [r2, #0]
 8004abc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ac4:	f380 8811 	msr	BASEPRI, r0
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f7ff fac0 	bl	8004054 <vTaskSwitchContext>
 8004ad4:	f04f 0000 	mov.w	r0, #0
 8004ad8:	f380 8811 	msr	BASEPRI, r0
 8004adc:	bc08      	pop	{r3}
 8004ade:	6819      	ldr	r1, [r3, #0]
 8004ae0:	6808      	ldr	r0, [r1, #0]
 8004ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae6:	f01e 0f10 	tst.w	lr, #16
 8004aea:	bf08      	it	eq
 8004aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004af0:	f380 8809 	msr	PSP, r0
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	f3af 8000 	nop.w

08004b00 <pxCurrentTCBConst>:
 8004b00:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop

08004b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b20:	f7ff f9dc 	bl	8003edc <xTaskIncrementTick>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <xPortSysTickHandler+0x3c>)
 8004b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	2300      	movs	r3, #0
 8004b34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	e000ed04 	.word	0xe000ed04

08004b48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <vPortSetupTimerInterrupt+0x28>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <vPortSetupTimerInterrupt+0x2c>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	4a07      	ldr	r2, [pc, #28]	; (8004b78 <vPortSetupTimerInterrupt+0x30>)
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <vPortSetupTimerInterrupt+0x34>)
 8004b60:	2207      	movs	r2, #7
 8004b62:	601a      	str	r2, [r3, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	2000000c 	.word	0x2000000c
 8004b74:	10624dd3 	.word	0x10624dd3
 8004b78:	e000e014 	.word	0xe000e014
 8004b7c:	e000e010 	.word	0xe000e010

08004b80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b90 <vPortEnableVFP+0x10>
 8004b84:	6801      	ldr	r1, [r0, #0]
 8004b86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b8a:	6001      	str	r1, [r0, #0]
 8004b8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b8e:	bf00      	nop
 8004b90:	e000ed88 	.word	0xe000ed88

08004b94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004b9a:	f3ef 8305 	mrs	r3, IPSR
 8004b9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b0f      	cmp	r3, #15
 8004ba4:	d913      	bls.n	8004bce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ba6:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <vPortValidateInterruptPriority+0x6c>)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bb0:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <vPortValidateInterruptPriority+0x70>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	7afa      	ldrb	r2, [r7, #11]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d209      	bcs.n	8004bce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	e7fe      	b.n	8004bcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <vPortValidateInterruptPriority+0x74>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <vPortValidateInterruptPriority+0x78>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d909      	bls.n	8004bf2 <vPortValidateInterruptPriority+0x5e>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	e7fe      	b.n	8004bf0 <vPortValidateInterruptPriority+0x5c>
	}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	e000e3f0 	.word	0xe000e3f0
 8004c04:	200001bc 	.word	0x200001bc
 8004c08:	e000ed0c 	.word	0xe000ed0c
 8004c0c:	200001c0 	.word	0x200001c0

08004c10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	; 0x28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c1c:	f7ff f8b4 	bl	8003d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c20:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <pvPortMalloc+0x170>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c28:	f000 f90c 	bl	8004e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c2c:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <pvPortMalloc+0x174>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 808c 	bne.w	8004d52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01c      	beq.n	8004c7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004c40:	2208      	movs	r2, #8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d013      	beq.n	8004c7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f023 0307 	bic.w	r3, r3, #7
 8004c58:	3308      	adds	r3, #8
 8004c5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <pvPortMalloc+0x6a>
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e7fe      	b.n	8004c78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d068      	beq.n	8004d52 <pvPortMalloc+0x142>
 8004c80:	4b41      	ldr	r3, [pc, #260]	; (8004d88 <pvPortMalloc+0x178>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d863      	bhi.n	8004d52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c8a:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <pvPortMalloc+0x17c>)
 8004c8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c8e:	4b3f      	ldr	r3, [pc, #252]	; (8004d8c <pvPortMalloc+0x17c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c94:	e004      	b.n	8004ca0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d903      	bls.n	8004cb2 <pvPortMalloc+0xa2>
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f1      	bne.n	8004c96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cb2:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <pvPortMalloc+0x170>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d04a      	beq.n	8004d52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	4413      	add	r3, r2
 8004cc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	1ad2      	subs	r2, r2, r3
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d91e      	bls.n	8004d1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <pvPortMalloc+0xf4>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e7fe      	b.n	8004d02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d16:	69b8      	ldr	r0, [r7, #24]
 8004d18:	f000 f8f6 	bl	8004f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	; (8004d88 <pvPortMalloc+0x178>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <pvPortMalloc+0x178>)
 8004d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d2a:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <pvPortMalloc+0x178>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <pvPortMalloc+0x180>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d203      	bcs.n	8004d3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <pvPortMalloc+0x178>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <pvPortMalloc+0x180>)
 8004d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <pvPortMalloc+0x174>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d52:	f7ff f827 	bl	8003da4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d009      	beq.n	8004d74 <pvPortMalloc+0x164>
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	e7fe      	b.n	8004d72 <pvPortMalloc+0x162>
	return pvReturn;
 8004d74:	69fb      	ldr	r3, [r7, #28]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3728      	adds	r7, #40	; 0x28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	2000210c 	.word	0x2000210c
 8004d84:	20002118 	.word	0x20002118
 8004d88:	20002110 	.word	0x20002110
 8004d8c:	20002104 	.word	0x20002104
 8004d90:	20002114 	.word	0x20002114

08004d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d046      	beq.n	8004e34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004da6:	2308      	movs	r3, #8
 8004da8:	425b      	negs	r3, r3
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4413      	add	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <vPortFree+0xa8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <vPortFree+0x42>
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e7fe      	b.n	8004dd4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <vPortFree+0x5e>
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	e7fe      	b.n	8004df0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <vPortFree+0xa8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d019      	beq.n	8004e34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d115      	bne.n	8004e34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <vPortFree+0xa8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	401a      	ands	r2, r3
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e18:	f7fe ffb6 	bl	8003d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <vPortFree+0xac>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4413      	add	r3, r2
 8004e26:	4a06      	ldr	r2, [pc, #24]	; (8004e40 <vPortFree+0xac>)
 8004e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e2a:	6938      	ldr	r0, [r7, #16]
 8004e2c:	f000 f86c 	bl	8004f08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e30:	f7fe ffb8 	bl	8003da4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e34:	bf00      	nop
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20002118 	.word	0x20002118
 8004e40:	20002110 	.word	0x20002110

08004e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e4a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e50:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <prvHeapInit+0xac>)
 8004e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3307      	adds	r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0307 	bic.w	r3, r3, #7
 8004e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	4a1f      	ldr	r2, [pc, #124]	; (8004ef0 <prvHeapInit+0xac>)
 8004e74:	4413      	add	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <prvHeapInit+0xb0>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e82:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <prvHeapInit+0xb0>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e90:	2208      	movs	r2, #8
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0307 	bic.w	r3, r3, #7
 8004e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <prvHeapInit+0xb4>)
 8004ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <prvHeapInit+0xb4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004eae:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <prvHeapInit+0xb4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	1ad2      	subs	r2, r2, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <prvHeapInit+0xb4>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <prvHeapInit+0xb8>)
 8004ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <prvHeapInit+0xbc>)
 8004eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <prvHeapInit+0xc0>)
 8004ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	200001c4 	.word	0x200001c4
 8004ef4:	20002104 	.word	0x20002104
 8004ef8:	2000210c 	.word	0x2000210c
 8004efc:	20002114 	.word	0x20002114
 8004f00:	20002110 	.word	0x20002110
 8004f04:	20002118 	.word	0x20002118

08004f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f10:	4b28      	ldr	r3, [pc, #160]	; (8004fb4 <prvInsertBlockIntoFreeList+0xac>)
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e002      	b.n	8004f1c <prvInsertBlockIntoFreeList+0x14>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d8f7      	bhi.n	8004f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	4413      	add	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d108      	bne.n	8004f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	441a      	add	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	441a      	add	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d118      	bne.n	8004f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d00d      	beq.n	8004f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	441a      	add	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	e008      	b.n	8004f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f86:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e003      	b.n	8004f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d002      	beq.n	8004fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20002104 	.word	0x20002104
 8004fb8:	2000210c 	.word	0x2000210c

08004fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004fbc:	b5b0      	push	{r4, r5, r7, lr}
 8004fbe:	b0a4      	sub	sp, #144	; 0x90
 8004fc0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004fc2:	f7fb f95d 	bl	8000280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fc6:	f000 f8d1 	bl	800516c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fca:	f000 f97f 	bl	80052cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004fce:	f000 f94d 	bl	800526c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8004fd2:	f000 f90d 	bl	80051f0 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MtxAcelerador */
  osMutexDef(MtxAcelerador);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  MtxAceleradorHandle = osMutexCreate(osMutex(MtxAcelerador));
 8004fdc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fd fe76 	bl	8002cd2 <osMutexCreate>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	4b4d      	ldr	r3, [pc, #308]	; (8005120 <main+0x164>)
 8004fea:	601a      	str	r2, [r3, #0]

  /* definition and creation of MtxOxg_Temp */
  osMutexDef(MtxOxg_Temp);
 8004fec:	2300      	movs	r3, #0
 8004fee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  MtxOxg_TempHandle = osMutexCreate(osMutex(MtxOxg_Temp));
 8004ff2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fd fe6b 	bl	8002cd2 <osMutexCreate>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b49      	ldr	r3, [pc, #292]	; (8005124 <main+0x168>)
 8005000:	601a      	str	r2, [r3, #0]

  /* definition and creation of MtxQntCombustivel */
  osMutexDef(MtxQntCombustivel);
 8005002:	2300      	movs	r3, #0
 8005004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MtxQntCombustivelHandle = osMutexCreate(osMutex(MtxQntCombustivel));
 8005008:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800500c:	4618      	mov	r0, r3
 800500e:	f7fd fe60 	bl	8002cd2 <osMutexCreate>
 8005012:	4602      	mov	r2, r0
 8005014:	4b44      	ldr	r3, [pc, #272]	; (8005128 <main+0x16c>)
 8005016:	601a      	str	r2, [r3, #0]

  /* definition and creation of MtxInformacoes */
  osMutexDef(MtxInformacoes);
 8005018:	2300      	movs	r3, #0
 800501a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  MtxInformacoesHandle = osMutexCreate(osMutex(MtxInformacoes));
 800501e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd fe55 	bl	8002cd2 <osMutexCreate>
 8005028:	4602      	mov	r2, r0
 800502a:	4b40      	ldr	r3, [pc, #256]	; (800512c <main+0x170>)
 800502c:	601a      	str	r2, [r3, #0]

  /* definition and creation of MtxConstantes */
  osMutexDef(MtxConstantes);
 800502e:	2300      	movs	r3, #0
 8005030:	67fb      	str	r3, [r7, #124]	; 0x7c
  MtxConstantesHandle = osMutexCreate(osMutex(MtxConstantes));
 8005032:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005036:	4618      	mov	r0, r3
 8005038:	f7fd fe4b 	bl	8002cd2 <osMutexCreate>
 800503c:	4602      	mov	r2, r0
 800503e:	4b3c      	ldr	r3, [pc, #240]	; (8005130 <main+0x174>)
 8005040:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskLeituraAcel */
  osThreadDef(taskLeituraAcel, StartLeituraAcel, osPriorityHigh, 0, 128);
 8005042:	4b3c      	ldr	r3, [pc, #240]	; (8005134 <main+0x178>)
 8005044:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8005048:	461d      	mov	r5, r3
 800504a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800504c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800504e:	682b      	ldr	r3, [r5, #0]
 8005050:	6023      	str	r3, [r4, #0]
  taskLeituraAcelHandle = osThreadCreate(osThread(taskLeituraAcel), NULL);
 8005052:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005056:	2100      	movs	r1, #0
 8005058:	4618      	mov	r0, r3
 800505a:	f7fd fdff 	bl	8002c5c <osThreadCreate>
 800505e:	4602      	mov	r2, r0
 8005060:	4b35      	ldr	r3, [pc, #212]	; (8005138 <main+0x17c>)
 8005062:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskLeituraSens */
  osThreadDef(taskLeituraSens, StartLeituraSens, osPriorityNormal, 0, 128);
 8005064:	4b35      	ldr	r3, [pc, #212]	; (800513c <main+0x180>)
 8005066:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800506a:	461d      	mov	r5, r3
 800506c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800506e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	6023      	str	r3, [r4, #0]
  taskLeituraSensHandle = osThreadCreate(osThread(taskLeituraSens), NULL);
 8005074:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f7fd fdee 	bl	8002c5c <osThreadCreate>
 8005080:	4602      	mov	r2, r0
 8005082:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <main+0x184>)
 8005084:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskProcessamen */
  osThreadDef(taskProcessamen, StartProcessamen, osPriorityHigh, 0, 128);
 8005086:	4b2f      	ldr	r3, [pc, #188]	; (8005144 <main+0x188>)
 8005088:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800508c:	461d      	mov	r5, r3
 800508e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005092:	682b      	ldr	r3, [r5, #0]
 8005094:	6023      	str	r3, [r4, #0]
  taskProcessamenHandle = osThreadCreate(osThread(taskProcessamen), NULL);
 8005096:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f7fd fddd 	bl	8002c5c <osThreadCreate>
 80050a2:	4602      	mov	r2, r0
 80050a4:	4b28      	ldr	r3, [pc, #160]	; (8005148 <main+0x18c>)
 80050a6:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskAcionamento */
  osThreadDef(taskAcionamento, StartAcionamento, osPriorityHigh, 0, 128);
 80050a8:	4b28      	ldr	r3, [pc, #160]	; (800514c <main+0x190>)
 80050aa:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80050ae:	461d      	mov	r5, r3
 80050b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	6023      	str	r3, [r4, #0]
  taskAcionamentoHandle = osThreadCreate(osThread(taskAcionamento), NULL);
 80050b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050bc:	2100      	movs	r1, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fd fdcc 	bl	8002c5c <osThreadCreate>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b22      	ldr	r3, [pc, #136]	; (8005150 <main+0x194>)
 80050c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskEscritaMemo */
  osThreadDef(taskEscritaMemo, StartEscritaMemoria, osPriorityIdle, 0, 128);
 80050ca:	4b22      	ldr	r3, [pc, #136]	; (8005154 <main+0x198>)
 80050cc:	f107 0418 	add.w	r4, r7, #24
 80050d0:	461d      	mov	r5, r3
 80050d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050d6:	682b      	ldr	r3, [r5, #0]
 80050d8:	6023      	str	r3, [r4, #0]
  taskEscritaMemoHandle = osThreadCreate(osThread(taskEscritaMemo), NULL);
 80050da:	f107 0318 	add.w	r3, r7, #24
 80050de:	2100      	movs	r1, #0
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fd fdbb 	bl	8002c5c <osThreadCreate>
 80050e6:	4602      	mov	r2, r0
 80050e8:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <main+0x19c>)
 80050ea:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskEscritaDisp */
  osThreadDef(taskEscritaDisp, StartEscritaDisplay, osPriorityIdle, 0, 128);
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <main+0x1a0>)
 80050ee:	1d3c      	adds	r4, r7, #4
 80050f0:	461d      	mov	r5, r3
 80050f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050f6:	682b      	ldr	r3, [r5, #0]
 80050f8:	6023      	str	r3, [r4, #0]
  taskEscritaDispHandle = osThreadCreate(osThread(taskEscritaDisp), NULL);
 80050fa:	1d3b      	adds	r3, r7, #4
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fd fdac 	bl	8002c5c <osThreadCreate>
 8005104:	4602      	mov	r2, r0
 8005106:	4b16      	ldr	r3, [pc, #88]	; (8005160 <main+0x1a4>)
 8005108:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
//  LCD_Init();
  HAL_UART_Transmit(&huart2, "Olar", 4, 1000);
 800510a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800510e:	2204      	movs	r2, #4
 8005110:	4914      	ldr	r1, [pc, #80]	; (8005164 <main+0x1a8>)
 8005112:	4815      	ldr	r0, [pc, #84]	; (8005168 <main+0x1ac>)
 8005114:	f7fd fa48 	bl	80025a8 <HAL_UART_Transmit>
//  LCD_Write_String(0, 0, "Teste");
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005118:	f7fd fd99 	bl	8002c4e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800511c:	e7fe      	b.n	800511c <main+0x160>
 800511e:	bf00      	nop
 8005120:	20002188 	.word	0x20002188
 8005124:	2000216c 	.word	0x2000216c
 8005128:	20002194 	.word	0x20002194
 800512c:	2000218c 	.word	0x2000218c
 8005130:	20002198 	.word	0x20002198
 8005134:	080063c8 	.word	0x080063c8
 8005138:	20002178 	.word	0x20002178
 800513c:	080063ec 	.word	0x080063ec
 8005140:	20002184 	.word	0x20002184
 8005144:	08006410 	.word	0x08006410
 8005148:	20002170 	.word	0x20002170
 800514c:	08006434 	.word	0x08006434
 8005150:	20002174 	.word	0x20002174
 8005154:	08006458 	.word	0x08006458
 8005158:	20002274 	.word	0x20002274
 800515c:	0800647c 	.word	0x0800647c
 8005160:	20002180 	.word	0x20002180
 8005164:	080063b0 	.word	0x080063b0
 8005168:	20002204 	.word	0x20002204

0800516c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b090      	sub	sp, #64	; 0x40
 8005170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005172:	f107 0318 	add.w	r3, r7, #24
 8005176:	2228      	movs	r2, #40	; 0x28
 8005178:	2100      	movs	r1, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fd03 	bl	8005b86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005180:	1d3b      	adds	r3, r7, #4
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	605a      	str	r2, [r3, #4]
 8005188:	609a      	str	r2, [r3, #8]
 800518a:	60da      	str	r2, [r3, #12]
 800518c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800518e:	2302      	movs	r3, #2
 8005190:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005192:	2301      	movs	r3, #1
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005196:	2310      	movs	r3, #16
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800519a:	2302      	movs	r3, #2
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800519e:	2300      	movs	r3, #0
 80051a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80051a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051a8:	f107 0318 	add.w	r3, r7, #24
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fb fb63 	bl	8000878 <HAL_RCC_OscConfig>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80051b8:	f000 fb32 	bl	8005820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051bc:	230f      	movs	r3, #15
 80051be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051c0:	2302      	movs	r3, #2
 80051c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	2102      	movs	r1, #2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fc fa3c 	bl	8001654 <HAL_RCC_ClockConfig>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80051e2:	f000 fb1d 	bl	8005820 <Error_Handler>
  }
}
 80051e6:	bf00      	nop
 80051e8:	3740      	adds	r7, #64	; 0x40
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80051f4:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <MX_SPI1_Init+0x74>)
 80051f6:	4a1c      	ldr	r2, [pc, #112]	; (8005268 <MX_SPI1_Init+0x78>)
 80051f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80051fa:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <MX_SPI1_Init+0x74>)
 80051fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005202:	4b18      	ldr	r3, [pc, #96]	; (8005264 <MX_SPI1_Init+0x74>)
 8005204:	2200      	movs	r2, #0
 8005206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005208:	4b16      	ldr	r3, [pc, #88]	; (8005264 <MX_SPI1_Init+0x74>)
 800520a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800520e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005210:	4b14      	ldr	r3, [pc, #80]	; (8005264 <MX_SPI1_Init+0x74>)
 8005212:	2200      	movs	r2, #0
 8005214:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <MX_SPI1_Init+0x74>)
 8005218:	2200      	movs	r2, #0
 800521a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <MX_SPI1_Init+0x74>)
 800521e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005222:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005224:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <MX_SPI1_Init+0x74>)
 8005226:	2238      	movs	r2, #56	; 0x38
 8005228:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800522a:	4b0e      	ldr	r3, [pc, #56]	; (8005264 <MX_SPI1_Init+0x74>)
 800522c:	2200      	movs	r2, #0
 800522e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <MX_SPI1_Init+0x74>)
 8005232:	2200      	movs	r2, #0
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <MX_SPI1_Init+0x74>)
 8005238:	2200      	movs	r2, #0
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <MX_SPI1_Init+0x74>)
 800523e:	2207      	movs	r2, #7
 8005240:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <MX_SPI1_Init+0x74>)
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005248:	4b06      	ldr	r3, [pc, #24]	; (8005264 <MX_SPI1_Init+0x74>)
 800524a:	2208      	movs	r2, #8
 800524c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800524e:	4805      	ldr	r0, [pc, #20]	; (8005264 <MX_SPI1_Init+0x74>)
 8005250:	f7fc fc36 	bl	8001ac0 <HAL_SPI_Init>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800525a:	f000 fae1 	bl	8005820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	2000219c 	.word	0x2000219c
 8005268:	40013000 	.word	0x40013000

0800526c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005270:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <MX_USART2_UART_Init+0x5c>)
 8005274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8005276:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 8005278:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800527c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800527e:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 8005280:	2200      	movs	r2, #0
 8005282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005284:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 8005286:	2200      	movs	r2, #0
 8005288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800528a:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 800528c:	2200      	movs	r2, #0
 800528e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005290:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 8005292:	220c      	movs	r2, #12
 8005294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 8005298:	2200      	movs	r2, #0
 800529a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800529c:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 800529e:	2200      	movs	r2, #0
 80052a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052a2:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052ae:	4805      	ldr	r0, [pc, #20]	; (80052c4 <MX_USART2_UART_Init+0x58>)
 80052b0:	f7fd f929 	bl	8002506 <HAL_UART_Init>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80052ba:	f000 fab1 	bl	8005820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20002204 	.word	0x20002204
 80052c8:	40004400 	.word	0x40004400

080052cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d2:	f107 0314 	add.w	r3, r7, #20
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	60da      	str	r2, [r3, #12]
 80052e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052e2:	4b41      	ldr	r3, [pc, #260]	; (80053e8 <MX_GPIO_Init+0x11c>)
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	4a40      	ldr	r2, [pc, #256]	; (80053e8 <MX_GPIO_Init+0x11c>)
 80052e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ec:	6153      	str	r3, [r2, #20]
 80052ee:	4b3e      	ldr	r3, [pc, #248]	; (80053e8 <MX_GPIO_Init+0x11c>)
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80052fa:	4b3b      	ldr	r3, [pc, #236]	; (80053e8 <MX_GPIO_Init+0x11c>)
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	4a3a      	ldr	r2, [pc, #232]	; (80053e8 <MX_GPIO_Init+0x11c>)
 8005300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005304:	6153      	str	r3, [r2, #20]
 8005306:	4b38      	ldr	r3, [pc, #224]	; (80053e8 <MX_GPIO_Init+0x11c>)
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005312:	4b35      	ldr	r3, [pc, #212]	; (80053e8 <MX_GPIO_Init+0x11c>)
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4a34      	ldr	r2, [pc, #208]	; (80053e8 <MX_GPIO_Init+0x11c>)
 8005318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800531c:	6153      	str	r3, [r2, #20]
 800531e:	4b32      	ldr	r3, [pc, #200]	; (80053e8 <MX_GPIO_Init+0x11c>)
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800532a:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <MX_GPIO_Init+0x11c>)
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	4a2e      	ldr	r2, [pc, #184]	; (80053e8 <MX_GPIO_Init+0x11c>)
 8005330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005334:	6153      	str	r3, [r2, #20]
 8005336:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <MX_GPIO_Init+0x11c>)
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800533e:	607b      	str	r3, [r7, #4]
 8005340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_OXIGENIO_Pin|EN_ACELERADOR_Pin|EN_MEMORIA_Pin|LCD_CE_Pin 
 8005342:	2200      	movs	r2, #0
 8005344:	f44f 6156 	mov.w	r1, #3424	; 0xd60
 8005348:	4828      	ldr	r0, [pc, #160]	; (80053ec <MX_GPIO_Init+0x120>)
 800534a:	f7fb fa7d 	bl	8000848 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800534e:	2200      	movs	r2, #0
 8005350:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8005354:	4826      	ldr	r0, [pc, #152]	; (80053f0 <MX_GPIO_Init+0x124>)
 8005356:	f7fb fa77 	bl	8000848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|EN_TEMPERATURA_Pin, GPIO_PIN_RESET);
 800535a:	2200      	movs	r2, #0
 800535c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005364:	f7fb fa70 	bl	8000848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800536c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <MX_GPIO_Init+0x128>)
 8005370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005376:	f107 0314 	add.w	r3, r7, #20
 800537a:	4619      	mov	r1, r3
 800537c:	481b      	ldr	r0, [pc, #108]	; (80053ec <MX_GPIO_Init+0x120>)
 800537e:	f7fb f8ed 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_OXIGENIO_Pin EN_ACELERADOR_Pin EN_MEMORIA_Pin LCD_CE_Pin 
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = EN_OXIGENIO_Pin|EN_ACELERADOR_Pin|EN_MEMORIA_Pin|LCD_CE_Pin 
 8005382:	f44f 6356 	mov.w	r3, #3424	; 0xd60
 8005386:	617b      	str	r3, [r7, #20]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005388:	2301      	movs	r3, #1
 800538a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005390:	2300      	movs	r3, #0
 8005392:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005394:	f107 0314 	add.w	r3, r7, #20
 8005398:	4619      	mov	r1, r3
 800539a:	4814      	ldr	r0, [pc, #80]	; (80053ec <MX_GPIO_Init+0x120>)
 800539c:	f7fb f8de 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LCD_RST_Pin;
 80053a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80053a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053a6:	2301      	movs	r3, #1
 80053a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ae:	2300      	movs	r3, #0
 80053b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b2:	f107 0314 	add.w	r3, r7, #20
 80053b6:	4619      	mov	r1, r3
 80053b8:	480d      	ldr	r0, [pc, #52]	; (80053f0 <MX_GPIO_Init+0x124>)
 80053ba:	f7fb f8cf 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin EN_TEMPERATURA_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|EN_TEMPERATURA_Pin;
 80053be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80053c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053c4:	2301      	movs	r3, #1
 80053c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053cc:	2300      	movs	r3, #0
 80053ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053d0:	f107 0314 	add.w	r3, r7, #20
 80053d4:	4619      	mov	r1, r3
 80053d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053da:	f7fb f8bf 	bl	800055c <HAL_GPIO_Init>

}
 80053de:	bf00      	nop
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40021000 	.word	0x40021000
 80053ec:	48000800 	.word	0x48000800
 80053f0:	48000400 	.word	0x48000400
 80053f4:	10210000 	.word	0x10210000

080053f8 <StartLeituraAcel>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartLeituraAcel */
void StartLeituraAcel(void const * argument)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b090      	sub	sp, #64	; 0x40
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t aceleradorLocal = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t transmissao[50];
  /* Infinite loop */
  for(;;)
  {
	  aceleradorLocal = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	  HAL_GPIO_WritePin(EN_ACELERADOR_GPIO_Port, EN_ACELERADOR_Pin, 0);
 800540c:	2200      	movs	r2, #0
 800540e:	2140      	movs	r1, #64	; 0x40
 8005410:	481d      	ldr	r0, [pc, #116]	; (8005488 <StartLeituraAcel+0x90>)
 8005412:	f7fb fa19 	bl	8000848 <HAL_GPIO_WritePin>

	  HAL_SPI_Receive(&hspi1, &aceleradorLocal, 1, 1000);
 8005416:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800541a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800541e:	2201      	movs	r2, #1
 8005420:	481a      	ldr	r0, [pc, #104]	; (800548c <StartLeituraAcel+0x94>)
 8005422:	f7fc fbd7 	bl	8001bd4 <HAL_SPI_Receive>

	  HAL_GPIO_WritePin(EN_ACELERADOR_GPIO_Port, EN_ACELERADOR_Pin, 1);
 8005426:	2201      	movs	r2, #1
 8005428:	2140      	movs	r1, #64	; 0x40
 800542a:	4817      	ldr	r0, [pc, #92]	; (8005488 <StartLeituraAcel+0x90>)
 800542c:	f7fb fa0c 	bl	8000848 <HAL_GPIO_WritePin>



	  sprintf(transmissao, "valor Acelerador lido: %d\r\n", aceleradorLocal);
 8005430:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005434:	461a      	mov	r2, r3
 8005436:	f107 030c 	add.w	r3, r7, #12
 800543a:	4915      	ldr	r1, [pc, #84]	; (8005490 <StartLeituraAcel+0x98>)
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fbab 	bl	8005b98 <siprintf>


	  HAL_UART_Transmit(&huart2, transmissao, strlen(transmissao), 1000);
 8005442:	f107 030c 	add.w	r3, r7, #12
 8005446:	4618      	mov	r0, r3
 8005448:	f7fa fec2 	bl	80001d0 <strlen>
 800544c:	4603      	mov	r3, r0
 800544e:	b29a      	uxth	r2, r3
 8005450:	f107 010c 	add.w	r1, r7, #12
 8005454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005458:	480e      	ldr	r0, [pc, #56]	; (8005494 <StartLeituraAcel+0x9c>)
 800545a:	f7fd f8a5 	bl	80025a8 <HAL_UART_Transmit>
	  osMutexWait(MtxAceleradorHandle,1000);
 800545e:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <StartLeituraAcel+0xa0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005466:	4618      	mov	r0, r3
 8005468:	f7fd fc40 	bl	8002cec <osMutexWait>
	  aceleradorGlobal = aceleradorLocal;
 800546c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <StartLeituraAcel+0xa4>)
 8005472:	701a      	strb	r2, [r3, #0]
	  osMutexRelease(MtxAceleradorHandle);
 8005474:	4b08      	ldr	r3, [pc, #32]	; (8005498 <StartLeituraAcel+0xa0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f7fd fc87 	bl	8002d8c <osMutexRelease>

	  HAL_Delay(10);
 800547e:	200a      	movs	r0, #10
 8005480:	f7fa ff64 	bl	800034c <HAL_Delay>
  {
 8005484:	e7bf      	b.n	8005406 <StartLeituraAcel+0xe>
 8005486:	bf00      	nop
 8005488:	48000800 	.word	0x48000800
 800548c:	2000219c 	.word	0x2000219c
 8005490:	08006490 	.word	0x08006490
 8005494:	20002204 	.word	0x20002204
 8005498:	20002188 	.word	0x20002188
 800549c:	20002278 	.word	0x20002278

080054a0 <StartLeituraSens>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeituraSens */
void StartLeituraSens(void const * argument)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b0c4      	sub	sp, #272	; 0x110
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	6018      	str	r0, [r3, #0]
	uint8_t sensorOxg_TempLocal[2];
	uint8_t transmissao[256];
  /* Infinite loop */
  for(;;)
  {
	  sensorOxg_TempLocal[0] = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	  sensorOxg_TempLocal[1] = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

	  HAL_GPIO_WritePin(EN_OXIGENIO_GPIO_Port, EN_OXIGENIO_Pin, 1);
 80054b6:	2201      	movs	r2, #1
 80054b8:	2120      	movs	r1, #32
 80054ba:	4836      	ldr	r0, [pc, #216]	; (8005594 <StartLeituraSens+0xf4>)
 80054bc:	f7fb f9c4 	bl	8000848 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN_OXIGENIO_GPIO_Port, EN_OXIGENIO_Pin, 0);
 80054c0:	2200      	movs	r2, #0
 80054c2:	2120      	movs	r1, #32
 80054c4:	4833      	ldr	r0, [pc, #204]	; (8005594 <StartLeituraSens+0xf4>)
 80054c6:	f7fb f9bf 	bl	8000848 <HAL_GPIO_WritePin>

	  HAL_SPI_Receive(&hspi1, &sensorOxg_TempLocal[0], 1, 1000);
 80054ca:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80054ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054d2:	2201      	movs	r2, #1
 80054d4:	4830      	ldr	r0, [pc, #192]	; (8005598 <StartLeituraSens+0xf8>)
 80054d6:	f7fc fb7d 	bl	8001bd4 <HAL_SPI_Receive>

	  sprintf (transmissao, "valor Oxigenio lido: %d\r\n", sensorOxg_TempLocal[0]);
 80054da:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80054de:	461a      	mov	r2, r3
 80054e0:	f107 030c 	add.w	r3, r7, #12
 80054e4:	492d      	ldr	r1, [pc, #180]	; (800559c <StartLeituraSens+0xfc>)
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fb56 	bl	8005b98 <siprintf>
	  HAL_UART_Transmit(&huart2, transmissao, strlen(transmissao), 1000);
 80054ec:	f107 030c 	add.w	r3, r7, #12
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fa fe6d 	bl	80001d0 <strlen>
 80054f6:	4603      	mov	r3, r0
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	f107 010c 	add.w	r1, r7, #12
 80054fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005502:	4827      	ldr	r0, [pc, #156]	; (80055a0 <StartLeituraSens+0x100>)
 8005504:	f7fd f850 	bl	80025a8 <HAL_UART_Transmit>



	  HAL_GPIO_WritePin(EN_TEMPERATURA_GPIO_Port, EN_TEMPERATURA_Pin, 1);
 8005508:	2201      	movs	r2, #1
 800550a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800550e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005512:	f7fb f999 	bl	8000848 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN_TEMPERATURA_GPIO_Port, EN_TEMPERATURA_Pin, 0);
 8005516:	2200      	movs	r2, #0
 8005518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800551c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005520:	f7fb f992 	bl	8000848 <HAL_GPIO_WritePin>

	  HAL_SPI_Receive(&hspi1, &sensorOxg_TempLocal[1], 1, 1000);
 8005524:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8005528:	1c59      	adds	r1, r3, #1
 800552a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800552e:	2201      	movs	r2, #1
 8005530:	4819      	ldr	r0, [pc, #100]	; (8005598 <StartLeituraSens+0xf8>)
 8005532:	f7fc fb4f 	bl	8001bd4 <HAL_SPI_Receive>

	  sprintf (transmissao, "valor Temperatura lido: %d\r\n", sensorOxg_TempLocal[1]);
 8005536:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800553a:	461a      	mov	r2, r3
 800553c:	f107 030c 	add.w	r3, r7, #12
 8005540:	4918      	ldr	r1, [pc, #96]	; (80055a4 <StartLeituraSens+0x104>)
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fb28 	bl	8005b98 <siprintf>
	  HAL_UART_Transmit(&huart2, transmissao, strlen(transmissao), 1000);
 8005548:	f107 030c 	add.w	r3, r7, #12
 800554c:	4618      	mov	r0, r3
 800554e:	f7fa fe3f 	bl	80001d0 <strlen>
 8005552:	4603      	mov	r3, r0
 8005554:	b29a      	uxth	r2, r3
 8005556:	f107 010c 	add.w	r1, r7, #12
 800555a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800555e:	4810      	ldr	r0, [pc, #64]	; (80055a0 <StartLeituraSens+0x100>)
 8005560:	f7fd f822 	bl	80025a8 <HAL_UART_Transmit>



	  osMutexWait(MtxOxg_TempHandle,1000);
 8005564:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <StartLeituraSens+0x108>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800556c:	4618      	mov	r0, r3
 800556e:	f7fd fbbd 	bl	8002cec <osMutexWait>
	  sensorOxg_TempGlobal[0] = sensorOxg_TempLocal[0];
 8005572:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8005576:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <StartLeituraSens+0x10c>)
 8005578:	701a      	strb	r2, [r3, #0]
	  sensorOxg_TempGlobal[1] = sensorOxg_TempLocal[1];
 800557a:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800557e:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <StartLeituraSens+0x10c>)
 8005580:	705a      	strb	r2, [r3, #1]
	  osMutexRelease(MtxOxg_TempHandle);
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <StartLeituraSens+0x108>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fd fc00 	bl	8002d8c <osMutexRelease>

	  HAL_Delay(10);
 800558c:	200a      	movs	r0, #10
 800558e:	f7fa fedd 	bl	800034c <HAL_Delay>
  {
 8005592:	e78a      	b.n	80054aa <StartLeituraSens+0xa>
 8005594:	48000800 	.word	0x48000800
 8005598:	2000219c 	.word	0x2000219c
 800559c:	080064ac 	.word	0x080064ac
 80055a0:	20002204 	.word	0x20002204
 80055a4:	080064c8 	.word	0x080064c8
 80055a8:	2000216c 	.word	0x2000216c
 80055ac:	2000217c 	.word	0x2000217c

080055b0 <StartProcessamen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessamen */
void StartProcessamen(void const * argument)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	uint8_t constantesLocal[3];

  /* Infinite loop */
  for(;;)
  {
	osMutexWait(MtxAceleradorHandle, 1000);
 80055b8:	4b32      	ldr	r3, [pc, #200]	; (8005684 <StartProcessamen+0xd4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fd fb93 	bl	8002cec <osMutexWait>
	aceleracaoLocal = aceleradorGlobal;
 80055c6:	4b30      	ldr	r3, [pc, #192]	; (8005688 <StartProcessamen+0xd8>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	73fb      	strb	r3, [r7, #15]
	osMutexRelease(MtxAceleradorHandle);
 80055cc:	4b2d      	ldr	r3, [pc, #180]	; (8005684 <StartProcessamen+0xd4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fd fbdb 	bl	8002d8c <osMutexRelease>

	osMutexWait(MtxOxg_TempHandle, 1000);
 80055d6:	4b2d      	ldr	r3, [pc, #180]	; (800568c <StartProcessamen+0xdc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fd fb84 	bl	8002cec <osMutexWait>
	oxigenioLocal = sensorOxg_TempGlobal[0];
 80055e4:	4b2a      	ldr	r3, [pc, #168]	; (8005690 <StartProcessamen+0xe0>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	73bb      	strb	r3, [r7, #14]
	temperaturaLocal = sensorOxg_TempGlobal[1];
 80055ea:	4b29      	ldr	r3, [pc, #164]	; (8005690 <StartProcessamen+0xe0>)
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	737b      	strb	r3, [r7, #13]
	osMutexRelease(MtxOxg_TempHandle);
 80055f0:	4b26      	ldr	r3, [pc, #152]	; (800568c <StartProcessamen+0xdc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fd fbc9 	bl	8002d8c <osMutexRelease>


	osMutexWait(MtxConstantesHandle, 1000);
 80055fa:	4b26      	ldr	r3, [pc, #152]	; (8005694 <StartProcessamen+0xe4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005602:	4618      	mov	r0, r3
 8005604:	f7fd fb72 	bl	8002cec <osMutexWait>
	constantesLocal[0] = constantesGlobal[0];
 8005608:	4b23      	ldr	r3, [pc, #140]	; (8005698 <StartProcessamen+0xe8>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	723b      	strb	r3, [r7, #8]
	constantesLocal[1] = constantesGlobal[1];
 800560e:	4b22      	ldr	r3, [pc, #136]	; (8005698 <StartProcessamen+0xe8>)
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	727b      	strb	r3, [r7, #9]
	constantesLocal[2] = constantesGlobal[2];
 8005614:	4b20      	ldr	r3, [pc, #128]	; (8005698 <StartProcessamen+0xe8>)
 8005616:	789b      	ldrb	r3, [r3, #2]
 8005618:	72bb      	strb	r3, [r7, #10]
	osMutexRelease(MtxConstantesHandle);
 800561a:	4b1e      	ldr	r3, [pc, #120]	; (8005694 <StartProcessamen+0xe4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fd fbb4 	bl	8002d8c <osMutexRelease>




	qntCombustivelLocal = aceleracaoLocal * 50 + (30 - temperaturaLocal * 30) + oxigenioLocal * 20;
 8005624:	7b7b      	ldrb	r3, [r7, #13]
 8005626:	461a      	mov	r2, r3
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	b2da      	uxtb	r2, r3
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	4619      	mov	r1, r3
 8005634:	0089      	lsls	r1, r1, #2
 8005636:	440b      	add	r3, r1
 8005638:	4619      	mov	r1, r3
 800563a:	0088      	lsls	r0, r1, #2
 800563c:	4619      	mov	r1, r3
 800563e:	4603      	mov	r3, r0
 8005640:	440b      	add	r3, r1
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	4413      	add	r3, r2
 8005648:	b2da      	uxtb	r2, r3
 800564a:	7bbb      	ldrb	r3, [r7, #14]
 800564c:	4619      	mov	r1, r3
 800564e:	0089      	lsls	r1, r1, #2
 8005650:	440b      	add	r3, r1
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	b2db      	uxtb	r3, r3
 8005656:	4413      	add	r3, r2
 8005658:	b2db      	uxtb	r3, r3
 800565a:	331e      	adds	r3, #30
 800565c:	733b      	strb	r3, [r7, #12]


	osMutexWait(MtxQntCombustivelHandle, 1000);
 800565e:	4b0f      	ldr	r3, [pc, #60]	; (800569c <StartProcessamen+0xec>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005666:	4618      	mov	r0, r3
 8005668:	f7fd fb40 	bl	8002cec <osMutexWait>
	qntCombustivelGlobal = qntCombustivelLocal;
 800566c:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <StartProcessamen+0xf0>)
 800566e:	7b3b      	ldrb	r3, [r7, #12]
 8005670:	7013      	strb	r3, [r2, #0]
	osMutexRelease(MtxQntCombustivelHandle);
 8005672:	4b0a      	ldr	r3, [pc, #40]	; (800569c <StartProcessamen+0xec>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f7fd fb88 	bl	8002d8c <osMutexRelease>

	osDelay(100);
 800567c:	2064      	movs	r0, #100	; 0x64
 800567e:	f7fd fb14 	bl	8002caa <osDelay>
	osMutexWait(MtxAceleradorHandle, 1000);
 8005682:	e799      	b.n	80055b8 <StartProcessamen+0x8>
 8005684:	20002188 	.word	0x20002188
 8005688:	20002278 	.word	0x20002278
 800568c:	2000216c 	.word	0x2000216c
 8005690:	2000217c 	.word	0x2000217c
 8005694:	20002198 	.word	0x20002198
 8005698:	2000227c 	.word	0x2000227c
 800569c:	20002194 	.word	0x20002194
 80056a0:	20002200 	.word	0x20002200

080056a4 <StartAcionamento>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcionamento */
void StartAcionamento(void const * argument)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAcionamento */
	uint8_t qntCombustivelLocal;
  /* Infinite loop */
  for(;;)
  {
	osMutexWait(MtxQntCombustivelHandle, 1000);
 80056ac:	4b2b      	ldr	r3, [pc, #172]	; (800575c <StartAcionamento+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fd fb19 	bl	8002cec <osMutexWait>
	qntCombustivelLocal = qntCombustivelGlobal;
 80056ba:	4b29      	ldr	r3, [pc, #164]	; (8005760 <StartAcionamento+0xbc>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	73fb      	strb	r3, [r7, #15]
	osMutexDelete(MtxQntCombustivelHandle);
 80056c0:	4b26      	ldr	r3, [pc, #152]	; (800575c <StartAcionamento+0xb8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fd fb97 	bl	8002df8 <osMutexDelete>

	if(qntCombustivelLocal < 33) {
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d812      	bhi.n	80056f6 <StartAcionamento+0x52>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 80056d0:	2201      	movs	r2, #1
 80056d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056da:	f7fb f8b5 	bl	8000848 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 80056de:	2200      	movs	r2, #0
 80056e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056e4:	481f      	ldr	r0, [pc, #124]	; (8005764 <StartAcionamento+0xc0>)
 80056e6:	f7fb f8af 	bl	8000848 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 80056ea:	2200      	movs	r2, #0
 80056ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056f0:	481c      	ldr	r0, [pc, #112]	; (8005764 <StartAcionamento+0xc0>)
 80056f2:	f7fb f8a9 	bl	8000848 <HAL_GPIO_WritePin>
	}

	if(qntCombustivelLocal < 66 && qntCombustivelLocal >= 33) {
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	2b41      	cmp	r3, #65	; 0x41
 80056fa:	d815      	bhi.n	8005728 <StartAcionamento+0x84>
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d912      	bls.n	8005728 <StartAcionamento+0x84>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8005702:	2200      	movs	r2, #0
 8005704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800570c:	f7fb f89c 	bl	8000848 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8005710:	2201      	movs	r2, #1
 8005712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005716:	4813      	ldr	r0, [pc, #76]	; (8005764 <StartAcionamento+0xc0>)
 8005718:	f7fb f896 	bl	8000848 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 800571c:	2200      	movs	r2, #0
 800571e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005722:	4810      	ldr	r0, [pc, #64]	; (8005764 <StartAcionamento+0xc0>)
 8005724:	f7fb f890 	bl	8000848 <HAL_GPIO_WritePin>
	}

	if(qntCombustivelLocal >= 66) {
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b41      	cmp	r3, #65	; 0x41
 800572c:	d912      	bls.n	8005754 <StartAcionamento+0xb0>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 800572e:	2200      	movs	r2, #0
 8005730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005738:	f7fb f886 	bl	8000848 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 800573c:	2200      	movs	r2, #0
 800573e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005742:	4808      	ldr	r0, [pc, #32]	; (8005764 <StartAcionamento+0xc0>)
 8005744:	f7fb f880 	bl	8000848 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8005748:	2201      	movs	r2, #1
 800574a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800574e:	4805      	ldr	r0, [pc, #20]	; (8005764 <StartAcionamento+0xc0>)
 8005750:	f7fb f87a 	bl	8000848 <HAL_GPIO_WritePin>
	}

    osDelay(1);
 8005754:	2001      	movs	r0, #1
 8005756:	f7fd faa8 	bl	8002caa <osDelay>
	osMutexWait(MtxQntCombustivelHandle, 1000);
 800575a:	e7a7      	b.n	80056ac <StartAcionamento+0x8>
 800575c:	20002194 	.word	0x20002194
 8005760:	20002200 	.word	0x20002200
 8005764:	48000400 	.word	0x48000400

08005768 <StartEscritaMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEscritaMemoria */
void StartEscritaMemoria(void const * argument)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEscritaMemoria */
  /* Infinite loop */
  for(;;)
 8005770:	e7fe      	b.n	8005770 <StartEscritaMemoria+0x8>
	...

08005774 <StartEscritaDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEscritaDisplay */
void StartEscritaDisplay(void const * argument)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800577a:	af00      	add	r7, sp, #0
 800577c:	1d3b      	adds	r3, r7, #4
 800577e:	6018      	str	r0, [r3, #0]
	uint8_t bufferAcelerador[256];
  /* Infinite loop */
  for(;;)
  {

	  osMutexWait(MtxInformacoesHandle, 1000);
 8005780:	4b22      	ldr	r3, [pc, #136]	; (800580c <StartEscritaDisplay+0x98>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005788:	4618      	mov	r0, r3
 800578a:	f7fd faaf 	bl	8002cec <osMutexWait>
	  informacoesLocal[0] = informacoesGlobal[0];
 800578e:	4b20      	ldr	r3, [pc, #128]	; (8005810 <StartEscritaDisplay+0x9c>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
	  informacoesLocal[1] = informacoesGlobal[1];
 8005796:	4b1e      	ldr	r3, [pc, #120]	; (8005810 <StartEscritaDisplay+0x9c>)
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
	  osMutexRelease(MtxInformacoesHandle);
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <StartEscritaDisplay+0x98>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fd faf2 	bl	8002d8c <osMutexRelease>

	  sprintf(bufferAcelerador, "Acelerador: %d", informacoesLocal[0]);
 80057a8:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80057ac:	461a      	mov	r2, r3
 80057ae:	f107 030c 	add.w	r3, r7, #12
 80057b2:	4918      	ldr	r1, [pc, #96]	; (8005814 <StartEscritaDisplay+0xa0>)
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 f9ef 	bl	8005b98 <siprintf>
	  sprintf(bufferOxigenio, "Oxigenio: %d", informacoesLocal[1]);
 80057ba:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80057be:	461a      	mov	r2, r3
 80057c0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80057c4:	4914      	ldr	r1, [pc, #80]	; (8005818 <StartEscritaDisplay+0xa4>)
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f9e6 	bl	8005b98 <siprintf>


	  HAL_UART_Transmit(&huart2, bufferAcelerador, strlen(bufferAcelerador), 1000);
 80057cc:	f107 030c 	add.w	r3, r7, #12
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fa fcfd 	bl	80001d0 <strlen>
 80057d6:	4603      	mov	r3, r0
 80057d8:	b29a      	uxth	r2, r3
 80057da:	f107 010c 	add.w	r1, r7, #12
 80057de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057e2:	480e      	ldr	r0, [pc, #56]	; (800581c <StartEscritaDisplay+0xa8>)
 80057e4:	f7fc fee0 	bl	80025a8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, bufferOxigenio, strlen(bufferOxigenio), 1000);
 80057e8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fa fcef 	bl	80001d0 <strlen>
 80057f2:	4603      	mov	r3, r0
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80057fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057fe:	4807      	ldr	r0, [pc, #28]	; (800581c <StartEscritaDisplay+0xa8>)
 8005800:	f7fc fed2 	bl	80025a8 <HAL_UART_Transmit>


//	  LCD_Write_String(0, 0, bufferAcelerador);
//	  LCD_Write_String(0, 1, bufferOxigenio);
    osDelay(1);
 8005804:	2001      	movs	r0, #1
 8005806:	f7fd fa50 	bl	8002caa <osDelay>
  {
 800580a:	e7b9      	b.n	8005780 <StartEscritaDisplay+0xc>
 800580c:	2000218c 	.word	0x2000218c
 8005810:	20002190 	.word	0x20002190
 8005814:	080064e8 	.word	0x080064e8
 8005818:	080064f8 	.word	0x080064f8
 800581c:	20002204 	.word	0x20002204

08005820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005824:	bf00      	nop
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005836:	4b11      	ldr	r3, [pc, #68]	; (800587c <HAL_MspInit+0x4c>)
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	4a10      	ldr	r2, [pc, #64]	; (800587c <HAL_MspInit+0x4c>)
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	6193      	str	r3, [r2, #24]
 8005842:	4b0e      	ldr	r3, [pc, #56]	; (800587c <HAL_MspInit+0x4c>)
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <HAL_MspInit+0x4c>)
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	4a0a      	ldr	r2, [pc, #40]	; (800587c <HAL_MspInit+0x4c>)
 8005854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005858:	61d3      	str	r3, [r2, #28]
 800585a:	4b08      	ldr	r3, [pc, #32]	; (800587c <HAL_MspInit+0x4c>)
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005866:	2200      	movs	r2, #0
 8005868:	210f      	movs	r1, #15
 800586a:	f06f 0001 	mvn.w	r0, #1
 800586e:	f7fa fe4c 	bl	800050a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000

08005880 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08a      	sub	sp, #40	; 0x28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005888:	f107 0314 	add.w	r3, r7, #20
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	605a      	str	r2, [r3, #4]
 8005892:	609a      	str	r2, [r3, #8]
 8005894:	60da      	str	r2, [r3, #12]
 8005896:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a17      	ldr	r2, [pc, #92]	; (80058fc <HAL_SPI_MspInit+0x7c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d127      	bne.n	80058f2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80058a2:	4b17      	ldr	r3, [pc, #92]	; (8005900 <HAL_SPI_MspInit+0x80>)
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	4a16      	ldr	r2, [pc, #88]	; (8005900 <HAL_SPI_MspInit+0x80>)
 80058a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058ac:	6193      	str	r3, [r2, #24]
 80058ae:	4b14      	ldr	r3, [pc, #80]	; (8005900 <HAL_SPI_MspInit+0x80>)
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058ba:	4b11      	ldr	r3, [pc, #68]	; (8005900 <HAL_SPI_MspInit+0x80>)
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	4a10      	ldr	r2, [pc, #64]	; (8005900 <HAL_SPI_MspInit+0x80>)
 80058c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058c4:	6153      	str	r3, [r2, #20]
 80058c6:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <HAL_SPI_MspInit+0x80>)
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80058d2:	2338      	movs	r3, #56	; 0x38
 80058d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d6:	2302      	movs	r3, #2
 80058d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058de:	2303      	movs	r3, #3
 80058e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80058e2:	2305      	movs	r3, #5
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058e6:	f107 0314 	add.w	r3, r7, #20
 80058ea:	4619      	mov	r1, r3
 80058ec:	4805      	ldr	r0, [pc, #20]	; (8005904 <HAL_SPI_MspInit+0x84>)
 80058ee:	f7fa fe35 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80058f2:	bf00      	nop
 80058f4:	3728      	adds	r7, #40	; 0x28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40013000 	.word	0x40013000
 8005900:	40021000 	.word	0x40021000
 8005904:	48000400 	.word	0x48000400

08005908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	609a      	str	r2, [r3, #8]
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a17      	ldr	r2, [pc, #92]	; (8005984 <HAL_UART_MspInit+0x7c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d128      	bne.n	800597c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800592a:	4b17      	ldr	r3, [pc, #92]	; (8005988 <HAL_UART_MspInit+0x80>)
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	4a16      	ldr	r2, [pc, #88]	; (8005988 <HAL_UART_MspInit+0x80>)
 8005930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005934:	61d3      	str	r3, [r2, #28]
 8005936:	4b14      	ldr	r3, [pc, #80]	; (8005988 <HAL_UART_MspInit+0x80>)
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005942:	4b11      	ldr	r3, [pc, #68]	; (8005988 <HAL_UART_MspInit+0x80>)
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <HAL_UART_MspInit+0x80>)
 8005948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594c:	6153      	str	r3, [r2, #20]
 800594e:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <HAL_UART_MspInit+0x80>)
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800595a:	230c      	movs	r3, #12
 800595c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595e:	2302      	movs	r3, #2
 8005960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005962:	2300      	movs	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005966:	2303      	movs	r3, #3
 8005968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800596a:	2307      	movs	r3, #7
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800596e:	f107 0314 	add.w	r3, r7, #20
 8005972:	4619      	mov	r1, r3
 8005974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005978:	f7fa fdf0 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800597c:	bf00      	nop
 800597e:	3728      	adds	r7, #40	; 0x28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40004400 	.word	0x40004400
 8005988:	40021000 	.word	0x40021000

0800598c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800599e:	e7fe      	b.n	800599e <HardFault_Handler+0x4>

080059a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059a4:	e7fe      	b.n	80059a4 <MemManage_Handler+0x4>

080059a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059a6:	b480      	push	{r7}
 80059a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059aa:	e7fe      	b.n	80059aa <BusFault_Handler+0x4>

080059ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059b0:	e7fe      	b.n	80059b0 <UsageFault_Handler+0x4>

080059b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059b2:	b480      	push	{r7}
 80059b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059b6:	bf00      	nop
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059c4:	f7fa fca2 	bl	800030c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80059c8:	f7fe fd7c 	bl	80044c4 <xTaskGetSchedulerState>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d001      	beq.n	80059d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80059d2:	f7ff f899 	bl	8004b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059d6:	bf00      	nop
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80059e4:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <_sbrk+0x50>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <_sbrk+0x16>
		heap_end = &end;
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <_sbrk+0x50>)
 80059ee:	4a10      	ldr	r2, [pc, #64]	; (8005a30 <_sbrk+0x54>)
 80059f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80059f2:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <_sbrk+0x50>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80059f8:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <_sbrk+0x50>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4413      	add	r3, r2
 8005a00:	466a      	mov	r2, sp
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d907      	bls.n	8005a16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005a06:	f000 f889 	bl	8005b1c <__errno>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	e006      	b.n	8005a24 <_sbrk+0x48>
	}

	heap_end += incr;
 8005a16:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <_sbrk+0x50>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	4a03      	ldr	r2, [pc, #12]	; (8005a2c <_sbrk+0x50>)
 8005a20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	2000211c 	.word	0x2000211c
 8005a30:	20002288 	.word	0x20002288

08005a34 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a38:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <SystemInit+0x84>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	4a1e      	ldr	r2, [pc, #120]	; (8005ab8 <SystemInit+0x84>)
 8005a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005a48:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <SystemInit+0x88>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	; (8005abc <SystemInit+0x88>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005a54:	4b19      	ldr	r3, [pc, #100]	; (8005abc <SystemInit+0x88>)
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	4918      	ldr	r1, [pc, #96]	; (8005abc <SystemInit+0x88>)
 8005a5a:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <SystemInit+0x8c>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005a60:	4b16      	ldr	r3, [pc, #88]	; (8005abc <SystemInit+0x88>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a15      	ldr	r2, [pc, #84]	; (8005abc <SystemInit+0x88>)
 8005a66:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a6e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005a70:	4b12      	ldr	r3, [pc, #72]	; (8005abc <SystemInit+0x88>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a11      	ldr	r2, [pc, #68]	; (8005abc <SystemInit+0x88>)
 8005a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a7a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <SystemInit+0x88>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a0e      	ldr	r2, [pc, #56]	; (8005abc <SystemInit+0x88>)
 8005a82:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005a86:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <SystemInit+0x88>)
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	4a0b      	ldr	r2, [pc, #44]	; (8005abc <SystemInit+0x88>)
 8005a8e:	f023 030f 	bic.w	r3, r3, #15
 8005a92:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005a94:	4b09      	ldr	r3, [pc, #36]	; (8005abc <SystemInit+0x88>)
 8005a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a98:	4908      	ldr	r1, [pc, #32]	; (8005abc <SystemInit+0x88>)
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <SystemInit+0x90>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <SystemInit+0x88>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005aa6:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <SystemInit+0x84>)
 8005aa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005aac:	609a      	str	r2, [r3, #8]
#endif
}
 8005aae:	bf00      	nop
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	e000ed00 	.word	0xe000ed00
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	f87fc00c 	.word	0xf87fc00c
 8005ac4:	ff00fccc 	.word	0xff00fccc

08005ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005acc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005ace:	e003      	b.n	8005ad8 <LoopCopyDataInit>

08005ad0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005ad2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005ad4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005ad6:	3104      	adds	r1, #4

08005ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005ad8:	480b      	ldr	r0, [pc, #44]	; (8005b08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005ada:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8005adc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005ade:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005ae0:	d3f6      	bcc.n	8005ad0 <CopyDataInit>
	ldr	r2, =_sbss
 8005ae2:	4a0b      	ldr	r2, [pc, #44]	; (8005b10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005ae4:	e002      	b.n	8005aec <LoopFillZerobss>

08005ae6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005ae6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005ae8:	f842 3b04 	str.w	r3, [r2], #4

08005aec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005aec:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <LoopForever+0x16>)
	cmp	r2, r3
 8005aee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005af0:	d3f9      	bcc.n	8005ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005af2:	f7ff ff9f 	bl	8005a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005af6:	f000 f817 	bl	8005b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005afa:	f7ff fa5f 	bl	8004fbc <main>

08005afe <LoopForever>:

LoopForever:
    b LoopForever
 8005afe:	e7fe      	b.n	8005afe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005b00:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8005b04:	0800657c 	.word	0x0800657c
	ldr	r0, =_sdata
 8005b08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005b0c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8005b10:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8005b14:	20002284 	.word	0x20002284

08005b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005b18:	e7fe      	b.n	8005b18 <ADC1_2_IRQHandler>
	...

08005b1c <__errno>:
 8005b1c:	4b01      	ldr	r3, [pc, #4]	; (8005b24 <__errno+0x8>)
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000010 	.word	0x20000010

08005b28 <__libc_init_array>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4e0d      	ldr	r6, [pc, #52]	; (8005b60 <__libc_init_array+0x38>)
 8005b2c:	4c0d      	ldr	r4, [pc, #52]	; (8005b64 <__libc_init_array+0x3c>)
 8005b2e:	1ba4      	subs	r4, r4, r6
 8005b30:	10a4      	asrs	r4, r4, #2
 8005b32:	2500      	movs	r5, #0
 8005b34:	42a5      	cmp	r5, r4
 8005b36:	d109      	bne.n	8005b4c <__libc_init_array+0x24>
 8005b38:	4e0b      	ldr	r6, [pc, #44]	; (8005b68 <__libc_init_array+0x40>)
 8005b3a:	4c0c      	ldr	r4, [pc, #48]	; (8005b6c <__libc_init_array+0x44>)
 8005b3c:	f000 fc28 	bl	8006390 <_init>
 8005b40:	1ba4      	subs	r4, r4, r6
 8005b42:	10a4      	asrs	r4, r4, #2
 8005b44:	2500      	movs	r5, #0
 8005b46:	42a5      	cmp	r5, r4
 8005b48:	d105      	bne.n	8005b56 <__libc_init_array+0x2e>
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b50:	4798      	blx	r3
 8005b52:	3501      	adds	r5, #1
 8005b54:	e7ee      	b.n	8005b34 <__libc_init_array+0xc>
 8005b56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b5a:	4798      	blx	r3
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	e7f2      	b.n	8005b46 <__libc_init_array+0x1e>
 8005b60:	08006574 	.word	0x08006574
 8005b64:	08006574 	.word	0x08006574
 8005b68:	08006574 	.word	0x08006574
 8005b6c:	08006578 	.word	0x08006578

08005b70 <memcpy>:
 8005b70:	b510      	push	{r4, lr}
 8005b72:	1e43      	subs	r3, r0, #1
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	d100      	bne.n	8005b7c <memcpy+0xc>
 8005b7a:	bd10      	pop	{r4, pc}
 8005b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b84:	e7f7      	b.n	8005b76 <memcpy+0x6>

08005b86 <memset>:
 8005b86:	4402      	add	r2, r0
 8005b88:	4603      	mov	r3, r0
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d100      	bne.n	8005b90 <memset+0xa>
 8005b8e:	4770      	bx	lr
 8005b90:	f803 1b01 	strb.w	r1, [r3], #1
 8005b94:	e7f9      	b.n	8005b8a <memset+0x4>
	...

08005b98 <siprintf>:
 8005b98:	b40e      	push	{r1, r2, r3}
 8005b9a:	b500      	push	{lr}
 8005b9c:	b09c      	sub	sp, #112	; 0x70
 8005b9e:	ab1d      	add	r3, sp, #116	; 0x74
 8005ba0:	9002      	str	r0, [sp, #8]
 8005ba2:	9006      	str	r0, [sp, #24]
 8005ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ba8:	4809      	ldr	r0, [pc, #36]	; (8005bd0 <siprintf+0x38>)
 8005baa:	9107      	str	r1, [sp, #28]
 8005bac:	9104      	str	r1, [sp, #16]
 8005bae:	4909      	ldr	r1, [pc, #36]	; (8005bd4 <siprintf+0x3c>)
 8005bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb4:	9105      	str	r1, [sp, #20]
 8005bb6:	6800      	ldr	r0, [r0, #0]
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	a902      	add	r1, sp, #8
 8005bbc:	f000 f866 	bl	8005c8c <_svfiprintf_r>
 8005bc0:	9b02      	ldr	r3, [sp, #8]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	b01c      	add	sp, #112	; 0x70
 8005bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bcc:	b003      	add	sp, #12
 8005bce:	4770      	bx	lr
 8005bd0:	20000010 	.word	0x20000010
 8005bd4:	ffff0208 	.word	0xffff0208

08005bd8 <__ssputs_r>:
 8005bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bdc:	688e      	ldr	r6, [r1, #8]
 8005bde:	429e      	cmp	r6, r3
 8005be0:	4682      	mov	sl, r0
 8005be2:	460c      	mov	r4, r1
 8005be4:	4690      	mov	r8, r2
 8005be6:	4699      	mov	r9, r3
 8005be8:	d837      	bhi.n	8005c5a <__ssputs_r+0x82>
 8005bea:	898a      	ldrh	r2, [r1, #12]
 8005bec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bf0:	d031      	beq.n	8005c56 <__ssputs_r+0x7e>
 8005bf2:	6825      	ldr	r5, [r4, #0]
 8005bf4:	6909      	ldr	r1, [r1, #16]
 8005bf6:	1a6f      	subs	r7, r5, r1
 8005bf8:	6965      	ldr	r5, [r4, #20]
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c00:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c04:	f109 0301 	add.w	r3, r9, #1
 8005c08:	443b      	add	r3, r7
 8005c0a:	429d      	cmp	r5, r3
 8005c0c:	bf38      	it	cc
 8005c0e:	461d      	movcc	r5, r3
 8005c10:	0553      	lsls	r3, r2, #21
 8005c12:	d530      	bpl.n	8005c76 <__ssputs_r+0x9e>
 8005c14:	4629      	mov	r1, r5
 8005c16:	f000 fb21 	bl	800625c <_malloc_r>
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	b950      	cbnz	r0, 8005c34 <__ssputs_r+0x5c>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	f8ca 3000 	str.w	r3, [sl]
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	463a      	mov	r2, r7
 8005c36:	6921      	ldr	r1, [r4, #16]
 8005c38:	f7ff ff9a 	bl	8005b70 <memcpy>
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c46:	81a3      	strh	r3, [r4, #12]
 8005c48:	6126      	str	r6, [r4, #16]
 8005c4a:	6165      	str	r5, [r4, #20]
 8005c4c:	443e      	add	r6, r7
 8005c4e:	1bed      	subs	r5, r5, r7
 8005c50:	6026      	str	r6, [r4, #0]
 8005c52:	60a5      	str	r5, [r4, #8]
 8005c54:	464e      	mov	r6, r9
 8005c56:	454e      	cmp	r6, r9
 8005c58:	d900      	bls.n	8005c5c <__ssputs_r+0x84>
 8005c5a:	464e      	mov	r6, r9
 8005c5c:	4632      	mov	r2, r6
 8005c5e:	4641      	mov	r1, r8
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	f000 fa93 	bl	800618c <memmove>
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	1b9b      	subs	r3, r3, r6
 8005c6a:	60a3      	str	r3, [r4, #8]
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	441e      	add	r6, r3
 8005c70:	6026      	str	r6, [r4, #0]
 8005c72:	2000      	movs	r0, #0
 8005c74:	e7dc      	b.n	8005c30 <__ssputs_r+0x58>
 8005c76:	462a      	mov	r2, r5
 8005c78:	f000 fb4a 	bl	8006310 <_realloc_r>
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d1e2      	bne.n	8005c48 <__ssputs_r+0x70>
 8005c82:	6921      	ldr	r1, [r4, #16]
 8005c84:	4650      	mov	r0, sl
 8005c86:	f000 fa9b 	bl	80061c0 <_free_r>
 8005c8a:	e7c8      	b.n	8005c1e <__ssputs_r+0x46>

08005c8c <_svfiprintf_r>:
 8005c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c90:	461d      	mov	r5, r3
 8005c92:	898b      	ldrh	r3, [r1, #12]
 8005c94:	061f      	lsls	r7, r3, #24
 8005c96:	b09d      	sub	sp, #116	; 0x74
 8005c98:	4680      	mov	r8, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	d50f      	bpl.n	8005cc0 <_svfiprintf_r+0x34>
 8005ca0:	690b      	ldr	r3, [r1, #16]
 8005ca2:	b96b      	cbnz	r3, 8005cc0 <_svfiprintf_r+0x34>
 8005ca4:	2140      	movs	r1, #64	; 0x40
 8005ca6:	f000 fad9 	bl	800625c <_malloc_r>
 8005caa:	6020      	str	r0, [r4, #0]
 8005cac:	6120      	str	r0, [r4, #16]
 8005cae:	b928      	cbnz	r0, 8005cbc <_svfiprintf_r+0x30>
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	f8c8 3000 	str.w	r3, [r8]
 8005cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cba:	e0c8      	b.n	8005e4e <_svfiprintf_r+0x1c2>
 8005cbc:	2340      	movs	r3, #64	; 0x40
 8005cbe:	6163      	str	r3, [r4, #20]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cca:	2330      	movs	r3, #48	; 0x30
 8005ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cd0:	9503      	str	r5, [sp, #12]
 8005cd2:	f04f 0b01 	mov.w	fp, #1
 8005cd6:	4637      	mov	r7, r6
 8005cd8:	463d      	mov	r5, r7
 8005cda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cde:	b10b      	cbz	r3, 8005ce4 <_svfiprintf_r+0x58>
 8005ce0:	2b25      	cmp	r3, #37	; 0x25
 8005ce2:	d13e      	bne.n	8005d62 <_svfiprintf_r+0xd6>
 8005ce4:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ce8:	d00b      	beq.n	8005d02 <_svfiprintf_r+0x76>
 8005cea:	4653      	mov	r3, sl
 8005cec:	4632      	mov	r2, r6
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	f7ff ff71 	bl	8005bd8 <__ssputs_r>
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f000 80a4 	beq.w	8005e44 <_svfiprintf_r+0x1b8>
 8005cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfe:	4453      	add	r3, sl
 8005d00:	9309      	str	r3, [sp, #36]	; 0x24
 8005d02:	783b      	ldrb	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 809d 	beq.w	8005e44 <_svfiprintf_r+0x1b8>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d14:	9304      	str	r3, [sp, #16]
 8005d16:	9307      	str	r3, [sp, #28]
 8005d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d1e:	462f      	mov	r7, r5
 8005d20:	2205      	movs	r2, #5
 8005d22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d26:	4850      	ldr	r0, [pc, #320]	; (8005e68 <_svfiprintf_r+0x1dc>)
 8005d28:	f7fa fa5a 	bl	80001e0 <memchr>
 8005d2c:	9b04      	ldr	r3, [sp, #16]
 8005d2e:	b9d0      	cbnz	r0, 8005d66 <_svfiprintf_r+0xda>
 8005d30:	06d9      	lsls	r1, r3, #27
 8005d32:	bf44      	itt	mi
 8005d34:	2220      	movmi	r2, #32
 8005d36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d3a:	071a      	lsls	r2, r3, #28
 8005d3c:	bf44      	itt	mi
 8005d3e:	222b      	movmi	r2, #43	; 0x2b
 8005d40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d44:	782a      	ldrb	r2, [r5, #0]
 8005d46:	2a2a      	cmp	r2, #42	; 0x2a
 8005d48:	d015      	beq.n	8005d76 <_svfiprintf_r+0xea>
 8005d4a:	9a07      	ldr	r2, [sp, #28]
 8005d4c:	462f      	mov	r7, r5
 8005d4e:	2000      	movs	r0, #0
 8005d50:	250a      	movs	r5, #10
 8005d52:	4639      	mov	r1, r7
 8005d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d58:	3b30      	subs	r3, #48	; 0x30
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	d94d      	bls.n	8005dfa <_svfiprintf_r+0x16e>
 8005d5e:	b1b8      	cbz	r0, 8005d90 <_svfiprintf_r+0x104>
 8005d60:	e00f      	b.n	8005d82 <_svfiprintf_r+0xf6>
 8005d62:	462f      	mov	r7, r5
 8005d64:	e7b8      	b.n	8005cd8 <_svfiprintf_r+0x4c>
 8005d66:	4a40      	ldr	r2, [pc, #256]	; (8005e68 <_svfiprintf_r+0x1dc>)
 8005d68:	1a80      	subs	r0, r0, r2
 8005d6a:	fa0b f000 	lsl.w	r0, fp, r0
 8005d6e:	4318      	orrs	r0, r3
 8005d70:	9004      	str	r0, [sp, #16]
 8005d72:	463d      	mov	r5, r7
 8005d74:	e7d3      	b.n	8005d1e <_svfiprintf_r+0x92>
 8005d76:	9a03      	ldr	r2, [sp, #12]
 8005d78:	1d11      	adds	r1, r2, #4
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	9103      	str	r1, [sp, #12]
 8005d7e:	2a00      	cmp	r2, #0
 8005d80:	db01      	blt.n	8005d86 <_svfiprintf_r+0xfa>
 8005d82:	9207      	str	r2, [sp, #28]
 8005d84:	e004      	b.n	8005d90 <_svfiprintf_r+0x104>
 8005d86:	4252      	negs	r2, r2
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	9207      	str	r2, [sp, #28]
 8005d8e:	9304      	str	r3, [sp, #16]
 8005d90:	783b      	ldrb	r3, [r7, #0]
 8005d92:	2b2e      	cmp	r3, #46	; 0x2e
 8005d94:	d10c      	bne.n	8005db0 <_svfiprintf_r+0x124>
 8005d96:	787b      	ldrb	r3, [r7, #1]
 8005d98:	2b2a      	cmp	r3, #42	; 0x2a
 8005d9a:	d133      	bne.n	8005e04 <_svfiprintf_r+0x178>
 8005d9c:	9b03      	ldr	r3, [sp, #12]
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	9203      	str	r2, [sp, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bfb8      	it	lt
 8005da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dac:	3702      	adds	r7, #2
 8005dae:	9305      	str	r3, [sp, #20]
 8005db0:	4d2e      	ldr	r5, [pc, #184]	; (8005e6c <_svfiprintf_r+0x1e0>)
 8005db2:	7839      	ldrb	r1, [r7, #0]
 8005db4:	2203      	movs	r2, #3
 8005db6:	4628      	mov	r0, r5
 8005db8:	f7fa fa12 	bl	80001e0 <memchr>
 8005dbc:	b138      	cbz	r0, 8005dce <_svfiprintf_r+0x142>
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	1b40      	subs	r0, r0, r5
 8005dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8005dc6:	9b04      	ldr	r3, [sp, #16]
 8005dc8:	4303      	orrs	r3, r0
 8005dca:	3701      	adds	r7, #1
 8005dcc:	9304      	str	r3, [sp, #16]
 8005dce:	7839      	ldrb	r1, [r7, #0]
 8005dd0:	4827      	ldr	r0, [pc, #156]	; (8005e70 <_svfiprintf_r+0x1e4>)
 8005dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dd6:	2206      	movs	r2, #6
 8005dd8:	1c7e      	adds	r6, r7, #1
 8005dda:	f7fa fa01 	bl	80001e0 <memchr>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d038      	beq.n	8005e54 <_svfiprintf_r+0x1c8>
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <_svfiprintf_r+0x1e8>)
 8005de4:	bb13      	cbnz	r3, 8005e2c <_svfiprintf_r+0x1a0>
 8005de6:	9b03      	ldr	r3, [sp, #12]
 8005de8:	3307      	adds	r3, #7
 8005dea:	f023 0307 	bic.w	r3, r3, #7
 8005dee:	3308      	adds	r3, #8
 8005df0:	9303      	str	r3, [sp, #12]
 8005df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df4:	444b      	add	r3, r9
 8005df6:	9309      	str	r3, [sp, #36]	; 0x24
 8005df8:	e76d      	b.n	8005cd6 <_svfiprintf_r+0x4a>
 8005dfa:	fb05 3202 	mla	r2, r5, r2, r3
 8005dfe:	2001      	movs	r0, #1
 8005e00:	460f      	mov	r7, r1
 8005e02:	e7a6      	b.n	8005d52 <_svfiprintf_r+0xc6>
 8005e04:	2300      	movs	r3, #0
 8005e06:	3701      	adds	r7, #1
 8005e08:	9305      	str	r3, [sp, #20]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	250a      	movs	r5, #10
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e14:	3a30      	subs	r2, #48	; 0x30
 8005e16:	2a09      	cmp	r2, #9
 8005e18:	d903      	bls.n	8005e22 <_svfiprintf_r+0x196>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0c8      	beq.n	8005db0 <_svfiprintf_r+0x124>
 8005e1e:	9105      	str	r1, [sp, #20]
 8005e20:	e7c6      	b.n	8005db0 <_svfiprintf_r+0x124>
 8005e22:	fb05 2101 	mla	r1, r5, r1, r2
 8005e26:	2301      	movs	r3, #1
 8005e28:	4607      	mov	r7, r0
 8005e2a:	e7f0      	b.n	8005e0e <_svfiprintf_r+0x182>
 8005e2c:	ab03      	add	r3, sp, #12
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	4622      	mov	r2, r4
 8005e32:	4b11      	ldr	r3, [pc, #68]	; (8005e78 <_svfiprintf_r+0x1ec>)
 8005e34:	a904      	add	r1, sp, #16
 8005e36:	4640      	mov	r0, r8
 8005e38:	f3af 8000 	nop.w
 8005e3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e40:	4681      	mov	r9, r0
 8005e42:	d1d6      	bne.n	8005df2 <_svfiprintf_r+0x166>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	065b      	lsls	r3, r3, #25
 8005e48:	f53f af35 	bmi.w	8005cb6 <_svfiprintf_r+0x2a>
 8005e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e4e:	b01d      	add	sp, #116	; 0x74
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	ab03      	add	r3, sp, #12
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4622      	mov	r2, r4
 8005e5a:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <_svfiprintf_r+0x1ec>)
 8005e5c:	a904      	add	r1, sp, #16
 8005e5e:	4640      	mov	r0, r8
 8005e60:	f000 f882 	bl	8005f68 <_printf_i>
 8005e64:	e7ea      	b.n	8005e3c <_svfiprintf_r+0x1b0>
 8005e66:	bf00      	nop
 8005e68:	08006540 	.word	0x08006540
 8005e6c:	08006546 	.word	0x08006546
 8005e70:	0800654a 	.word	0x0800654a
 8005e74:	00000000 	.word	0x00000000
 8005e78:	08005bd9 	.word	0x08005bd9

08005e7c <_printf_common>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	4691      	mov	r9, r2
 8005e82:	461f      	mov	r7, r3
 8005e84:	688a      	ldr	r2, [r1, #8]
 8005e86:	690b      	ldr	r3, [r1, #16]
 8005e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	bfb8      	it	lt
 8005e90:	4613      	movlt	r3, r2
 8005e92:	f8c9 3000 	str.w	r3, [r9]
 8005e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	b112      	cbz	r2, 8005ea6 <_printf_common+0x2a>
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f8c9 3000 	str.w	r3, [r9]
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	0699      	lsls	r1, r3, #26
 8005eaa:	bf42      	ittt	mi
 8005eac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005eb0:	3302      	addmi	r3, #2
 8005eb2:	f8c9 3000 	strmi.w	r3, [r9]
 8005eb6:	6825      	ldr	r5, [r4, #0]
 8005eb8:	f015 0506 	ands.w	r5, r5, #6
 8005ebc:	d107      	bne.n	8005ece <_printf_common+0x52>
 8005ebe:	f104 0a19 	add.w	sl, r4, #25
 8005ec2:	68e3      	ldr	r3, [r4, #12]
 8005ec4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	42ab      	cmp	r3, r5
 8005ecc:	dc28      	bgt.n	8005f20 <_printf_common+0xa4>
 8005ece:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	3300      	adds	r3, #0
 8005ed6:	bf18      	it	ne
 8005ed8:	2301      	movne	r3, #1
 8005eda:	0692      	lsls	r2, r2, #26
 8005edc:	d42d      	bmi.n	8005f3a <_printf_common+0xbe>
 8005ede:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	47c0      	blx	r8
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d020      	beq.n	8005f2e <_printf_common+0xb2>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	68e5      	ldr	r5, [r4, #12]
 8005ef0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ef4:	f003 0306 	and.w	r3, r3, #6
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	bf08      	it	eq
 8005efc:	1aad      	subeq	r5, r5, r2
 8005efe:	68a3      	ldr	r3, [r4, #8]
 8005f00:	6922      	ldr	r2, [r4, #16]
 8005f02:	bf0c      	ite	eq
 8005f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f08:	2500      	movne	r5, #0
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	bfc4      	itt	gt
 8005f0e:	1a9b      	subgt	r3, r3, r2
 8005f10:	18ed      	addgt	r5, r5, r3
 8005f12:	f04f 0900 	mov.w	r9, #0
 8005f16:	341a      	adds	r4, #26
 8005f18:	454d      	cmp	r5, r9
 8005f1a:	d11a      	bne.n	8005f52 <_printf_common+0xd6>
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e008      	b.n	8005f32 <_printf_common+0xb6>
 8005f20:	2301      	movs	r3, #1
 8005f22:	4652      	mov	r2, sl
 8005f24:	4639      	mov	r1, r7
 8005f26:	4630      	mov	r0, r6
 8005f28:	47c0      	blx	r8
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d103      	bne.n	8005f36 <_printf_common+0xba>
 8005f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f36:	3501      	adds	r5, #1
 8005f38:	e7c3      	b.n	8005ec2 <_printf_common+0x46>
 8005f3a:	18e1      	adds	r1, r4, r3
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	2030      	movs	r0, #48	; 0x30
 8005f40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f44:	4422      	add	r2, r4
 8005f46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f4e:	3302      	adds	r3, #2
 8005f50:	e7c5      	b.n	8005ede <_printf_common+0x62>
 8005f52:	2301      	movs	r3, #1
 8005f54:	4622      	mov	r2, r4
 8005f56:	4639      	mov	r1, r7
 8005f58:	4630      	mov	r0, r6
 8005f5a:	47c0      	blx	r8
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d0e6      	beq.n	8005f2e <_printf_common+0xb2>
 8005f60:	f109 0901 	add.w	r9, r9, #1
 8005f64:	e7d8      	b.n	8005f18 <_printf_common+0x9c>
	...

08005f68 <_printf_i>:
 8005f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005f70:	460c      	mov	r4, r1
 8005f72:	7e09      	ldrb	r1, [r1, #24]
 8005f74:	b085      	sub	sp, #20
 8005f76:	296e      	cmp	r1, #110	; 0x6e
 8005f78:	4617      	mov	r7, r2
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	4698      	mov	r8, r3
 8005f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f80:	f000 80b3 	beq.w	80060ea <_printf_i+0x182>
 8005f84:	d822      	bhi.n	8005fcc <_printf_i+0x64>
 8005f86:	2963      	cmp	r1, #99	; 0x63
 8005f88:	d036      	beq.n	8005ff8 <_printf_i+0x90>
 8005f8a:	d80a      	bhi.n	8005fa2 <_printf_i+0x3a>
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	f000 80b9 	beq.w	8006104 <_printf_i+0x19c>
 8005f92:	2958      	cmp	r1, #88	; 0x58
 8005f94:	f000 8083 	beq.w	800609e <_printf_i+0x136>
 8005f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005fa0:	e032      	b.n	8006008 <_printf_i+0xa0>
 8005fa2:	2964      	cmp	r1, #100	; 0x64
 8005fa4:	d001      	beq.n	8005faa <_printf_i+0x42>
 8005fa6:	2969      	cmp	r1, #105	; 0x69
 8005fa8:	d1f6      	bne.n	8005f98 <_printf_i+0x30>
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	6813      	ldr	r3, [r2, #0]
 8005fae:	0605      	lsls	r5, r0, #24
 8005fb0:	f103 0104 	add.w	r1, r3, #4
 8005fb4:	d52a      	bpl.n	800600c <_printf_i+0xa4>
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6011      	str	r1, [r2, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	da03      	bge.n	8005fc6 <_printf_i+0x5e>
 8005fbe:	222d      	movs	r2, #45	; 0x2d
 8005fc0:	425b      	negs	r3, r3
 8005fc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005fc6:	486f      	ldr	r0, [pc, #444]	; (8006184 <_printf_i+0x21c>)
 8005fc8:	220a      	movs	r2, #10
 8005fca:	e039      	b.n	8006040 <_printf_i+0xd8>
 8005fcc:	2973      	cmp	r1, #115	; 0x73
 8005fce:	f000 809d 	beq.w	800610c <_printf_i+0x1a4>
 8005fd2:	d808      	bhi.n	8005fe6 <_printf_i+0x7e>
 8005fd4:	296f      	cmp	r1, #111	; 0x6f
 8005fd6:	d020      	beq.n	800601a <_printf_i+0xb2>
 8005fd8:	2970      	cmp	r1, #112	; 0x70
 8005fda:	d1dd      	bne.n	8005f98 <_printf_i+0x30>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	f043 0320 	orr.w	r3, r3, #32
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	e003      	b.n	8005fee <_printf_i+0x86>
 8005fe6:	2975      	cmp	r1, #117	; 0x75
 8005fe8:	d017      	beq.n	800601a <_printf_i+0xb2>
 8005fea:	2978      	cmp	r1, #120	; 0x78
 8005fec:	d1d4      	bne.n	8005f98 <_printf_i+0x30>
 8005fee:	2378      	movs	r3, #120	; 0x78
 8005ff0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff4:	4864      	ldr	r0, [pc, #400]	; (8006188 <_printf_i+0x220>)
 8005ff6:	e055      	b.n	80060a4 <_printf_i+0x13c>
 8005ff8:	6813      	ldr	r3, [r2, #0]
 8005ffa:	1d19      	adds	r1, r3, #4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6011      	str	r1, [r2, #0]
 8006000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006008:	2301      	movs	r3, #1
 800600a:	e08c      	b.n	8006126 <_printf_i+0x1be>
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6011      	str	r1, [r2, #0]
 8006010:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006014:	bf18      	it	ne
 8006016:	b21b      	sxthne	r3, r3
 8006018:	e7cf      	b.n	8005fba <_printf_i+0x52>
 800601a:	6813      	ldr	r3, [r2, #0]
 800601c:	6825      	ldr	r5, [r4, #0]
 800601e:	1d18      	adds	r0, r3, #4
 8006020:	6010      	str	r0, [r2, #0]
 8006022:	0628      	lsls	r0, r5, #24
 8006024:	d501      	bpl.n	800602a <_printf_i+0xc2>
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	e002      	b.n	8006030 <_printf_i+0xc8>
 800602a:	0668      	lsls	r0, r5, #25
 800602c:	d5fb      	bpl.n	8006026 <_printf_i+0xbe>
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	4854      	ldr	r0, [pc, #336]	; (8006184 <_printf_i+0x21c>)
 8006032:	296f      	cmp	r1, #111	; 0x6f
 8006034:	bf14      	ite	ne
 8006036:	220a      	movne	r2, #10
 8006038:	2208      	moveq	r2, #8
 800603a:	2100      	movs	r1, #0
 800603c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006040:	6865      	ldr	r5, [r4, #4]
 8006042:	60a5      	str	r5, [r4, #8]
 8006044:	2d00      	cmp	r5, #0
 8006046:	f2c0 8095 	blt.w	8006174 <_printf_i+0x20c>
 800604a:	6821      	ldr	r1, [r4, #0]
 800604c:	f021 0104 	bic.w	r1, r1, #4
 8006050:	6021      	str	r1, [r4, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d13d      	bne.n	80060d2 <_printf_i+0x16a>
 8006056:	2d00      	cmp	r5, #0
 8006058:	f040 808e 	bne.w	8006178 <_printf_i+0x210>
 800605c:	4665      	mov	r5, ip
 800605e:	2a08      	cmp	r2, #8
 8006060:	d10b      	bne.n	800607a <_printf_i+0x112>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	07db      	lsls	r3, r3, #31
 8006066:	d508      	bpl.n	800607a <_printf_i+0x112>
 8006068:	6923      	ldr	r3, [r4, #16]
 800606a:	6862      	ldr	r2, [r4, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	bfde      	ittt	le
 8006070:	2330      	movle	r3, #48	; 0x30
 8006072:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006076:	f105 35ff 	addle.w	r5, r5, #4294967295
 800607a:	ebac 0305 	sub.w	r3, ip, r5
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	f8cd 8000 	str.w	r8, [sp]
 8006084:	463b      	mov	r3, r7
 8006086:	aa03      	add	r2, sp, #12
 8006088:	4621      	mov	r1, r4
 800608a:	4630      	mov	r0, r6
 800608c:	f7ff fef6 	bl	8005e7c <_printf_common>
 8006090:	3001      	adds	r0, #1
 8006092:	d14d      	bne.n	8006130 <_printf_i+0x1c8>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	b005      	add	sp, #20
 800609a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800609e:	4839      	ldr	r0, [pc, #228]	; (8006184 <_printf_i+0x21c>)
 80060a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060a4:	6813      	ldr	r3, [r2, #0]
 80060a6:	6821      	ldr	r1, [r4, #0]
 80060a8:	1d1d      	adds	r5, r3, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6015      	str	r5, [r2, #0]
 80060ae:	060a      	lsls	r2, r1, #24
 80060b0:	d50b      	bpl.n	80060ca <_printf_i+0x162>
 80060b2:	07ca      	lsls	r2, r1, #31
 80060b4:	bf44      	itt	mi
 80060b6:	f041 0120 	orrmi.w	r1, r1, #32
 80060ba:	6021      	strmi	r1, [r4, #0]
 80060bc:	b91b      	cbnz	r3, 80060c6 <_printf_i+0x15e>
 80060be:	6822      	ldr	r2, [r4, #0]
 80060c0:	f022 0220 	bic.w	r2, r2, #32
 80060c4:	6022      	str	r2, [r4, #0]
 80060c6:	2210      	movs	r2, #16
 80060c8:	e7b7      	b.n	800603a <_printf_i+0xd2>
 80060ca:	064d      	lsls	r5, r1, #25
 80060cc:	bf48      	it	mi
 80060ce:	b29b      	uxthmi	r3, r3
 80060d0:	e7ef      	b.n	80060b2 <_printf_i+0x14a>
 80060d2:	4665      	mov	r5, ip
 80060d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80060d8:	fb02 3311 	mls	r3, r2, r1, r3
 80060dc:	5cc3      	ldrb	r3, [r0, r3]
 80060de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80060e2:	460b      	mov	r3, r1
 80060e4:	2900      	cmp	r1, #0
 80060e6:	d1f5      	bne.n	80060d4 <_printf_i+0x16c>
 80060e8:	e7b9      	b.n	800605e <_printf_i+0xf6>
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	6825      	ldr	r5, [r4, #0]
 80060ee:	6961      	ldr	r1, [r4, #20]
 80060f0:	1d18      	adds	r0, r3, #4
 80060f2:	6010      	str	r0, [r2, #0]
 80060f4:	0628      	lsls	r0, r5, #24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	d501      	bpl.n	80060fe <_printf_i+0x196>
 80060fa:	6019      	str	r1, [r3, #0]
 80060fc:	e002      	b.n	8006104 <_printf_i+0x19c>
 80060fe:	066a      	lsls	r2, r5, #25
 8006100:	d5fb      	bpl.n	80060fa <_printf_i+0x192>
 8006102:	8019      	strh	r1, [r3, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	6123      	str	r3, [r4, #16]
 8006108:	4665      	mov	r5, ip
 800610a:	e7b9      	b.n	8006080 <_printf_i+0x118>
 800610c:	6813      	ldr	r3, [r2, #0]
 800610e:	1d19      	adds	r1, r3, #4
 8006110:	6011      	str	r1, [r2, #0]
 8006112:	681d      	ldr	r5, [r3, #0]
 8006114:	6862      	ldr	r2, [r4, #4]
 8006116:	2100      	movs	r1, #0
 8006118:	4628      	mov	r0, r5
 800611a:	f7fa f861 	bl	80001e0 <memchr>
 800611e:	b108      	cbz	r0, 8006124 <_printf_i+0x1bc>
 8006120:	1b40      	subs	r0, r0, r5
 8006122:	6060      	str	r0, [r4, #4]
 8006124:	6863      	ldr	r3, [r4, #4]
 8006126:	6123      	str	r3, [r4, #16]
 8006128:	2300      	movs	r3, #0
 800612a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800612e:	e7a7      	b.n	8006080 <_printf_i+0x118>
 8006130:	6923      	ldr	r3, [r4, #16]
 8006132:	462a      	mov	r2, r5
 8006134:	4639      	mov	r1, r7
 8006136:	4630      	mov	r0, r6
 8006138:	47c0      	blx	r8
 800613a:	3001      	adds	r0, #1
 800613c:	d0aa      	beq.n	8006094 <_printf_i+0x12c>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	079b      	lsls	r3, r3, #30
 8006142:	d413      	bmi.n	800616c <_printf_i+0x204>
 8006144:	68e0      	ldr	r0, [r4, #12]
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	4298      	cmp	r0, r3
 800614a:	bfb8      	it	lt
 800614c:	4618      	movlt	r0, r3
 800614e:	e7a3      	b.n	8006098 <_printf_i+0x130>
 8006150:	2301      	movs	r3, #1
 8006152:	464a      	mov	r2, r9
 8006154:	4639      	mov	r1, r7
 8006156:	4630      	mov	r0, r6
 8006158:	47c0      	blx	r8
 800615a:	3001      	adds	r0, #1
 800615c:	d09a      	beq.n	8006094 <_printf_i+0x12c>
 800615e:	3501      	adds	r5, #1
 8006160:	68e3      	ldr	r3, [r4, #12]
 8006162:	9a03      	ldr	r2, [sp, #12]
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	42ab      	cmp	r3, r5
 8006168:	dcf2      	bgt.n	8006150 <_printf_i+0x1e8>
 800616a:	e7eb      	b.n	8006144 <_printf_i+0x1dc>
 800616c:	2500      	movs	r5, #0
 800616e:	f104 0919 	add.w	r9, r4, #25
 8006172:	e7f5      	b.n	8006160 <_printf_i+0x1f8>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1ac      	bne.n	80060d2 <_printf_i+0x16a>
 8006178:	7803      	ldrb	r3, [r0, #0]
 800617a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800617e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006182:	e76c      	b.n	800605e <_printf_i+0xf6>
 8006184:	08006551 	.word	0x08006551
 8006188:	08006562 	.word	0x08006562

0800618c <memmove>:
 800618c:	4288      	cmp	r0, r1
 800618e:	b510      	push	{r4, lr}
 8006190:	eb01 0302 	add.w	r3, r1, r2
 8006194:	d807      	bhi.n	80061a6 <memmove+0x1a>
 8006196:	1e42      	subs	r2, r0, #1
 8006198:	4299      	cmp	r1, r3
 800619a:	d00a      	beq.n	80061b2 <memmove+0x26>
 800619c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80061a4:	e7f8      	b.n	8006198 <memmove+0xc>
 80061a6:	4283      	cmp	r3, r0
 80061a8:	d9f5      	bls.n	8006196 <memmove+0xa>
 80061aa:	1881      	adds	r1, r0, r2
 80061ac:	1ad2      	subs	r2, r2, r3
 80061ae:	42d3      	cmn	r3, r2
 80061b0:	d100      	bne.n	80061b4 <memmove+0x28>
 80061b2:	bd10      	pop	{r4, pc}
 80061b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80061bc:	e7f7      	b.n	80061ae <memmove+0x22>
	...

080061c0 <_free_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4605      	mov	r5, r0
 80061c4:	2900      	cmp	r1, #0
 80061c6:	d045      	beq.n	8006254 <_free_r+0x94>
 80061c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061cc:	1f0c      	subs	r4, r1, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bfb8      	it	lt
 80061d2:	18e4      	addlt	r4, r4, r3
 80061d4:	f000 f8d2 	bl	800637c <__malloc_lock>
 80061d8:	4a1f      	ldr	r2, [pc, #124]	; (8006258 <_free_r+0x98>)
 80061da:	6813      	ldr	r3, [r2, #0]
 80061dc:	4610      	mov	r0, r2
 80061de:	b933      	cbnz	r3, 80061ee <_free_r+0x2e>
 80061e0:	6063      	str	r3, [r4, #4]
 80061e2:	6014      	str	r4, [r2, #0]
 80061e4:	4628      	mov	r0, r5
 80061e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ea:	f000 b8c8 	b.w	800637e <__malloc_unlock>
 80061ee:	42a3      	cmp	r3, r4
 80061f0:	d90c      	bls.n	800620c <_free_r+0x4c>
 80061f2:	6821      	ldr	r1, [r4, #0]
 80061f4:	1862      	adds	r2, r4, r1
 80061f6:	4293      	cmp	r3, r2
 80061f8:	bf04      	itt	eq
 80061fa:	681a      	ldreq	r2, [r3, #0]
 80061fc:	685b      	ldreq	r3, [r3, #4]
 80061fe:	6063      	str	r3, [r4, #4]
 8006200:	bf04      	itt	eq
 8006202:	1852      	addeq	r2, r2, r1
 8006204:	6022      	streq	r2, [r4, #0]
 8006206:	6004      	str	r4, [r0, #0]
 8006208:	e7ec      	b.n	80061e4 <_free_r+0x24>
 800620a:	4613      	mov	r3, r2
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	b10a      	cbz	r2, 8006214 <_free_r+0x54>
 8006210:	42a2      	cmp	r2, r4
 8006212:	d9fa      	bls.n	800620a <_free_r+0x4a>
 8006214:	6819      	ldr	r1, [r3, #0]
 8006216:	1858      	adds	r0, r3, r1
 8006218:	42a0      	cmp	r0, r4
 800621a:	d10b      	bne.n	8006234 <_free_r+0x74>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	4401      	add	r1, r0
 8006220:	1858      	adds	r0, r3, r1
 8006222:	4282      	cmp	r2, r0
 8006224:	6019      	str	r1, [r3, #0]
 8006226:	d1dd      	bne.n	80061e4 <_free_r+0x24>
 8006228:	6810      	ldr	r0, [r2, #0]
 800622a:	6852      	ldr	r2, [r2, #4]
 800622c:	605a      	str	r2, [r3, #4]
 800622e:	4401      	add	r1, r0
 8006230:	6019      	str	r1, [r3, #0]
 8006232:	e7d7      	b.n	80061e4 <_free_r+0x24>
 8006234:	d902      	bls.n	800623c <_free_r+0x7c>
 8006236:	230c      	movs	r3, #12
 8006238:	602b      	str	r3, [r5, #0]
 800623a:	e7d3      	b.n	80061e4 <_free_r+0x24>
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	1821      	adds	r1, r4, r0
 8006240:	428a      	cmp	r2, r1
 8006242:	bf04      	itt	eq
 8006244:	6811      	ldreq	r1, [r2, #0]
 8006246:	6852      	ldreq	r2, [r2, #4]
 8006248:	6062      	str	r2, [r4, #4]
 800624a:	bf04      	itt	eq
 800624c:	1809      	addeq	r1, r1, r0
 800624e:	6021      	streq	r1, [r4, #0]
 8006250:	605c      	str	r4, [r3, #4]
 8006252:	e7c7      	b.n	80061e4 <_free_r+0x24>
 8006254:	bd38      	pop	{r3, r4, r5, pc}
 8006256:	bf00      	nop
 8006258:	20002120 	.word	0x20002120

0800625c <_malloc_r>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	1ccd      	adds	r5, r1, #3
 8006260:	f025 0503 	bic.w	r5, r5, #3
 8006264:	3508      	adds	r5, #8
 8006266:	2d0c      	cmp	r5, #12
 8006268:	bf38      	it	cc
 800626a:	250c      	movcc	r5, #12
 800626c:	2d00      	cmp	r5, #0
 800626e:	4606      	mov	r6, r0
 8006270:	db01      	blt.n	8006276 <_malloc_r+0x1a>
 8006272:	42a9      	cmp	r1, r5
 8006274:	d903      	bls.n	800627e <_malloc_r+0x22>
 8006276:	230c      	movs	r3, #12
 8006278:	6033      	str	r3, [r6, #0]
 800627a:	2000      	movs	r0, #0
 800627c:	bd70      	pop	{r4, r5, r6, pc}
 800627e:	f000 f87d 	bl	800637c <__malloc_lock>
 8006282:	4a21      	ldr	r2, [pc, #132]	; (8006308 <_malloc_r+0xac>)
 8006284:	6814      	ldr	r4, [r2, #0]
 8006286:	4621      	mov	r1, r4
 8006288:	b991      	cbnz	r1, 80062b0 <_malloc_r+0x54>
 800628a:	4c20      	ldr	r4, [pc, #128]	; (800630c <_malloc_r+0xb0>)
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	b91b      	cbnz	r3, 8006298 <_malloc_r+0x3c>
 8006290:	4630      	mov	r0, r6
 8006292:	f000 f863 	bl	800635c <_sbrk_r>
 8006296:	6020      	str	r0, [r4, #0]
 8006298:	4629      	mov	r1, r5
 800629a:	4630      	mov	r0, r6
 800629c:	f000 f85e 	bl	800635c <_sbrk_r>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d124      	bne.n	80062ee <_malloc_r+0x92>
 80062a4:	230c      	movs	r3, #12
 80062a6:	6033      	str	r3, [r6, #0]
 80062a8:	4630      	mov	r0, r6
 80062aa:	f000 f868 	bl	800637e <__malloc_unlock>
 80062ae:	e7e4      	b.n	800627a <_malloc_r+0x1e>
 80062b0:	680b      	ldr	r3, [r1, #0]
 80062b2:	1b5b      	subs	r3, r3, r5
 80062b4:	d418      	bmi.n	80062e8 <_malloc_r+0x8c>
 80062b6:	2b0b      	cmp	r3, #11
 80062b8:	d90f      	bls.n	80062da <_malloc_r+0x7e>
 80062ba:	600b      	str	r3, [r1, #0]
 80062bc:	50cd      	str	r5, [r1, r3]
 80062be:	18cc      	adds	r4, r1, r3
 80062c0:	4630      	mov	r0, r6
 80062c2:	f000 f85c 	bl	800637e <__malloc_unlock>
 80062c6:	f104 000b 	add.w	r0, r4, #11
 80062ca:	1d23      	adds	r3, r4, #4
 80062cc:	f020 0007 	bic.w	r0, r0, #7
 80062d0:	1ac3      	subs	r3, r0, r3
 80062d2:	d0d3      	beq.n	800627c <_malloc_r+0x20>
 80062d4:	425a      	negs	r2, r3
 80062d6:	50e2      	str	r2, [r4, r3]
 80062d8:	e7d0      	b.n	800627c <_malloc_r+0x20>
 80062da:	428c      	cmp	r4, r1
 80062dc:	684b      	ldr	r3, [r1, #4]
 80062de:	bf16      	itet	ne
 80062e0:	6063      	strne	r3, [r4, #4]
 80062e2:	6013      	streq	r3, [r2, #0]
 80062e4:	460c      	movne	r4, r1
 80062e6:	e7eb      	b.n	80062c0 <_malloc_r+0x64>
 80062e8:	460c      	mov	r4, r1
 80062ea:	6849      	ldr	r1, [r1, #4]
 80062ec:	e7cc      	b.n	8006288 <_malloc_r+0x2c>
 80062ee:	1cc4      	adds	r4, r0, #3
 80062f0:	f024 0403 	bic.w	r4, r4, #3
 80062f4:	42a0      	cmp	r0, r4
 80062f6:	d005      	beq.n	8006304 <_malloc_r+0xa8>
 80062f8:	1a21      	subs	r1, r4, r0
 80062fa:	4630      	mov	r0, r6
 80062fc:	f000 f82e 	bl	800635c <_sbrk_r>
 8006300:	3001      	adds	r0, #1
 8006302:	d0cf      	beq.n	80062a4 <_malloc_r+0x48>
 8006304:	6025      	str	r5, [r4, #0]
 8006306:	e7db      	b.n	80062c0 <_malloc_r+0x64>
 8006308:	20002120 	.word	0x20002120
 800630c:	20002124 	.word	0x20002124

08006310 <_realloc_r>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	4607      	mov	r7, r0
 8006314:	4614      	mov	r4, r2
 8006316:	460e      	mov	r6, r1
 8006318:	b921      	cbnz	r1, 8006324 <_realloc_r+0x14>
 800631a:	4611      	mov	r1, r2
 800631c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006320:	f7ff bf9c 	b.w	800625c <_malloc_r>
 8006324:	b922      	cbnz	r2, 8006330 <_realloc_r+0x20>
 8006326:	f7ff ff4b 	bl	80061c0 <_free_r>
 800632a:	4625      	mov	r5, r4
 800632c:	4628      	mov	r0, r5
 800632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006330:	f000 f826 	bl	8006380 <_malloc_usable_size_r>
 8006334:	42a0      	cmp	r0, r4
 8006336:	d20f      	bcs.n	8006358 <_realloc_r+0x48>
 8006338:	4621      	mov	r1, r4
 800633a:	4638      	mov	r0, r7
 800633c:	f7ff ff8e 	bl	800625c <_malloc_r>
 8006340:	4605      	mov	r5, r0
 8006342:	2800      	cmp	r0, #0
 8006344:	d0f2      	beq.n	800632c <_realloc_r+0x1c>
 8006346:	4631      	mov	r1, r6
 8006348:	4622      	mov	r2, r4
 800634a:	f7ff fc11 	bl	8005b70 <memcpy>
 800634e:	4631      	mov	r1, r6
 8006350:	4638      	mov	r0, r7
 8006352:	f7ff ff35 	bl	80061c0 <_free_r>
 8006356:	e7e9      	b.n	800632c <_realloc_r+0x1c>
 8006358:	4635      	mov	r5, r6
 800635a:	e7e7      	b.n	800632c <_realloc_r+0x1c>

0800635c <_sbrk_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4c06      	ldr	r4, [pc, #24]	; (8006378 <_sbrk_r+0x1c>)
 8006360:	2300      	movs	r3, #0
 8006362:	4605      	mov	r5, r0
 8006364:	4608      	mov	r0, r1
 8006366:	6023      	str	r3, [r4, #0]
 8006368:	f7ff fb38 	bl	80059dc <_sbrk>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_sbrk_r+0x1a>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	b103      	cbz	r3, 8006376 <_sbrk_r+0x1a>
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	20002280 	.word	0x20002280

0800637c <__malloc_lock>:
 800637c:	4770      	bx	lr

0800637e <__malloc_unlock>:
 800637e:	4770      	bx	lr

08006380 <_malloc_usable_size_r>:
 8006380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006384:	1f18      	subs	r0, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	bfbc      	itt	lt
 800638a:	580b      	ldrlt	r3, [r1, r0]
 800638c:	18c0      	addlt	r0, r0, r3
 800638e:	4770      	bx	lr

08006390 <_init>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr

0800639c <_fini>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	bf00      	nop
 80063a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a2:	bc08      	pop	{r3}
 80063a4:	469e      	mov	lr, r3
 80063a6:	4770      	bx	lr
