
InjecaoEletronica_Projeto_GB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006974  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08006b04  08006b04  00016b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd0  08006cd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006cd0  08006cd0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cd0  08006cd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001564  20000074  08006d4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  08006d4c  000215d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fc7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a31  00000000  00000000  0003506b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  00037aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00038810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e09a  00000000  00000000  00039468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be60  00000000  00000000  00057502  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6016  00000000  00000000  00063362  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00109378  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab0  00000000  00000000  001093f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006aec 	.word	0x08006aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006aec 	.word	0x08006aec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x28>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f92f 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	200f      	movs	r0, #15
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f005 fa80 	bl	8005f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f939 	bl	8000d2e <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f000 f90f 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000000c 	.word	0x2000000c
 8000af0:	20000004 	.word	0x20000004
 8000af4:	20000000 	.word	0x20000000

08000af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000004 	.word	0x20000004
 8000b1c:	200014b0 	.word	0x200014b0

08000b20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200014b0 	.word	0x200014b0

08000b38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff ffee 	bl	8000b20 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_Delay+0x40>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffde 	bl	8000b20 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000004 	.word	0x20000004

08000b7c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	da0b      	bge.n	8000c0c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <NVIC_SetPriority+0x4c>)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 030f 	and.w	r3, r3, #15
 8000c00:	3b04      	subs	r3, #4
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0a:	e009      	b.n	8000c20 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <NVIC_SetPriority+0x50>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff47 	bl	8000b7c <NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff5c 	bl	8000bc4 <NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff8e 	bl	8000c34 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffb0 	bl	8000c9c <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d5e:	e14e      	b.n	8000ffe <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 8140 	beq.w	8000ff8 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x40>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b12      	cmp	r3, #18
 8000d86:	d123      	bne.n	8000dd0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	691a      	ldr	r2, [r3, #16]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	6939      	ldr	r1, [r7, #16]
 8000dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0203 	and.w	r2, r3, #3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d00b      	beq.n	8000e24 <HAL_GPIO_Init+0xdc>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e18:	2b11      	cmp	r3, #17
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b12      	cmp	r3, #18
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 809a 	beq.w	8000ff8 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec4:	4b55      	ldr	r3, [pc, #340]	; (800101c <HAL_GPIO_Init+0x2d4>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a54      	ldr	r2, [pc, #336]	; (800101c <HAL_GPIO_Init+0x2d4>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b52      	ldr	r3, [pc, #328]	; (800101c <HAL_GPIO_Init+0x2d4>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000edc:	4a50      	ldr	r2, [pc, #320]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f06:	d013      	beq.n	8000f30 <HAL_GPIO_Init+0x1e8>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a46      	ldr	r2, [pc, #280]	; (8001024 <HAL_GPIO_Init+0x2dc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d00d      	beq.n	8000f2c <HAL_GPIO_Init+0x1e4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a45      	ldr	r2, [pc, #276]	; (8001028 <HAL_GPIO_Init+0x2e0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0x1e0>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a44      	ldr	r2, [pc, #272]	; (800102c <HAL_GPIO_Init+0x2e4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d101      	bne.n	8000f24 <HAL_GPIO_Init+0x1dc>
 8000f20:	2303      	movs	r3, #3
 8000f22:	e006      	b.n	8000f32 <HAL_GPIO_Init+0x1ea>
 8000f24:	2305      	movs	r3, #5
 8000f26:	e004      	b.n	8000f32 <HAL_GPIO_Init+0x1ea>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0x1ea>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <HAL_GPIO_Init+0x1ea>
 8000f30:	2300      	movs	r3, #0
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f42:	4937      	ldr	r1, [pc, #220]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f50:	4b37      	ldr	r3, [pc, #220]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f74:	4a2e      	ldr	r2, [pc, #184]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f9e:	4a24      	ldr	r2, [pc, #144]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	f47f aea9 	bne.w	8000d60 <HAL_GPIO_Init+0x18>
  }
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000
 8001024:	48000400 	.word	0x48000400
 8001028:	48000800 	.word	0x48000800
 800102c:	48000c00 	.word	0x48000c00
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001050:	e002      	b.n	8001058 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800106a:	af00      	add	r7, sp, #0
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	f000 beda 	b.w	8001e32 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 816e 	beq.w	800136a <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800108e:	4bb5      	ldr	r3, [pc, #724]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b04      	cmp	r3, #4
 8001098:	d00c      	beq.n	80010b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800109a:	4bb2      	ldr	r3, [pc, #712]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d15a      	bne.n	800115c <HAL_RCC_OscConfig+0xf8>
 80010a6:	4baf      	ldr	r3, [pc, #700]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b2:	d153      	bne.n	800115c <HAL_RCC_OscConfig+0xf8>
 80010b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80010c0:	fa93 f3a3 	rbit	r3, r3
 80010c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	fab3 f383 	clz	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d102      	bne.n	80010e6 <HAL_RCC_OscConfig+0x82>
 80010e0:	4ba0      	ldr	r3, [pc, #640]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	e015      	b.n	8001112 <HAL_RCC_OscConfig+0xae>
 80010e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80010fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001102:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800110e:	4b95      	ldr	r3, [pc, #596]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001116:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800111a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800111e:	fa92 f2a2 	rbit	r2, r2
 8001122:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001126:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800112a:	fab2 f282 	clz	r2, r2
 800112e:	b252      	sxtb	r2, r2
 8001130:	f042 0220 	orr.w	r2, r2, #32
 8001134:	b252      	sxtb	r2, r2
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	f002 021f 	and.w	r2, r2, #31
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 810f 	beq.w	8001368 <HAL_RCC_OscConfig+0x304>
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	f040 8109 	bne.w	8001368 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	f000 be6b 	b.w	8001e32 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001166:	d106      	bne.n	8001176 <HAL_RCC_OscConfig+0x112>
 8001168:	4b7e      	ldr	r3, [pc, #504]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a7d      	ldr	r2, [pc, #500]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 800116e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e030      	b.n	80011d8 <HAL_RCC_OscConfig+0x174>
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10c      	bne.n	800119a <HAL_RCC_OscConfig+0x136>
 8001180:	4b78      	ldr	r3, [pc, #480]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a77      	ldr	r2, [pc, #476]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b75      	ldr	r3, [pc, #468]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a74      	ldr	r2, [pc, #464]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e01e      	b.n	80011d8 <HAL_RCC_OscConfig+0x174>
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x15c>
 80011a6:	4b6f      	ldr	r3, [pc, #444]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a6e      	ldr	r2, [pc, #440]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80011ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b6c      	ldr	r3, [pc, #432]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a6b      	ldr	r2, [pc, #428]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e00b      	b.n	80011d8 <HAL_RCC_OscConfig+0x174>
 80011c0:	4b68      	ldr	r3, [pc, #416]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a67      	ldr	r2, [pc, #412]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b65      	ldr	r3, [pc, #404]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a64      	ldr	r2, [pc, #400]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011d8:	4b62      	ldr	r3, [pc, #392]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80011da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011dc:	f023 020f 	bic.w	r2, r3, #15
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	495f      	ldr	r1, [pc, #380]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d05a      	beq.n	80012ac <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fc93 	bl	8000b20 <HAL_GetTick>
 80011fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	e00a      	b.n	8001216 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fc8e 	bl	8000b20 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b64      	cmp	r3, #100	; 0x64
 800120e:	d902      	bls.n	8001216 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	f000 be0e 	b.w	8001e32 <HAL_RCC_OscConfig+0xdce>
 8001216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800122a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	fab3 f383 	clz	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	095b      	lsrs	r3, r3, #5
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d102      	bne.n	8001248 <HAL_RCC_OscConfig+0x1e4>
 8001242:	4b48      	ldr	r3, [pc, #288]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	e015      	b.n	8001274 <HAL_RCC_OscConfig+0x210>
 8001248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800124c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800125c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001260:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001264:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001270:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001278:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800127c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001280:	fa92 f2a2 	rbit	r2, r2
 8001284:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001288:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800128c:	fab2 f282 	clz	r2, r2
 8001290:	b252      	sxtb	r2, r2
 8001292:	f042 0220 	orr.w	r2, r2, #32
 8001296:	b252      	sxtb	r2, r2
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	f002 021f 	and.w	r2, r2, #31
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0aa      	beq.n	8001200 <HAL_RCC_OscConfig+0x19c>
 80012aa:	e05e      	b.n	800136a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc38 	bl	8000b20 <HAL_GetTick>
 80012b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b4:	e00a      	b.n	80012cc <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b6:	f7ff fc33 	bl	8000b20 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d902      	bls.n	80012cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	f000 bdb3 	b.w	8001e32 <HAL_RCC_OscConfig+0xdce>
 80012cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80012e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d102      	bne.n	80012fe <HAL_RCC_OscConfig+0x29a>
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	e015      	b.n	800132a <HAL_RCC_OscConfig+0x2c6>
 80012fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001302:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001316:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800131a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_RCC_OscConfig+0x300>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800132e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001332:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001336:	fa92 f2a2 	rbit	r2, r2
 800133a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 800133e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001342:	fab2 f282 	clz	r2, r2
 8001346:	b252      	sxtb	r2, r2
 8001348:	f042 0220 	orr.w	r2, r2, #32
 800134c:	b252      	sxtb	r2, r2
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	f002 021f 	and.w	r2, r2, #31
 8001354:	2101      	movs	r1, #1
 8001356:	fa01 f202 	lsl.w	r2, r1, r2
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1aa      	bne.n	80012b6 <HAL_RCC_OscConfig+0x252>
 8001360:	e003      	b.n	800136a <HAL_RCC_OscConfig+0x306>
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 8170 	beq.w	800165a <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800137a:	4bd0      	ldr	r3, [pc, #832]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001386:	4bcd      	ldr	r3, [pc, #820]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b08      	cmp	r3, #8
 8001390:	d16d      	bne.n	800146e <HAL_RCC_OscConfig+0x40a>
 8001392:	4bca      	ldr	r3, [pc, #808]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d167      	bne.n	800146e <HAL_RCC_OscConfig+0x40a>
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 80013b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d102      	bne.n	80013ce <HAL_RCC_OscConfig+0x36a>
 80013c8:	4bbc      	ldr	r3, [pc, #752]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	e013      	b.n	80013f6 <HAL_RCC_OscConfig+0x392>
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013f2:	4bb2      	ldr	r3, [pc, #712]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	2202      	movs	r2, #2
 80013f8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013fc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001400:	fa92 f2a2 	rbit	r2, r2
 8001404:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001408:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800140c:	fab2 f282 	clz	r2, r2
 8001410:	b252      	sxtb	r2, r2
 8001412:	f042 0220 	orr.w	r2, r2, #32
 8001416:	b252      	sxtb	r2, r2
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	f002 021f 	and.w	r2, r2, #31
 800141e:	2101      	movs	r1, #1
 8001420:	fa01 f202 	lsl.w	r2, r1, r2
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <HAL_RCC_OscConfig+0x3d6>
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d002      	beq.n	800143a <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	f000 bcfc 	b.w	8001e32 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4ba0      	ldr	r3, [pc, #640]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6959      	ldr	r1, [r3, #20]
 8001448:	23f8      	movs	r3, #248	; 0xf8
 800144a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 800145a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	4995      	ldr	r1, [pc, #596]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146c:	e0f5      	b.n	800165a <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8085 	beq.w	8001584 <HAL_RCC_OscConfig+0x520>
 800147a:	2301      	movs	r3, #1
 800147c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 800148c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001490:	fab3 f383 	clz	r3, r3
 8001494:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001498:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	461a      	mov	r2, r3
 80014a0:	2301      	movs	r3, #1
 80014a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb3c 	bl	8000b20 <HAL_GetTick>
 80014a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	e00a      	b.n	80014c4 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fb37 	bl	8000b20 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d902      	bls.n	80014c4 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	f000 bcb7 	b.w	8001e32 <HAL_RCC_OscConfig+0xdce>
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80014d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	fab3 f383 	clz	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	095b      	lsrs	r3, r3, #5
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d102      	bne.n	80014f4 <HAL_RCC_OscConfig+0x490>
 80014ee:	4b73      	ldr	r3, [pc, #460]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	e013      	b.n	800151c <HAL_RCC_OscConfig+0x4b8>
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014fe:	fa93 f3a3 	rbit	r3, r3
 8001502:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800150c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001518:	4b68      	ldr	r3, [pc, #416]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	2202      	movs	r2, #2
 800151e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001522:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001526:	fa92 f2a2 	rbit	r2, r2
 800152a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 800152e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001532:	fab2 f282 	clz	r2, r2
 8001536:	b252      	sxtb	r2, r2
 8001538:	f042 0220 	orr.w	r2, r2, #32
 800153c:	b252      	sxtb	r2, r2
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	f002 021f 	and.w	r2, r2, #31
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f202 	lsl.w	r2, r1, r2
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ae      	beq.n	80014ae <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b5a      	ldr	r3, [pc, #360]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6959      	ldr	r1, [r3, #20]
 800155e:	23f8      	movs	r3, #248	; 0xf8
 8001560:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001570:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	494f      	ldr	r1, [pc, #316]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
 8001582:	e06a      	b.n	800165a <HAL_RCC_OscConfig+0x5f6>
 8001584:	2301      	movs	r3, #1
 8001586:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001596:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	461a      	mov	r2, r3
 80015aa:	2300      	movs	r3, #0
 80015ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fab7 	bl	8000b20 <HAL_GetTick>
 80015b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fab2 	bl	8000b20 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d902      	bls.n	80015ce <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	f000 bc32 	b.w	8001e32 <HAL_RCC_OscConfig+0xdce>
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80015e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d102      	bne.n	80015fe <HAL_RCC_OscConfig+0x59a>
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	e013      	b.n	8001626 <HAL_RCC_OscConfig+0x5c2>
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001610:	2302      	movs	r3, #2
 8001612:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001616:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <HAL_RCC_OscConfig+0x658>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	2202      	movs	r2, #2
 8001628:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800162c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001630:	fa92 f2a2 	rbit	r2, r2
 8001634:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001638:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800163c:	fab2 f282 	clz	r2, r2
 8001640:	b252      	sxtb	r2, r2
 8001642:	f042 0220 	orr.w	r2, r2, #32
 8001646:	b252      	sxtb	r2, r2
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f002 021f 	and.w	r2, r2, #31
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ae      	bne.n	80015b8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80d8 	beq.w	800181a <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d067      	beq.n	8001744 <HAL_RCC_OscConfig+0x6e0>
 8001674:	2301      	movs	r3, #1
 8001676:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001686:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_OscConfig+0x65c>)
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	461a      	mov	r2, r3
 8001698:	2301      	movs	r3, #1
 800169a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169c:	f7ff fa40 	bl	8000b20 <HAL_GetTick>
 80016a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a4:	e00e      	b.n	80016c4 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a6:	f7ff fa3b 	bl	8000b20 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d906      	bls.n	80016c4 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e3bb      	b.n	8001e32 <HAL_RCC_OscConfig+0xdce>
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	10908120 	.word	0x10908120
 80016c4:	2302      	movs	r3, #2
 80016c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80016e0:	fa93 f2a3 	rbit	r2, r3
 80016e4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f2a3 	rbit	r2, r3
 80016fc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001700:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001702:	4ba5      	ldr	r3, [pc, #660]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 8001704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001706:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800170a:	2102      	movs	r1, #2
 800170c:	6019      	str	r1, [r3, #0]
 800170e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f1a3 	rbit	r1, r3
 8001718:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800171c:	6019      	str	r1, [r3, #0]
  return(result);
 800171e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b25b      	sxtb	r3, r3
 800172a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800172e:	b25b      	sxtb	r3, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0b1      	beq.n	80016a6 <HAL_RCC_OscConfig+0x642>
 8001742:	e06a      	b.n	800181a <HAL_RCC_OscConfig+0x7b6>
 8001744:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	fa93 f2a3 	rbit	r2, r3
 8001756:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800175a:	601a      	str	r2, [r3, #0]
  return(result);
 800175c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001760:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	4b8c      	ldr	r3, [pc, #560]	; (800199c <HAL_RCC_OscConfig+0x938>)
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	461a      	mov	r2, r3
 8001770:	2300      	movs	r3, #0
 8001772:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff f9d4 	bl	8000b20 <HAL_GetTick>
 8001778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	e009      	b.n	8001792 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177e:	f7ff f9cf 	bl	8000b20 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e34f      	b.n	8001e32 <HAL_RCC_OscConfig+0xdce>
 8001792:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001796:	2202      	movs	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fa93 f2a3 	rbit	r2, r3
 80017a4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017c6:	2202      	movs	r2, #2
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017da:	4b6f      	ldr	r3, [pc, #444]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80017dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017e2:	2102      	movs	r1, #2
 80017e4:	6019      	str	r1, [r3, #0]
 80017e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f1a3 	rbit	r1, r3
 80017f0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017f4:	6019      	str	r1, [r3, #0]
  return(result);
 80017f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b25b      	sxtb	r3, r3
 8001802:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001806:	b25b      	sxtb	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1b1      	bne.n	800177e <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8159 	beq.w	8001adc <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d112      	bne.n	8001862 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	4b56      	ldr	r3, [pc, #344]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	4a55      	ldr	r2, [pc, #340]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	61d3      	str	r3, [r2, #28]
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800185c:	2301      	movs	r3, #1
 800185e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <HAL_RCC_OscConfig+0x93c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCC_OscConfig+0x93c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_RCC_OscConfig+0x93c>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff f951 	bl	8000b20 <HAL_GetTick>
 800187e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	e009      	b.n	8001898 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001884:	f7ff f94c 	bl	8000b20 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b64      	cmp	r3, #100	; 0x64
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e2cc      	b.n	8001e32 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_RCC_OscConfig+0x93c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ef      	beq.n	8001884 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x858>
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a39      	ldr	r2, [pc, #228]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	e02f      	b.n	800191c <HAL_RCC_OscConfig+0x8b8>
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x87c>
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a33      	ldr	r2, [pc, #204]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a30      	ldr	r2, [pc, #192]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	6213      	str	r3, [r2, #32]
 80018de:	e01d      	b.n	800191c <HAL_RCC_OscConfig+0x8b8>
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x8a0>
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a27      	ldr	r2, [pc, #156]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0x8b8>
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a23      	ldr	r2, [pc, #140]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a20      	ldr	r2, [pc, #128]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d06b      	beq.n	80019fe <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff f8fb 	bl	8000b20 <HAL_GetTick>
 800192a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7ff f8f6 	bl	8000b20 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e274      	b.n	8001e32 <HAL_RCC_OscConfig+0xdce>
 8001948:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800194c:	2202      	movs	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001964:	2202      	movs	r2, #2
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001976:	601a      	str	r2, [r3, #0]
  return(result);
 8001978:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800197c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	095b      	lsrs	r3, r3, #5
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x940>
 8001992:	4b01      	ldr	r3, [pc, #4]	; (8001998 <HAL_RCC_OscConfig+0x934>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	e013      	b.n	80019c0 <HAL_RCC_OscConfig+0x95c>
 8001998:	40021000 	.word	0x40021000
 800199c:	10908120 	.word	0x10908120
 80019a0:	40007000 	.word	0x40007000
 80019a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019a8:	2202      	movs	r2, #2
 80019aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	4bbb      	ldr	r3, [pc, #748]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019c4:	2102      	movs	r1, #2
 80019c6:	6011      	str	r1, [r2, #0]
 80019c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	fa92 f1a2 	rbit	r1, r2
 80019d2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019d6:	6011      	str	r1, [r2, #0]
  return(result);
 80019d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	fab2 f282 	clz	r2, r2
 80019e2:	b252      	sxtb	r2, r2
 80019e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019e8:	b252      	sxtb	r2, r2
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f002 021f 	and.w	r2, r2, #31
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d099      	beq.n	8001930 <HAL_RCC_OscConfig+0x8cc>
 80019fc:	e064      	b.n	8001ac8 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff f88f 	bl	8000b20 <HAL_GetTick>
 8001a02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f88a 	bl	8000b20 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e208      	b.n	8001e32 <HAL_RCC_OscConfig+0xdce>
 8001a20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a24:	2202      	movs	r2, #2
 8001a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f2a3 	rbit	r2, r3
 8001a4a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a4e:	601a      	str	r2, [r3, #0]
  return(result);
 8001a50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a54:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d102      	bne.n	8001a70 <HAL_RCC_OscConfig+0xa0c>
 8001a6a:	4b90      	ldr	r3, [pc, #576]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	e00d      	b.n	8001a8c <HAL_RCC_OscConfig+0xa28>
 8001a70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a74:	2202      	movs	r2, #2
 8001a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	4b88      	ldr	r3, [pc, #544]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a90:	2102      	movs	r1, #2
 8001a92:	6011      	str	r1, [r2, #0]
 8001a94:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	fa92 f1a2 	rbit	r1, r2
 8001a9e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001aa2:	6011      	str	r1, [r2, #0]
  return(result);
 8001aa4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	fab2 f282 	clz	r2, r2
 8001aae:	b252      	sxtb	r2, r2
 8001ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab4:	b252      	sxtb	r2, r2
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f002 021f 	and.w	r2, r2, #31
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d19f      	bne.n	8001a08 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ac8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad0:	4b76      	ldr	r3, [pc, #472]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	4a75      	ldr	r2, [pc, #468]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 8001ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ada:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 81a4 	beq.w	8001e30 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae8:	4b70      	ldr	r3, [pc, #448]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	f000 819b 	beq.w	8001e2c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	f040 8113 	bne.w	8001d28 <HAL_RCC_OscConfig+0xcc4>
 8001b02:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	fa93 f2a3 	rbit	r2, r3
 8001b16:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b1a:	601a      	str	r2, [r3, #0]
  return(result);
 8001b1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	461a      	mov	r2, r3
 8001b32:	2300      	movs	r3, #0
 8001b34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7fe fff3 	bl	8000b20 <HAL_GetTick>
 8001b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	e009      	b.n	8001b54 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b40:	f7fe ffee 	bl	8000b20 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e16e      	b.n	8001e32 <HAL_RCC_OscConfig+0xdce>
 8001b54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b6c:	601a      	str	r2, [r3, #0]
  return(result);
 8001b6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d102      	bne.n	8001b8e <HAL_RCC_OscConfig+0xb2a>
 8001b88:	4b48      	ldr	r3, [pc, #288]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	e01b      	b.n	8001bc6 <HAL_RCC_OscConfig+0xb62>
 8001b8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bce:	6011      	str	r1, [r2, #0]
 8001bd0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	fa92 f1a2 	rbit	r1, r2
 8001bda:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bde:	6011      	str	r1, [r2, #0]
  return(result);
 8001be0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	fab2 f282 	clz	r2, r2
 8001bea:	b252      	sxtb	r2, r2
 8001bec:	f042 0220 	orr.w	r2, r2, #32
 8001bf0:	b252      	sxtb	r2, r2
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	f002 021f 	and.w	r2, r2, #31
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d19d      	bne.n	8001b40 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	4924      	ldr	r1, [pc, #144]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
 8001c20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fa93 f2a3 	rbit	r2, r3
 8001c34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c38:	601a      	str	r2, [r3, #0]
  return(result);
 8001c3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2301      	movs	r3, #1
 8001c52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7fe ff64 	bl	8000b20 <HAL_GetTick>
 8001c58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5c:	e009      	b.n	8001c72 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe ff5f 	bl	8000b20 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0df      	b.n	8001e32 <HAL_RCC_OscConfig+0xdce>
 8001c72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c8a:	601a      	str	r2, [r3, #0]
  return(result);
 8001c8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d104      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xc4c>
 8001ca6:	4b01      	ldr	r3, [pc, #4]	; (8001cac <HAL_RCC_OscConfig+0xc48>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	e01d      	b.n	8001ce8 <HAL_RCC_OscConfig+0xc84>
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	fa93 f2a3 	rbit	r2, r3
 8001cc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <HAL_RCC_OscConfig+0xdd8>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001cec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cf0:	6011      	str	r1, [r2, #0]
 8001cf2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	fa92 f1a2 	rbit	r1, r2
 8001cfc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d00:	6011      	str	r1, [r2, #0]
  return(result);
 8001d02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	fab2 f282 	clz	r2, r2
 8001d0c:	b252      	sxtb	r2, r2
 8001d0e:	f042 0220 	orr.w	r2, r2, #32
 8001d12:	b252      	sxtb	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f002 021f 	and.w	r2, r2, #31
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d09b      	beq.n	8001c5e <HAL_RCC_OscConfig+0xbfa>
 8001d26:	e083      	b.n	8001e30 <HAL_RCC_OscConfig+0xdcc>
 8001d28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fa93 f2a3 	rbit	r2, r3
 8001d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d40:	601a      	str	r2, [r3, #0]
  return(result);
 8001d42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d46:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	461a      	mov	r2, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fee0 	bl	8000b20 <HAL_GetTick>
 8001d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d64:	e009      	b.n	8001d7a <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe fedb 	bl	8000b20 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e05b      	b.n	8001e32 <HAL_RCC_OscConfig+0xdce>
 8001d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f2a3 	rbit	r2, r3
 8001d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d92:	601a      	str	r2, [r3, #0]
  return(result);
 8001d94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_RCC_OscConfig+0xd50>
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <HAL_RCC_OscConfig+0xdd8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	e01b      	b.n	8001dec <HAL_RCC_OscConfig+0xd88>
 8001db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f107 0318 	add.w	r3, r7, #24
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_RCC_OscConfig+0xdd8>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	f107 0214 	add.w	r2, r7, #20
 8001df0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001df4:	6011      	str	r1, [r2, #0]
 8001df6:	f107 0214 	add.w	r2, r7, #20
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	fa92 f1a2 	rbit	r1, r2
 8001e00:	f107 0210 	add.w	r2, r7, #16
 8001e04:	6011      	str	r1, [r2, #0]
  return(result);
 8001e06:	f107 0210 	add.w	r2, r7, #16
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	fab2 f282 	clz	r2, r2
 8001e10:	b252      	sxtb	r2, r2
 8001e12:	f042 0220 	orr.w	r2, r2, #32
 8001e16:	b252      	sxtb	r2, r2
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f002 021f 	and.w	r2, r2, #31
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f202 	lsl.w	r2, r1, r2
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d19d      	bne.n	8001d66 <HAL_RCC_OscConfig+0xd02>
 8001e2a:	e001      	b.n	8001e30 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000

08001e40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b09e      	sub	sp, #120	; 0x78
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e164      	b.n	8002122 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <HAL_RCC_ClockConfig+0x264>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d910      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b8f      	ldr	r3, [pc, #572]	; (80020a4 <HAL_RCC_ClockConfig+0x264>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	498d      	ldr	r1, [pc, #564]	; (80020a4 <HAL_RCC_ClockConfig+0x264>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <HAL_RCC_ClockConfig+0x264>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e14c      	b.n	8002122 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e94:	4b84      	ldr	r3, [pc, #528]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4981      	ldr	r1, [pc, #516]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80df 	beq.w	8002072 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d13d      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xf8>
 8001ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xa6>
 8001ee0:	4b71      	ldr	r3, [pc, #452]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	e00f      	b.n	8001f06 <HAL_RCC_ClockConfig+0xc6>
 8001ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8001efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f02:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f0e:	fa92 f2a2 	rbit	r2, r2
 8001f12:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001f14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b252      	sxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b252      	sxtb	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f002 021f 	and.w	r2, r2, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d17d      	bne.n	8002030 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0f4      	b.n	8002122 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d13d      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x17c>
 8001f40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x12a>
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	e00f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x14a>
 8001f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	647b      	str	r3, [r7, #68]	; 0x44
 8001f78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f86:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f92:	fa92 f2a2 	rbit	r2, r2
 8001f96:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f9a:	fab2 f282 	clz	r2, r2
 8001f9e:	b252      	sxtb	r2, r2
 8001fa0:	f042 0220 	orr.w	r2, r2, #32
 8001fa4:	b252      	sxtb	r2, r2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f002 021f 	and.w	r2, r2, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d13b      	bne.n	8002030 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0b2      	b.n	8002122 <HAL_RCC_ClockConfig+0x2e2>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x1a4>
 8001fde:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e00d      	b.n	8002000 <HAL_RCC_ClockConfig+0x1c0>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2202      	movs	r2, #2
 8002002:	61ba      	str	r2, [r7, #24]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	617a      	str	r2, [r7, #20]
  return(result);
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b252      	sxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b252      	sxtb	r2, r2
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f002 021f 	and.w	r2, r2, #31
 8002020:	2101      	movs	r1, #1
 8002022:	fa01 f202 	lsl.w	r2, r1, r2
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e078      	b.n	8002122 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f023 0203 	bic.w	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	491a      	ldr	r1, [pc, #104]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002042:	f7fe fd6d 	bl	8000b20 <HAL_GetTick>
 8002046:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002048:	e00a      	b.n	8002060 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204a:	f7fe fd69 	bl	8000b20 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e060      	b.n	8002122 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_ClockConfig+0x268>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 020c 	and.w	r2, r3, #12
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	429a      	cmp	r2, r3
 8002070:	d1eb      	bne.n	800204a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <HAL_RCC_ClockConfig+0x264>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d215      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RCC_ClockConfig+0x264>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 0207 	bic.w	r2, r3, #7
 8002088:	4906      	ldr	r1, [pc, #24]	; (80020a4 <HAL_RCC_ClockConfig+0x264>)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_RCC_ClockConfig+0x264>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d006      	beq.n	80020ac <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e03f      	b.n	8002122 <HAL_RCC_ClockConfig+0x2e2>
 80020a2:	bf00      	nop
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_RCC_ClockConfig+0x2ec>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4919      	ldr	r1, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x2ec>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_RCC_ClockConfig+0x2ec>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4911      	ldr	r1, [pc, #68]	; (800212c <HAL_RCC_ClockConfig+0x2ec>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ea:	f000 f825 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020ee:	4601      	mov	r1, r0
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x2ec>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020f8:	23f0      	movs	r3, #240	; 0xf0
 80020fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	60fb      	str	r3, [r7, #12]
  return(result);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_RCC_ClockConfig+0x2f0>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	fa21 f303 	lsr.w	r3, r1, r3
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_RCC_ClockConfig+0x2f4>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800211a:	200f      	movs	r0, #15
 800211c:	f7fe fcbc 	bl	8000a98 <HAL_InitTick>
  
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3778      	adds	r7, #120	; 0x78
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	08006c84 	.word	0x08006c84
 8002134:	2000000c 	.word	0x2000000c

08002138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b08b      	sub	sp, #44	; 0x2c
 800213c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b04      	cmp	r3, #4
 8002160:	d002      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x30>
 8002162:	2b08      	cmp	r3, #8
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x36>
 8002166:	e03c      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002168:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800216a:	623b      	str	r3, [r7, #32]
      break;
 800216c:	e03c      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002174:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002178:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	607b      	str	r3, [r7, #4]
  return(result);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <HAL_RCC_GetSysClockFreq+0xc8>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	f003 020f 	and.w	r2, r3, #15
 800219a:	230f      	movs	r3, #15
 800219c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	e004      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	623b      	str	r3, [r7, #32]
      break;
 80021e0:	e002      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e4:	623b      	str	r3, [r7, #32]
      break;
 80021e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e8:	6a3b      	ldr	r3, [r7, #32]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	372c      	adds	r7, #44	; 0x2c
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	007a1200 	.word	0x007a1200
 8002200:	08006c64 	.word	0x08006c64
 8002204:	08006c74 	.word	0x08006c74
 8002208:	003d0900 	.word	0x003d0900

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_RCC_GetHCLKFreq+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	2000000c 	.word	0x2000000c

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800222a:	f7ff ffef 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222e:	4601      	mov	r1, r0
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002238:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800223c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	603b      	str	r3, [r7, #0]
  return(result);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	08006c94 	.word	0x08006c94

08002268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800226e:	f7ff ffcd 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002272:	4601      	mov	r1, r0
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800227c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002280:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	603b      	str	r3, [r7, #0]
  return(result);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08006c94 	.word	0x08006c94

080022ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07c      	b.n	80023b8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f003 fe7f 	bl	8005fdc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2202      	movs	r2, #2
 80022e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022fe:	d902      	bls.n	8002306 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e002      	b.n	800230c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002314:	d007      	beq.n	8002326 <HAL_SPI_Init+0x7a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800231e:	d002      	beq.n	8002326 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10b      	bne.n	8002346 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002336:	d903      	bls.n	8002340 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
 800233e:	e002      	b.n	8002346 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	ea42 0103 	orr.w	r1, r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f003 0204 	and.w	r2, r3, #4
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	ea42 0103 	orr.w	r1, r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	75fb      	strb	r3, [r7, #23]


  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023e0:	d112      	bne.n	8002408 <HAL_SPI_Receive+0x48>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10e      	bne.n	8002408 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2204      	movs	r2, #4
 80023ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023f2:	88fa      	ldrh	r2, [r7, #6]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f901 	bl	8002606 <HAL_SPI_TransmitReceive>
 8002404:	4603      	mov	r3, r0
 8002406:	e0fa      	b.n	80025fe <HAL_SPI_Receive+0x23e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_SPI_Receive+0x56>
 8002412:	2302      	movs	r3, #2
 8002414:	e0f3      	b.n	80025fe <HAL_SPI_Receive+0x23e>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800241e:	f7fe fb7f 	bl	8000b20 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d002      	beq.n	8002436 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8002430:	2302      	movs	r3, #2
 8002432:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002434:	e0da      	b.n	80025ec <HAL_SPI_Receive+0x22c>
  }

  if ((pData == NULL) || (Size == 0U))
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Receive+0x82>
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002446:	e0d1      	b.n	80025ec <HAL_SPI_Receive+0x22c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2204      	movs	r2, #4
 800244c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	88fa      	ldrh	r2, [r7, #6]
 8002460:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002492:	d908      	bls.n	80024a6 <HAL_SPI_Receive+0xe6>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	e007      	b.n	80024b6 <HAL_SPI_Receive+0xf6>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024b4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024be:	d107      	bne.n	80024d0 <HAL_SPI_Receive+0x110>
  {
    SPI_1LINE_RX(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d007      	beq.n	80024ee <HAL_SPI_Receive+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024f6:	d860      	bhi.n	80025ba <HAL_SPI_Receive+0x1fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024f8:	e02c      	b.n	8002554 <HAL_SPI_Receive+0x194>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d113      	bne.n	8002530 <HAL_SPI_Receive+0x170>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3301      	adds	r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800252e:	e011      	b.n	8002554 <HAL_SPI_Receive+0x194>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_SPI_Receive+0x18e>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d00a      	beq.n	8002554 <HAL_SPI_Receive+0x194>
 800253e:	f7fe faef 	bl	8000b20 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d802      	bhi.n	8002554 <HAL_SPI_Receive+0x194>
        {
          errorcode = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002552:	e04b      	b.n	80025ec <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1cc      	bne.n	80024fa <HAL_SPI_Receive+0x13a>
 8002560:	e031      	b.n	80025c6 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d112      	bne.n	8002596 <HAL_SPI_Receive+0x1d6>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	b29a      	uxth	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	3302      	adds	r3, #2
 8002580:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002594:	e011      	b.n	80025ba <HAL_SPI_Receive+0x1fa>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00b      	beq.n	80025b4 <HAL_SPI_Receive+0x1f4>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d00a      	beq.n	80025ba <HAL_SPI_Receive+0x1fa>
 80025a4:	f7fe fabc 	bl	8000b20 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d802      	bhi.n	80025ba <HAL_SPI_Receive+0x1fa>
        {
          errorcode = HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025b8:	e018      	b.n	80025ec <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1cd      	bne.n	8002562 <HAL_SPI_Receive+0x1a2>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 faf3 	bl	8002bb6 <SPI_EndRxTransaction>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_SPI_Receive+0x21c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_SPI_Receive+0x22a>
  {
    errorcode = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	75fb      	strb	r3, [r7, #23]
 80025e8:	e000      	b.n	80025ec <HAL_SPI_Receive+0x22c>
  }

error :
 80025ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b08a      	sub	sp, #40	; 0x28
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002620:	2301      	movs	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_SPI_TransmitReceive+0x32>
 8002634:	2302      	movs	r3, #2
 8002636:	e1e2      	b.n	80029fe <HAL_SPI_TransmitReceive+0x3f8>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002640:	f7fe fa6e 	bl	8000b20 <HAL_GetTick>
 8002644:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d00e      	beq.n	800267a <HAL_SPI_TransmitReceive+0x74>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002662:	d106      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x6c>
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b04      	cmp	r3, #4
 8002670:	d003      	beq.n	800267a <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002672:	2302      	movs	r3, #2
 8002674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002678:	e1b7      	b.n	80029ea <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_SPI_TransmitReceive+0x86>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_SPI_TransmitReceive+0x86>
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d103      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002692:	e1aa      	b.n	80029ea <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b04      	cmp	r3, #4
 800269e:	d003      	beq.n	80026a8 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2205      	movs	r2, #5
 80026a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	887a      	ldrh	r2, [r7, #2]
 80026ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026ea:	d805      	bhi.n	80026f8 <HAL_SPI_TransmitReceive+0xf2>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d908      	bls.n	800270a <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	e007      	b.n	800271a <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002718:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d007      	beq.n	8002738 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002736:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002740:	d975      	bls.n	800282e <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x14e>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d160      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3302      	adds	r3, #2
 8002762:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002772:	e050      	b.n	8002816 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01c      	beq.n	80027b4 <HAL_SPI_TransmitReceive+0x1ae>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d017      	beq.n	80027b4 <HAL_SPI_TransmitReceive+0x1ae>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d110      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	881a      	ldrh	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	3302      	adds	r3, #2
 80027a0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01a      	beq.n	80027f6 <HAL_SPI_TransmitReceive+0x1f0>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d113      	bne.n	80027f6 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3302      	adds	r3, #2
 80027de:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027f2:	2301      	movs	r3, #1
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d00b      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x210>
 80027fe:	f7fe f98f 	bl	8000b20 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280a:	429a      	cmp	r2, r3
 800280c:	d803      	bhi.n	8002816 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002814:	e0e9      	b.n	80029ea <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1a9      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x16e>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1a3      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x16e>
 800282c:	e0c9      	b.n	80029c2 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_SPI_TransmitReceive+0x23c>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	f040 80b3 	bne.w	80029a8 <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d90f      	bls.n	800286c <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	3302      	adds	r3, #2
 800285a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b02      	subs	r3, #2
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	87da      	strh	r2, [r3, #62]	; 0x3e
 800286a:	e09d      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	60ba      	str	r2, [r7, #8]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	320c      	adds	r2, #12
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800288a:	e08d      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	2b00      	cmp	r3, #0
 8002890:	d031      	beq.n	80028f6 <HAL_SPI_TransmitReceive+0x2f0>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02c      	beq.n	80028f6 <HAL_SPI_TransmitReceive+0x2f0>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d125      	bne.n	80028f6 <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d90f      	bls.n	80028d4 <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	881a      	ldrh	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3302      	adds	r3, #2
 80028c2:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b02      	subs	r3, #2
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028d2:	e00e      	b.n	80028f2 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	60ba      	str	r2, [r7, #8]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	320c      	adds	r2, #12
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d042      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x382>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d13b      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d920      	bls.n	800295e <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	b29a      	uxth	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3302      	adds	r3, #2
 800292c:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b02      	subs	r3, #2
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d81b      	bhi.n	8002984 <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	e012      	b.n	8002984 <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f103 020c 	add.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	1c59      	adds	r1, r3, #1
 800296a:	6079      	str	r1, [r7, #4]
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002984:	2301      	movs	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298e:	d00b      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x3a2>
 8002990:	f7fe f8c6 	bl	8000b20 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299c:	429a      	cmp	r2, r3
 800299e:	d803      	bhi.n	80029a8 <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80029a6:	e020      	b.n	80029ea <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f47f af6c 	bne.w	800288c <HAL_SPI_TransmitReceive+0x286>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f47f af65 	bne.w	800288c <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f94d 	bl	8002c66 <SPI_EndRxTxTransaction>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029e6:	e000      	b.n	80029ea <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 80029e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80029fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3728      	adds	r7, #40	; 0x28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a14:	e04c      	b.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d048      	beq.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002a24:	f7fe f87c 	bl	8000b20 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d83d      	bhi.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4c:	d111      	bne.n	8002a72 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a56:	d004      	beq.n	8002a62 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a60:	d107      	bne.n	8002a72 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7a:	d10f      	bne.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e00e      	b.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d101      	bne.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	e000      	b.n	8002ac6 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1a4      	bne.n	8002a16 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002ae4:	e05a      	b.n	8002b9c <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002aec:	d109      	bne.n	8002b02 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d048      	beq.n	8002b9c <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002b10:	f7fe f806 	bl	8000b20 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d83d      	bhi.n	8002b9c <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b38:	d111      	bne.n	8002b5e <SPI_WaitFifoStateUntilTimeout+0x88>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b42:	d004      	beq.n	8002b4e <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4c:	d107      	bne.n	8002b5e <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b66:	d10f      	bne.n	8002b88 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e008      	b.n	8002bae <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d19c      	bne.n	8002ae6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af02      	add	r7, sp, #8
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bca:	d111      	bne.n	8002bf0 <SPI_EndRxTransaction+0x3a>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	d004      	beq.n	8002be0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bde:	d107      	bne.n	8002bf0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bee:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff ff03 	bl	8002a06 <SPI_WaitFlagStateUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e023      	b.n	8002c5e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c1e:	d11d      	bne.n	8002c5c <SPI_EndRxTransaction+0xa6>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c28:	d004      	beq.n	8002c34 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c32:	d113      	bne.n	8002c5c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff ff48 	bl	8002ad6 <SPI_WaitFifoStateUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c50:	f043 0220 	orr.w	r2, r3, #32
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af02      	add	r7, sp, #8
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff ff29 	bl	8002ad6 <SPI_WaitFifoStateUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e027      	b.n	8002cea <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff feae 	bl	8002a06 <SPI_WaitFlagStateUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e014      	b.n	8002cea <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff ff02 	bl	8002ad6 <SPI_WaitFifoStateUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e000      	b.n	8002cea <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e043      	b.n	8002d8c <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f003 f9a3 	bl	8006064 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2224      	movs	r2, #36	; 0x24
 8002d22:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8ba 	bl	8002eb0 <UART_SetConfig>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e022      	b.n	8002d8c <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa14 	bl	800317c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d72:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fa9b 	bl	80032c0 <UART_CheckIdleState>
 8002d8a:	4603      	mov	r3, r0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d177      	bne.n	8002ea4 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_UART_Transmit+0x2c>
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e070      	b.n	8002ea6 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Transmit+0x3e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e069      	b.n	8002ea6 <HAL_UART_Transmit+0x112>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2221      	movs	r2, #33	; 0x21
 8002de4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002de8:	f7fd fe9a 	bl	8000b20 <HAL_GetTick>
 8002dec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	88fa      	ldrh	r2, [r7, #6]
 8002dfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002dfe:	e034      	b.n	8002e6a <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fa98 	bl	8003352 <UART_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e03c      	b.n	8002ea6 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e34:	d111      	bne.n	8002e5a <HAL_UART_Transmit+0xc6>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3302      	adds	r3, #2
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	e007      	b.n	8002e6a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	60ba      	str	r2, [r7, #8]
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b292      	uxth	r2, r2
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1c4      	bne.n	8002e00 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2140      	movs	r1, #64	; 0x40
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fa66 	bl	8003352 <UART_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e00a      	b.n	8002ea6 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b9f      	ldr	r3, [pc, #636]	; (8003168 <UART_SetConfig+0x2b8>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	68f9      	ldr	r1, [r7, #12]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a8e      	ldr	r2, [pc, #568]	; (800316c <UART_SetConfig+0x2bc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d121      	bne.n	8002f7c <UART_SetConfig+0xcc>
 8002f38:	4b8d      	ldr	r3, [pc, #564]	; (8003170 <UART_SetConfig+0x2c0>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d817      	bhi.n	8002f74 <UART_SetConfig+0xc4>
 8002f44:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <UART_SetConfig+0x9c>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f5d 	.word	0x08002f5d
 8002f50:	08002f69 	.word	0x08002f69
 8002f54:	08002f6f 	.word	0x08002f6f
 8002f58:	08002f63 	.word	0x08002f63
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	75fb      	strb	r3, [r7, #23]
 8002f60:	e01e      	b.n	8002fa0 <UART_SetConfig+0xf0>
 8002f62:	2302      	movs	r3, #2
 8002f64:	75fb      	strb	r3, [r7, #23]
 8002f66:	e01b      	b.n	8002fa0 <UART_SetConfig+0xf0>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	75fb      	strb	r3, [r7, #23]
 8002f6c:	e018      	b.n	8002fa0 <UART_SetConfig+0xf0>
 8002f6e:	2308      	movs	r3, #8
 8002f70:	75fb      	strb	r3, [r7, #23]
 8002f72:	e015      	b.n	8002fa0 <UART_SetConfig+0xf0>
 8002f74:	2310      	movs	r3, #16
 8002f76:	75fb      	strb	r3, [r7, #23]
 8002f78:	bf00      	nop
 8002f7a:	e011      	b.n	8002fa0 <UART_SetConfig+0xf0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a7c      	ldr	r2, [pc, #496]	; (8003174 <UART_SetConfig+0x2c4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d102      	bne.n	8002f8c <UART_SetConfig+0xdc>
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]
 8002f8a:	e009      	b.n	8002fa0 <UART_SetConfig+0xf0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a79      	ldr	r2, [pc, #484]	; (8003178 <UART_SetConfig+0x2c8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d102      	bne.n	8002f9c <UART_SetConfig+0xec>
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]
 8002f9a:	e001      	b.n	8002fa0 <UART_SetConfig+0xf0>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa8:	d16f      	bne.n	800308a <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d857      	bhi.n	8003060 <UART_SetConfig+0x1b0>
 8002fb0:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <UART_SetConfig+0x108>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08002fdd 	.word	0x08002fdd
 8002fbc:	08002ff9 	.word	0x08002ff9
 8002fc0:	08003015 	.word	0x08003015
 8002fc4:	08003061 	.word	0x08003061
 8002fc8:	0800302f 	.word	0x0800302f
 8002fcc:	08003061 	.word	0x08003061
 8002fd0:	08003061 	.word	0x08003061
 8002fd4:	08003061 	.word	0x08003061
 8002fd8:	0800304b 	.word	0x0800304b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002fdc:	f7ff f922 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	005a      	lsls	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	441a      	add	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	82bb      	strh	r3, [r7, #20]
        break;
 8002ff6:	e036      	b.n	8003066 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ff8:	f7ff f936 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	005a      	lsls	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	441a      	add	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	82bb      	strh	r3, [r7, #20]
        break;
 8003012:	e028      	b.n	8003066 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800301e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6852      	ldr	r2, [r2, #4]
 8003026:	fbb3 f3f2 	udiv	r3, r3, r2
 800302a:	82bb      	strh	r3, [r7, #20]
        break;
 800302c:	e01b      	b.n	8003066 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800302e:	f7ff f883 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8003032:	4603      	mov	r3, r0
 8003034:	005a      	lsls	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	82bb      	strh	r3, [r7, #20]
        break;
 8003048:	e00d      	b.n	8003066 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	82bb      	strh	r3, [r7, #20]
        break;
 800305e:	e002      	b.n	8003066 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	74fb      	strb	r3, [r7, #19]
        break;
 8003064:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003066:	8abb      	ldrh	r3, [r7, #20]
 8003068:	f023 030f 	bic.w	r3, r3, #15
 800306c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800306e:	8abb      	ldrh	r3, [r7, #20]
 8003070:	105b      	asrs	r3, r3, #1
 8003072:	b29b      	uxth	r3, r3
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	b29a      	uxth	r2, r3
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	4313      	orrs	r3, r2
 800307e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	897a      	ldrh	r2, [r7, #10]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	e069      	b.n	800315e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d863      	bhi.n	8003158 <UART_SetConfig+0x2a8>
 8003090:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0x1e8>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	080030bd 	.word	0x080030bd
 800309c:	080030dd 	.word	0x080030dd
 80030a0:	080030fd 	.word	0x080030fd
 80030a4:	08003159 	.word	0x08003159
 80030a8:	0800311d 	.word	0x0800311d
 80030ac:	08003159 	.word	0x08003159
 80030b0:	08003159 	.word	0x08003159
 80030b4:	08003159 	.word	0x08003159
 80030b8:	0800313d 	.word	0x0800313d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030bc:	f7ff f8b2 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60da      	str	r2, [r3, #12]
        break;
 80030da:	e040      	b.n	800315e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030dc:	f7ff f8c4 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	441a      	add	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60da      	str	r2, [r3, #12]
        break;
 80030fa:	e030      	b.n	800315e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	085b      	lsrs	r3, r3, #1
 8003102:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003106:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6852      	ldr	r2, [r2, #4]
 800310e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60da      	str	r2, [r3, #12]
        break;
 800311a:	e020      	b.n	800315e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800311c:	f7ff f80c 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60da      	str	r2, [r3, #12]
        break;
 800313a:	e010      	b.n	800315e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60da      	str	r2, [r3, #12]
        break;
 8003156:	e002      	b.n	800315e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	74fb      	strb	r3, [r7, #19]
        break;
 800315c:	bf00      	nop
    }
  }

  return ret;
 800315e:	7cfb      	ldrb	r3, [r7, #19]

}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	efff69f3 	.word	0xefff69f3
 800316c:	40013800 	.word	0x40013800
 8003170:	40021000 	.word	0x40021000
 8003174:	40004400 	.word	0x40004400
 8003178:	40004800 	.word	0x40004800

0800317c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01a      	beq.n	8003292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327a:	d10a      	bne.n	8003292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032d2:	f7fd fc25 	bl	8000b20 <HAL_GetTick>
 80032d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d10e      	bne.n	8003304 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f82c 	bl	8003352 <UART_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e022      	b.n	800334a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b04      	cmp	r3, #4
 8003310:	d10e      	bne.n	8003330 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003312:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f816 	bl	8003352 <UART_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e00c      	b.n	800334a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003362:	e02c      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d028      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <UART_WaitOnFlagUntilTimeout+0x30>
 8003372:	f7fd fbd5 	bl	8000b20 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	429a      	cmp	r2, r3
 8003380:	d21d      	bcs.n	80033be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003390:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e00f      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d0c3      	beq.n	8003364 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4603      	mov	r3, r0
 80033ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033f8:	2b84      	cmp	r3, #132	; 0x84
 80033fa:	d005      	beq.n	8003408 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	3303      	adds	r3, #3
 8003406:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003408:	68fb      	ldr	r3, [r7, #12]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800341c:	f3ef 8305 	mrs	r3, IPSR
 8003420:	607b      	str	r3, [r7, #4]
  return(result);
 8003422:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800343e:	f000 fff7 	bl	8004430 <vTaskStartScheduler>
  
  return osOK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}

08003448 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344a:	b087      	sub	sp, #28
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685c      	ldr	r4, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800345e:	b29e      	uxth	r6, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ffbd 	bl	80033e6 <makeFreeRtosPriority>
 800346c:	4602      	mov	r2, r0
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	9200      	str	r2, [sp, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	4632      	mov	r2, r6
 800347a:	4629      	mov	r1, r5
 800347c:	4620      	mov	r0, r4
 800347e:	f000 fe7a 	bl	8004176 <xTaskCreate>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800348c:	68fb      	ldr	r3, [r7, #12]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003496 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <osDelay+0x16>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	e000      	b.n	80034ae <osDelay+0x18>
 80034ac:	2301      	movs	r3, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 ff8a 	bl	80043c8 <vTaskDelay>
  
  return osOK;
 80034b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80034c6:	2001      	movs	r0, #1
 80034c8:	f000 fa1a 	bl	8003900 <xQueueCreateMutex>
 80034cc:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <osMutexWait+0x18>
    return osErrorParameter;
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	e03c      	b.n	800356a <osMutexWait+0x92>
  }
  
  ticks = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d103      	bne.n	8003504 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e009      	b.n	8003518 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <osMutexWait+0x40>
      ticks = 1;
 8003514:	2301      	movs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003518:	f7ff ff7d 	bl	8003416 <inHandlerMode>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d017      	beq.n	8003552 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003522:	f107 0308 	add.w	r3, r7, #8
 8003526:	461a      	mov	r2, r3
 8003528:	2100      	movs	r1, #0
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fc96 	bl	8003e5c <xQueueReceiveFromISR>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d001      	beq.n	800353a <osMutexWait+0x62>
      return osErrorOS;
 8003536:	23ff      	movs	r3, #255	; 0xff
 8003538:	e017      	b.n	800356a <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <osMutexWait+0x90>
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <osMutexWait+0x9c>)
 8003542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	e00a      	b.n	8003568 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003552:	2300      	movs	r3, #0
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	2100      	movs	r1, #0
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fb6d 	bl	8003c38 <xQueueGenericReceive>
 800355e:	4603      	mov	r3, r0
 8003560:	2b01      	cmp	r3, #1
 8003562:	d001      	beq.n	8003568 <osMutexWait+0x90>
    return osErrorOS;
 8003564:	23ff      	movs	r3, #255	; 0xff
 8003566:	e000      	b.n	800356a <osMutexWait+0x92>
  }
  
  return osOK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	e000ed04 	.word	0xe000ed04

08003578 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003588:	f7ff ff45 	bl	8003416 <inHandlerMode>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003592:	f107 0308 	add.w	r3, r7, #8
 8003596:	4619      	mov	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fac3 	bl	8003b24 <xQueueGiveFromISR>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d001      	beq.n	80035a8 <osMutexRelease+0x30>
      return osErrorOS;
 80035a4:	23ff      	movs	r3, #255	; 0xff
 80035a6:	e017      	b.n	80035d8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d013      	beq.n	80035d6 <osMutexRelease+0x5e>
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <osMutexRelease+0x68>)
 80035b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	e00a      	b.n	80035d6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80035c0:	2300      	movs	r3, #0
 80035c2:	2200      	movs	r2, #0
 80035c4:	2100      	movs	r1, #0
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9b2 	bl	8003930 <xQueueGenericSend>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d001      	beq.n	80035d6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80035d2:	23ff      	movs	r3, #255	; 0xff
 80035d4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80035d6:	68fb      	ldr	r3, [r7, #12]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f103 0208 	add.w	r2, r3, #8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295
 80035fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f103 0208 	add.w	r2, r3, #8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f103 0208 	add.w	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d103      	bne.n	80036a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e00c      	b.n	80036c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3308      	adds	r3, #8
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e002      	b.n	80036b4 <vListInsert+0x2e>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d2f6      	bcs.n	80036ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	601a      	str	r2, [r3, #0]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6892      	ldr	r2, [r2, #8]
 800370e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6852      	ldr	r2, [r2, #4]
 8003718:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d103      	bne.n	800372c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	1e5a      	subs	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	e7fe      	b.n	8003772 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003774:	f001 fcd4 	bl	8005120 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	441a      	add	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	3b01      	subs	r3, #1
 80037a6:	68f9      	ldr	r1, [r7, #12]
 80037a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	441a      	add	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	22ff      	movs	r2, #255	; 0xff
 80037b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	22ff      	movs	r2, #255	; 0xff
 80037c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d114      	bne.n	80037f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d01a      	beq.n	8003808 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3310      	adds	r3, #16
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 f854 	bl	8004884 <xTaskRemoveFromEventList>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d012      	beq.n	8003808 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <xQueueGenericReset+0xcc>)
 80037e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	e009      	b.n	8003808 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3310      	adds	r3, #16
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fef3 	bl	80035e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3324      	adds	r3, #36	; 0x24
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff feee 	bl	80035e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003808:	f001 fcb8 	bl	800517c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800380c:	2301      	movs	r3, #1
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <xQueueGenericCreate+0x28>
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	e7fe      	b.n	8003842 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e004      	b.n	800385a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3348      	adds	r3, #72	; 0x48
 800385e:	4618      	mov	r0, r3
 8003860:	f001 fd6e 	bl	8005340 <pvPortMalloc>
 8003864:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00b      	beq.n	8003884 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	3348      	adds	r3, #72	; 0x48
 8003870:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003872:	79fa      	ldrb	r2, [r7, #7]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f805 	bl	800388e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8003884:	69bb      	ldr	r3, [r7, #24]
	}
 8003886:	4618      	mov	r0, r3
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e002      	b.n	80038b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038bc:	2101      	movs	r1, #1
 80038be:	69b8      	ldr	r0, [r7, #24]
 80038c0:	f7ff ff44 	bl	800374c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00e      	beq.n	80038f8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80038ec:	2300      	movs	r3, #0
 80038ee:	2200      	movs	r2, #0
 80038f0:	2100      	movs	r1, #0
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f81c 	bl	8003930 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800390a:	2301      	movs	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	461a      	mov	r2, r3
 8003916:	6939      	ldr	r1, [r7, #16]
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	f7ff ff7f 	bl	800381c <xQueueGenericCreate>
 800391e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7ff ffd3 	bl	80038cc <prvInitialiseMutex>

		return pxNewQueue;
 8003926:	68fb      	ldr	r3, [r7, #12]
	}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08e      	sub	sp, #56	; 0x38
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800393e:	2300      	movs	r3, #0
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	2b00      	cmp	r3, #0
 800394a:	d109      	bne.n	8003960 <xQueueGenericSend+0x30>
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
 800395e:	e7fe      	b.n	800395e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <xQueueGenericSend+0x3e>
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <xQueueGenericSend+0x42>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <xQueueGenericSend+0x44>
 8003972:	2300      	movs	r3, #0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <xQueueGenericSend+0x5c>
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
 800398a:	e7fe      	b.n	800398a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d103      	bne.n	800399a <xQueueGenericSend+0x6a>
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <xQueueGenericSend+0x6e>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <xQueueGenericSend+0x70>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <xQueueGenericSend+0x88>
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	e7fe      	b.n	80039b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039b8:	f001 f91e 	bl	8004bf8 <xTaskGetSchedulerState>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d102      	bne.n	80039c8 <xQueueGenericSend+0x98>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <xQueueGenericSend+0x9c>
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <xQueueGenericSend+0x9e>
 80039cc:	2300      	movs	r3, #0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <xQueueGenericSend+0xb6>
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039e6:	f001 fb9b 	bl	8005120 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d302      	bcc.n	80039fc <xQueueGenericSend+0xcc>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d129      	bne.n	8003a50 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a02:	f000 faa8 	bl	8003f56 <prvCopyDataToQueue>
 8003a06:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d010      	beq.n	8003a32 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	3324      	adds	r3, #36	; 0x24
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 ff35 	bl	8004884 <xTaskRemoveFromEventList>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a20:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <xQueueGenericSend+0x1f0>)
 8003a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	e00a      	b.n	8003a48 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a38:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <xQueueGenericSend+0x1f0>)
 8003a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a48:	f001 fb98 	bl	800517c <vPortExitCritical>
				return pdPASS;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e063      	b.n	8003b18 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a56:	f001 fb91 	bl	800517c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e05c      	b.n	8003b18 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 ff6d 	bl	8004948 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a72:	f001 fb83 	bl	800517c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a76:	f000 fd21 	bl	80044bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a7a:	f001 fb51 	bl	8005120 <vPortEnterCritical>
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d103      	bne.n	8003a94 <xQueueGenericSend+0x164>
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a9a:	b25b      	sxtb	r3, r3
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d103      	bne.n	8003aaa <xQueueGenericSend+0x17a>
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aaa:	f001 fb67 	bl	800517c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aae:	1d3a      	adds	r2, r7, #4
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 ff6a 	bl	8004990 <xTaskCheckForTimeOut>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d124      	bne.n	8003b0c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ac4:	f000 fb3f 	bl	8004146 <prvIsQueueFull>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d018      	beq.n	8003b00 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	3310      	adds	r3, #16
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 feb0 	bl	800483c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ade:	f000 faca 	bl	8004076 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ae2:	f000 fcf9 	bl	80044d8 <xTaskResumeAll>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f47f af7c 	bne.w	80039e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <xQueueGenericSend+0x1f0>)
 8003af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	e772      	b.n	80039e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b02:	f000 fab8 	bl	8004076 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b06:	f000 fce7 	bl	80044d8 <xTaskResumeAll>
 8003b0a:	e76c      	b.n	80039e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0e:	f000 fab2 	bl	8004076 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b12:	f000 fce1 	bl	80044d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b16:	2300      	movs	r3, #0
		}
	}
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3738      	adds	r7, #56	; 0x38
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	e000ed04 	.word	0xe000ed04

08003b24 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08e      	sub	sp, #56	; 0x38
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <xQueueGiveFromISR+0x28>
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	623b      	str	r3, [r7, #32]
 8003b4a:	e7fe      	b.n	8003b4a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <xQueueGiveFromISR+0x44>
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e7fe      	b.n	8003b66 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <xQueueGiveFromISR+0x54>
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <xQueueGiveFromISR+0x58>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <xQueueGiveFromISR+0x5a>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <xQueueGiveFromISR+0x72>
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	e7fe      	b.n	8003b94 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b96:	f001 fb95 	bl	80052c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	617a      	str	r2, [r7, #20]
 8003bb0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d22b      	bcs.n	8003c1e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d112      	bne.n	8003c08 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	3324      	adds	r3, #36	; 0x24
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fe48 	bl	8004884 <xTaskRemoveFromEventList>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00e      	beq.n	8003c18 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00b      	beq.n	8003c18 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e007      	b.n	8003c18 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	b25a      	sxtb	r2, r3
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1c:	e001      	b.n	8003c22 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3738      	adds	r7, #56	; 0x38
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08e      	sub	sp, #56	; 0x38
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <xQueueGenericReceive+0x30>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	e7fe      	b.n	8003c66 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <xQueueGenericReceive+0x3e>
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <xQueueGenericReceive+0x42>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <xQueueGenericReceive+0x44>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <xQueueGenericReceive+0x5c>
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	e7fe      	b.n	8003c92 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c94:	f000 ffb0 	bl	8004bf8 <xTaskGetSchedulerState>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <xQueueGenericReceive+0x6c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <xQueueGenericReceive+0x70>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <xQueueGenericReceive+0x72>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <xQueueGenericReceive+0x8a>
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	e7fe      	b.n	8003cc0 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cc2:	f001 fa2d 	bl	8005120 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d046      	beq.n	8003d60 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cdc:	f000 f9a5 	bl	800402a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d121      	bne.n	8003d2a <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	1e5a      	subs	r2, r3, #1
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003cf6:	f001 f897 	bl	8004e28 <pvTaskIncrementMutexHeldCount>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d027      	beq.n	8003d58 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	3310      	adds	r3, #16
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fdb9 	bl	8004884 <xTaskRemoveFromEventList>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01f      	beq.n	8003d58 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8003d18:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <xQueueGenericReceive+0x220>)
 8003d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	e016      	b.n	8003d58 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d2e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00f      	beq.n	8003d58 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	3324      	adds	r3, #36	; 0x24
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fda1 	bl	8004884 <xTaskRemoveFromEventList>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d48:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <xQueueGenericReceive+0x220>)
 8003d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003d58:	f001 fa10 	bl	800517c <vPortExitCritical>
				return pdPASS;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e077      	b.n	8003e50 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d66:	f001 fa09 	bl	800517c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e070      	b.n	8003e50 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003d74:	f107 0314 	add.w	r3, r7, #20
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fde5 	bl	8004948 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d82:	f001 f9fb 	bl	800517c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d86:	f000 fb99 	bl	80044bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d8a:	f001 f9c9 	bl	8005120 <vPortEnterCritical>
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d94:	b25b      	sxtb	r3, r3
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d103      	bne.n	8003da4 <xQueueGenericReceive+0x16c>
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d103      	bne.n	8003dba <xQueueGenericReceive+0x182>
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dba:	f001 f9df 	bl	800517c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dbe:	1d3a      	adds	r2, r7, #4
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fde2 	bl	8004990 <xTaskCheckForTimeOut>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d131      	bne.n	8003e36 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dd4:	f000 f9a1 	bl	800411a <prvIsQueueEmpty>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d025      	beq.n	8003e2a <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d108      	bne.n	8003df8 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8003de6:	f001 f99b 	bl	8005120 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 ff20 	bl	8004c34 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003df4:	f001 f9c2 	bl	800517c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	3324      	adds	r3, #36	; 0x24
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fd1b 	bl	800483c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e08:	f000 f935 	bl	8004076 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e0c:	f000 fb64 	bl	80044d8 <xTaskResumeAll>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f47f af55 	bne.w	8003cc2 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <xQueueGenericReceive+0x220>)
 8003e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	e74b      	b.n	8003cc2 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e2c:	f000 f923 	bl	8004076 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e30:	f000 fb52 	bl	80044d8 <xTaskResumeAll>
 8003e34:	e745      	b.n	8003cc2 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8003e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e38:	f000 f91d 	bl	8004076 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e3c:	f000 fb4c 	bl	80044d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e42:	f000 f96a 	bl	800411a <prvIsQueueEmpty>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f43f af3a 	beq.w	8003cc2 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3738      	adds	r7, #56	; 0x38
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08e      	sub	sp, #56	; 0x38
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <xQueueReceiveFromISR+0x2a>
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	623b      	str	r3, [r7, #32]
 8003e84:	e7fe      	b.n	8003e84 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d103      	bne.n	8003e94 <xQueueReceiveFromISR+0x38>
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <xQueueReceiveFromISR+0x3c>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <xQueueReceiveFromISR+0x3e>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <xQueueReceiveFromISR+0x56>
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	e7fe      	b.n	8003eb0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003eb2:	f001 fa07 	bl	80052c4 <vPortValidateInterruptPriority>
	__asm volatile
 8003eb6:	f3ef 8211 	mrs	r2, BASEPRI
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	61ba      	str	r2, [r7, #24]
 8003ecc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003ece:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d02f      	beq.n	8003f3e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eec:	f000 f89d 	bl	800402a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d112      	bne.n	8003f28 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	3310      	adds	r3, #16
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fcb8 	bl	8004884 <xTaskRemoveFromEventList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00e      	beq.n	8003f38 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00b      	beq.n	8003f38 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e007      	b.n	8003f38 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	b25a      	sxtb	r2, r3
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f3c:	e001      	b.n	8003f42 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3738      	adds	r7, #56	; 0x38
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10d      	bne.n	8003f90 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d14d      	bne.n	8004018 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fecd 	bl	8004d20 <xTaskPriorityDisinherit>
 8003f86:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	e043      	b.n	8004018 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d119      	bne.n	8003fca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6898      	ldr	r0, [r3, #8]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	f002 f993 	bl	80062cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	441a      	add	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d32b      	bcc.n	8004018 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	e026      	b.n	8004018 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68d8      	ldr	r0, [r3, #12]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	f002 f979 	bl	80062cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	425b      	negs	r3, r3
 8003fe4:	441a      	add	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d207      	bcs.n	8004006 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	425b      	negs	r3, r3
 8004000:	441a      	add	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d105      	bne.n	8004018 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	3b01      	subs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004020:	697b      	ldr	r3, [r7, #20]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d018      	beq.n	800406e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	441a      	add	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d303      	bcc.n	800405e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	461a      	mov	r2, r3
 8004068:	6838      	ldr	r0, [r7, #0]
 800406a:	f002 f92f 	bl	80062cc <memcpy>
	}
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800407e:	f001 f84f 	bl	8005120 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004088:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800408a:	e011      	b.n	80040b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d012      	beq.n	80040ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3324      	adds	r3, #36	; 0x24
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fbf3 	bl	8004884 <xTaskRemoveFromEventList>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040a4:	f000 fcd2 	bl	8004a4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	dce9      	bgt.n	800408c <prvUnlockQueue+0x16>
 80040b8:	e000      	b.n	80040bc <prvUnlockQueue+0x46>
					break;
 80040ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	22ff      	movs	r2, #255	; 0xff
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040c4:	f001 f85a 	bl	800517c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040c8:	f001 f82a 	bl	8005120 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040d4:	e011      	b.n	80040fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d012      	beq.n	8004104 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3310      	adds	r3, #16
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fbce 	bl	8004884 <xTaskRemoveFromEventList>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040ee:	f000 fcad 	bl	8004a4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040f2:	7bbb      	ldrb	r3, [r7, #14]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	dce9      	bgt.n	80040d6 <prvUnlockQueue+0x60>
 8004102:	e000      	b.n	8004106 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004104:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	22ff      	movs	r2, #255	; 0xff
 800410a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800410e:	f001 f835 	bl	800517c <vPortExitCritical>
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004122:	f000 fffd 	bl	8005120 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800412e:	2301      	movs	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e001      	b.n	8004138 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004138:	f001 f820 	bl	800517c <vPortExitCritical>

	return xReturn;
 800413c:	68fb      	ldr	r3, [r7, #12]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800414e:	f000 ffe7 	bl	8005120 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	429a      	cmp	r2, r3
 800415c:	d102      	bne.n	8004164 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800415e:	2301      	movs	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e001      	b.n	8004168 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004168:	f001 f808 	bl	800517c <vPortExitCritical>

	return xReturn;
 800416c:	68fb      	ldr	r3, [r7, #12]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004176:	b580      	push	{r7, lr}
 8004178:	b08c      	sub	sp, #48	; 0x30
 800417a:	af04      	add	r7, sp, #16
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f8d8 	bl	8005340 <pvPortMalloc>
 8004190:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004198:	2054      	movs	r0, #84	; 0x54
 800419a:	f001 f8d1 	bl	8005340 <pvPortMalloc>
 800419e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
 80041ac:	e005      	b.n	80041ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f001 f988 	bl	80054c4 <vPortFree>
 80041b4:	e001      	b.n	80041ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d013      	beq.n	80041e8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041c0:	88fa      	ldrh	r2, [r7, #6]
 80041c2:	2300      	movs	r3, #0
 80041c4:	9303      	str	r3, [sp, #12]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	9302      	str	r3, [sp, #8]
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f80e 	bl	80041f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041dc:	69f8      	ldr	r0, [r7, #28]
 80041de:	f000 f889 	bl	80042f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	e002      	b.n	80041ee <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041e8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041ee:	69bb      	ldr	r3, [r7, #24]
	}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004210:	3b01      	subs	r3, #1
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f023 0307 	bic.w	r3, r3, #7
 800421e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <prvInitialiseNewTask+0x46>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e7fe      	b.n	800423c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	e012      	b.n	800426a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	7819      	ldrb	r1, [r3, #0]
 800424c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	3334      	adds	r3, #52	; 0x34
 8004254:	460a      	mov	r2, r1
 8004256:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d006      	beq.n	8004272 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	3301      	adds	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2b0f      	cmp	r3, #15
 800426e:	d9e9      	bls.n	8004244 <prvInitialiseNewTask+0x4c>
 8004270:	e000      	b.n	8004274 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004272:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	2b06      	cmp	r3, #6
 8004280:	d901      	bls.n	8004286 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004282:	2306      	movs	r3, #6
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	2200      	movs	r2, #0
 8004296:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	3304      	adds	r3, #4
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff f9c1 	bl	8003624 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	3318      	adds	r3, #24
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff f9bc 	bl	8003624 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	f1c3 0207 	rsb	r2, r3, #7
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	2200      	movs	r2, #0
 80042c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	69b8      	ldr	r0, [r7, #24]
 80042d6:	f000 fe21 	bl	8004f1c <pxPortInitialiseStack>
 80042da:	4602      	mov	r2, r0
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ec:	bf00      	nop
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042fc:	f000 ff10 	bl	8005120 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <prvAddNewTaskToReadyList+0xb8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4a29      	ldr	r2, [pc, #164]	; (80043ac <prvAddNewTaskToReadyList+0xb8>)
 8004308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800430a:	4b29      	ldr	r3, [pc, #164]	; (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004312:	4a27      	ldr	r2, [pc, #156]	; (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004318:	4b24      	ldr	r3, [pc, #144]	; (80043ac <prvAddNewTaskToReadyList+0xb8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d110      	bne.n	8004342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004320:	f000 fbb8 	bl	8004a94 <prvInitialiseTaskLists>
 8004324:	e00d      	b.n	8004342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004326:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <prvAddNewTaskToReadyList+0xc0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	429a      	cmp	r2, r3
 800433a:	d802      	bhi.n	8004342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <prvAddNewTaskToReadyList+0xc4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <prvAddNewTaskToReadyList+0xc4>)
 800434a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	2201      	movs	r2, #1
 8004352:	409a      	lsls	r2, r3
 8004354:	4b19      	ldr	r3, [pc, #100]	; (80043bc <prvAddNewTaskToReadyList+0xc8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	4a18      	ldr	r2, [pc, #96]	; (80043bc <prvAddNewTaskToReadyList+0xc8>)
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <prvAddNewTaskToReadyList+0xcc>)
 800436c:	441a      	add	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7ff f962 	bl	800363e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800437a:	f000 feff 	bl	800517c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <prvAddNewTaskToReadyList+0xc0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d207      	bcs.n	80043a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <prvAddNewTaskToReadyList+0xd0>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000190 	.word	0x20000190
 80043b0:	20000090 	.word	0x20000090
 80043b4:	2000019c 	.word	0x2000019c
 80043b8:	200001ac 	.word	0x200001ac
 80043bc:	20000198 	.word	0x20000198
 80043c0:	20000094 	.word	0x20000094
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <vTaskDelay+0x60>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <vTaskDelay+0x2e>
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	e7fe      	b.n	80043f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80043f6:	f000 f861 	bl	80044bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043fa:	2100      	movs	r1, #0
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fd27 	bl	8004e50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004402:	f000 f869 	bl	80044d8 <xTaskResumeAll>
 8004406:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <vTaskDelay+0x64>)
 8004410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200001b8 	.word	0x200001b8
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004436:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <vTaskStartScheduler+0x74>)
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	2300      	movs	r3, #0
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2300      	movs	r3, #0
 8004440:	2280      	movs	r2, #128	; 0x80
 8004442:	4919      	ldr	r1, [pc, #100]	; (80044a8 <vTaskStartScheduler+0x78>)
 8004444:	4819      	ldr	r0, [pc, #100]	; (80044ac <vTaskStartScheduler+0x7c>)
 8004446:	f7ff fe96 	bl	8004176 <xTaskCreate>
 800444a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d115      	bne.n	800447e <vTaskStartScheduler+0x4e>
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004464:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <vTaskStartScheduler+0x80>)
 8004466:	f04f 32ff 	mov.w	r2, #4294967295
 800446a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800446c:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <vTaskStartScheduler+0x84>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004472:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <vTaskStartScheduler+0x88>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004478:	f000 fdc6 	bl	8005008 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800447c:	e00d      	b.n	800449a <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d109      	bne.n	800449a <vTaskStartScheduler+0x6a>
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	607b      	str	r3, [r7, #4]
 8004498:	e7fe      	b.n	8004498 <vTaskStartScheduler+0x68>
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	200001b4 	.word	0x200001b4
 80044a8:	08006b04 	.word	0x08006b04
 80044ac:	08004a65 	.word	0x08004a65
 80044b0:	200001b0 	.word	0x200001b0
 80044b4:	2000019c 	.word	0x2000019c
 80044b8:	20000194 	.word	0x20000194

080044bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <vTaskSuspendAll+0x18>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	4a03      	ldr	r2, [pc, #12]	; (80044d4 <vTaskSuspendAll+0x18>)
 80044c8:	6013      	str	r3, [r2, #0]
}
 80044ca:	bf00      	nop
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	200001b8 	.word	0x200001b8

080044d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044e6:	4b41      	ldr	r3, [pc, #260]	; (80045ec <xTaskResumeAll+0x114>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <xTaskResumeAll+0x2a>
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	e7fe      	b.n	8004500 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004502:	f000 fe0d 	bl	8005120 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004506:	4b39      	ldr	r3, [pc, #228]	; (80045ec <xTaskResumeAll+0x114>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3b01      	subs	r3, #1
 800450c:	4a37      	ldr	r2, [pc, #220]	; (80045ec <xTaskResumeAll+0x114>)
 800450e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004510:	4b36      	ldr	r3, [pc, #216]	; (80045ec <xTaskResumeAll+0x114>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d161      	bne.n	80045dc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004518:	4b35      	ldr	r3, [pc, #212]	; (80045f0 <xTaskResumeAll+0x118>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d05d      	beq.n	80045dc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004520:	e02e      	b.n	8004580 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004522:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <xTaskResumeAll+0x11c>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3318      	adds	r3, #24
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff f8e2 	bl	80036f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3304      	adds	r3, #4
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff f8dd 	bl	80036f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	2201      	movs	r2, #1
 8004544:	409a      	lsls	r2, r3
 8004546:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <xTaskResumeAll+0x120>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	4a2a      	ldr	r2, [pc, #168]	; (80045f8 <xTaskResumeAll+0x120>)
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4a27      	ldr	r2, [pc, #156]	; (80045fc <xTaskResumeAll+0x124>)
 800455e:	441a      	add	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f7ff f869 	bl	800363e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4b23      	ldr	r3, [pc, #140]	; (8004600 <xTaskResumeAll+0x128>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	429a      	cmp	r2, r3
 8004578:	d302      	bcc.n	8004580 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800457a:	4b22      	ldr	r3, [pc, #136]	; (8004604 <xTaskResumeAll+0x12c>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004580:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <xTaskResumeAll+0x11c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1cc      	bne.n	8004522 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800458e:	f000 fb0d 	bl	8004bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004592:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <xTaskResumeAll+0x130>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d010      	beq.n	80045c0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800459e:	f000 f837 	bl	8004610 <xTaskIncrementTick>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80045a8:	4b16      	ldr	r3, [pc, #88]	; (8004604 <xTaskResumeAll+0x12c>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f1      	bne.n	800459e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <xTaskResumeAll+0x130>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045c0:	4b10      	ldr	r3, [pc, #64]	; (8004604 <xTaskResumeAll+0x12c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045c8:	2301      	movs	r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045cc:	4b0f      	ldr	r3, [pc, #60]	; (800460c <xTaskResumeAll+0x134>)
 80045ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045dc:	f000 fdce 	bl	800517c <vPortExitCritical>

	return xAlreadyYielded;
 80045e0:	68bb      	ldr	r3, [r7, #8]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	200001b8 	.word	0x200001b8
 80045f0:	20000190 	.word	0x20000190
 80045f4:	20000150 	.word	0x20000150
 80045f8:	20000198 	.word	0x20000198
 80045fc:	20000094 	.word	0x20000094
 8004600:	20000090 	.word	0x20000090
 8004604:	200001a4 	.word	0x200001a4
 8004608:	200001a0 	.word	0x200001a0
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800461a:	4b50      	ldr	r3, [pc, #320]	; (800475c <xTaskIncrementTick+0x14c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f040 808c 	bne.w	800473c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8004624:	4b4e      	ldr	r3, [pc, #312]	; (8004760 <xTaskIncrementTick+0x150>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3301      	adds	r3, #1
 800462a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800462c:	4a4c      	ldr	r2, [pc, #304]	; (8004760 <xTaskIncrementTick+0x150>)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11f      	bne.n	8004678 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004638:	4b4a      	ldr	r3, [pc, #296]	; (8004764 <xTaskIncrementTick+0x154>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <xTaskIncrementTick+0x46>
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	e7fe      	b.n	8004654 <xTaskIncrementTick+0x44>
 8004656:	4b43      	ldr	r3, [pc, #268]	; (8004764 <xTaskIncrementTick+0x154>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	4b42      	ldr	r3, [pc, #264]	; (8004768 <xTaskIncrementTick+0x158>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a40      	ldr	r2, [pc, #256]	; (8004764 <xTaskIncrementTick+0x154>)
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4a40      	ldr	r2, [pc, #256]	; (8004768 <xTaskIncrementTick+0x158>)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4b40      	ldr	r3, [pc, #256]	; (800476c <xTaskIncrementTick+0x15c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	4a3e      	ldr	r2, [pc, #248]	; (800476c <xTaskIncrementTick+0x15c>)
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	f000 fa9a 	bl	8004bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004678:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <xTaskIncrementTick+0x160>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	429a      	cmp	r2, r3
 8004680:	d34d      	bcc.n	800471e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004682:	4b38      	ldr	r3, [pc, #224]	; (8004764 <xTaskIncrementTick+0x154>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <xTaskIncrementTick+0x80>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <xTaskIncrementTick+0x82>
 8004690:	2300      	movs	r3, #0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d004      	beq.n	80046a0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <xTaskIncrementTick+0x160>)
 8004698:	f04f 32ff 	mov.w	r2, #4294967295
 800469c:	601a      	str	r2, [r3, #0]
					break;
 800469e:	e03e      	b.n	800471e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046a0:	4b30      	ldr	r3, [pc, #192]	; (8004764 <xTaskIncrementTick+0x154>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d203      	bcs.n	80046c0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046b8:	4a2d      	ldr	r2, [pc, #180]	; (8004770 <xTaskIncrementTick+0x160>)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6013      	str	r3, [r2, #0]
						break;
 80046be:	e02e      	b.n	800471e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff f817 	bl	80036f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	3318      	adds	r3, #24
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff f80e 	bl	80036f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	2201      	movs	r2, #1
 80046e2:	409a      	lsls	r2, r3
 80046e4:	4b23      	ldr	r3, [pc, #140]	; (8004774 <xTaskIncrementTick+0x164>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	4a22      	ldr	r2, [pc, #136]	; (8004774 <xTaskIncrementTick+0x164>)
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <xTaskIncrementTick+0x168>)
 80046fc:	441a      	add	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	3304      	adds	r3, #4
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7fe ff9a 	bl	800363e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470e:	4b1b      	ldr	r3, [pc, #108]	; (800477c <xTaskIncrementTick+0x16c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	429a      	cmp	r2, r3
 8004716:	d3b4      	bcc.n	8004682 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004718:	2301      	movs	r3, #1
 800471a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800471c:	e7b1      	b.n	8004682 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800471e:	4b17      	ldr	r3, [pc, #92]	; (800477c <xTaskIncrementTick+0x16c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	4914      	ldr	r1, [pc, #80]	; (8004778 <xTaskIncrementTick+0x168>)
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d907      	bls.n	8004746 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e004      	b.n	8004746 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <xTaskIncrementTick+0x170>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3301      	adds	r3, #1
 8004742:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <xTaskIncrementTick+0x170>)
 8004744:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <xTaskIncrementTick+0x174>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800474e:	2301      	movs	r3, #1
 8004750:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004752:	697b      	ldr	r3, [r7, #20]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	200001b8 	.word	0x200001b8
 8004760:	20000194 	.word	0x20000194
 8004764:	20000148 	.word	0x20000148
 8004768:	2000014c 	.word	0x2000014c
 800476c:	200001a8 	.word	0x200001a8
 8004770:	200001b0 	.word	0x200001b0
 8004774:	20000198 	.word	0x20000198
 8004778:	20000094 	.word	0x20000094
 800477c:	20000090 	.word	0x20000090
 8004780:	200001a0 	.word	0x200001a0
 8004784:	200001a4 	.word	0x200001a4

08004788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800478e:	4b26      	ldr	r3, [pc, #152]	; (8004828 <vTaskSwitchContext+0xa0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004796:	4b25      	ldr	r3, [pc, #148]	; (800482c <vTaskSwitchContext+0xa4>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800479c:	e03e      	b.n	800481c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800479e:	4b23      	ldr	r3, [pc, #140]	; (800482c <vTaskSwitchContext+0xa4>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <vTaskSwitchContext+0xa8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047b2:	7afb      	ldrb	r3, [r7, #11]
 80047b4:	f1c3 031f 	rsb	r3, r3, #31
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	491e      	ldr	r1, [pc, #120]	; (8004834 <vTaskSwitchContext+0xac>)
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
 80047e0:	e7fe      	b.n	80047e0 <vTaskSwitchContext+0x58>
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4a11      	ldr	r2, [pc, #68]	; (8004834 <vTaskSwitchContext+0xac>)
 80047ee:	4413      	add	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	3308      	adds	r3, #8
 8004804:	429a      	cmp	r2, r3
 8004806:	d104      	bne.n	8004812 <vTaskSwitchContext+0x8a>
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a07      	ldr	r2, [pc, #28]	; (8004838 <vTaskSwitchContext+0xb0>)
 800481a:	6013      	str	r3, [r2, #0]
}
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	200001b8 	.word	0x200001b8
 800482c:	200001a4 	.word	0x200001a4
 8004830:	20000198 	.word	0x20000198
 8004834:	20000094 	.word	0x20000094
 8004838:	20000090 	.word	0x20000090

0800483c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <vTaskPlaceOnEventList+0x24>
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e7fe      	b.n	800485e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004860:	4b07      	ldr	r3, [pc, #28]	; (8004880 <vTaskPlaceOnEventList+0x44>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3318      	adds	r3, #24
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fe ff0c 	bl	8003686 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800486e:	2101      	movs	r1, #1
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	f000 faed 	bl	8004e50 <prvAddCurrentTaskToDelayedList>
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000090 	.word	0x20000090

08004884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <xTaskRemoveFromEventList+0x2a>
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e7fe      	b.n	80048ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3318      	adds	r3, #24
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe ff20 	bl	80036f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <xTaskRemoveFromEventList+0xac>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d11c      	bne.n	80048fa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe ff17 	bl	80036f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	2201      	movs	r2, #1
 80048d0:	409a      	lsls	r2, r3
 80048d2:	4b18      	ldr	r3, [pc, #96]	; (8004934 <xTaskRemoveFromEventList+0xb0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	4a16      	ldr	r2, [pc, #88]	; (8004934 <xTaskRemoveFromEventList+0xb0>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4a13      	ldr	r2, [pc, #76]	; (8004938 <xTaskRemoveFromEventList+0xb4>)
 80048ea:	441a      	add	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7fe fea3 	bl	800363e <vListInsertEnd>
 80048f8:	e005      	b.n	8004906 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3318      	adds	r3, #24
 80048fe:	4619      	mov	r1, r3
 8004900:	480e      	ldr	r0, [pc, #56]	; (800493c <xTaskRemoveFromEventList+0xb8>)
 8004902:	f7fe fe9c 	bl	800363e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <xTaskRemoveFromEventList+0xbc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	429a      	cmp	r2, r3
 8004912:	d905      	bls.n	8004920 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004914:	2301      	movs	r3, #1
 8004916:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <xTaskRemoveFromEventList+0xc0>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e001      	b.n	8004924 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004924:	697b      	ldr	r3, [r7, #20]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200001b8 	.word	0x200001b8
 8004934:	20000198 	.word	0x20000198
 8004938:	20000094 	.word	0x20000094
 800493c:	20000150 	.word	0x20000150
 8004940:	20000090 	.word	0x20000090
 8004944:	200001a4 	.word	0x200001a4

08004948 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <vTaskSetTimeOutState+0x22>
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e7fe      	b.n	8004968 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <vTaskSetTimeOutState+0x40>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <vTaskSetTimeOutState+0x44>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	605a      	str	r2, [r3, #4]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	200001a8 	.word	0x200001a8
 800498c:	20000194 	.word	0x20000194

08004990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <xTaskCheckForTimeOut+0x24>
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e7fe      	b.n	80049b2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <xTaskCheckForTimeOut+0x3e>
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	e7fe      	b.n	80049cc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80049ce:	f000 fba7 	bl	8005120 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049d2:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <xTaskCheckForTimeOut+0xb4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d102      	bne.n	80049e8 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e026      	b.n	8004a36 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <xTaskCheckForTimeOut+0xb8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d007      	beq.n	8004a04 <xTaskCheckForTimeOut+0x74>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049fe:	2301      	movs	r3, #1
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e018      	b.n	8004a36 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d20e      	bcs.n	8004a32 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1acb      	subs	r3, r1, r3
 8004a20:	441a      	add	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff ff8e 	bl	8004948 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	e001      	b.n	8004a36 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8004a32:	2301      	movs	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004a36:	f000 fba1 	bl	800517c <vPortExitCritical>

	return xReturn;
 8004a3a:	697b      	ldr	r3, [r7, #20]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000194 	.word	0x20000194
 8004a48:	200001a8 	.word	0x200001a8

08004a4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a50:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <vTaskMissedYield+0x14>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
}
 8004a56:	bf00      	nop
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	200001a4 	.word	0x200001a4

08004a64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a6c:	f000 f852 	bl	8004b14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a70:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <prvIdleTask+0x28>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d9f9      	bls.n	8004a6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <prvIdleTask+0x2c>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a88:	e7f0      	b.n	8004a6c <prvIdleTask+0x8>
 8004a8a:	bf00      	nop
 8004a8c:	20000094 	.word	0x20000094
 8004a90:	e000ed04 	.word	0xe000ed04

08004a94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	e00c      	b.n	8004aba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4a12      	ldr	r2, [pc, #72]	; (8004af4 <prvInitialiseTaskLists+0x60>)
 8004aac:	4413      	add	r3, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fd98 	bl	80035e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d9ef      	bls.n	8004aa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ac0:	480d      	ldr	r0, [pc, #52]	; (8004af8 <prvInitialiseTaskLists+0x64>)
 8004ac2:	f7fe fd8f 	bl	80035e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ac6:	480d      	ldr	r0, [pc, #52]	; (8004afc <prvInitialiseTaskLists+0x68>)
 8004ac8:	f7fe fd8c 	bl	80035e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004acc:	480c      	ldr	r0, [pc, #48]	; (8004b00 <prvInitialiseTaskLists+0x6c>)
 8004ace:	f7fe fd89 	bl	80035e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ad2:	480c      	ldr	r0, [pc, #48]	; (8004b04 <prvInitialiseTaskLists+0x70>)
 8004ad4:	f7fe fd86 	bl	80035e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ad8:	480b      	ldr	r0, [pc, #44]	; (8004b08 <prvInitialiseTaskLists+0x74>)
 8004ada:	f7fe fd83 	bl	80035e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <prvInitialiseTaskLists+0x78>)
 8004ae0:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <prvInitialiseTaskLists+0x64>)
 8004ae2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <prvInitialiseTaskLists+0x7c>)
 8004ae6:	4a05      	ldr	r2, [pc, #20]	; (8004afc <prvInitialiseTaskLists+0x68>)
 8004ae8:	601a      	str	r2, [r3, #0]
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000094 	.word	0x20000094
 8004af8:	20000120 	.word	0x20000120
 8004afc:	20000134 	.word	0x20000134
 8004b00:	20000150 	.word	0x20000150
 8004b04:	20000164 	.word	0x20000164
 8004b08:	2000017c 	.word	0x2000017c
 8004b0c:	20000148 	.word	0x20000148
 8004b10:	2000014c 	.word	0x2000014c

08004b14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b1a:	e028      	b.n	8004b6e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004b1c:	f7ff fcce 	bl	80044bc <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004b20:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <prvCheckTasksWaitingTermination+0x6c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004b30:	f7ff fcd2 	bl	80044d8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d119      	bne.n	8004b6e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8004b3a:	f000 faf1 	bl	8005120 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <prvCheckTasksWaitingTermination+0x6c>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe fdd4 	bl	80036f8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <prvCheckTasksWaitingTermination+0x70>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	4a0b      	ldr	r2, [pc, #44]	; (8004b84 <prvCheckTasksWaitingTermination+0x70>)
 8004b58:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <prvCheckTasksWaitingTermination+0x74>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <prvCheckTasksWaitingTermination+0x74>)
 8004b62:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8004b64:	f000 fb0a 	bl	800517c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8004b68:	6838      	ldr	r0, [r7, #0]
 8004b6a:	f000 f80f 	bl	8004b8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <prvCheckTasksWaitingTermination+0x74>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1d2      	bne.n	8004b1c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000164 	.word	0x20000164
 8004b84:	20000190 	.word	0x20000190
 8004b88:	20000178 	.word	0x20000178

08004b8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fc93 	bl	80054c4 <vPortFree>
			vPortFree( pxTCB );
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fc90 	bl	80054c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <prvResetNextTaskUnblockTime+0x44>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <prvResetNextTaskUnblockTime+0x14>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <prvResetNextTaskUnblockTime+0x16>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <prvResetNextTaskUnblockTime+0x48>)
 8004bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bce:	e008      	b.n	8004be2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <prvResetNextTaskUnblockTime+0x44>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <prvResetNextTaskUnblockTime+0x48>)
 8004be0:	6013      	str	r3, [r2, #0]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000148 	.word	0x20000148
 8004bf4:	200001b0 	.word	0x200001b0

08004bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <xTaskGetSchedulerState+0x34>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c06:	2301      	movs	r3, #1
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	e008      	b.n	8004c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c0c:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <xTaskGetSchedulerState+0x38>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c14:	2302      	movs	r3, #2
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	e001      	b.n	8004c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c1e:	687b      	ldr	r3, [r7, #4]
	}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	2000019c 	.word	0x2000019c
 8004c30:	200001b8 	.word	0x200001b8

08004c34 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d062      	beq.n	8004d0c <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4a:	4b32      	ldr	r3, [pc, #200]	; (8004d14 <vTaskPriorityInherit+0xe0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d25b      	bcs.n	8004d0c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	db06      	blt.n	8004c6a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <vTaskPriorityInherit+0xe0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	f1c3 0207 	rsb	r2, r3, #7
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6959      	ldr	r1, [r3, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <vTaskPriorityInherit+0xe4>)
 8004c7c:	4413      	add	r3, r2
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	d101      	bne.n	8004c86 <vTaskPriorityInherit+0x52>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <vTaskPriorityInherit+0x54>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d03a      	beq.n	8004d02 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe fd31 	bl	80036f8 <uxListRemove>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d115      	bne.n	8004cc8 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	491d      	ldr	r1, [pc, #116]	; (8004d18 <vTaskPriorityInherit+0xe4>)
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <vTaskPriorityInherit+0x94>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43da      	mvns	r2, r3
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <vTaskPriorityInherit+0xe8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <vTaskPriorityInherit+0xe8>)
 8004cc6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <vTaskPriorityInherit+0xe0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <vTaskPriorityInherit+0xe8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	4a0e      	ldr	r2, [pc, #56]	; (8004d1c <vTaskPriorityInherit+0xe8>)
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <vTaskPriorityInherit+0xe4>)
 8004cf2:	441a      	add	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f7fe fc9f 	bl	800363e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d00:	e004      	b.n	8004d0c <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d02:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <vTaskPriorityInherit+0xe0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000090 	.word	0x20000090
 8004d18:	20000094 	.word	0x20000094
 8004d1c:	20000198 	.word	0x20000198

08004d20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d06c      	beq.n	8004e10 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d36:	4b39      	ldr	r3, [pc, #228]	; (8004e1c <xTaskPriorityDisinherit+0xfc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d009      	beq.n	8004d54 <xTaskPriorityDisinherit+0x34>
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e7fe      	b.n	8004d52 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <xTaskPriorityDisinherit+0x50>
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	e7fe      	b.n	8004d6e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d74:	1e5a      	subs	r2, r3, #1
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d044      	beq.n	8004e10 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d140      	bne.n	8004e10 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fcb0 	bl	80036f8 <uxListRemove>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d115      	bne.n	8004dca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da2:	491f      	ldr	r1, [pc, #124]	; (8004e20 <xTaskPriorityDisinherit+0x100>)
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <xTaskPriorityDisinherit+0xaa>
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	2201      	movs	r2, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43da      	mvns	r2, r3
 8004dc0:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <xTaskPriorityDisinherit+0x104>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <xTaskPriorityDisinherit+0x104>)
 8004dc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	f1c3 0207 	rsb	r2, r3, #7
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	2201      	movs	r2, #1
 8004de4:	409a      	lsls	r2, r3
 8004de6:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <xTaskPriorityDisinherit+0x104>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	4a0d      	ldr	r2, [pc, #52]	; (8004e24 <xTaskPriorityDisinherit+0x104>)
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4a08      	ldr	r2, [pc, #32]	; (8004e20 <xTaskPriorityDisinherit+0x100>)
 8004dfe:	441a      	add	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f7fe fc19 	bl	800363e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e10:	697b      	ldr	r3, [r7, #20]
	}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000090 	.word	0x20000090
 8004e20:	20000094 	.word	0x20000094
 8004e24:	20000198 	.word	0x20000198

08004e28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d004      	beq.n	8004e3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e3a:	3201      	adds	r2, #1
 8004e3c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004e3e:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8004e40:	681b      	ldr	r3, [r3, #0]
	}
 8004e42:	4618      	mov	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	20000090 	.word	0x20000090

08004e50 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e5a:	4b29      	ldr	r3, [pc, #164]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e60:	4b28      	ldr	r3, [pc, #160]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe fc46 	bl	80036f8 <uxListRemove>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	2201      	movs	r2, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43da      	mvns	r2, r3
 8004e80:	4b21      	ldr	r3, [pc, #132]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4013      	ands	r3, r2
 8004e86:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d10a      	bne.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x58>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e98:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	481a      	ldr	r0, [pc, #104]	; (8004f0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ea2:	f7fe fbcc 	bl	800363e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ea6:	e026      	b.n	8004ef6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004eb0:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d209      	bcs.n	8004ed4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ec0:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7fe fbda 	bl	8003686 <vListInsert>
}
 8004ed2:	e010      	b.n	8004ef6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f7fe fbd0 	bl	8003686 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d202      	bcs.n	8004ef6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ef0:	4a09      	ldr	r2, [pc, #36]	; (8004f18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6013      	str	r3, [r2, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000194 	.word	0x20000194
 8004f04:	20000090 	.word	0x20000090
 8004f08:	20000198 	.word	0x20000198
 8004f0c:	2000017c 	.word	0x2000017c
 8004f10:	2000014c 	.word	0x2000014c
 8004f14:	20000148 	.word	0x20000148
 8004f18:	200001b0 	.word	0x200001b0

08004f1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b04      	subs	r3, #4
 8004f2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3b04      	subs	r3, #4
 8004f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b04      	subs	r3, #4
 8004f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f4c:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <pxPortInitialiseStack+0x64>)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3b14      	subs	r3, #20
 8004f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3b04      	subs	r3, #4
 8004f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f06f 0202 	mvn.w	r2, #2
 8004f6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3b20      	subs	r3, #32
 8004f70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f72:	68fb      	ldr	r3, [r7, #12]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	08004f85 	.word	0x08004f85

08004f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <prvTaskExitError+0x38>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d009      	beq.n	8004fa8 <prvTaskExitError+0x24>
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	e7fe      	b.n	8004fa6 <prvTaskExitError+0x22>
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8004fba:	e7fe      	b.n	8004fba <prvTaskExitError+0x36>
 8004fbc:	20000008 	.word	0x20000008

08004fc0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <pxCurrentTCBConst2>)
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	6808      	ldr	r0, [r1, #0]
 8004fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	f380 8809 	msr	PSP, r0
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8811 	msr	BASEPRI, r0
 8004fda:	4770      	bx	lr
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst2>:
 8004fe0:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004fe8:	4806      	ldr	r0, [pc, #24]	; (8005004 <prvPortStartFirstTask+0x1c>)
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	6800      	ldr	r0, [r0, #0]
 8004fee:	f380 8808 	msr	MSP, r0
 8004ff2:	b662      	cpsie	i
 8004ff4:	b661      	cpsie	f
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	df00      	svc	0
 8005000:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005002:	bf00      	nop
 8005004:	e000ed08 	.word	0xe000ed08

08005008 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800500e:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <xPortStartScheduler+0xf4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a3b      	ldr	r2, [pc, #236]	; (8005100 <xPortStartScheduler+0xf8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d109      	bne.n	800502c <xPortStartScheduler+0x24>
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	e7fe      	b.n	800502a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800502c:	4b33      	ldr	r3, [pc, #204]	; (80050fc <xPortStartScheduler+0xf4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a34      	ldr	r2, [pc, #208]	; (8005104 <xPortStartScheduler+0xfc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d109      	bne.n	800504a <xPortStartScheduler+0x42>
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	e7fe      	b.n	8005048 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800504a:	4b2f      	ldr	r3, [pc, #188]	; (8005108 <xPortStartScheduler+0x100>)
 800504c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	22ff      	movs	r2, #255	; 0xff
 800505a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4b27      	ldr	r3, [pc, #156]	; (800510c <xPortStartScheduler+0x104>)
 8005070:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005072:	4b27      	ldr	r3, [pc, #156]	; (8005110 <xPortStartScheduler+0x108>)
 8005074:	2207      	movs	r2, #7
 8005076:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005078:	e009      	b.n	800508e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800507a:	4b25      	ldr	r3, [pc, #148]	; (8005110 <xPortStartScheduler+0x108>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3b01      	subs	r3, #1
 8005080:	4a23      	ldr	r2, [pc, #140]	; (8005110 <xPortStartScheduler+0x108>)
 8005082:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d0ef      	beq.n	800507a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800509a:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <xPortStartScheduler+0x108>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <xPortStartScheduler+0x108>)
 80050a2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050a4:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <xPortStartScheduler+0x108>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050ac:	4a18      	ldr	r2, [pc, #96]	; (8005110 <xPortStartScheduler+0x108>)
 80050ae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050b8:	4b16      	ldr	r3, [pc, #88]	; (8005114 <xPortStartScheduler+0x10c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a15      	ldr	r2, [pc, #84]	; (8005114 <xPortStartScheduler+0x10c>)
 80050be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050c2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050c4:	4b13      	ldr	r3, [pc, #76]	; (8005114 <xPortStartScheduler+0x10c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a12      	ldr	r2, [pc, #72]	; (8005114 <xPortStartScheduler+0x10c>)
 80050ca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050ce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050d0:	f000 f8d2 	bl	8005278 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050d4:	4b10      	ldr	r3, [pc, #64]	; (8005118 <xPortStartScheduler+0x110>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050da:	f000 f8e9 	bl	80052b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <xPortStartScheduler+0x114>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a0e      	ldr	r2, [pc, #56]	; (800511c <xPortStartScheduler+0x114>)
 80050e4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050e8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050ea:	f7ff ff7d 	bl	8004fe8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80050ee:	f7ff ff49 	bl	8004f84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	e000ed00 	.word	0xe000ed00
 8005100:	410fc271 	.word	0x410fc271
 8005104:	410fc270 	.word	0x410fc270
 8005108:	e000e400 	.word	0xe000e400
 800510c:	200001bc 	.word	0x200001bc
 8005110:	200001c0 	.word	0x200001c0
 8005114:	e000ed20 	.word	0xe000ed20
 8005118:	20000008 	.word	0x20000008
 800511c:	e000ef34 	.word	0xe000ef34

08005120 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005138:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <vPortEnterCritical+0x54>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <vPortEnterCritical+0x54>)
 8005140:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005142:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <vPortEnterCritical+0x54>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d10e      	bne.n	8005168 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <vPortEnterCritical+0x58>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <vPortEnterCritical+0x48>
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	e7fe      	b.n	8005166 <vPortEnterCritical+0x46>
	}
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	20000008 	.word	0x20000008
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005182:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <vPortExitCritical+0x4c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <vPortExitCritical+0x22>
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	607b      	str	r3, [r7, #4]
 800519c:	e7fe      	b.n	800519c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <vPortExitCritical+0x4c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	4a08      	ldr	r2, [pc, #32]	; (80051c8 <vPortExitCritical+0x4c>)
 80051a6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <vPortExitCritical+0x4c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d104      	bne.n	80051ba <vPortExitCritical+0x3e>
 80051b0:	2300      	movs	r3, #0
 80051b2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20000008 	.word	0x20000008
 80051cc:	00000000 	.word	0x00000000

080051d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051d0:	f3ef 8009 	mrs	r0, PSP
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	4b15      	ldr	r3, [pc, #84]	; (8005230 <pxCurrentTCBConst>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f01e 0f10 	tst.w	lr, #16
 80051e0:	bf08      	it	eq
 80051e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	6010      	str	r0, [r2, #0]
 80051ec:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80051f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051f4:	f380 8811 	msr	BASEPRI, r0
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f7ff fac2 	bl	8004788 <vTaskSwitchContext>
 8005204:	f04f 0000 	mov.w	r0, #0
 8005208:	f380 8811 	msr	BASEPRI, r0
 800520c:	bc08      	pop	{r3}
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005216:	f01e 0f10 	tst.w	lr, #16
 800521a:	bf08      	it	eq
 800521c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005220:	f380 8809 	msr	PSP, r0
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	f3af 8000 	nop.w

08005230 <pxCurrentTCBConst>:
 8005230:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005250:	f7ff f9de 	bl	8004610 <xTaskIncrementTick>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <xPortSysTickHandler+0x3c>)
 800525c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	e000ed04 	.word	0xe000ed04

08005278 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800527c:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <vPortSetupTimerInterrupt+0x28>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a08      	ldr	r2, [pc, #32]	; (80052a4 <vPortSetupTimerInterrupt+0x2c>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	099b      	lsrs	r3, r3, #6
 8005288:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <vPortSetupTimerInterrupt+0x30>)
 800528a:	3b01      	subs	r3, #1
 800528c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800528e:	4b07      	ldr	r3, [pc, #28]	; (80052ac <vPortSetupTimerInterrupt+0x34>)
 8005290:	2207      	movs	r2, #7
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	2000000c 	.word	0x2000000c
 80052a4:	10624dd3 	.word	0x10624dd3
 80052a8:	e000e014 	.word	0xe000e014
 80052ac:	e000e010 	.word	0xe000e010

080052b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052c0 <vPortEnableVFP+0x10>
 80052b4:	6801      	ldr	r1, [r0, #0]
 80052b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052ba:	6001      	str	r1, [r0, #0]
 80052bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052be:	bf00      	nop
 80052c0:	e000ed88 	.word	0xe000ed88

080052c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80052ca:	f3ef 8305 	mrs	r3, IPSR
 80052ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b0f      	cmp	r3, #15
 80052d4:	d913      	bls.n	80052fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052d6:	4a16      	ldr	r2, [pc, #88]	; (8005330 <vPortValidateInterruptPriority+0x6c>)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052e0:	4b14      	ldr	r3, [pc, #80]	; (8005334 <vPortValidateInterruptPriority+0x70>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	7afa      	ldrb	r2, [r7, #11]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d209      	bcs.n	80052fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	e7fe      	b.n	80052fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052fe:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <vPortValidateInterruptPriority+0x74>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <vPortValidateInterruptPriority+0x78>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d909      	bls.n	8005322 <vPortValidateInterruptPriority+0x5e>
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	e7fe      	b.n	8005320 <vPortValidateInterruptPriority+0x5c>
	}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000e3f0 	.word	0xe000e3f0
 8005334:	200001bc 	.word	0x200001bc
 8005338:	e000ed0c 	.word	0xe000ed0c
 800533c:	200001c0 	.word	0x200001c0

08005340 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800534c:	f7ff f8b6 	bl	80044bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005350:	4b57      	ldr	r3, [pc, #348]	; (80054b0 <pvPortMalloc+0x170>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005358:	f000 f90c 	bl	8005574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800535c:	4b55      	ldr	r3, [pc, #340]	; (80054b4 <pvPortMalloc+0x174>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4013      	ands	r3, r2
 8005364:	2b00      	cmp	r3, #0
 8005366:	f040 808c 	bne.w	8005482 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01c      	beq.n	80053aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005370:	2208      	movs	r2, #8
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	2b00      	cmp	r3, #0
 8005380:	d013      	beq.n	80053aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f023 0307 	bic.w	r3, r3, #7
 8005388:	3308      	adds	r3, #8
 800538a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <pvPortMalloc+0x6a>
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e7fe      	b.n	80053a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d068      	beq.n	8005482 <pvPortMalloc+0x142>
 80053b0:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <pvPortMalloc+0x178>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d863      	bhi.n	8005482 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053ba:	4b40      	ldr	r3, [pc, #256]	; (80054bc <pvPortMalloc+0x17c>)
 80053bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053be:	4b3f      	ldr	r3, [pc, #252]	; (80054bc <pvPortMalloc+0x17c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053c4:	e004      	b.n	80053d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d903      	bls.n	80053e2 <pvPortMalloc+0xa2>
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f1      	bne.n	80053c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053e2:	4b33      	ldr	r3, [pc, #204]	; (80054b0 <pvPortMalloc+0x170>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d04a      	beq.n	8005482 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2208      	movs	r2, #8
 80053f2:	4413      	add	r3, r2
 80053f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	1ad2      	subs	r2, r2, r3
 8005406:	2308      	movs	r3, #8
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	429a      	cmp	r2, r3
 800540c:	d91e      	bls.n	800544c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <pvPortMalloc+0xf4>
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	e7fe      	b.n	8005432 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005446:	69b8      	ldr	r0, [r7, #24]
 8005448:	f000 f8f6 	bl	8005638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800544c:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <pvPortMalloc+0x178>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <pvPortMalloc+0x178>)
 8005458:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800545a:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <pvPortMalloc+0x178>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <pvPortMalloc+0x180>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d203      	bcs.n	800546e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <pvPortMalloc+0x178>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <pvPortMalloc+0x180>)
 800546c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <pvPortMalloc+0x174>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	431a      	orrs	r2, r3
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005482:	f7ff f829 	bl	80044d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <pvPortMalloc+0x164>
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e7fe      	b.n	80054a2 <pvPortMalloc+0x162>
	return pvReturn;
 80054a4:	69fb      	ldr	r3, [r7, #28]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3728      	adds	r7, #40	; 0x28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20001494 	.word	0x20001494
 80054b4:	200014a0 	.word	0x200014a0
 80054b8:	20001498 	.word	0x20001498
 80054bc:	2000148c 	.word	0x2000148c
 80054c0:	2000149c 	.word	0x2000149c

080054c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d046      	beq.n	8005564 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054d6:	2308      	movs	r3, #8
 80054d8:	425b      	negs	r3, r3
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4413      	add	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	4b20      	ldr	r3, [pc, #128]	; (800556c <vPortFree+0xa8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <vPortFree+0x42>
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e7fe      	b.n	8005504 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <vPortFree+0x5e>
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	e7fe      	b.n	8005520 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4b11      	ldr	r3, [pc, #68]	; (800556c <vPortFree+0xa8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4013      	ands	r3, r2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d019      	beq.n	8005564 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d115      	bne.n	8005564 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <vPortFree+0xa8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	43db      	mvns	r3, r3
 8005542:	401a      	ands	r2, r3
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005548:	f7fe ffb8 	bl	80044bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <vPortFree+0xac>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4413      	add	r3, r2
 8005556:	4a06      	ldr	r2, [pc, #24]	; (8005570 <vPortFree+0xac>)
 8005558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800555a:	6938      	ldr	r0, [r7, #16]
 800555c:	f000 f86c 	bl	8005638 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005560:	f7fe ffba 	bl	80044d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005564:	bf00      	nop
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	200014a0 	.word	0x200014a0
 8005570:	20001498 	.word	0x20001498

08005574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800557a:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800557e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005580:	4b27      	ldr	r3, [pc, #156]	; (8005620 <prvHeapInit+0xac>)
 8005582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00c      	beq.n	80055a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3307      	adds	r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0307 	bic.w	r3, r3, #7
 800559a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <prvHeapInit+0xac>)
 80055a4:	4413      	add	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <prvHeapInit+0xb0>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055b2:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <prvHeapInit+0xb0>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055c0:	2208      	movs	r2, #8
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a15      	ldr	r2, [pc, #84]	; (8005628 <prvHeapInit+0xb4>)
 80055d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055d6:	4b14      	ldr	r3, [pc, #80]	; (8005628 <prvHeapInit+0xb4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <prvHeapInit+0xb4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <prvHeapInit+0xb4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <prvHeapInit+0xb8>)
 8005602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a09      	ldr	r2, [pc, #36]	; (8005630 <prvHeapInit+0xbc>)
 800560a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <prvHeapInit+0xc0>)
 800560e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	200001c4 	.word	0x200001c4
 8005624:	2000148c 	.word	0x2000148c
 8005628:	20001494 	.word	0x20001494
 800562c:	2000149c 	.word	0x2000149c
 8005630:	20001498 	.word	0x20001498
 8005634:	200014a0 	.word	0x200014a0

08005638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005640:	4b28      	ldr	r3, [pc, #160]	; (80056e4 <prvInsertBlockIntoFreeList+0xac>)
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e002      	b.n	800564c <prvInsertBlockIntoFreeList+0x14>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d8f7      	bhi.n	8005646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4413      	add	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d108      	bne.n	800567a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	441a      	add	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	441a      	add	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d118      	bne.n	80056c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d00d      	beq.n	80056b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e008      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e003      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d002      	beq.n	80056d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	2000148c 	.word	0x2000148c
 80056e8:	20001494 	.word	0x20001494

080056ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056ec:	b5b0      	push	{r4, r5, r7, lr}
 80056ee:	b0a2      	sub	sp, #136	; 0x88
 80056f0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80056f2:	f7fb f9bb 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056f6:	f000 f8b7 	bl	8005868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056fa:	f000 f965 	bl	80059c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80056fe:	f000 f933 	bl	8005968 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8005702:	f000 f8f3 	bl	80058ec <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MtxAcelerador */
  osMutexDef(MtxAcelerador);
 8005706:	2300      	movs	r3, #0
 8005708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MtxAceleradorHandle = osMutexCreate(osMutex(MtxAcelerador));
 800570c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005710:	4618      	mov	r0, r3
 8005712:	f7fd fed4 	bl	80034be <osMutexCreate>
 8005716:	4602      	mov	r2, r0
 8005718:	4b43      	ldr	r3, [pc, #268]	; (8005828 <main+0x13c>)
 800571a:	601a      	str	r2, [r3, #0]


  /* definition and creation of MtxQntCombustivel */
  osMutexDef(MtxQntCombustivel);
 800571c:	2300      	movs	r3, #0
 800571e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  MtxQntCombustivelHandle = osMutexCreate(osMutex(MtxQntCombustivel));
 8005722:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005726:	4618      	mov	r0, r3
 8005728:	f7fd fec9 	bl	80034be <osMutexCreate>
 800572c:	4602      	mov	r2, r0
 800572e:	4b3f      	ldr	r3, [pc, #252]	; (800582c <main+0x140>)
 8005730:	601a      	str	r2, [r3, #0]

  /* definition and creation of MtxInformacoes */
  osMutexDef(MtxInformacoes);
 8005732:	2300      	movs	r3, #0
 8005734:	67fb      	str	r3, [r7, #124]	; 0x7c
  MtxInformacoesHandle = osMutexCreate(osMutex(MtxInformacoes));
 8005736:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800573a:	4618      	mov	r0, r3
 800573c:	f7fd febf 	bl	80034be <osMutexCreate>
 8005740:	4602      	mov	r2, r0
 8005742:	4b3b      	ldr	r3, [pc, #236]	; (8005830 <main+0x144>)
 8005744:	601a      	str	r2, [r3, #0]

  /* definition and creation of MtxConstantes */
  osMutexDef(MtxConstantes);
 8005746:	2300      	movs	r3, #0
 8005748:	67bb      	str	r3, [r7, #120]	; 0x78
  MtxConstantesHandle = osMutexCreate(osMutex(MtxConstantes));
 800574a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800574e:	4618      	mov	r0, r3
 8005750:	f7fd feb5 	bl	80034be <osMutexCreate>
 8005754:	4602      	mov	r2, r0
 8005756:	4b37      	ldr	r3, [pc, #220]	; (8005834 <main+0x148>)
 8005758:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskLeituraAcel */
  osThreadDef(taskLeituraAcel, StartLeituraAcel, osPriorityNormal, 0, 128);
 800575a:	4b37      	ldr	r3, [pc, #220]	; (8005838 <main+0x14c>)
 800575c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8005760:	461d      	mov	r5, r3
 8005762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005766:	682b      	ldr	r3, [r5, #0]
 8005768:	6023      	str	r3, [r4, #0]
  taskLeituraAcelHandle = osThreadCreate(osThread(taskLeituraAcel), NULL);
 800576a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f7fd fe69 	bl	8003448 <osThreadCreate>
 8005776:	4602      	mov	r2, r0
 8005778:	4b30      	ldr	r3, [pc, #192]	; (800583c <main+0x150>)
 800577a:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskLeituraSens */
  osThreadDef(taskLeituraSens, StartLeituraSens, osPriorityNormal, 0, 128);
 800577c:	4b30      	ldr	r3, [pc, #192]	; (8005840 <main+0x154>)
 800577e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005782:	461d      	mov	r5, r3
 8005784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	6023      	str	r3, [r4, #0]
  taskLeituraSensHandle = osThreadCreate(osThread(taskLeituraSens), NULL);
 800578c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005790:	2100      	movs	r1, #0
 8005792:	4618      	mov	r0, r3
 8005794:	f7fd fe58 	bl	8003448 <osThreadCreate>
 8005798:	4602      	mov	r2, r0
 800579a:	4b2a      	ldr	r3, [pc, #168]	; (8005844 <main+0x158>)
 800579c:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskProcessamen */
  osThreadDef(taskProcessamen, StartProcessamen, osPriorityNormal, 0, 128);
 800579e:	4b2a      	ldr	r3, [pc, #168]	; (8005848 <main+0x15c>)
 80057a0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80057a4:	461d      	mov	r5, r3
 80057a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057aa:	682b      	ldr	r3, [r5, #0]
 80057ac:	6023      	str	r3, [r4, #0]
  taskProcessamenHandle = osThreadCreate(osThread(taskProcessamen), NULL);
 80057ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fd fe47 	bl	8003448 <osThreadCreate>
 80057ba:	4602      	mov	r2, r0
 80057bc:	4b23      	ldr	r3, [pc, #140]	; (800584c <main+0x160>)
 80057be:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskAcionamento */
  osThreadDef(taskAcionamento, StartAcionamento, osPriorityNormal, 0, 128);
 80057c0:	4b23      	ldr	r3, [pc, #140]	; (8005850 <main+0x164>)
 80057c2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80057c6:	461d      	mov	r5, r3
 80057c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	6023      	str	r3, [r4, #0]
  taskAcionamentoHandle = osThreadCreate(osThread(taskAcionamento), NULL);
 80057d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057d4:	2100      	movs	r1, #0
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fd fe36 	bl	8003448 <osThreadCreate>
 80057dc:	4602      	mov	r2, r0
 80057de:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <main+0x168>)
 80057e0:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskEscritaMemo */
  osThreadDef(taskEscritaMemo, StartEscritaMemoria, osPriorityNormal, 0, 128);
 80057e2:	4b1d      	ldr	r3, [pc, #116]	; (8005858 <main+0x16c>)
 80057e4:	f107 0414 	add.w	r4, r7, #20
 80057e8:	461d      	mov	r5, r3
 80057ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057ee:	682b      	ldr	r3, [r5, #0]
 80057f0:	6023      	str	r3, [r4, #0]
  taskEscritaMemoHandle = osThreadCreate(osThread(taskEscritaMemo), NULL);
 80057f2:	f107 0314 	add.w	r3, r7, #20
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fd fe25 	bl	8003448 <osThreadCreate>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b16      	ldr	r3, [pc, #88]	; (800585c <main+0x170>)
 8005802:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskEscritaDisp */
  osThreadDef(taskEscritaDisp, StartEscritaDisplay, osPriorityNormal, 0, 128);
 8005804:	4b16      	ldr	r3, [pc, #88]	; (8005860 <main+0x174>)
 8005806:	463c      	mov	r4, r7
 8005808:	461d      	mov	r5, r3
 800580a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800580c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800580e:	682b      	ldr	r3, [r5, #0]
 8005810:	6023      	str	r3, [r4, #0]
  taskEscritaDispHandle = osThreadCreate(osThread(taskEscritaDisp), NULL);
 8005812:	463b      	mov	r3, r7
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f7fd fe16 	bl	8003448 <osThreadCreate>
 800581c:	4602      	mov	r2, r0
 800581e:	4b11      	ldr	r3, [pc, #68]	; (8005864 <main+0x178>)
 8005820:	601a      	str	r2, [r3, #0]
//  LCD_Init();
//  LCD_Write_String(0, 0, "Teste");
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005822:	f7fd fe0a 	bl	800343a <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005826:	e7fe      	b.n	8005826 <main+0x13a>
 8005828:	200014d0 	.word	0x200014d0
 800582c:	200014e0 	.word	0x200014e0
 8005830:	200014d4 	.word	0x200014d4
 8005834:	200014e4 	.word	0x200014e4
 8005838:	08006b1c 	.word	0x08006b1c
 800583c:	200014bc 	.word	0x200014bc
 8005840:	08006b40 	.word	0x08006b40
 8005844:	200014cc 	.word	0x200014cc
 8005848:	08006b64 	.word	0x08006b64
 800584c:	200014b4 	.word	0x200014b4
 8005850:	08006b88 	.word	0x08006b88
 8005854:	200014b8 	.word	0x200014b8
 8005858:	08006bac 	.word	0x08006bac
 800585c:	200015c0 	.word	0x200015c0
 8005860:	08006bd0 	.word	0x08006bd0
 8005864:	200014c8 	.word	0x200014c8

08005868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b090      	sub	sp, #64	; 0x40
 800586c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800586e:	f107 0318 	add.w	r3, r7, #24
 8005872:	2228      	movs	r2, #40	; 0x28
 8005874:	2100      	movs	r1, #0
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fd33 	bl	80062e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	609a      	str	r2, [r3, #8]
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800588a:	2302      	movs	r3, #2
 800588c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800588e:	2301      	movs	r3, #1
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005892:	2310      	movs	r3, #16
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005896:	2302      	movs	r3, #2
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800589a:	2300      	movs	r3, #0
 800589c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800589e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058a4:	f107 0318 	add.w	r3, r7, #24
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fb fbdb 	bl	8001064 <HAL_RCC_OscConfig>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80058b4:	f000 fb62 	bl	8005f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058b8:	230f      	movs	r3, #15
 80058ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058bc:	2302      	movs	r3, #2
 80058be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80058c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	2102      	movs	r1, #2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fc fab4 	bl	8001e40 <HAL_RCC_ClockConfig>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80058de:	f000 fb4d 	bl	8005f7c <Error_Handler>
  }
}
 80058e2:	bf00      	nop
 80058e4:	3740      	adds	r7, #64	; 0x40
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <MX_SPI1_Init+0x74>)
 80058f2:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <MX_SPI1_Init+0x78>)
 80058f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <MX_SPI1_Init+0x74>)
 80058f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80058fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80058fe:	4b18      	ldr	r3, [pc, #96]	; (8005960 <MX_SPI1_Init+0x74>)
 8005900:	2200      	movs	r2, #0
 8005902:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005904:	4b16      	ldr	r3, [pc, #88]	; (8005960 <MX_SPI1_Init+0x74>)
 8005906:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800590a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800590c:	4b14      	ldr	r3, [pc, #80]	; (8005960 <MX_SPI1_Init+0x74>)
 800590e:	2200      	movs	r2, #0
 8005910:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005912:	4b13      	ldr	r3, [pc, #76]	; (8005960 <MX_SPI1_Init+0x74>)
 8005914:	2200      	movs	r2, #0
 8005916:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005918:	4b11      	ldr	r3, [pc, #68]	; (8005960 <MX_SPI1_Init+0x74>)
 800591a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005920:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <MX_SPI1_Init+0x74>)
 8005922:	2238      	movs	r2, #56	; 0x38
 8005924:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005926:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <MX_SPI1_Init+0x74>)
 8005928:	2200      	movs	r2, #0
 800592a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <MX_SPI1_Init+0x74>)
 800592e:	2200      	movs	r2, #0
 8005930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005932:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <MX_SPI1_Init+0x74>)
 8005934:	2200      	movs	r2, #0
 8005936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005938:	4b09      	ldr	r3, [pc, #36]	; (8005960 <MX_SPI1_Init+0x74>)
 800593a:	2207      	movs	r2, #7
 800593c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800593e:	4b08      	ldr	r3, [pc, #32]	; (8005960 <MX_SPI1_Init+0x74>)
 8005940:	2200      	movs	r2, #0
 8005942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005944:	4b06      	ldr	r3, [pc, #24]	; (8005960 <MX_SPI1_Init+0x74>)
 8005946:	2208      	movs	r2, #8
 8005948:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800594a:	4805      	ldr	r0, [pc, #20]	; (8005960 <MX_SPI1_Init+0x74>)
 800594c:	f7fc fcae 	bl	80022ac <HAL_SPI_Init>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005956:	f000 fb11 	bl	8005f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800595a:	bf00      	nop
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	200014e8 	.word	0x200014e8
 8005964:	40013000 	.word	0x40013000

08005968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800596c:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 800596e:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <MX_USART2_UART_Init+0x5c>)
 8005970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8005972:	4b13      	ldr	r3, [pc, #76]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 8005974:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800597a:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 800597c:	2200      	movs	r2, #0
 800597e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 8005982:	2200      	movs	r2, #0
 8005984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005986:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 8005988:	2200      	movs	r2, #0
 800598a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800598c:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 800598e:	220c      	movs	r2, #12
 8005990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 8005994:	2200      	movs	r2, #0
 8005996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 800599a:	2200      	movs	r2, #0
 800599c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800599e:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80059aa:	4805      	ldr	r0, [pc, #20]	; (80059c0 <MX_USART2_UART_Init+0x58>)
 80059ac:	f7fd f9a1 	bl	8002cf2 <HAL_UART_Init>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80059b6:	f000 fae1 	bl	8005f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80059ba:	bf00      	nop
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20001550 	.word	0x20001550
 80059c4:	40004400 	.word	0x40004400

080059c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	; 0x28
 80059cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059ce:	f107 0314 	add.w	r3, r7, #20
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	605a      	str	r2, [r3, #4]
 80059d8:	609a      	str	r2, [r3, #8]
 80059da:	60da      	str	r2, [r3, #12]
 80059dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80059de:	4b41      	ldr	r3, [pc, #260]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	4a40      	ldr	r2, [pc, #256]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 80059e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059e8:	6153      	str	r3, [r2, #20]
 80059ea:	4b3e      	ldr	r3, [pc, #248]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80059f6:	4b3b      	ldr	r3, [pc, #236]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	4a3a      	ldr	r2, [pc, #232]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 80059fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a00:	6153      	str	r3, [r2, #20]
 8005a02:	4b38      	ldr	r3, [pc, #224]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a0e:	4b35      	ldr	r3, [pc, #212]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	4a34      	ldr	r2, [pc, #208]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 8005a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a18:	6153      	str	r3, [r2, #20]
 8005a1a:	4b32      	ldr	r3, [pc, #200]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a22:	60bb      	str	r3, [r7, #8]
 8005a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a26:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	4a2e      	ldr	r2, [pc, #184]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 8005a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a30:	6153      	str	r3, [r2, #20]
 8005a32:	4b2c      	ldr	r3, [pc, #176]	; (8005ae4 <MX_GPIO_Init+0x11c>)
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_OXIGENIO_Pin|EN_ACELERADOR_Pin|EN_MEMORIA_Pin|LCD_CE_Pin 
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f44f 6156 	mov.w	r1, #3424	; 0xd60
 8005a44:	4828      	ldr	r0, [pc, #160]	; (8005ae8 <MX_GPIO_Init+0x120>)
 8005a46:	f7fb faf5 	bl	8001034 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8005a50:	4826      	ldr	r0, [pc, #152]	; (8005aec <MX_GPIO_Init+0x124>)
 8005a52:	f7fb faef 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|EN_TEMPERATURA_Pin, GPIO_PIN_RESET);
 8005a56:	2200      	movs	r2, #0
 8005a58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a60:	f7fb fae8 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a6a:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <MX_GPIO_Init+0x128>)
 8005a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005a72:	f107 0314 	add.w	r3, r7, #20
 8005a76:	4619      	mov	r1, r3
 8005a78:	481b      	ldr	r0, [pc, #108]	; (8005ae8 <MX_GPIO_Init+0x120>)
 8005a7a:	f7fb f965 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_OXIGENIO_Pin EN_ACELERADOR_Pin EN_MEMORIA_Pin LCD_CE_Pin 
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = EN_OXIGENIO_Pin|EN_ACELERADOR_Pin|EN_MEMORIA_Pin|LCD_CE_Pin 
 8005a7e:	f44f 6356 	mov.w	r3, #3424	; 0xd60
 8005a82:	617b      	str	r3, [r7, #20]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a84:	2301      	movs	r3, #1
 8005a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	4619      	mov	r1, r3
 8005a96:	4814      	ldr	r0, [pc, #80]	; (8005ae8 <MX_GPIO_Init+0x120>)
 8005a98:	f7fb f956 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LCD_RST_Pin;
 8005a9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aae:	f107 0314 	add.w	r3, r7, #20
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	480d      	ldr	r0, [pc, #52]	; (8005aec <MX_GPIO_Init+0x124>)
 8005ab6:	f7fb f947 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin EN_TEMPERATURA_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|EN_TEMPERATURA_Pin;
 8005aba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005acc:	f107 0314 	add.w	r3, r7, #20
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ad6:	f7fb f937 	bl	8000d48 <HAL_GPIO_Init>

}
 8005ada:	bf00      	nop
 8005adc:	3728      	adds	r7, #40	; 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	48000800 	.word	0x48000800
 8005aec:	48000400 	.word	0x48000400
 8005af0:	10210000 	.word	0x10210000
 8005af4:	00000000 	.word	0x00000000

08005af8 <StartLeituraAcel>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartLeituraAcel */
void StartLeituraAcel(void const * argument)
{
 8005af8:	b590      	push	{r4, r7, lr}
 8005afa:	b0a1      	sub	sp, #132	; 0x84
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t aceleradorSPI = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	int aceleradorLocal = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint8_t transmissao[100];

  /* Infinite loop */
  for(;;)
  {
	  aceleradorLocal = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	67fb      	str	r3, [r7, #124]	; 0x7c
	  HAL_GPIO_WritePin(EN_ACELERADOR_GPIO_Port, EN_ACELERADOR_Pin, 0);
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2140      	movs	r1, #64	; 0x40
 8005b12:	4879      	ldr	r0, [pc, #484]	; (8005cf8 <StartLeituraAcel+0x200>)
 8005b14:	f7fb fa8e 	bl	8001034 <HAL_GPIO_WritePin>

	  HAL_SPI_Receive(&hspi1, &aceleradorSPI, 1, 1000);
 8005b18:	f107 017b 	add.w	r1, r7, #123	; 0x7b
 8005b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b20:	2201      	movs	r2, #1
 8005b22:	4876      	ldr	r0, [pc, #472]	; (8005cfc <StartLeituraAcel+0x204>)
 8005b24:	f7fc fc4c 	bl	80023c0 <HAL_SPI_Receive>

	  HAL_GPIO_WritePin(EN_ACELERADOR_GPIO_Port, EN_ACELERADOR_Pin, 1);
 8005b28:	2201      	movs	r2, #1
 8005b2a:	2140      	movs	r1, #64	; 0x40
 8005b2c:	4872      	ldr	r0, [pc, #456]	; (8005cf8 <StartLeituraAcel+0x200>)
 8005b2e:	f7fb fa81 	bl	8001034 <HAL_GPIO_WritePin>



	  if(aceleradorSPI > 128 ) {
 8005b32:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005b36:	2b80      	cmp	r3, #128	; 0x80
 8005b38:	d935      	bls.n	8005ba6 <StartLeituraAcel+0xae>
		  aceleradorLocal = ((- 128 + ((int) aceleradorSPI ))*1.58);
 8005b3a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005b3e:	3b80      	subs	r3, #128	; 0x80
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fa fcef 	bl	8000524 <__aeabi_i2d>
 8005b46:	a36a      	add	r3, pc, #424	; (adr r3, 8005cf0 <StartLeituraAcel+0x1f8>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f7fa fd54 	bl	80005f8 <__aeabi_dmul>
 8005b50:	4603      	mov	r3, r0
 8005b52:	460c      	mov	r4, r1
 8005b54:	4618      	mov	r0, r3
 8005b56:	4621      	mov	r1, r4
 8005b58:	f7fa ff60 	bl	8000a1c <__aeabi_d2iz>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	67fb      	str	r3, [r7, #124]	; 0x7c

		  sprintf(transmissao, "valor Acelerador lido: %d\r\n", aceleradorLocal);
 8005b60:	f107 030c 	add.w	r3, r7, #12
 8005b64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005b66:	4966      	ldr	r1, [pc, #408]	; (8005d00 <StartLeituraAcel+0x208>)
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fbc3 	bl	80062f4 <siprintf>
		  HAL_UART_Transmit(&huart2, transmissao, strlen(transmissao), 1000);
 8005b6e:	f107 030c 	add.w	r3, r7, #12
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fa fb2c 	bl	80001d0 <strlen>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	f107 010c 	add.w	r1, r7, #12
 8005b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b84:	485f      	ldr	r0, [pc, #380]	; (8005d04 <StartLeituraAcel+0x20c>)
 8005b86:	f7fd f905 	bl	8002d94 <HAL_UART_Transmit>


		  osMutexWait(MtxAceleradorHandle, 100);
 8005b8a:	4b5f      	ldr	r3, [pc, #380]	; (8005d08 <StartLeituraAcel+0x210>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2164      	movs	r1, #100	; 0x64
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fd fca1 	bl	80034d8 <osMutexWait>
		  aceleradorGlobal = aceleradorLocal;
 8005b96:	4a5d      	ldr	r2, [pc, #372]	; (8005d0c <StartLeituraAcel+0x214>)
 8005b98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b9a:	6013      	str	r3, [r2, #0]
		  osMutexRelease(MtxAceleradorHandle);
 8005b9c:	4b5a      	ldr	r3, [pc, #360]	; (8005d08 <StartLeituraAcel+0x210>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fd fce9 	bl	8003578 <osMutexRelease>
	  }
	  // ===============================================


	  sensorOxg_TempLocal[0] = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	673b      	str	r3, [r7, #112]	; 0x70
	  sensorOxg_TempLocal[1] = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	677b      	str	r3, [r7, #116]	; 0x74

	  HAL_GPIO_WritePin(EN_OXIGENIO_GPIO_Port, EN_OXIGENIO_Pin, 0);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2120      	movs	r1, #32
 8005bb2:	4851      	ldr	r0, [pc, #324]	; (8005cf8 <StartLeituraAcel+0x200>)
 8005bb4:	f7fb fa3e 	bl	8001034 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, &sensorOxg_TempSPI[0], 1, 1000);
 8005bb8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8005bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	484e      	ldr	r0, [pc, #312]	; (8005cfc <StartLeituraAcel+0x204>)
 8005bc4:	f7fc fbfc 	bl	80023c0 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(EN_OXIGENIO_GPIO_Port, EN_OXIGENIO_Pin, 1);
 8005bc8:	2201      	movs	r2, #1
 8005bca:	2120      	movs	r1, #32
 8005bcc:	484a      	ldr	r0, [pc, #296]	; (8005cf8 <StartLeituraAcel+0x200>)
 8005bce:	f7fb fa31 	bl	8001034 <HAL_GPIO_WritePin>

	  if(sensorOxg_TempSPI[0] > 128){
 8005bd2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8005bd6:	2b80      	cmp	r3, #128	; 0x80
 8005bd8:	d935      	bls.n	8005c46 <StartLeituraAcel+0x14e>

		  sensorOxg_TempLocal[0] =  ((- 128 + ((int) sensorOxg_TempSPI[0] ))*1.58);
 8005bda:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8005bde:	3b80      	subs	r3, #128	; 0x80
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fa fc9f 	bl	8000524 <__aeabi_i2d>
 8005be6:	a342      	add	r3, pc, #264	; (adr r3, 8005cf0 <StartLeituraAcel+0x1f8>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fa fd04 	bl	80005f8 <__aeabi_dmul>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	f7fa ff10 	bl	8000a1c <__aeabi_d2iz>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	673b      	str	r3, [r7, #112]	; 0x70


		  sprintf (transmissao, "valor Oxigenio lido: %d\r\n", sensorOxg_TempLocal[0]);
 8005c00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005c02:	f107 030c 	add.w	r3, r7, #12
 8005c06:	4942      	ldr	r1, [pc, #264]	; (8005d10 <StartLeituraAcel+0x218>)
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fb73 	bl	80062f4 <siprintf>
		  HAL_UART_Transmit(&huart2, transmissao, strlen(transmissao), 1000);
 8005c0e:	f107 030c 	add.w	r3, r7, #12
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fa fadc 	bl	80001d0 <strlen>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	f107 010c 	add.w	r1, r7, #12
 8005c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c24:	4837      	ldr	r0, [pc, #220]	; (8005d04 <StartLeituraAcel+0x20c>)
 8005c26:	f7fd f8b5 	bl	8002d94 <HAL_UART_Transmit>

		  osMutexWait(MtxAceleradorHandle, 100);
 8005c2a:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <StartLeituraAcel+0x210>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2164      	movs	r1, #100	; 0x64
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fd fc51 	bl	80034d8 <osMutexWait>
		  sensorOxg_TempGlobal[0] = sensorOxg_TempLocal[0];
 8005c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c38:	4a36      	ldr	r2, [pc, #216]	; (8005d14 <StartLeituraAcel+0x21c>)
 8005c3a:	6013      	str	r3, [r2, #0]
		  osMutexRelease(MtxAceleradorHandle);
 8005c3c:	4b32      	ldr	r3, [pc, #200]	; (8005d08 <StartLeituraAcel+0x210>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fd fc99 	bl	8003578 <osMutexRelease>
	  }


	  HAL_GPIO_WritePin(EN_TEMPERATURA_GPIO_Port, EN_TEMPERATURA_Pin, 0);
 8005c46:	2200      	movs	r2, #0
 8005c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c50:	f7fb f9f0 	bl	8001034 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, &sensorOxg_TempSPI[1], 1, 1000);
 8005c54:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005c58:	1c59      	adds	r1, r3, #1
 8005c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c5e:	2201      	movs	r2, #1
 8005c60:	4826      	ldr	r0, [pc, #152]	; (8005cfc <StartLeituraAcel+0x204>)
 8005c62:	f7fc fbad 	bl	80023c0 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(EN_TEMPERATURA_GPIO_Port, EN_TEMPERATURA_Pin, 1);
 8005c66:	2201      	movs	r2, #1
 8005c68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c70:	f7fb f9e0 	bl	8001034 <HAL_GPIO_WritePin>

	  if(sensorOxg_TempSPI[1] > 128) {
 8005c74:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d935      	bls.n	8005ce8 <StartLeituraAcel+0x1f0>

		  sensorOxg_TempLocal[1] =  ((- 128 + ((int) sensorOxg_TempSPI[1] ))*1.58);
 8005c7c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8005c80:	3b80      	subs	r3, #128	; 0x80
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fa fc4e 	bl	8000524 <__aeabi_i2d>
 8005c88:	a319      	add	r3, pc, #100	; (adr r3, 8005cf0 <StartLeituraAcel+0x1f8>)
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	f7fa fcb3 	bl	80005f8 <__aeabi_dmul>
 8005c92:	4603      	mov	r3, r0
 8005c94:	460c      	mov	r4, r1
 8005c96:	4618      	mov	r0, r3
 8005c98:	4621      	mov	r1, r4
 8005c9a:	f7fa febf 	bl	8000a1c <__aeabi_d2iz>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	677b      	str	r3, [r7, #116]	; 0x74

		  sprintf (transmissao, "valor Temperatura lido: %d\r\n", sensorOxg_TempLocal[1]);
 8005ca2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ca4:	f107 030c 	add.w	r3, r7, #12
 8005ca8:	491b      	ldr	r1, [pc, #108]	; (8005d18 <StartLeituraAcel+0x220>)
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fb22 	bl	80062f4 <siprintf>
		  HAL_UART_Transmit(&huart2, transmissao, strlen(transmissao), 1000);
 8005cb0:	f107 030c 	add.w	r3, r7, #12
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fa fa8b 	bl	80001d0 <strlen>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	f107 010c 	add.w	r1, r7, #12
 8005cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cc6:	480f      	ldr	r0, [pc, #60]	; (8005d04 <StartLeituraAcel+0x20c>)
 8005cc8:	f7fd f864 	bl	8002d94 <HAL_UART_Transmit>


		  osMutexWait(MtxAceleradorHandle, 100);
 8005ccc:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <StartLeituraAcel+0x210>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2164      	movs	r1, #100	; 0x64
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fd fc00 	bl	80034d8 <osMutexWait>
		  sensorOxg_TempGlobal[1] = sensorOxg_TempLocal[1];
 8005cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cda:	4a0e      	ldr	r2, [pc, #56]	; (8005d14 <StartLeituraAcel+0x21c>)
 8005cdc:	6053      	str	r3, [r2, #4]
		  osMutexRelease(MtxAceleradorHandle);
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <StartLeituraAcel+0x210>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fd fc48 	bl	8003578 <osMutexRelease>
	  }
	  HAL_Delay(10);
 8005ce8:	200a      	movs	r0, #10
 8005cea:	f7fa ff25 	bl	8000b38 <HAL_Delay>
	  aceleradorLocal = 0;
 8005cee:	e70c      	b.n	8005b0a <StartLeituraAcel+0x12>
 8005cf0:	147ae148 	.word	0x147ae148
 8005cf4:	3ff947ae 	.word	0x3ff947ae
 8005cf8:	48000800 	.word	0x48000800
 8005cfc:	200014e8 	.word	0x200014e8
 8005d00:	08006be4 	.word	0x08006be4
 8005d04:	20001550 	.word	0x20001550
 8005d08:	200014d0 	.word	0x200014d0
 8005d0c:	200015c4 	.word	0x200015c4
 8005d10:	08006c00 	.word	0x08006c00
 8005d14:	200014c0 	.word	0x200014c0
 8005d18:	08006c1c 	.word	0x08006c1c

08005d1c <StartLeituraSens>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeituraSens */
void StartLeituraSens(void const * argument)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeituraSens */

  /* Infinite loop */
  for(;;)
  {
	  HAL_Delay(10);
 8005d24:	200a      	movs	r0, #10
 8005d26:	f7fa ff07 	bl	8000b38 <HAL_Delay>
 8005d2a:	e7fb      	b.n	8005d24 <StartLeituraSens+0x8>

08005d2c <StartProcessamen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessamen */
void StartProcessamen(void const * argument)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	uint8_t constantesLocal[3];

  /* Infinite loop */
  for(;;)
  {
	osMutexWait(MtxAceleradorHandle, 1000);
 8005d34:	4b37      	ldr	r3, [pc, #220]	; (8005e14 <StartProcessamen+0xe8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fd fbcb 	bl	80034d8 <osMutexWait>
	aceleracaoLocal = aceleradorGlobal;
 8005d42:	4b35      	ldr	r3, [pc, #212]	; (8005e18 <StartProcessamen+0xec>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d4e:	edc7 7a05 	vstr	s15, [r7, #20]
	oxigenioLocal = sensorOxg_TempGlobal[0];
 8005d52:	4b32      	ldr	r3, [pc, #200]	; (8005e1c <StartProcessamen+0xf0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	74fb      	strb	r3, [r7, #19]
	temperaturaLocal = sensorOxg_TempGlobal[1];
 8005d58:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <StartProcessamen+0xf0>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	74bb      	strb	r3, [r7, #18]
	osMutexRelease(MtxAceleradorHandle);
 8005d5e:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <StartProcessamen+0xe8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fd fc08 	bl	8003578 <osMutexRelease>




//	osMutexWait(MtxConstantesHandle, 1000);
	constantesLocal[0] = constantesGlobal[0];
 8005d68:	4b2d      	ldr	r3, [pc, #180]	; (8005e20 <StartProcessamen+0xf4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	733b      	strb	r3, [r7, #12]
	constantesLocal[1] = constantesGlobal[1];
 8005d70:	4b2b      	ldr	r3, [pc, #172]	; (8005e20 <StartProcessamen+0xf4>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	737b      	strb	r3, [r7, #13]
	constantesLocal[2] = constantesGlobal[2];
 8005d78:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <StartProcessamen+0xf4>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	73bb      	strb	r3, [r7, #14]
//	osMutexRelease(MtxConstantesHandle);




	qntCombustivelLocal = aceleracaoLocal * 50 + (30 - temperaturaLocal * 30) + oxigenioLocal * 20;
 8005d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d84:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005e24 <StartProcessamen+0xf8>
 8005d88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005d8c:	7cba      	ldrb	r2, [r7, #18]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	0112      	lsls	r2, r2, #4
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	331e      	adds	r3, #30
 8005d98:	ee07 3a90 	vmov	s15, r3
 8005d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005da0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005da4:	7cfa      	ldrb	r2, [r7, #19]
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dbe:	edc7 7a00 	vstr	s15, [r7]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	747b      	strb	r3, [r7, #17]


	osMutexWait(MtxQntCombustivelHandle, 1000);
 8005dc6:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <StartProcessamen+0xfc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fd fb82 	bl	80034d8 <osMutexWait>
	qntCombustivelGlobal = qntCombustivelLocal;
 8005dd4:	7c7b      	ldrb	r3, [r7, #17]
 8005dd6:	4a15      	ldr	r2, [pc, #84]	; (8005e2c <StartProcessamen+0x100>)
 8005dd8:	6013      	str	r3, [r2, #0]
	osMutexRelease(MtxQntCombustivelHandle);
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <StartProcessamen+0xfc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fd fbca 	bl	8003578 <osMutexRelease>


	osMutexWait(MtxInformacoesHandle, 1000);
 8005de4:	4b12      	ldr	r3, [pc, #72]	; (8005e30 <StartProcessamen+0x104>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fd fb73 	bl	80034d8 <osMutexWait>
	informacoesGlobal[0] = qntCombustivelGlobal;
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <StartProcessamen+0x100>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a0f      	ldr	r2, [pc, #60]	; (8005e34 <StartProcessamen+0x108>)
 8005df8:	6013      	str	r3, [r2, #0]
	informacoesGlobal[1] = 222;
 8005dfa:	4b0e      	ldr	r3, [pc, #56]	; (8005e34 <StartProcessamen+0x108>)
 8005dfc:	22de      	movs	r2, #222	; 0xde
 8005dfe:	605a      	str	r2, [r3, #4]
	osMutexRelease(MtxInformacoesHandle);
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <StartProcessamen+0x104>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fd fbb7 	bl	8003578 <osMutexRelease>

	osDelay(10);
 8005e0a:	200a      	movs	r0, #10
 8005e0c:	f7fd fb43 	bl	8003496 <osDelay>
	osMutexWait(MtxAceleradorHandle, 1000);
 8005e10:	e790      	b.n	8005d34 <StartProcessamen+0x8>
 8005e12:	bf00      	nop
 8005e14:	200014d0 	.word	0x200014d0
 8005e18:	200015c4 	.word	0x200015c4
 8005e1c:	200014c0 	.word	0x200014c0
 8005e20:	200015c8 	.word	0x200015c8
 8005e24:	42480000 	.word	0x42480000
 8005e28:	200014e0 	.word	0x200014e0
 8005e2c:	2000154c 	.word	0x2000154c
 8005e30:	200014d4 	.word	0x200014d4
 8005e34:	200014d8 	.word	0x200014d8

08005e38 <StartAcionamento>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcionamento */
void StartAcionamento(void const * argument)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAcionamento */
	uint8_t qntCombustivelLocal;
  /* Infinite loop */
  for(;;)
  {
	osMutexWait(MtxQntCombustivelHandle, 1000);
 8005e40:	4b2b      	ldr	r3, [pc, #172]	; (8005ef0 <StartAcionamento+0xb8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fd fb45 	bl	80034d8 <osMutexWait>
	qntCombustivelLocal = qntCombustivelGlobal;
 8005e4e:	4b29      	ldr	r3, [pc, #164]	; (8005ef4 <StartAcionamento+0xbc>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	73fb      	strb	r3, [r7, #15]
	osMutexRelease(MtxQntCombustivelHandle);
 8005e54:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <StartAcionamento+0xb8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fd fb8d 	bl	8003578 <osMutexRelease>

	if(qntCombustivelLocal < 33) {
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d812      	bhi.n	8005e8a <StartAcionamento+0x52>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8005e64:	2201      	movs	r2, #1
 8005e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e6e:	f7fb f8e1 	bl	8001034 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8005e72:	2200      	movs	r2, #0
 8005e74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e78:	481f      	ldr	r0, [pc, #124]	; (8005ef8 <StartAcionamento+0xc0>)
 8005e7a:	f7fb f8db 	bl	8001034 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e84:	481c      	ldr	r0, [pc, #112]	; (8005ef8 <StartAcionamento+0xc0>)
 8005e86:	f7fb f8d5 	bl	8001034 <HAL_GPIO_WritePin>
//	  HAL_UART_Transmit(&huart2, "taskAcionamento 33\r\n", 33, 1000);
	}

	if(qntCombustivelLocal < 66 && qntCombustivelLocal >= 33) {
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	2b41      	cmp	r3, #65	; 0x41
 8005e8e:	d815      	bhi.n	8005ebc <StartAcionamento+0x84>
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d912      	bls.n	8005ebc <StartAcionamento+0x84>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8005e96:	2200      	movs	r2, #0
 8005e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ea0:	f7fb f8c8 	bl	8001034 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005eaa:	4813      	ldr	r0, [pc, #76]	; (8005ef8 <StartAcionamento+0xc0>)
 8005eac:	f7fb f8c2 	bl	8001034 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005eb6:	4810      	ldr	r0, [pc, #64]	; (8005ef8 <StartAcionamento+0xc0>)
 8005eb8:	f7fb f8bc 	bl	8001034 <HAL_GPIO_WritePin>
//	  HAL_UART_Transmit(&huart2, "taskAcionamento 55\r\n", 33, 1000);
	}

	if(qntCombustivelLocal >= 66) {
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	2b41      	cmp	r3, #65	; 0x41
 8005ec0:	d912      	bls.n	8005ee8 <StartAcionamento+0xb0>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ecc:	f7fb f8b2 	bl	8001034 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ed6:	4808      	ldr	r0, [pc, #32]	; (8005ef8 <StartAcionamento+0xc0>)
 8005ed8:	f7fb f8ac 	bl	8001034 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8005edc:	2201      	movs	r2, #1
 8005ede:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ee2:	4805      	ldr	r0, [pc, #20]	; (8005ef8 <StartAcionamento+0xc0>)
 8005ee4:	f7fb f8a6 	bl	8001034 <HAL_GPIO_WritePin>
//	  HAL_UART_Transmit(&huart2, "taskAcionamento 66\r\n", 33, 1000);
	}

    osDelay(10);
 8005ee8:	200a      	movs	r0, #10
 8005eea:	f7fd fad4 	bl	8003496 <osDelay>
	osMutexWait(MtxQntCombustivelHandle, 1000);
 8005eee:	e7a7      	b.n	8005e40 <StartAcionamento+0x8>
 8005ef0:	200014e0 	.word	0x200014e0
 8005ef4:	2000154c 	.word	0x2000154c
 8005ef8:	48000400 	.word	0x48000400

08005efc <StartEscritaMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEscritaMemoria */
void StartEscritaMemoria(void const * argument)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEscritaMemoria */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8005f04:	200a      	movs	r0, #10
 8005f06:	f7fd fac6 	bl	8003496 <osDelay>
 8005f0a:	e7fb      	b.n	8005f04 <StartEscritaMemoria+0x8>

08005f0c <StartEscritaDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEscritaDisplay */
void StartEscritaDisplay(void const * argument)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b09e      	sub	sp, #120	; 0x78
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	uint8_t bufferOxigenio[50];
	uint8_t bufferAcelerador[50];
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(MtxInformacoesHandle, 1000);
 8005f14:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <StartEscritaDisplay+0x60>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fd fadb 	bl	80034d8 <osMutexWait>
	  informacoesLocal[0] = informacoesGlobal[0];
 8005f22:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <StartEscritaDisplay+0x64>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	  informacoesLocal[1] = informacoesGlobal[1];
 8005f2c:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <StartEscritaDisplay+0x64>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	  osMutexRelease(MtxInformacoesHandle);
 8005f36:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <StartEscritaDisplay+0x60>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fd fb1c 	bl	8003578 <osMutexRelease>

	  sprintf(bufferAcelerador, "Resultado Injecao: %d\r\n", informacoesLocal[0]);
 8005f40:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8005f44:	461a      	mov	r2, r3
 8005f46:	f107 030c 	add.w	r3, r7, #12
 8005f4a:	490a      	ldr	r1, [pc, #40]	; (8005f74 <StartEscritaDisplay+0x68>)
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 f9d1 	bl	80062f4 <siprintf>
	  sprintf(bufferOxigenio, "Teste: %d\r\n\r\n", informacoesLocal[1]);
 8005f52:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8005f56:	461a      	mov	r2, r3
 8005f58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f5c:	4906      	ldr	r1, [pc, #24]	; (8005f78 <StartEscritaDisplay+0x6c>)
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f9c8 	bl	80062f4 <siprintf>
//	  HAL_UART_Transmit(&huart2, bufferAcelerador, 25, 1000);
//	  HAL_UART_Transmit(&huart2, bufferOxigenio, 17, 1000);

//	  LCD_Write_String(0, 0, bufferAcelerador);
//	  LCD_Write_String(0, 1, bufferOxigenio);
	  osDelay(10);
 8005f64:	200a      	movs	r0, #10
 8005f66:	f7fd fa96 	bl	8003496 <osDelay>
	  osMutexWait(MtxInformacoesHandle, 1000);
 8005f6a:	e7d3      	b.n	8005f14 <StartEscritaDisplay+0x8>
 8005f6c:	200014d4 	.word	0x200014d4
 8005f70:	200014d8 	.word	0x200014d8
 8005f74:	08006c3c 	.word	0x08006c3c
 8005f78:	08006c54 	.word	0x08006c54

08005f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f92:	4b11      	ldr	r3, [pc, #68]	; (8005fd8 <HAL_MspInit+0x4c>)
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	4a10      	ldr	r2, [pc, #64]	; (8005fd8 <HAL_MspInit+0x4c>)
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	6193      	str	r3, [r2, #24]
 8005f9e:	4b0e      	ldr	r3, [pc, #56]	; (8005fd8 <HAL_MspInit+0x4c>)
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <HAL_MspInit+0x4c>)
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <HAL_MspInit+0x4c>)
 8005fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb4:	61d3      	str	r3, [r2, #28]
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <HAL_MspInit+0x4c>)
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	210f      	movs	r1, #15
 8005fc6:	f06f 0001 	mvn.w	r0, #1
 8005fca:	f7fa fe94 	bl	8000cf6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fce:	bf00      	nop
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40021000 	.word	0x40021000

08005fdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08a      	sub	sp, #40	; 0x28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fe4:	f107 0314 	add.w	r3, r7, #20
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a17      	ldr	r2, [pc, #92]	; (8006058 <HAL_SPI_MspInit+0x7c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d127      	bne.n	800604e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005ffe:	4b17      	ldr	r3, [pc, #92]	; (800605c <HAL_SPI_MspInit+0x80>)
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	4a16      	ldr	r2, [pc, #88]	; (800605c <HAL_SPI_MspInit+0x80>)
 8006004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006008:	6193      	str	r3, [r2, #24]
 800600a:	4b14      	ldr	r3, [pc, #80]	; (800605c <HAL_SPI_MspInit+0x80>)
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006012:	613b      	str	r3, [r7, #16]
 8006014:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006016:	4b11      	ldr	r3, [pc, #68]	; (800605c <HAL_SPI_MspInit+0x80>)
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	4a10      	ldr	r2, [pc, #64]	; (800605c <HAL_SPI_MspInit+0x80>)
 800601c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006020:	6153      	str	r3, [r2, #20]
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <HAL_SPI_MspInit+0x80>)
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800602e:	2338      	movs	r3, #56	; 0x38
 8006030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006032:	2302      	movs	r3, #2
 8006034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800603a:	2303      	movs	r3, #3
 800603c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800603e:	2305      	movs	r3, #5
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006042:	f107 0314 	add.w	r3, r7, #20
 8006046:	4619      	mov	r1, r3
 8006048:	4805      	ldr	r0, [pc, #20]	; (8006060 <HAL_SPI_MspInit+0x84>)
 800604a:	f7fa fe7d 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800604e:	bf00      	nop
 8006050:	3728      	adds	r7, #40	; 0x28
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40013000 	.word	0x40013000
 800605c:	40021000 	.word	0x40021000
 8006060:	48000400 	.word	0x48000400

08006064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	; 0x28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800606c:	f107 0314 	add.w	r3, r7, #20
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	60da      	str	r2, [r3, #12]
 800607a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a17      	ldr	r2, [pc, #92]	; (80060e0 <HAL_UART_MspInit+0x7c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d128      	bne.n	80060d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006086:	4b17      	ldr	r3, [pc, #92]	; (80060e4 <HAL_UART_MspInit+0x80>)
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <HAL_UART_MspInit+0x80>)
 800608c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006090:	61d3      	str	r3, [r2, #28]
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <HAL_UART_MspInit+0x80>)
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800609e:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <HAL_UART_MspInit+0x80>)
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	4a10      	ldr	r2, [pc, #64]	; (80060e4 <HAL_UART_MspInit+0x80>)
 80060a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a8:	6153      	str	r3, [r2, #20]
 80060aa:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <HAL_UART_MspInit+0x80>)
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80060b6:	230c      	movs	r3, #12
 80060b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ba:	2302      	movs	r3, #2
 80060bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060c2:	2303      	movs	r3, #3
 80060c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060c6:	2307      	movs	r3, #7
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ca:	f107 0314 	add.w	r3, r7, #20
 80060ce:	4619      	mov	r1, r3
 80060d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060d4:	f7fa fe38 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80060d8:	bf00      	nop
 80060da:	3728      	adds	r7, #40	; 0x28
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40004400 	.word	0x40004400
 80060e4:	40021000 	.word	0x40021000

080060e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80060ec:	bf00      	nop
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060fa:	e7fe      	b.n	80060fa <HardFault_Handler+0x4>

080060fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006100:	e7fe      	b.n	8006100 <MemManage_Handler+0x4>

08006102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006102:	b480      	push	{r7}
 8006104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006106:	e7fe      	b.n	8006106 <BusFault_Handler+0x4>

08006108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800610c:	e7fe      	b.n	800610c <UsageFault_Handler+0x4>

0800610e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800610e:	b480      	push	{r7}
 8006110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006112:	bf00      	nop
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006120:	f7fa fcea 	bl	8000af8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006124:	f7fe fd68 	bl	8004bf8 <xTaskGetSchedulerState>
 8006128:	4603      	mov	r3, r0
 800612a:	2b01      	cmp	r3, #1
 800612c:	d001      	beq.n	8006132 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800612e:	f7ff f883 	bl	8005238 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006132:	bf00      	nop
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006140:	4b11      	ldr	r3, [pc, #68]	; (8006188 <_sbrk+0x50>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <_sbrk+0x16>
		heap_end = &end;
 8006148:	4b0f      	ldr	r3, [pc, #60]	; (8006188 <_sbrk+0x50>)
 800614a:	4a10      	ldr	r2, [pc, #64]	; (800618c <_sbrk+0x54>)
 800614c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800614e:	4b0e      	ldr	r3, [pc, #56]	; (8006188 <_sbrk+0x50>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <_sbrk+0x50>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4413      	add	r3, r2
 800615c:	466a      	mov	r2, sp
 800615e:	4293      	cmp	r3, r2
 8006160:	d907      	bls.n	8006172 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006162:	f000 f889 	bl	8006278 <__errno>
 8006166:	4602      	mov	r2, r0
 8006168:	230c      	movs	r3, #12
 800616a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800616c:	f04f 33ff 	mov.w	r3, #4294967295
 8006170:	e006      	b.n	8006180 <_sbrk+0x48>
	}

	heap_end += incr;
 8006172:	4b05      	ldr	r3, [pc, #20]	; (8006188 <_sbrk+0x50>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	4a03      	ldr	r2, [pc, #12]	; (8006188 <_sbrk+0x50>)
 800617c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800617e:	68fb      	ldr	r3, [r7, #12]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	200014a4 	.word	0x200014a4
 800618c:	200015d8 	.word	0x200015d8

08006190 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006194:	4b1f      	ldr	r3, [pc, #124]	; (8006214 <SystemInit+0x84>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619a:	4a1e      	ldr	r2, [pc, #120]	; (8006214 <SystemInit+0x84>)
 800619c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80061a4:	4b1c      	ldr	r3, [pc, #112]	; (8006218 <SystemInit+0x88>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <SystemInit+0x88>)
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80061b0:	4b19      	ldr	r3, [pc, #100]	; (8006218 <SystemInit+0x88>)
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	4918      	ldr	r1, [pc, #96]	; (8006218 <SystemInit+0x88>)
 80061b6:	4b19      	ldr	r3, [pc, #100]	; (800621c <SystemInit+0x8c>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80061bc:	4b16      	ldr	r3, [pc, #88]	; (8006218 <SystemInit+0x88>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a15      	ldr	r2, [pc, #84]	; (8006218 <SystemInit+0x88>)
 80061c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80061c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80061cc:	4b12      	ldr	r3, [pc, #72]	; (8006218 <SystemInit+0x88>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a11      	ldr	r2, [pc, #68]	; (8006218 <SystemInit+0x88>)
 80061d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <SystemInit+0x88>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4a0e      	ldr	r2, [pc, #56]	; (8006218 <SystemInit+0x88>)
 80061de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80061e2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80061e4:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <SystemInit+0x88>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a0b      	ldr	r2, [pc, #44]	; (8006218 <SystemInit+0x88>)
 80061ea:	f023 030f 	bic.w	r3, r3, #15
 80061ee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80061f0:	4b09      	ldr	r3, [pc, #36]	; (8006218 <SystemInit+0x88>)
 80061f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f4:	4908      	ldr	r1, [pc, #32]	; (8006218 <SystemInit+0x88>)
 80061f6:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <SystemInit+0x90>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <SystemInit+0x88>)
 80061fe:	2200      	movs	r2, #0
 8006200:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006202:	4b04      	ldr	r3, [pc, #16]	; (8006214 <SystemInit+0x84>)
 8006204:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006208:	609a      	str	r2, [r3, #8]
#endif
}
 800620a:	bf00      	nop
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	e000ed00 	.word	0xe000ed00
 8006218:	40021000 	.word	0x40021000
 800621c:	f87fc00c 	.word	0xf87fc00c
 8006220:	ff00fccc 	.word	0xff00fccc

08006224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800625c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006228:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800622a:	e003      	b.n	8006234 <LoopCopyDataInit>

0800622c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800622c:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800622e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006230:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006232:	3104      	adds	r1, #4

08006234 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006234:	480b      	ldr	r0, [pc, #44]	; (8006264 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006236:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006238:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800623a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800623c:	d3f6      	bcc.n	800622c <CopyDataInit>
	ldr	r2, =_sbss
 800623e:	4a0b      	ldr	r2, [pc, #44]	; (800626c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006240:	e002      	b.n	8006248 <LoopFillZerobss>

08006242 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006242:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006244:	f842 3b04 	str.w	r3, [r2], #4

08006248 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006248:	4b09      	ldr	r3, [pc, #36]	; (8006270 <LoopForever+0x16>)
	cmp	r2, r3
 800624a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800624c:	d3f9      	bcc.n	8006242 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800624e:	f7ff ff9f 	bl	8006190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006252:	f000 f817 	bl	8006284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006256:	f7ff fa49 	bl	80056ec <main>

0800625a <LoopForever>:

LoopForever:
    b LoopForever
 800625a:	e7fe      	b.n	800625a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800625c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8006260:	08006cd8 	.word	0x08006cd8
	ldr	r0, =_sdata
 8006264:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006268:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800626c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8006270:	200015d8 	.word	0x200015d8

08006274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006274:	e7fe      	b.n	8006274 <ADC1_2_IRQHandler>
	...

08006278 <__errno>:
 8006278:	4b01      	ldr	r3, [pc, #4]	; (8006280 <__errno+0x8>)
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000010 	.word	0x20000010

08006284 <__libc_init_array>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	4e0d      	ldr	r6, [pc, #52]	; (80062bc <__libc_init_array+0x38>)
 8006288:	4c0d      	ldr	r4, [pc, #52]	; (80062c0 <__libc_init_array+0x3c>)
 800628a:	1ba4      	subs	r4, r4, r6
 800628c:	10a4      	asrs	r4, r4, #2
 800628e:	2500      	movs	r5, #0
 8006290:	42a5      	cmp	r5, r4
 8006292:	d109      	bne.n	80062a8 <__libc_init_array+0x24>
 8006294:	4e0b      	ldr	r6, [pc, #44]	; (80062c4 <__libc_init_array+0x40>)
 8006296:	4c0c      	ldr	r4, [pc, #48]	; (80062c8 <__libc_init_array+0x44>)
 8006298:	f000 fc28 	bl	8006aec <_init>
 800629c:	1ba4      	subs	r4, r4, r6
 800629e:	10a4      	asrs	r4, r4, #2
 80062a0:	2500      	movs	r5, #0
 80062a2:	42a5      	cmp	r5, r4
 80062a4:	d105      	bne.n	80062b2 <__libc_init_array+0x2e>
 80062a6:	bd70      	pop	{r4, r5, r6, pc}
 80062a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062ac:	4798      	blx	r3
 80062ae:	3501      	adds	r5, #1
 80062b0:	e7ee      	b.n	8006290 <__libc_init_array+0xc>
 80062b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062b6:	4798      	blx	r3
 80062b8:	3501      	adds	r5, #1
 80062ba:	e7f2      	b.n	80062a2 <__libc_init_array+0x1e>
 80062bc:	08006cd0 	.word	0x08006cd0
 80062c0:	08006cd0 	.word	0x08006cd0
 80062c4:	08006cd0 	.word	0x08006cd0
 80062c8:	08006cd4 	.word	0x08006cd4

080062cc <memcpy>:
 80062cc:	b510      	push	{r4, lr}
 80062ce:	1e43      	subs	r3, r0, #1
 80062d0:	440a      	add	r2, r1
 80062d2:	4291      	cmp	r1, r2
 80062d4:	d100      	bne.n	80062d8 <memcpy+0xc>
 80062d6:	bd10      	pop	{r4, pc}
 80062d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062e0:	e7f7      	b.n	80062d2 <memcpy+0x6>

080062e2 <memset>:
 80062e2:	4402      	add	r2, r0
 80062e4:	4603      	mov	r3, r0
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d100      	bne.n	80062ec <memset+0xa>
 80062ea:	4770      	bx	lr
 80062ec:	f803 1b01 	strb.w	r1, [r3], #1
 80062f0:	e7f9      	b.n	80062e6 <memset+0x4>
	...

080062f4 <siprintf>:
 80062f4:	b40e      	push	{r1, r2, r3}
 80062f6:	b500      	push	{lr}
 80062f8:	b09c      	sub	sp, #112	; 0x70
 80062fa:	ab1d      	add	r3, sp, #116	; 0x74
 80062fc:	9002      	str	r0, [sp, #8]
 80062fe:	9006      	str	r0, [sp, #24]
 8006300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006304:	4809      	ldr	r0, [pc, #36]	; (800632c <siprintf+0x38>)
 8006306:	9107      	str	r1, [sp, #28]
 8006308:	9104      	str	r1, [sp, #16]
 800630a:	4909      	ldr	r1, [pc, #36]	; (8006330 <siprintf+0x3c>)
 800630c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006310:	9105      	str	r1, [sp, #20]
 8006312:	6800      	ldr	r0, [r0, #0]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	a902      	add	r1, sp, #8
 8006318:	f000 f866 	bl	80063e8 <_svfiprintf_r>
 800631c:	9b02      	ldr	r3, [sp, #8]
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	b01c      	add	sp, #112	; 0x70
 8006324:	f85d eb04 	ldr.w	lr, [sp], #4
 8006328:	b003      	add	sp, #12
 800632a:	4770      	bx	lr
 800632c:	20000010 	.word	0x20000010
 8006330:	ffff0208 	.word	0xffff0208

08006334 <__ssputs_r>:
 8006334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006338:	688e      	ldr	r6, [r1, #8]
 800633a:	429e      	cmp	r6, r3
 800633c:	4682      	mov	sl, r0
 800633e:	460c      	mov	r4, r1
 8006340:	4690      	mov	r8, r2
 8006342:	4699      	mov	r9, r3
 8006344:	d837      	bhi.n	80063b6 <__ssputs_r+0x82>
 8006346:	898a      	ldrh	r2, [r1, #12]
 8006348:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800634c:	d031      	beq.n	80063b2 <__ssputs_r+0x7e>
 800634e:	6825      	ldr	r5, [r4, #0]
 8006350:	6909      	ldr	r1, [r1, #16]
 8006352:	1a6f      	subs	r7, r5, r1
 8006354:	6965      	ldr	r5, [r4, #20]
 8006356:	2302      	movs	r3, #2
 8006358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800635c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006360:	f109 0301 	add.w	r3, r9, #1
 8006364:	443b      	add	r3, r7
 8006366:	429d      	cmp	r5, r3
 8006368:	bf38      	it	cc
 800636a:	461d      	movcc	r5, r3
 800636c:	0553      	lsls	r3, r2, #21
 800636e:	d530      	bpl.n	80063d2 <__ssputs_r+0x9e>
 8006370:	4629      	mov	r1, r5
 8006372:	f000 fb21 	bl	80069b8 <_malloc_r>
 8006376:	4606      	mov	r6, r0
 8006378:	b950      	cbnz	r0, 8006390 <__ssputs_r+0x5c>
 800637a:	230c      	movs	r3, #12
 800637c:	f8ca 3000 	str.w	r3, [sl]
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006390:	463a      	mov	r2, r7
 8006392:	6921      	ldr	r1, [r4, #16]
 8006394:	f7ff ff9a 	bl	80062cc <memcpy>
 8006398:	89a3      	ldrh	r3, [r4, #12]
 800639a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800639e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a2:	81a3      	strh	r3, [r4, #12]
 80063a4:	6126      	str	r6, [r4, #16]
 80063a6:	6165      	str	r5, [r4, #20]
 80063a8:	443e      	add	r6, r7
 80063aa:	1bed      	subs	r5, r5, r7
 80063ac:	6026      	str	r6, [r4, #0]
 80063ae:	60a5      	str	r5, [r4, #8]
 80063b0:	464e      	mov	r6, r9
 80063b2:	454e      	cmp	r6, r9
 80063b4:	d900      	bls.n	80063b8 <__ssputs_r+0x84>
 80063b6:	464e      	mov	r6, r9
 80063b8:	4632      	mov	r2, r6
 80063ba:	4641      	mov	r1, r8
 80063bc:	6820      	ldr	r0, [r4, #0]
 80063be:	f000 fa93 	bl	80068e8 <memmove>
 80063c2:	68a3      	ldr	r3, [r4, #8]
 80063c4:	1b9b      	subs	r3, r3, r6
 80063c6:	60a3      	str	r3, [r4, #8]
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	441e      	add	r6, r3
 80063cc:	6026      	str	r6, [r4, #0]
 80063ce:	2000      	movs	r0, #0
 80063d0:	e7dc      	b.n	800638c <__ssputs_r+0x58>
 80063d2:	462a      	mov	r2, r5
 80063d4:	f000 fb4a 	bl	8006a6c <_realloc_r>
 80063d8:	4606      	mov	r6, r0
 80063da:	2800      	cmp	r0, #0
 80063dc:	d1e2      	bne.n	80063a4 <__ssputs_r+0x70>
 80063de:	6921      	ldr	r1, [r4, #16]
 80063e0:	4650      	mov	r0, sl
 80063e2:	f000 fa9b 	bl	800691c <_free_r>
 80063e6:	e7c8      	b.n	800637a <__ssputs_r+0x46>

080063e8 <_svfiprintf_r>:
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	461d      	mov	r5, r3
 80063ee:	898b      	ldrh	r3, [r1, #12]
 80063f0:	061f      	lsls	r7, r3, #24
 80063f2:	b09d      	sub	sp, #116	; 0x74
 80063f4:	4680      	mov	r8, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	4616      	mov	r6, r2
 80063fa:	d50f      	bpl.n	800641c <_svfiprintf_r+0x34>
 80063fc:	690b      	ldr	r3, [r1, #16]
 80063fe:	b96b      	cbnz	r3, 800641c <_svfiprintf_r+0x34>
 8006400:	2140      	movs	r1, #64	; 0x40
 8006402:	f000 fad9 	bl	80069b8 <_malloc_r>
 8006406:	6020      	str	r0, [r4, #0]
 8006408:	6120      	str	r0, [r4, #16]
 800640a:	b928      	cbnz	r0, 8006418 <_svfiprintf_r+0x30>
 800640c:	230c      	movs	r3, #12
 800640e:	f8c8 3000 	str.w	r3, [r8]
 8006412:	f04f 30ff 	mov.w	r0, #4294967295
 8006416:	e0c8      	b.n	80065aa <_svfiprintf_r+0x1c2>
 8006418:	2340      	movs	r3, #64	; 0x40
 800641a:	6163      	str	r3, [r4, #20]
 800641c:	2300      	movs	r3, #0
 800641e:	9309      	str	r3, [sp, #36]	; 0x24
 8006420:	2320      	movs	r3, #32
 8006422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006426:	2330      	movs	r3, #48	; 0x30
 8006428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800642c:	9503      	str	r5, [sp, #12]
 800642e:	f04f 0b01 	mov.w	fp, #1
 8006432:	4637      	mov	r7, r6
 8006434:	463d      	mov	r5, r7
 8006436:	f815 3b01 	ldrb.w	r3, [r5], #1
 800643a:	b10b      	cbz	r3, 8006440 <_svfiprintf_r+0x58>
 800643c:	2b25      	cmp	r3, #37	; 0x25
 800643e:	d13e      	bne.n	80064be <_svfiprintf_r+0xd6>
 8006440:	ebb7 0a06 	subs.w	sl, r7, r6
 8006444:	d00b      	beq.n	800645e <_svfiprintf_r+0x76>
 8006446:	4653      	mov	r3, sl
 8006448:	4632      	mov	r2, r6
 800644a:	4621      	mov	r1, r4
 800644c:	4640      	mov	r0, r8
 800644e:	f7ff ff71 	bl	8006334 <__ssputs_r>
 8006452:	3001      	adds	r0, #1
 8006454:	f000 80a4 	beq.w	80065a0 <_svfiprintf_r+0x1b8>
 8006458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645a:	4453      	add	r3, sl
 800645c:	9309      	str	r3, [sp, #36]	; 0x24
 800645e:	783b      	ldrb	r3, [r7, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 809d 	beq.w	80065a0 <_svfiprintf_r+0x1b8>
 8006466:	2300      	movs	r3, #0
 8006468:	f04f 32ff 	mov.w	r2, #4294967295
 800646c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006470:	9304      	str	r3, [sp, #16]
 8006472:	9307      	str	r3, [sp, #28]
 8006474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006478:	931a      	str	r3, [sp, #104]	; 0x68
 800647a:	462f      	mov	r7, r5
 800647c:	2205      	movs	r2, #5
 800647e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006482:	4850      	ldr	r0, [pc, #320]	; (80065c4 <_svfiprintf_r+0x1dc>)
 8006484:	f7f9 feac 	bl	80001e0 <memchr>
 8006488:	9b04      	ldr	r3, [sp, #16]
 800648a:	b9d0      	cbnz	r0, 80064c2 <_svfiprintf_r+0xda>
 800648c:	06d9      	lsls	r1, r3, #27
 800648e:	bf44      	itt	mi
 8006490:	2220      	movmi	r2, #32
 8006492:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006496:	071a      	lsls	r2, r3, #28
 8006498:	bf44      	itt	mi
 800649a:	222b      	movmi	r2, #43	; 0x2b
 800649c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064a0:	782a      	ldrb	r2, [r5, #0]
 80064a2:	2a2a      	cmp	r2, #42	; 0x2a
 80064a4:	d015      	beq.n	80064d2 <_svfiprintf_r+0xea>
 80064a6:	9a07      	ldr	r2, [sp, #28]
 80064a8:	462f      	mov	r7, r5
 80064aa:	2000      	movs	r0, #0
 80064ac:	250a      	movs	r5, #10
 80064ae:	4639      	mov	r1, r7
 80064b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064b4:	3b30      	subs	r3, #48	; 0x30
 80064b6:	2b09      	cmp	r3, #9
 80064b8:	d94d      	bls.n	8006556 <_svfiprintf_r+0x16e>
 80064ba:	b1b8      	cbz	r0, 80064ec <_svfiprintf_r+0x104>
 80064bc:	e00f      	b.n	80064de <_svfiprintf_r+0xf6>
 80064be:	462f      	mov	r7, r5
 80064c0:	e7b8      	b.n	8006434 <_svfiprintf_r+0x4c>
 80064c2:	4a40      	ldr	r2, [pc, #256]	; (80065c4 <_svfiprintf_r+0x1dc>)
 80064c4:	1a80      	subs	r0, r0, r2
 80064c6:	fa0b f000 	lsl.w	r0, fp, r0
 80064ca:	4318      	orrs	r0, r3
 80064cc:	9004      	str	r0, [sp, #16]
 80064ce:	463d      	mov	r5, r7
 80064d0:	e7d3      	b.n	800647a <_svfiprintf_r+0x92>
 80064d2:	9a03      	ldr	r2, [sp, #12]
 80064d4:	1d11      	adds	r1, r2, #4
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	9103      	str	r1, [sp, #12]
 80064da:	2a00      	cmp	r2, #0
 80064dc:	db01      	blt.n	80064e2 <_svfiprintf_r+0xfa>
 80064de:	9207      	str	r2, [sp, #28]
 80064e0:	e004      	b.n	80064ec <_svfiprintf_r+0x104>
 80064e2:	4252      	negs	r2, r2
 80064e4:	f043 0302 	orr.w	r3, r3, #2
 80064e8:	9207      	str	r2, [sp, #28]
 80064ea:	9304      	str	r3, [sp, #16]
 80064ec:	783b      	ldrb	r3, [r7, #0]
 80064ee:	2b2e      	cmp	r3, #46	; 0x2e
 80064f0:	d10c      	bne.n	800650c <_svfiprintf_r+0x124>
 80064f2:	787b      	ldrb	r3, [r7, #1]
 80064f4:	2b2a      	cmp	r3, #42	; 0x2a
 80064f6:	d133      	bne.n	8006560 <_svfiprintf_r+0x178>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	1d1a      	adds	r2, r3, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	9203      	str	r2, [sp, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	bfb8      	it	lt
 8006504:	f04f 33ff 	movlt.w	r3, #4294967295
 8006508:	3702      	adds	r7, #2
 800650a:	9305      	str	r3, [sp, #20]
 800650c:	4d2e      	ldr	r5, [pc, #184]	; (80065c8 <_svfiprintf_r+0x1e0>)
 800650e:	7839      	ldrb	r1, [r7, #0]
 8006510:	2203      	movs	r2, #3
 8006512:	4628      	mov	r0, r5
 8006514:	f7f9 fe64 	bl	80001e0 <memchr>
 8006518:	b138      	cbz	r0, 800652a <_svfiprintf_r+0x142>
 800651a:	2340      	movs	r3, #64	; 0x40
 800651c:	1b40      	subs	r0, r0, r5
 800651e:	fa03 f000 	lsl.w	r0, r3, r0
 8006522:	9b04      	ldr	r3, [sp, #16]
 8006524:	4303      	orrs	r3, r0
 8006526:	3701      	adds	r7, #1
 8006528:	9304      	str	r3, [sp, #16]
 800652a:	7839      	ldrb	r1, [r7, #0]
 800652c:	4827      	ldr	r0, [pc, #156]	; (80065cc <_svfiprintf_r+0x1e4>)
 800652e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006532:	2206      	movs	r2, #6
 8006534:	1c7e      	adds	r6, r7, #1
 8006536:	f7f9 fe53 	bl	80001e0 <memchr>
 800653a:	2800      	cmp	r0, #0
 800653c:	d038      	beq.n	80065b0 <_svfiprintf_r+0x1c8>
 800653e:	4b24      	ldr	r3, [pc, #144]	; (80065d0 <_svfiprintf_r+0x1e8>)
 8006540:	bb13      	cbnz	r3, 8006588 <_svfiprintf_r+0x1a0>
 8006542:	9b03      	ldr	r3, [sp, #12]
 8006544:	3307      	adds	r3, #7
 8006546:	f023 0307 	bic.w	r3, r3, #7
 800654a:	3308      	adds	r3, #8
 800654c:	9303      	str	r3, [sp, #12]
 800654e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006550:	444b      	add	r3, r9
 8006552:	9309      	str	r3, [sp, #36]	; 0x24
 8006554:	e76d      	b.n	8006432 <_svfiprintf_r+0x4a>
 8006556:	fb05 3202 	mla	r2, r5, r2, r3
 800655a:	2001      	movs	r0, #1
 800655c:	460f      	mov	r7, r1
 800655e:	e7a6      	b.n	80064ae <_svfiprintf_r+0xc6>
 8006560:	2300      	movs	r3, #0
 8006562:	3701      	adds	r7, #1
 8006564:	9305      	str	r3, [sp, #20]
 8006566:	4619      	mov	r1, r3
 8006568:	250a      	movs	r5, #10
 800656a:	4638      	mov	r0, r7
 800656c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006570:	3a30      	subs	r2, #48	; 0x30
 8006572:	2a09      	cmp	r2, #9
 8006574:	d903      	bls.n	800657e <_svfiprintf_r+0x196>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0c8      	beq.n	800650c <_svfiprintf_r+0x124>
 800657a:	9105      	str	r1, [sp, #20]
 800657c:	e7c6      	b.n	800650c <_svfiprintf_r+0x124>
 800657e:	fb05 2101 	mla	r1, r5, r1, r2
 8006582:	2301      	movs	r3, #1
 8006584:	4607      	mov	r7, r0
 8006586:	e7f0      	b.n	800656a <_svfiprintf_r+0x182>
 8006588:	ab03      	add	r3, sp, #12
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	4622      	mov	r2, r4
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <_svfiprintf_r+0x1ec>)
 8006590:	a904      	add	r1, sp, #16
 8006592:	4640      	mov	r0, r8
 8006594:	f3af 8000 	nop.w
 8006598:	f1b0 3fff 	cmp.w	r0, #4294967295
 800659c:	4681      	mov	r9, r0
 800659e:	d1d6      	bne.n	800654e <_svfiprintf_r+0x166>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	065b      	lsls	r3, r3, #25
 80065a4:	f53f af35 	bmi.w	8006412 <_svfiprintf_r+0x2a>
 80065a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065aa:	b01d      	add	sp, #116	; 0x74
 80065ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b0:	ab03      	add	r3, sp, #12
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4622      	mov	r2, r4
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <_svfiprintf_r+0x1ec>)
 80065b8:	a904      	add	r1, sp, #16
 80065ba:	4640      	mov	r0, r8
 80065bc:	f000 f882 	bl	80066c4 <_printf_i>
 80065c0:	e7ea      	b.n	8006598 <_svfiprintf_r+0x1b0>
 80065c2:	bf00      	nop
 80065c4:	08006c9c 	.word	0x08006c9c
 80065c8:	08006ca2 	.word	0x08006ca2
 80065cc:	08006ca6 	.word	0x08006ca6
 80065d0:	00000000 	.word	0x00000000
 80065d4:	08006335 	.word	0x08006335

080065d8 <_printf_common>:
 80065d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	4691      	mov	r9, r2
 80065de:	461f      	mov	r7, r3
 80065e0:	688a      	ldr	r2, [r1, #8]
 80065e2:	690b      	ldr	r3, [r1, #16]
 80065e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	bfb8      	it	lt
 80065ec:	4613      	movlt	r3, r2
 80065ee:	f8c9 3000 	str.w	r3, [r9]
 80065f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065f6:	4606      	mov	r6, r0
 80065f8:	460c      	mov	r4, r1
 80065fa:	b112      	cbz	r2, 8006602 <_printf_common+0x2a>
 80065fc:	3301      	adds	r3, #1
 80065fe:	f8c9 3000 	str.w	r3, [r9]
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	0699      	lsls	r1, r3, #26
 8006606:	bf42      	ittt	mi
 8006608:	f8d9 3000 	ldrmi.w	r3, [r9]
 800660c:	3302      	addmi	r3, #2
 800660e:	f8c9 3000 	strmi.w	r3, [r9]
 8006612:	6825      	ldr	r5, [r4, #0]
 8006614:	f015 0506 	ands.w	r5, r5, #6
 8006618:	d107      	bne.n	800662a <_printf_common+0x52>
 800661a:	f104 0a19 	add.w	sl, r4, #25
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	f8d9 2000 	ldr.w	r2, [r9]
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	42ab      	cmp	r3, r5
 8006628:	dc28      	bgt.n	800667c <_printf_common+0xa4>
 800662a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800662e:	6822      	ldr	r2, [r4, #0]
 8006630:	3300      	adds	r3, #0
 8006632:	bf18      	it	ne
 8006634:	2301      	movne	r3, #1
 8006636:	0692      	lsls	r2, r2, #26
 8006638:	d42d      	bmi.n	8006696 <_printf_common+0xbe>
 800663a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800663e:	4639      	mov	r1, r7
 8006640:	4630      	mov	r0, r6
 8006642:	47c0      	blx	r8
 8006644:	3001      	adds	r0, #1
 8006646:	d020      	beq.n	800668a <_printf_common+0xb2>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	68e5      	ldr	r5, [r4, #12]
 800664c:	f8d9 2000 	ldr.w	r2, [r9]
 8006650:	f003 0306 	and.w	r3, r3, #6
 8006654:	2b04      	cmp	r3, #4
 8006656:	bf08      	it	eq
 8006658:	1aad      	subeq	r5, r5, r2
 800665a:	68a3      	ldr	r3, [r4, #8]
 800665c:	6922      	ldr	r2, [r4, #16]
 800665e:	bf0c      	ite	eq
 8006660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006664:	2500      	movne	r5, #0
 8006666:	4293      	cmp	r3, r2
 8006668:	bfc4      	itt	gt
 800666a:	1a9b      	subgt	r3, r3, r2
 800666c:	18ed      	addgt	r5, r5, r3
 800666e:	f04f 0900 	mov.w	r9, #0
 8006672:	341a      	adds	r4, #26
 8006674:	454d      	cmp	r5, r9
 8006676:	d11a      	bne.n	80066ae <_printf_common+0xd6>
 8006678:	2000      	movs	r0, #0
 800667a:	e008      	b.n	800668e <_printf_common+0xb6>
 800667c:	2301      	movs	r3, #1
 800667e:	4652      	mov	r2, sl
 8006680:	4639      	mov	r1, r7
 8006682:	4630      	mov	r0, r6
 8006684:	47c0      	blx	r8
 8006686:	3001      	adds	r0, #1
 8006688:	d103      	bne.n	8006692 <_printf_common+0xba>
 800668a:	f04f 30ff 	mov.w	r0, #4294967295
 800668e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006692:	3501      	adds	r5, #1
 8006694:	e7c3      	b.n	800661e <_printf_common+0x46>
 8006696:	18e1      	adds	r1, r4, r3
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	2030      	movs	r0, #48	; 0x30
 800669c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066a0:	4422      	add	r2, r4
 80066a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066aa:	3302      	adds	r3, #2
 80066ac:	e7c5      	b.n	800663a <_printf_common+0x62>
 80066ae:	2301      	movs	r3, #1
 80066b0:	4622      	mov	r2, r4
 80066b2:	4639      	mov	r1, r7
 80066b4:	4630      	mov	r0, r6
 80066b6:	47c0      	blx	r8
 80066b8:	3001      	adds	r0, #1
 80066ba:	d0e6      	beq.n	800668a <_printf_common+0xb2>
 80066bc:	f109 0901 	add.w	r9, r9, #1
 80066c0:	e7d8      	b.n	8006674 <_printf_common+0x9c>
	...

080066c4 <_printf_i>:
 80066c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80066cc:	460c      	mov	r4, r1
 80066ce:	7e09      	ldrb	r1, [r1, #24]
 80066d0:	b085      	sub	sp, #20
 80066d2:	296e      	cmp	r1, #110	; 0x6e
 80066d4:	4617      	mov	r7, r2
 80066d6:	4606      	mov	r6, r0
 80066d8:	4698      	mov	r8, r3
 80066da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066dc:	f000 80b3 	beq.w	8006846 <_printf_i+0x182>
 80066e0:	d822      	bhi.n	8006728 <_printf_i+0x64>
 80066e2:	2963      	cmp	r1, #99	; 0x63
 80066e4:	d036      	beq.n	8006754 <_printf_i+0x90>
 80066e6:	d80a      	bhi.n	80066fe <_printf_i+0x3a>
 80066e8:	2900      	cmp	r1, #0
 80066ea:	f000 80b9 	beq.w	8006860 <_printf_i+0x19c>
 80066ee:	2958      	cmp	r1, #88	; 0x58
 80066f0:	f000 8083 	beq.w	80067fa <_printf_i+0x136>
 80066f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80066fc:	e032      	b.n	8006764 <_printf_i+0xa0>
 80066fe:	2964      	cmp	r1, #100	; 0x64
 8006700:	d001      	beq.n	8006706 <_printf_i+0x42>
 8006702:	2969      	cmp	r1, #105	; 0x69
 8006704:	d1f6      	bne.n	80066f4 <_printf_i+0x30>
 8006706:	6820      	ldr	r0, [r4, #0]
 8006708:	6813      	ldr	r3, [r2, #0]
 800670a:	0605      	lsls	r5, r0, #24
 800670c:	f103 0104 	add.w	r1, r3, #4
 8006710:	d52a      	bpl.n	8006768 <_printf_i+0xa4>
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6011      	str	r1, [r2, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	da03      	bge.n	8006722 <_printf_i+0x5e>
 800671a:	222d      	movs	r2, #45	; 0x2d
 800671c:	425b      	negs	r3, r3
 800671e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006722:	486f      	ldr	r0, [pc, #444]	; (80068e0 <_printf_i+0x21c>)
 8006724:	220a      	movs	r2, #10
 8006726:	e039      	b.n	800679c <_printf_i+0xd8>
 8006728:	2973      	cmp	r1, #115	; 0x73
 800672a:	f000 809d 	beq.w	8006868 <_printf_i+0x1a4>
 800672e:	d808      	bhi.n	8006742 <_printf_i+0x7e>
 8006730:	296f      	cmp	r1, #111	; 0x6f
 8006732:	d020      	beq.n	8006776 <_printf_i+0xb2>
 8006734:	2970      	cmp	r1, #112	; 0x70
 8006736:	d1dd      	bne.n	80066f4 <_printf_i+0x30>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	f043 0320 	orr.w	r3, r3, #32
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	e003      	b.n	800674a <_printf_i+0x86>
 8006742:	2975      	cmp	r1, #117	; 0x75
 8006744:	d017      	beq.n	8006776 <_printf_i+0xb2>
 8006746:	2978      	cmp	r1, #120	; 0x78
 8006748:	d1d4      	bne.n	80066f4 <_printf_i+0x30>
 800674a:	2378      	movs	r3, #120	; 0x78
 800674c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006750:	4864      	ldr	r0, [pc, #400]	; (80068e4 <_printf_i+0x220>)
 8006752:	e055      	b.n	8006800 <_printf_i+0x13c>
 8006754:	6813      	ldr	r3, [r2, #0]
 8006756:	1d19      	adds	r1, r3, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6011      	str	r1, [r2, #0]
 800675c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006764:	2301      	movs	r3, #1
 8006766:	e08c      	b.n	8006882 <_printf_i+0x1be>
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6011      	str	r1, [r2, #0]
 800676c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006770:	bf18      	it	ne
 8006772:	b21b      	sxthne	r3, r3
 8006774:	e7cf      	b.n	8006716 <_printf_i+0x52>
 8006776:	6813      	ldr	r3, [r2, #0]
 8006778:	6825      	ldr	r5, [r4, #0]
 800677a:	1d18      	adds	r0, r3, #4
 800677c:	6010      	str	r0, [r2, #0]
 800677e:	0628      	lsls	r0, r5, #24
 8006780:	d501      	bpl.n	8006786 <_printf_i+0xc2>
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	e002      	b.n	800678c <_printf_i+0xc8>
 8006786:	0668      	lsls	r0, r5, #25
 8006788:	d5fb      	bpl.n	8006782 <_printf_i+0xbe>
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	4854      	ldr	r0, [pc, #336]	; (80068e0 <_printf_i+0x21c>)
 800678e:	296f      	cmp	r1, #111	; 0x6f
 8006790:	bf14      	ite	ne
 8006792:	220a      	movne	r2, #10
 8006794:	2208      	moveq	r2, #8
 8006796:	2100      	movs	r1, #0
 8006798:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800679c:	6865      	ldr	r5, [r4, #4]
 800679e:	60a5      	str	r5, [r4, #8]
 80067a0:	2d00      	cmp	r5, #0
 80067a2:	f2c0 8095 	blt.w	80068d0 <_printf_i+0x20c>
 80067a6:	6821      	ldr	r1, [r4, #0]
 80067a8:	f021 0104 	bic.w	r1, r1, #4
 80067ac:	6021      	str	r1, [r4, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d13d      	bne.n	800682e <_printf_i+0x16a>
 80067b2:	2d00      	cmp	r5, #0
 80067b4:	f040 808e 	bne.w	80068d4 <_printf_i+0x210>
 80067b8:	4665      	mov	r5, ip
 80067ba:	2a08      	cmp	r2, #8
 80067bc:	d10b      	bne.n	80067d6 <_printf_i+0x112>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	07db      	lsls	r3, r3, #31
 80067c2:	d508      	bpl.n	80067d6 <_printf_i+0x112>
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	6862      	ldr	r2, [r4, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	bfde      	ittt	le
 80067cc:	2330      	movle	r3, #48	; 0x30
 80067ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067d6:	ebac 0305 	sub.w	r3, ip, r5
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	f8cd 8000 	str.w	r8, [sp]
 80067e0:	463b      	mov	r3, r7
 80067e2:	aa03      	add	r2, sp, #12
 80067e4:	4621      	mov	r1, r4
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff fef6 	bl	80065d8 <_printf_common>
 80067ec:	3001      	adds	r0, #1
 80067ee:	d14d      	bne.n	800688c <_printf_i+0x1c8>
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	b005      	add	sp, #20
 80067f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067fa:	4839      	ldr	r0, [pc, #228]	; (80068e0 <_printf_i+0x21c>)
 80067fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006800:	6813      	ldr	r3, [r2, #0]
 8006802:	6821      	ldr	r1, [r4, #0]
 8006804:	1d1d      	adds	r5, r3, #4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6015      	str	r5, [r2, #0]
 800680a:	060a      	lsls	r2, r1, #24
 800680c:	d50b      	bpl.n	8006826 <_printf_i+0x162>
 800680e:	07ca      	lsls	r2, r1, #31
 8006810:	bf44      	itt	mi
 8006812:	f041 0120 	orrmi.w	r1, r1, #32
 8006816:	6021      	strmi	r1, [r4, #0]
 8006818:	b91b      	cbnz	r3, 8006822 <_printf_i+0x15e>
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	f022 0220 	bic.w	r2, r2, #32
 8006820:	6022      	str	r2, [r4, #0]
 8006822:	2210      	movs	r2, #16
 8006824:	e7b7      	b.n	8006796 <_printf_i+0xd2>
 8006826:	064d      	lsls	r5, r1, #25
 8006828:	bf48      	it	mi
 800682a:	b29b      	uxthmi	r3, r3
 800682c:	e7ef      	b.n	800680e <_printf_i+0x14a>
 800682e:	4665      	mov	r5, ip
 8006830:	fbb3 f1f2 	udiv	r1, r3, r2
 8006834:	fb02 3311 	mls	r3, r2, r1, r3
 8006838:	5cc3      	ldrb	r3, [r0, r3]
 800683a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800683e:	460b      	mov	r3, r1
 8006840:	2900      	cmp	r1, #0
 8006842:	d1f5      	bne.n	8006830 <_printf_i+0x16c>
 8006844:	e7b9      	b.n	80067ba <_printf_i+0xf6>
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	6825      	ldr	r5, [r4, #0]
 800684a:	6961      	ldr	r1, [r4, #20]
 800684c:	1d18      	adds	r0, r3, #4
 800684e:	6010      	str	r0, [r2, #0]
 8006850:	0628      	lsls	r0, r5, #24
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	d501      	bpl.n	800685a <_printf_i+0x196>
 8006856:	6019      	str	r1, [r3, #0]
 8006858:	e002      	b.n	8006860 <_printf_i+0x19c>
 800685a:	066a      	lsls	r2, r5, #25
 800685c:	d5fb      	bpl.n	8006856 <_printf_i+0x192>
 800685e:	8019      	strh	r1, [r3, #0]
 8006860:	2300      	movs	r3, #0
 8006862:	6123      	str	r3, [r4, #16]
 8006864:	4665      	mov	r5, ip
 8006866:	e7b9      	b.n	80067dc <_printf_i+0x118>
 8006868:	6813      	ldr	r3, [r2, #0]
 800686a:	1d19      	adds	r1, r3, #4
 800686c:	6011      	str	r1, [r2, #0]
 800686e:	681d      	ldr	r5, [r3, #0]
 8006870:	6862      	ldr	r2, [r4, #4]
 8006872:	2100      	movs	r1, #0
 8006874:	4628      	mov	r0, r5
 8006876:	f7f9 fcb3 	bl	80001e0 <memchr>
 800687a:	b108      	cbz	r0, 8006880 <_printf_i+0x1bc>
 800687c:	1b40      	subs	r0, r0, r5
 800687e:	6060      	str	r0, [r4, #4]
 8006880:	6863      	ldr	r3, [r4, #4]
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	2300      	movs	r3, #0
 8006886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800688a:	e7a7      	b.n	80067dc <_printf_i+0x118>
 800688c:	6923      	ldr	r3, [r4, #16]
 800688e:	462a      	mov	r2, r5
 8006890:	4639      	mov	r1, r7
 8006892:	4630      	mov	r0, r6
 8006894:	47c0      	blx	r8
 8006896:	3001      	adds	r0, #1
 8006898:	d0aa      	beq.n	80067f0 <_printf_i+0x12c>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	079b      	lsls	r3, r3, #30
 800689e:	d413      	bmi.n	80068c8 <_printf_i+0x204>
 80068a0:	68e0      	ldr	r0, [r4, #12]
 80068a2:	9b03      	ldr	r3, [sp, #12]
 80068a4:	4298      	cmp	r0, r3
 80068a6:	bfb8      	it	lt
 80068a8:	4618      	movlt	r0, r3
 80068aa:	e7a3      	b.n	80067f4 <_printf_i+0x130>
 80068ac:	2301      	movs	r3, #1
 80068ae:	464a      	mov	r2, r9
 80068b0:	4639      	mov	r1, r7
 80068b2:	4630      	mov	r0, r6
 80068b4:	47c0      	blx	r8
 80068b6:	3001      	adds	r0, #1
 80068b8:	d09a      	beq.n	80067f0 <_printf_i+0x12c>
 80068ba:	3501      	adds	r5, #1
 80068bc:	68e3      	ldr	r3, [r4, #12]
 80068be:	9a03      	ldr	r2, [sp, #12]
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	42ab      	cmp	r3, r5
 80068c4:	dcf2      	bgt.n	80068ac <_printf_i+0x1e8>
 80068c6:	e7eb      	b.n	80068a0 <_printf_i+0x1dc>
 80068c8:	2500      	movs	r5, #0
 80068ca:	f104 0919 	add.w	r9, r4, #25
 80068ce:	e7f5      	b.n	80068bc <_printf_i+0x1f8>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1ac      	bne.n	800682e <_printf_i+0x16a>
 80068d4:	7803      	ldrb	r3, [r0, #0]
 80068d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068de:	e76c      	b.n	80067ba <_printf_i+0xf6>
 80068e0:	08006cad 	.word	0x08006cad
 80068e4:	08006cbe 	.word	0x08006cbe

080068e8 <memmove>:
 80068e8:	4288      	cmp	r0, r1
 80068ea:	b510      	push	{r4, lr}
 80068ec:	eb01 0302 	add.w	r3, r1, r2
 80068f0:	d807      	bhi.n	8006902 <memmove+0x1a>
 80068f2:	1e42      	subs	r2, r0, #1
 80068f4:	4299      	cmp	r1, r3
 80068f6:	d00a      	beq.n	800690e <memmove+0x26>
 80068f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006900:	e7f8      	b.n	80068f4 <memmove+0xc>
 8006902:	4283      	cmp	r3, r0
 8006904:	d9f5      	bls.n	80068f2 <memmove+0xa>
 8006906:	1881      	adds	r1, r0, r2
 8006908:	1ad2      	subs	r2, r2, r3
 800690a:	42d3      	cmn	r3, r2
 800690c:	d100      	bne.n	8006910 <memmove+0x28>
 800690e:	bd10      	pop	{r4, pc}
 8006910:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006914:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006918:	e7f7      	b.n	800690a <memmove+0x22>
	...

0800691c <_free_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4605      	mov	r5, r0
 8006920:	2900      	cmp	r1, #0
 8006922:	d045      	beq.n	80069b0 <_free_r+0x94>
 8006924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006928:	1f0c      	subs	r4, r1, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	bfb8      	it	lt
 800692e:	18e4      	addlt	r4, r4, r3
 8006930:	f000 f8d2 	bl	8006ad8 <__malloc_lock>
 8006934:	4a1f      	ldr	r2, [pc, #124]	; (80069b4 <_free_r+0x98>)
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	4610      	mov	r0, r2
 800693a:	b933      	cbnz	r3, 800694a <_free_r+0x2e>
 800693c:	6063      	str	r3, [r4, #4]
 800693e:	6014      	str	r4, [r2, #0]
 8006940:	4628      	mov	r0, r5
 8006942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006946:	f000 b8c8 	b.w	8006ada <__malloc_unlock>
 800694a:	42a3      	cmp	r3, r4
 800694c:	d90c      	bls.n	8006968 <_free_r+0x4c>
 800694e:	6821      	ldr	r1, [r4, #0]
 8006950:	1862      	adds	r2, r4, r1
 8006952:	4293      	cmp	r3, r2
 8006954:	bf04      	itt	eq
 8006956:	681a      	ldreq	r2, [r3, #0]
 8006958:	685b      	ldreq	r3, [r3, #4]
 800695a:	6063      	str	r3, [r4, #4]
 800695c:	bf04      	itt	eq
 800695e:	1852      	addeq	r2, r2, r1
 8006960:	6022      	streq	r2, [r4, #0]
 8006962:	6004      	str	r4, [r0, #0]
 8006964:	e7ec      	b.n	8006940 <_free_r+0x24>
 8006966:	4613      	mov	r3, r2
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	b10a      	cbz	r2, 8006970 <_free_r+0x54>
 800696c:	42a2      	cmp	r2, r4
 800696e:	d9fa      	bls.n	8006966 <_free_r+0x4a>
 8006970:	6819      	ldr	r1, [r3, #0]
 8006972:	1858      	adds	r0, r3, r1
 8006974:	42a0      	cmp	r0, r4
 8006976:	d10b      	bne.n	8006990 <_free_r+0x74>
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	4401      	add	r1, r0
 800697c:	1858      	adds	r0, r3, r1
 800697e:	4282      	cmp	r2, r0
 8006980:	6019      	str	r1, [r3, #0]
 8006982:	d1dd      	bne.n	8006940 <_free_r+0x24>
 8006984:	6810      	ldr	r0, [r2, #0]
 8006986:	6852      	ldr	r2, [r2, #4]
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	4401      	add	r1, r0
 800698c:	6019      	str	r1, [r3, #0]
 800698e:	e7d7      	b.n	8006940 <_free_r+0x24>
 8006990:	d902      	bls.n	8006998 <_free_r+0x7c>
 8006992:	230c      	movs	r3, #12
 8006994:	602b      	str	r3, [r5, #0]
 8006996:	e7d3      	b.n	8006940 <_free_r+0x24>
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	1821      	adds	r1, r4, r0
 800699c:	428a      	cmp	r2, r1
 800699e:	bf04      	itt	eq
 80069a0:	6811      	ldreq	r1, [r2, #0]
 80069a2:	6852      	ldreq	r2, [r2, #4]
 80069a4:	6062      	str	r2, [r4, #4]
 80069a6:	bf04      	itt	eq
 80069a8:	1809      	addeq	r1, r1, r0
 80069aa:	6021      	streq	r1, [r4, #0]
 80069ac:	605c      	str	r4, [r3, #4]
 80069ae:	e7c7      	b.n	8006940 <_free_r+0x24>
 80069b0:	bd38      	pop	{r3, r4, r5, pc}
 80069b2:	bf00      	nop
 80069b4:	200014a8 	.word	0x200014a8

080069b8 <_malloc_r>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	1ccd      	adds	r5, r1, #3
 80069bc:	f025 0503 	bic.w	r5, r5, #3
 80069c0:	3508      	adds	r5, #8
 80069c2:	2d0c      	cmp	r5, #12
 80069c4:	bf38      	it	cc
 80069c6:	250c      	movcc	r5, #12
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	4606      	mov	r6, r0
 80069cc:	db01      	blt.n	80069d2 <_malloc_r+0x1a>
 80069ce:	42a9      	cmp	r1, r5
 80069d0:	d903      	bls.n	80069da <_malloc_r+0x22>
 80069d2:	230c      	movs	r3, #12
 80069d4:	6033      	str	r3, [r6, #0]
 80069d6:	2000      	movs	r0, #0
 80069d8:	bd70      	pop	{r4, r5, r6, pc}
 80069da:	f000 f87d 	bl	8006ad8 <__malloc_lock>
 80069de:	4a21      	ldr	r2, [pc, #132]	; (8006a64 <_malloc_r+0xac>)
 80069e0:	6814      	ldr	r4, [r2, #0]
 80069e2:	4621      	mov	r1, r4
 80069e4:	b991      	cbnz	r1, 8006a0c <_malloc_r+0x54>
 80069e6:	4c20      	ldr	r4, [pc, #128]	; (8006a68 <_malloc_r+0xb0>)
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	b91b      	cbnz	r3, 80069f4 <_malloc_r+0x3c>
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 f863 	bl	8006ab8 <_sbrk_r>
 80069f2:	6020      	str	r0, [r4, #0]
 80069f4:	4629      	mov	r1, r5
 80069f6:	4630      	mov	r0, r6
 80069f8:	f000 f85e 	bl	8006ab8 <_sbrk_r>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d124      	bne.n	8006a4a <_malloc_r+0x92>
 8006a00:	230c      	movs	r3, #12
 8006a02:	6033      	str	r3, [r6, #0]
 8006a04:	4630      	mov	r0, r6
 8006a06:	f000 f868 	bl	8006ada <__malloc_unlock>
 8006a0a:	e7e4      	b.n	80069d6 <_malloc_r+0x1e>
 8006a0c:	680b      	ldr	r3, [r1, #0]
 8006a0e:	1b5b      	subs	r3, r3, r5
 8006a10:	d418      	bmi.n	8006a44 <_malloc_r+0x8c>
 8006a12:	2b0b      	cmp	r3, #11
 8006a14:	d90f      	bls.n	8006a36 <_malloc_r+0x7e>
 8006a16:	600b      	str	r3, [r1, #0]
 8006a18:	50cd      	str	r5, [r1, r3]
 8006a1a:	18cc      	adds	r4, r1, r3
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 f85c 	bl	8006ada <__malloc_unlock>
 8006a22:	f104 000b 	add.w	r0, r4, #11
 8006a26:	1d23      	adds	r3, r4, #4
 8006a28:	f020 0007 	bic.w	r0, r0, #7
 8006a2c:	1ac3      	subs	r3, r0, r3
 8006a2e:	d0d3      	beq.n	80069d8 <_malloc_r+0x20>
 8006a30:	425a      	negs	r2, r3
 8006a32:	50e2      	str	r2, [r4, r3]
 8006a34:	e7d0      	b.n	80069d8 <_malloc_r+0x20>
 8006a36:	428c      	cmp	r4, r1
 8006a38:	684b      	ldr	r3, [r1, #4]
 8006a3a:	bf16      	itet	ne
 8006a3c:	6063      	strne	r3, [r4, #4]
 8006a3e:	6013      	streq	r3, [r2, #0]
 8006a40:	460c      	movne	r4, r1
 8006a42:	e7eb      	b.n	8006a1c <_malloc_r+0x64>
 8006a44:	460c      	mov	r4, r1
 8006a46:	6849      	ldr	r1, [r1, #4]
 8006a48:	e7cc      	b.n	80069e4 <_malloc_r+0x2c>
 8006a4a:	1cc4      	adds	r4, r0, #3
 8006a4c:	f024 0403 	bic.w	r4, r4, #3
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d005      	beq.n	8006a60 <_malloc_r+0xa8>
 8006a54:	1a21      	subs	r1, r4, r0
 8006a56:	4630      	mov	r0, r6
 8006a58:	f000 f82e 	bl	8006ab8 <_sbrk_r>
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d0cf      	beq.n	8006a00 <_malloc_r+0x48>
 8006a60:	6025      	str	r5, [r4, #0]
 8006a62:	e7db      	b.n	8006a1c <_malloc_r+0x64>
 8006a64:	200014a8 	.word	0x200014a8
 8006a68:	200014ac 	.word	0x200014ac

08006a6c <_realloc_r>:
 8006a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6e:	4607      	mov	r7, r0
 8006a70:	4614      	mov	r4, r2
 8006a72:	460e      	mov	r6, r1
 8006a74:	b921      	cbnz	r1, 8006a80 <_realloc_r+0x14>
 8006a76:	4611      	mov	r1, r2
 8006a78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a7c:	f7ff bf9c 	b.w	80069b8 <_malloc_r>
 8006a80:	b922      	cbnz	r2, 8006a8c <_realloc_r+0x20>
 8006a82:	f7ff ff4b 	bl	800691c <_free_r>
 8006a86:	4625      	mov	r5, r4
 8006a88:	4628      	mov	r0, r5
 8006a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a8c:	f000 f826 	bl	8006adc <_malloc_usable_size_r>
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	d20f      	bcs.n	8006ab4 <_realloc_r+0x48>
 8006a94:	4621      	mov	r1, r4
 8006a96:	4638      	mov	r0, r7
 8006a98:	f7ff ff8e 	bl	80069b8 <_malloc_r>
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d0f2      	beq.n	8006a88 <_realloc_r+0x1c>
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	f7ff fc11 	bl	80062cc <memcpy>
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4638      	mov	r0, r7
 8006aae:	f7ff ff35 	bl	800691c <_free_r>
 8006ab2:	e7e9      	b.n	8006a88 <_realloc_r+0x1c>
 8006ab4:	4635      	mov	r5, r6
 8006ab6:	e7e7      	b.n	8006a88 <_realloc_r+0x1c>

08006ab8 <_sbrk_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4c06      	ldr	r4, [pc, #24]	; (8006ad4 <_sbrk_r+0x1c>)
 8006abc:	2300      	movs	r3, #0
 8006abe:	4605      	mov	r5, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	f7ff fb38 	bl	8006138 <_sbrk>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_sbrk_r+0x1a>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_sbrk_r+0x1a>
 8006ad0:	602b      	str	r3, [r5, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	200015d4 	.word	0x200015d4

08006ad8 <__malloc_lock>:
 8006ad8:	4770      	bx	lr

08006ada <__malloc_unlock>:
 8006ada:	4770      	bx	lr

08006adc <_malloc_usable_size_r>:
 8006adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ae0:	1f18      	subs	r0, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	bfbc      	itt	lt
 8006ae6:	580b      	ldrlt	r3, [r1, r0]
 8006ae8:	18c0      	addlt	r0, r0, r3
 8006aea:	4770      	bx	lr

08006aec <_init>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr

08006af8 <_fini>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr
