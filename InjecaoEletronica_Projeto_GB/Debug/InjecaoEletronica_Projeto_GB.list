
InjecaoEletronica_Projeto_GB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08006ecc  08006ecc  00016ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007288  08007288  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007288  08007288  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007288  08007288  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007288  08007288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800728c  0800728c  0001728c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001554  20000074  08007304  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c8  08007304  000215c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fc0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c27  00000000  00000000  00036064  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc8  00000000  00000000  00038c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca0  00000000  00000000  00039a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e483  00000000  00000000  0003a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c972  00000000  00000000  00058b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6092  00000000  00000000  000654ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010b57f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf8  00000000  00000000  0010b5fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006eb4 	.word	0x08006eb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006eb4 	.word	0x08006eb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_Init+0x28>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_Init+0x28>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f90d 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f808 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab8:	f005 fb4c 	bl	8006154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x54>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x58>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f917 	bl	8000d1a <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00e      	b.n	8000b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d80a      	bhi.n	8000b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f8ed 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_InitTick+0x5c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000000c 	.word	0x2000000c
 8000b20:	20000004 	.word	0x20000004
 8000b24:	20000000 	.word	0x20000000

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	200014b0 	.word	0x200014b0

08000b50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200014b0 	.word	0x200014b0

08000b68 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	da0b      	bge.n	8000bf8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <NVIC_SetPriority+0x4c>)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 030f 	and.w	r3, r3, #15
 8000bec:	3b04      	subs	r3, #4
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf6:	e009      	b.n	8000c0c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <NVIC_SetPriority+0x50>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff47 	bl	8000b68 <NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff5c 	bl	8000bb0 <NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffb0 	bl	8000c88 <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d4a:	e14e      	b.n	8000fea <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8140 	beq.w	8000fe4 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x40>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b12      	cmp	r3, #18
 8000d72:	d123      	bne.n	8000dbc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	6939      	ldr	r1, [r7, #16]
 8000db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0203 	and.w	r2, r3, #3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d00b      	beq.n	8000e10 <HAL_GPIO_Init+0xdc>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e04:	2b11      	cmp	r3, #17
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b12      	cmp	r3, #18
 8000e0e:	d130      	bne.n	8000e72 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e46:	2201      	movs	r2, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	f003 0201 	and.w	r2, r3, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 809a 	beq.w	8000fe4 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb0:	4b55      	ldr	r3, [pc, #340]	; (8001008 <HAL_GPIO_Init+0x2d4>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a54      	ldr	r2, [pc, #336]	; (8001008 <HAL_GPIO_Init+0x2d4>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b52      	ldr	r3, [pc, #328]	; (8001008 <HAL_GPIO_Init+0x2d4>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ec8:	4a50      	ldr	r2, [pc, #320]	; (800100c <HAL_GPIO_Init+0x2d8>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ef2:	d013      	beq.n	8000f1c <HAL_GPIO_Init+0x1e8>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a46      	ldr	r2, [pc, #280]	; (8001010 <HAL_GPIO_Init+0x2dc>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00d      	beq.n	8000f18 <HAL_GPIO_Init+0x1e4>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a45      	ldr	r2, [pc, #276]	; (8001014 <HAL_GPIO_Init+0x2e0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0x1e0>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a44      	ldr	r2, [pc, #272]	; (8001018 <HAL_GPIO_Init+0x2e4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d101      	bne.n	8000f10 <HAL_GPIO_Init+0x1dc>
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x1ea>
 8000f10:	2305      	movs	r3, #5
 8000f12:	e004      	b.n	8000f1e <HAL_GPIO_Init+0x1ea>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e002      	b.n	8000f1e <HAL_GPIO_Init+0x1ea>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <HAL_GPIO_Init+0x1ea>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	f002 0203 	and.w	r2, r2, #3
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	4093      	lsls	r3, r2
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f2e:	4937      	ldr	r1, [pc, #220]	; (800100c <HAL_GPIO_Init+0x2d8>)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3c:	4b37      	ldr	r3, [pc, #220]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f60:	4a2e      	ldr	r2, [pc, #184]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f66:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f8a:	4a24      	ldr	r2, [pc, #144]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fb4:	4a19      	ldr	r2, [pc, #100]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fde:	4a0f      	ldr	r2, [pc, #60]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f47f aea9 	bne.w	8000d4c <HAL_GPIO_Init+0x18>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	48000400 	.word	0x48000400
 8001014:	48000800 	.word	0x48000800
 8001018:	48000c00 	.word	0x48000c00
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800103c:	e002      	b.n	8001044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001056:	af00      	add	r7, sp, #0
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	f000 beda 	b.w	8001e1e <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 816e 	beq.w	8001356 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800107a:	4bb5      	ldr	r3, [pc, #724]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b04      	cmp	r3, #4
 8001084:	d00c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001086:	4bb2      	ldr	r3, [pc, #712]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b08      	cmp	r3, #8
 8001090:	d15a      	bne.n	8001148 <HAL_RCC_OscConfig+0xf8>
 8001092:	4baf      	ldr	r3, [pc, #700]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109e:	d153      	bne.n	8001148 <HAL_RCC_OscConfig+0xf8>
 80010a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <HAL_RCC_OscConfig+0x82>
 80010cc:	4ba0      	ldr	r3, [pc, #640]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	e015      	b.n	80010fe <HAL_RCC_OscConfig+0xae>
 80010d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80010e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010ee:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010fa:	4b95      	ldr	r3, [pc, #596]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001102:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001106:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800110a:	fa92 f2a2 	rbit	r2, r2
 800110e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001112:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001116:	fab2 f282 	clz	r2, r2
 800111a:	b252      	sxtb	r2, r2
 800111c:	f042 0220 	orr.w	r2, r2, #32
 8001120:	b252      	sxtb	r2, r2
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	f002 021f 	and.w	r2, r2, #31
 8001128:	2101      	movs	r1, #1
 800112a:	fa01 f202 	lsl.w	r2, r1, r2
 800112e:	4013      	ands	r3, r2
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 810f 	beq.w	8001354 <HAL_RCC_OscConfig+0x304>
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f040 8109 	bne.w	8001354 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	f000 be6b 	b.w	8001e1e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001152:	d106      	bne.n	8001162 <HAL_RCC_OscConfig+0x112>
 8001154:	4b7e      	ldr	r3, [pc, #504]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a7d      	ldr	r2, [pc, #500]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 800115a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	e030      	b.n	80011c4 <HAL_RCC_OscConfig+0x174>
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10c      	bne.n	8001186 <HAL_RCC_OscConfig+0x136>
 800116c:	4b78      	ldr	r3, [pc, #480]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a77      	ldr	r2, [pc, #476]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b75      	ldr	r3, [pc, #468]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a74      	ldr	r2, [pc, #464]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e01e      	b.n	80011c4 <HAL_RCC_OscConfig+0x174>
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x15c>
 8001192:	4b6f      	ldr	r3, [pc, #444]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a6e      	ldr	r2, [pc, #440]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b6c      	ldr	r3, [pc, #432]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6b      	ldr	r2, [pc, #428]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e00b      	b.n	80011c4 <HAL_RCC_OscConfig+0x174>
 80011ac:	4b68      	ldr	r3, [pc, #416]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a67      	ldr	r2, [pc, #412]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80011b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b65      	ldr	r3, [pc, #404]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a64      	ldr	r2, [pc, #400]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80011be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011c4:	4b62      	ldr	r3, [pc, #392]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	f023 020f 	bic.w	r2, r3, #15
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	495f      	ldr	r1, [pc, #380]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d05a      	beq.n	8001298 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fcb5 	bl	8000b50 <HAL_GetTick>
 80011e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	e00a      	b.n	8001202 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fcb0 	bl	8000b50 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b64      	cmp	r3, #100	; 0x64
 80011fa:	d902      	bls.n	8001202 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f000 be0e 	b.w	8001e1e <HAL_RCC_OscConfig+0xdce>
 8001202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001206:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001216:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	095b      	lsrs	r3, r3, #5
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d102      	bne.n	8001234 <HAL_RCC_OscConfig+0x1e4>
 800122e:	4b48      	ldr	r3, [pc, #288]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	e015      	b.n	8001260 <HAL_RCC_OscConfig+0x210>
 8001234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001238:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800124c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001250:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800125c:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001264:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001268:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800126c:	fa92 f2a2 	rbit	r2, r2
 8001270:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001274:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001278:	fab2 f282 	clz	r2, r2
 800127c:	b252      	sxtb	r2, r2
 800127e:	f042 0220 	orr.w	r2, r2, #32
 8001282:	b252      	sxtb	r2, r2
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	f002 021f 	and.w	r2, r2, #31
 800128a:	2101      	movs	r1, #1
 800128c:	fa01 f202 	lsl.w	r2, r1, r2
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0aa      	beq.n	80011ec <HAL_RCC_OscConfig+0x19c>
 8001296:	e05e      	b.n	8001356 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc5a 	bl	8000b50 <HAL_GetTick>
 800129c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a2:	f7ff fc55 	bl	8000b50 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d902      	bls.n	80012b8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	f000 bdb3 	b.w	8001e1e <HAL_RCC_OscConfig+0xdce>
 80012b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012bc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80012cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d102      	bne.n	80012ea <HAL_RCC_OscConfig+0x29a>
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	e015      	b.n	8001316 <HAL_RCC_OscConfig+0x2c6>
 80012ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001302:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001306:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_RCC_OscConfig+0x300>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800131a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800131e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001322:	fa92 f2a2 	rbit	r2, r2
 8001326:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 800132a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800132e:	fab2 f282 	clz	r2, r2
 8001332:	b252      	sxtb	r2, r2
 8001334:	f042 0220 	orr.w	r2, r2, #32
 8001338:	b252      	sxtb	r2, r2
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	f002 021f 	and.w	r2, r2, #31
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1aa      	bne.n	80012a2 <HAL_RCC_OscConfig+0x252>
 800134c:	e003      	b.n	8001356 <HAL_RCC_OscConfig+0x306>
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8170 	beq.w	8001646 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001366:	4bd0      	ldr	r3, [pc, #832]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001372:	4bcd      	ldr	r3, [pc, #820]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b08      	cmp	r3, #8
 800137c:	d16d      	bne.n	800145a <HAL_RCC_OscConfig+0x40a>
 800137e:	4bca      	ldr	r3, [pc, #808]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d167      	bne.n	800145a <HAL_RCC_OscConfig+0x40a>
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 800139c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a0:	fab3 f383 	clz	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d102      	bne.n	80013ba <HAL_RCC_OscConfig+0x36a>
 80013b4:	4bbc      	ldr	r3, [pc, #752]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	e013      	b.n	80013e2 <HAL_RCC_OscConfig+0x392>
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013d2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013de:	4bb2      	ldr	r3, [pc, #712]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	2202      	movs	r2, #2
 80013e4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013e8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80013ec:	fa92 f2a2 	rbit	r2, r2
 80013f0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80013f4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013f8:	fab2 f282 	clz	r2, r2
 80013fc:	b252      	sxtb	r2, r2
 80013fe:	f042 0220 	orr.w	r2, r2, #32
 8001402:	b252      	sxtb	r2, r2
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	f002 021f 	and.w	r2, r2, #31
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_RCC_OscConfig+0x3d6>
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d002      	beq.n	8001426 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	f000 bcfc 	b.w	8001e1e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4ba0      	ldr	r3, [pc, #640]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6959      	ldr	r1, [r3, #20]
 8001434:	23f8      	movs	r3, #248	; 0xf8
 8001436:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001446:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800144a:	fab3 f383 	clz	r3, r3
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	4995      	ldr	r1, [pc, #596]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001458:	e0f5      	b.n	8001646 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8085 	beq.w	8001570 <HAL_RCC_OscConfig+0x520>
 8001466:	2301      	movs	r3, #1
 8001468:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001478:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001484:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	461a      	mov	r2, r3
 800148c:	2301      	movs	r3, #1
 800148e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fb5e 	bl	8000b50 <HAL_GetTick>
 8001494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fb59 	bl	8000b50 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d902      	bls.n	80014b0 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	f000 bcb7 	b.w	8001e1e <HAL_RCC_OscConfig+0xdce>
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80014c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d102      	bne.n	80014e0 <HAL_RCC_OscConfig+0x490>
 80014da:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	e013      	b.n	8001508 <HAL_RCC_OscConfig+0x4b8>
 80014e0:	2302      	movs	r3, #2
 80014e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014f8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014fc:	fa93 f3a3 	rbit	r3, r3
 8001500:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001504:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	2202      	movs	r2, #2
 800150a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800150e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001512:	fa92 f2a2 	rbit	r2, r2
 8001516:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 800151a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800151e:	fab2 f282 	clz	r2, r2
 8001522:	b252      	sxtb	r2, r2
 8001524:	f042 0220 	orr.w	r2, r2, #32
 8001528:	b252      	sxtb	r2, r2
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	f002 021f 	and.w	r2, r2, #31
 8001530:	2101      	movs	r1, #1
 8001532:	fa01 f202 	lsl.w	r2, r1, r2
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0ae      	beq.n	800149a <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6959      	ldr	r1, [r3, #20]
 800154a:	23f8      	movs	r3, #248	; 0xf8
 800154c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001554:	fa93 f3a3 	rbit	r3, r3
 8001558:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 800155c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001560:	fab3 f383 	clz	r3, r3
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	494f      	ldr	r1, [pc, #316]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
 800156e:	e06a      	b.n	8001646 <HAL_RCC_OscConfig+0x5f6>
 8001570:	2301      	movs	r3, #1
 8001572:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001582:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800158e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	461a      	mov	r2, r3
 8001596:	2300      	movs	r3, #0
 8001598:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fad9 	bl	8000b50 <HAL_GetTick>
 800159e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff fad4 	bl	8000b50 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d902      	bls.n	80015ba <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f000 bc32 	b.w	8001e1e <HAL_RCC_OscConfig+0xdce>
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015c4:	fa93 f3a3 	rbit	r3, r3
 80015c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80015cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d102      	bne.n	80015ea <HAL_RCC_OscConfig+0x59a>
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	e013      	b.n	8001612 <HAL_RCC_OscConfig+0x5c2>
 80015ea:	2302      	movs	r3, #2
 80015ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015fc:	2302      	movs	r3, #2
 80015fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001602:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <HAL_RCC_OscConfig+0x658>)
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	2202      	movs	r2, #2
 8001614:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001618:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800161c:	fa92 f2a2 	rbit	r2, r2
 8001620:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001624:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001628:	fab2 f282 	clz	r2, r2
 800162c:	b252      	sxtb	r2, r2
 800162e:	f042 0220 	orr.w	r2, r2, #32
 8001632:	b252      	sxtb	r2, r2
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	f002 021f 	and.w	r2, r2, #31
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ae      	bne.n	80015a4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80d8 	beq.w	8001806 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d067      	beq.n	8001730 <HAL_RCC_OscConfig+0x6e0>
 8001660:	2301      	movs	r3, #1
 8001662:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001672:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_OscConfig+0x65c>)
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	461a      	mov	r2, r3
 8001684:	2301      	movs	r3, #1
 8001686:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff fa62 	bl	8000b50 <HAL_GetTick>
 800168c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001690:	e00e      	b.n	80016b0 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff fa5d 	bl	8000b50 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d906      	bls.n	80016b0 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e3bb      	b.n	8001e1e <HAL_RCC_OscConfig+0xdce>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	10908120 	.word	0x10908120
 80016b0:	2302      	movs	r3, #2
 80016b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80016c2:	2302      	movs	r3, #2
 80016c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016da:	2202      	movs	r2, #2
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fa93 f2a3 	rbit	r2, r3
 80016e8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ee:	4ba5      	ldr	r3, [pc, #660]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80016f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016f6:	2102      	movs	r1, #2
 80016f8:	6019      	str	r1, [r3, #0]
 80016fa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fa93 f1a3 	rbit	r1, r3
 8001704:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001708:	6019      	str	r1, [r3, #0]
  return(result);
 800170a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b25b      	sxtb	r3, r3
 8001716:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800171a:	b25b      	sxtb	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0b1      	beq.n	8001692 <HAL_RCC_OscConfig+0x642>
 800172e:	e06a      	b.n	8001806 <HAL_RCC_OscConfig+0x7b6>
 8001730:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001746:	601a      	str	r2, [r3, #0]
  return(result);
 8001748:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800174c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174e:	fab3 f383 	clz	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	4b8c      	ldr	r3, [pc, #560]	; (8001988 <HAL_RCC_OscConfig+0x938>)
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	461a      	mov	r2, r3
 800175c:	2300      	movs	r3, #0
 800175e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff f9f6 	bl	8000b50 <HAL_GetTick>
 8001764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	e009      	b.n	800177e <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff f9f1 	bl	8000b50 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e34f      	b.n	8001e1e <HAL_RCC_OscConfig+0xdce>
 800177e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001782:	2202      	movs	r2, #2
 8001784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800179a:	2202      	movs	r2, #2
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fa93 f2a3 	rbit	r2, r3
 80017a8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017b2:	2202      	movs	r2, #2
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c6:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80017c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017ce:	2102      	movs	r1, #2
 80017d0:	6019      	str	r1, [r3, #0]
 80017d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fa93 f1a3 	rbit	r1, r3
 80017dc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017e0:	6019      	str	r1, [r3, #0]
  return(result);
 80017e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1b1      	bne.n	800176a <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8159 	beq.w	8001ac8 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181c:	4b59      	ldr	r3, [pc, #356]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d112      	bne.n	800184e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	4b56      	ldr	r3, [pc, #344]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	4a55      	ldr	r2, [pc, #340]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001832:	61d3      	str	r3, [r2, #28]
 8001834:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001848:	2301      	movs	r3, #1
 800184a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b4f      	ldr	r3, [pc, #316]	; (800198c <HAL_RCC_OscConfig+0x93c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d11a      	bne.n	8001890 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185a:	4b4c      	ldr	r3, [pc, #304]	; (800198c <HAL_RCC_OscConfig+0x93c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a4b      	ldr	r2, [pc, #300]	; (800198c <HAL_RCC_OscConfig+0x93c>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff f973 	bl	8000b50 <HAL_GetTick>
 800186a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	e009      	b.n	8001884 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001870:	f7ff f96e 	bl	8000b50 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e2cc      	b.n	8001e1e <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	4b41      	ldr	r3, [pc, #260]	; (800198c <HAL_RCC_OscConfig+0x93c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ef      	beq.n	8001870 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x858>
 800189a:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a39      	ldr	r2, [pc, #228]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6213      	str	r3, [r2, #32]
 80018a6:	e02f      	b.n	8001908 <HAL_RCC_OscConfig+0x8b8>
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x87c>
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a33      	ldr	r2, [pc, #204]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a30      	ldr	r2, [pc, #192]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	e01d      	b.n	8001908 <HAL_RCC_OscConfig+0x8b8>
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x8a0>
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a2a      	ldr	r2, [pc, #168]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a27      	ldr	r2, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0x8b8>
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a23      	ldr	r2, [pc, #140]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a20      	ldr	r2, [pc, #128]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d06b      	beq.n	80019ea <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001912:	f7ff f91d 	bl	8000b50 <HAL_GetTick>
 8001916:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191c:	f7ff f918 	bl	8000b50 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e274      	b.n	8001e1e <HAL_RCC_OscConfig+0xdce>
 8001934:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001938:	2202      	movs	r2, #2
 800193a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	fa93 f2a3 	rbit	r2, r3
 8001946:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001950:	2202      	movs	r2, #2
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	fa93 f2a3 	rbit	r2, r3
 800195e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001962:	601a      	str	r2, [r3, #0]
  return(result);
 8001964:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001968:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d108      	bne.n	8001990 <HAL_RCC_OscConfig+0x940>
 800197e:	4b01      	ldr	r3, [pc, #4]	; (8001984 <HAL_RCC_OscConfig+0x934>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	e013      	b.n	80019ac <HAL_RCC_OscConfig+0x95c>
 8001984:	40021000 	.word	0x40021000
 8001988:	10908120 	.word	0x10908120
 800198c:	40007000 	.word	0x40007000
 8001990:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001994:	2202      	movs	r2, #2
 8001996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	4bbb      	ldr	r3, [pc, #748]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019b0:	2102      	movs	r1, #2
 80019b2:	6011      	str	r1, [r2, #0]
 80019b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	fa92 f1a2 	rbit	r1, r2
 80019be:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019c2:	6011      	str	r1, [r2, #0]
  return(result);
 80019c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	fab2 f282 	clz	r2, r2
 80019ce:	b252      	sxtb	r2, r2
 80019d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d4:	b252      	sxtb	r2, r2
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	f002 021f 	and.w	r2, r2, #31
 80019dc:	2101      	movs	r1, #1
 80019de:	fa01 f202 	lsl.w	r2, r1, r2
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d099      	beq.n	800191c <HAL_RCC_OscConfig+0x8cc>
 80019e8:	e064      	b.n	8001ab4 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff f8b1 	bl	8000b50 <HAL_GetTick>
 80019ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f7ff f8ac 	bl	8000b50 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e208      	b.n	8001e1e <HAL_RCC_OscConfig+0xdce>
 8001a0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a10:	2202      	movs	r2, #2
 8001a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a28:	2202      	movs	r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a3a:	601a      	str	r2, [r3, #0]
  return(result);
 8001a3c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	095b      	lsrs	r3, r3, #5
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d102      	bne.n	8001a5c <HAL_RCC_OscConfig+0xa0c>
 8001a56:	4b90      	ldr	r3, [pc, #576]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	e00d      	b.n	8001a78 <HAL_RCC_OscConfig+0xa28>
 8001a5c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a60:	2202      	movs	r2, #2
 8001a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	fa93 f2a3 	rbit	r2, r3
 8001a6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	6011      	str	r1, [r2, #0]
 8001a80:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	fa92 f1a2 	rbit	r1, r2
 8001a8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a8e:	6011      	str	r1, [r2, #0]
  return(result);
 8001a90:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	fab2 f282 	clz	r2, r2
 8001a9a:	b252      	sxtb	r2, r2
 8001a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa0:	b252      	sxtb	r2, r2
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	f002 021f 	and.w	r2, r2, #31
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d19f      	bne.n	80019f4 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ab4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	4a75      	ldr	r2, [pc, #468]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 8001ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 81a4 	beq.w	8001e1c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad4:	4b70      	ldr	r3, [pc, #448]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	f000 819b 	beq.w	8001e18 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	f040 8113 	bne.w	8001d14 <HAL_RCC_OscConfig+0xcc4>
 8001aee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001af2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b06:	601a      	str	r2, [r3, #0]
  return(result);
 8001b08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff f815 	bl	8000b50 <HAL_GetTick>
 8001b26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	e009      	b.n	8001b40 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f810 	bl	8000b50 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e16e      	b.n	8001e1e <HAL_RCC_OscConfig+0xdce>
 8001b40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b58:	601a      	str	r2, [r3, #0]
  return(result);
 8001b5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_OscConfig+0xb2a>
 8001b74:	4b48      	ldr	r3, [pc, #288]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	e01b      	b.n	8001bb2 <HAL_RCC_OscConfig+0xb62>
 8001b7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	fa93 f2a3 	rbit	r2, r3
 8001b8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bb6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bba:	6011      	str	r1, [r2, #0]
 8001bbc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	fa92 f1a2 	rbit	r1, r2
 8001bc6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bca:	6011      	str	r1, [r2, #0]
  return(result);
 8001bcc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	fab2 f282 	clz	r2, r2
 8001bd6:	b252      	sxtb	r2, r2
 8001bd8:	f042 0220 	orr.w	r2, r2, #32
 8001bdc:	b252      	sxtb	r2, r2
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f002 021f 	and.w	r2, r2, #31
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d19d      	bne.n	8001b2c <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	430b      	orrs	r3, r1
 8001c06:	4924      	ldr	r1, [pc, #144]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
 8001c0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	fa93 f2a3 	rbit	r2, r3
 8001c20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c24:	601a      	str	r2, [r3, #0]
  return(result);
 8001c26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c2a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7fe ff86 	bl	8000b50 <HAL_GetTick>
 8001c44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c48:	e009      	b.n	8001c5e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7fe ff81 	bl	8000b50 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0df      	b.n	8001e1e <HAL_RCC_OscConfig+0xdce>
 8001c5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	fa93 f2a3 	rbit	r2, r3
 8001c72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c76:	601a      	str	r2, [r3, #0]
  return(result);
 8001c78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d104      	bne.n	8001c9c <HAL_RCC_OscConfig+0xc4c>
 8001c92:	4b01      	ldr	r3, [pc, #4]	; (8001c98 <HAL_RCC_OscConfig+0xc48>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0xc84>
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f2a3 	rbit	r2, r3
 8001cb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <HAL_RCC_OscConfig+0xdd8>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001cd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cdc:	6011      	str	r1, [r2, #0]
 8001cde:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	fa92 f1a2 	rbit	r1, r2
 8001ce8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cec:	6011      	str	r1, [r2, #0]
  return(result);
 8001cee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	fab2 f282 	clz	r2, r2
 8001cf8:	b252      	sxtb	r2, r2
 8001cfa:	f042 0220 	orr.w	r2, r2, #32
 8001cfe:	b252      	sxtb	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f002 021f 	and.w	r2, r2, #31
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d09b      	beq.n	8001c4a <HAL_RCC_OscConfig+0xbfa>
 8001d12:	e083      	b.n	8001e1c <HAL_RCC_OscConfig+0xdcc>
 8001d14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d2c:	601a      	str	r2, [r3, #0]
  return(result);
 8001d2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d32:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	461a      	mov	r2, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe ff02 	bl	8000b50 <HAL_GetTick>
 8001d4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d50:	e009      	b.n	8001d66 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d52:	f7fe fefd 	bl	8000b50 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e05b      	b.n	8001e1e <HAL_RCC_OscConfig+0xdce>
 8001d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7e:	601a      	str	r2, [r3, #0]
  return(result);
 8001d80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d102      	bne.n	8001da0 <HAL_RCC_OscConfig+0xd50>
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_RCC_OscConfig+0xdd8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e01b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd88>
 8001da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f107 0320 	add.w	r3, r7, #32
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	fa93 f2a3 	rbit	r2, r3
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_RCC_OscConfig+0xdd8>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	f107 0214 	add.w	r2, r7, #20
 8001ddc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001de0:	6011      	str	r1, [r2, #0]
 8001de2:	f107 0214 	add.w	r2, r7, #20
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	fa92 f1a2 	rbit	r1, r2
 8001dec:	f107 0210 	add.w	r2, r7, #16
 8001df0:	6011      	str	r1, [r2, #0]
  return(result);
 8001df2:	f107 0210 	add.w	r2, r7, #16
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	b252      	sxtb	r2, r2
 8001dfe:	f042 0220 	orr.w	r2, r2, #32
 8001e02:	b252      	sxtb	r2, r2
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f002 021f 	and.w	r2, r2, #31
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d19d      	bne.n	8001d52 <HAL_RCC_OscConfig+0xd02>
 8001e16:	e001      	b.n	8001e1c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b09e      	sub	sp, #120	; 0x78
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e164      	b.n	800210e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b92      	ldr	r3, [pc, #584]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b8f      	ldr	r3, [pc, #572]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	498d      	ldr	r1, [pc, #564]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e14c      	b.n	800210e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b84      	ldr	r3, [pc, #528]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4981      	ldr	r1, [pc, #516]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80df 	beq.w	800205e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d13d      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xf8>
 8001ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d102      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xa6>
 8001ecc:	4b71      	ldr	r3, [pc, #452]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	e00f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0xc6>
 8001ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	667b      	str	r3, [r7, #100]	; 0x64
 8001ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eee:	4b69      	ldr	r3, [pc, #420]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ef6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001efa:	fa92 f2a2 	rbit	r2, r2
 8001efe:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	b252      	sxtb	r2, r2
 8001f08:	f042 0220 	orr.w	r2, r2, #32
 8001f0c:	b252      	sxtb	r2, r2
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	f002 021f 	and.w	r2, r2, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d17d      	bne.n	800201c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0f4      	b.n	800210e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d13d      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x17c>
 8001f2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x12a>
 8001f50:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	e00f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x14a>
 8001f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
 8001f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f68:	643b      	str	r3, [r7, #64]	; 0x40
 8001f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f72:	4b48      	ldr	r3, [pc, #288]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b252      	sxtb	r2, r2
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	b252      	sxtb	r2, r2
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f002 021f 	and.w	r2, r2, #31
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d13b      	bne.n	800201c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b2      	b.n	800210e <HAL_RCC_ClockConfig+0x2e2>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a4>
 8001fca:	4b32      	ldr	r3, [pc, #200]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e00d      	b.n	8001fec <HAL_RCC_ClockConfig+0x1c0>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
 8001fdc:	2302      	movs	r3, #2
 8001fde:	623b      	str	r3, [r7, #32]
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2202      	movs	r2, #2
 8001fee:	61ba      	str	r2, [r7, #24]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	fa92 f2a2 	rbit	r2, r2
 8001ff6:	617a      	str	r2, [r7, #20]
  return(result);
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	b252      	sxtb	r2, r2
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	b252      	sxtb	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f002 021f 	and.w	r2, r2, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f202 	lsl.w	r2, r1, r2
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e078      	b.n	800210e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 0203 	bic.w	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	491a      	ldr	r1, [pc, #104]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202e:	f7fe fd8f 	bl	8000b50 <HAL_GetTick>
 8002032:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002034:	e00a      	b.n	800204c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002036:	f7fe fd8b 	bl	8000b50 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e060      	b.n	800210e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 020c 	and.w	r2, r3, #12
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	429a      	cmp	r2, r3
 800205c:	d1eb      	bne.n	8002036 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d215      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 0207 	bic.w	r2, r3, #7
 8002074:	4906      	ldr	r1, [pc, #24]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d006      	beq.n	8002098 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e03f      	b.n	800210e <HAL_RCC_ClockConfig+0x2e2>
 800208e:	bf00      	nop
 8002090:	40022000 	.word	0x40022000
 8002094:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_RCC_ClockConfig+0x2ec>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4919      	ldr	r1, [pc, #100]	; (8002118 <HAL_RCC_ClockConfig+0x2ec>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_RCC_ClockConfig+0x2ec>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4911      	ldr	r1, [pc, #68]	; (8002118 <HAL_RCC_ClockConfig+0x2ec>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020d6:	f000 f825 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80020da:	4601      	mov	r1, r0
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_RCC_ClockConfig+0x2ec>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020e4:	23f0      	movs	r3, #240	; 0xf0
 80020e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	fa22 f303 	lsr.w	r3, r2, r3
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_RCC_ClockConfig+0x2f0>)
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_RCC_ClockConfig+0x2f4>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002106:	200f      	movs	r0, #15
 8002108:	f7fe fcde 	bl	8000ac8 <HAL_InitTick>
  
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3778      	adds	r7, #120	; 0x78
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	08007014 	.word	0x08007014
 8002120:	2000000c 	.word	0x2000000c

08002124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b08b      	sub	sp, #44	; 0x2c
 8002128:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b04      	cmp	r3, #4
 800214c:	d002      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x30>
 800214e:	2b08      	cmp	r3, #8
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x36>
 8002152:	e03c      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002156:	623b      	str	r3, [r7, #32]
      break;
 8002158:	e03c      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002160:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002164:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	607b      	str	r3, [r7, #4]
  return(result);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f003 020f 	and.w	r2, r3, #15
 8002186:	230f      	movs	r3, #15
 8002188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	60fb      	str	r3, [r7, #12]
  return(result);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80021ac:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
 80021bc:	e004      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	623b      	str	r3, [r7, #32]
      break;
 80021cc:	e002      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021d0:	623b      	str	r3, [r7, #32]
      break;
 80021d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d4:	6a3b      	ldr	r3, [r7, #32]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	372c      	adds	r7, #44	; 0x2c
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	007a1200 	.word	0x007a1200
 80021ec:	08006ff4 	.word	0x08006ff4
 80021f0:	08007004 	.word	0x08007004
 80021f4:	003d0900 	.word	0x003d0900

080021f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_RCC_GetHCLKFreq+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	2000000c 	.word	0x2000000c

08002210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002216:	f7ff ffef 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 800221a:	4601      	mov	r1, r0
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002224:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002228:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	603b      	str	r3, [r7, #0]
  return(result);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x40>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08007024 	.word	0x08007024

08002254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800225a:	f7ff ffcd 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 800225e:	4601      	mov	r1, r0
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002268:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800226c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	603b      	str	r3, [r7, #0]
  return(result);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002282:	5cd3      	ldrb	r3, [r2, r3]
 8002284:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	08007024 	.word	0x08007024

08002298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e07c      	b.n	80023a4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f003 ff6d 	bl	80061a4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022ea:	d902      	bls.n	80022f2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e002      	b.n	80022f8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80022f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002300:	d007      	beq.n	8002312 <HAL_SPI_Init+0x7a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800230a:	d002      	beq.n	8002312 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10b      	bne.n	8002332 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002322:	d903      	bls.n	800232c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
 800232a:	e002      	b.n	8002332 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	ea42 0103 	orr.w	r1, r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	f003 0204 	and.w	r2, r3, #4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	ea42 0103 	orr.w	r1, r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_SPI_Transmit+0x26>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e13e      	b.n	8002650 <HAL_SPI_Transmit+0x2a4>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023da:	f7fe fbb9 	bl	8000b50 <HAL_GetTick>
 80023de:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d002      	beq.n	80023f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
 80023ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023f0:	e125      	b.n	800263e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_SPI_Transmit+0x52>
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002402:	e11c      	b.n	800263e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2203      	movs	r2, #3
 8002408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800244e:	d107      	bne.n	8002460 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d007      	beq.n	800247e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002486:	d947      	bls.n	8002518 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <HAL_SPI_Transmit+0xee>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d138      	bne.n	800250c <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	881a      	ldrh	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	3302      	adds	r3, #2
 80024a8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024b8:	e028      	b.n	800250c <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d10f      	bne.n	80024e8 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	881a      	ldrh	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3302      	adds	r3, #2
 80024d6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024e6:	e011      	b.n	800250c <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_SPI_Transmit+0x15a>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d00a      	beq.n	800250c <HAL_SPI_Transmit+0x160>
 80024f6:	f7fe fb2b 	bl	8000b50 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d802      	bhi.n	800250c <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	77fb      	strb	r3, [r7, #31]
          goto error;
 800250a:	e098      	b.n	800263e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1d1      	bne.n	80024ba <HAL_SPI_Transmit+0x10e>
 8002516:	e070      	b.n	80025fa <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <HAL_SPI_Transmit+0x17e>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d162      	bne.n	80025f0 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d90f      	bls.n	8002554 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	881a      	ldrh	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3302      	adds	r3, #2
 8002542:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b02      	subs	r3, #2
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002552:	e04d      	b.n	80025f0 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	60ba      	str	r2, [r7, #8]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	320c      	adds	r2, #12
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002572:	e03d      	b.n	80025f0 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d124      	bne.n	80025cc <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d90f      	bls.n	80025ac <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3302      	adds	r3, #2
 800259a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3b02      	subs	r3, #2
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025aa:	e021      	b.n	80025f0 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	60ba      	str	r2, [r7, #8]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	320c      	adds	r2, #12
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025ca:	e011      	b.n	80025f0 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_SPI_Transmit+0x23e>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d00a      	beq.n	80025f0 <HAL_SPI_Transmit+0x244>
 80025da:	f7fe fab9 	bl	8000b50 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d802      	bhi.n	80025f0 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025ee:	e026      	b.n	800263e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1bc      	bne.n	8002574 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	6839      	ldr	r1, [r7, #0]
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fc7d 	bl	8002efe <SPI_EndRxTxTransaction>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	77fb      	strb	r3, [r7, #31]
 800263a:	e000      	b.n	800263e <HAL_SPI_Transmit+0x292>
  }

error:
 800263c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800264e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	75fb      	strb	r3, [r7, #23]


  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002678:	d112      	bne.n	80026a0 <HAL_SPI_Receive+0x48>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10e      	bne.n	80026a0 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2204      	movs	r2, #4
 8002686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800268a:	88fa      	ldrh	r2, [r7, #6]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f901 	bl	800289e <HAL_SPI_TransmitReceive>
 800269c:	4603      	mov	r3, r0
 800269e:	e0fa      	b.n	8002896 <HAL_SPI_Receive+0x23e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_SPI_Receive+0x56>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0f3      	b.n	8002896 <HAL_SPI_Receive+0x23e>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026b6:	f7fe fa4b 	bl	8000b50 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d002      	beq.n	80026ce <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
 80026ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026cc:	e0da      	b.n	8002884 <HAL_SPI_Receive+0x22c>
  }

  if ((pData == NULL) || (Size == 0U))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_SPI_Receive+0x82>
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026de:	e0d1      	b.n	8002884 <HAL_SPI_Receive+0x22c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2204      	movs	r2, #4
 80026e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800272a:	d908      	bls.n	800273e <HAL_SPI_Receive+0xe6>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	e007      	b.n	800274e <HAL_SPI_Receive+0xf6>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800274c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002756:	d107      	bne.n	8002768 <HAL_SPI_Receive+0x110>
  {
    SPI_1LINE_RX(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d007      	beq.n	8002786 <HAL_SPI_Receive+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800278e:	d860      	bhi.n	8002852 <HAL_SPI_Receive+0x1fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002790:	e02c      	b.n	80027ec <HAL_SPI_Receive+0x194>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d113      	bne.n	80027c8 <HAL_SPI_Receive+0x170>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3301      	adds	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80027c6:	e011      	b.n	80027ec <HAL_SPI_Receive+0x194>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_SPI_Receive+0x18e>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d00a      	beq.n	80027ec <HAL_SPI_Receive+0x194>
 80027d6:	f7fe f9bb 	bl	8000b50 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d802      	bhi.n	80027ec <HAL_SPI_Receive+0x194>
        {
          errorcode = HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80027ea:	e04b      	b.n	8002884 <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1cc      	bne.n	8002792 <HAL_SPI_Receive+0x13a>
 80027f8:	e031      	b.n	800285e <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d112      	bne.n	800282e <HAL_SPI_Receive+0x1d6>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	b29a      	uxth	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3302      	adds	r3, #2
 8002818:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800282c:	e011      	b.n	8002852 <HAL_SPI_Receive+0x1fa>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_SPI_Receive+0x1f4>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d00a      	beq.n	8002852 <HAL_SPI_Receive+0x1fa>
 800283c:	f7fe f988 	bl	8000b50 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d802      	bhi.n	8002852 <HAL_SPI_Receive+0x1fa>
        {
          errorcode = HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002850:	e018      	b.n	8002884 <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1cd      	bne.n	80027fa <HAL_SPI_Receive+0x1a2>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	6839      	ldr	r1, [r7, #0]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 faf3 	bl	8002e4e <SPI_EndRxTransaction>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_SPI_Receive+0x21c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_SPI_Receive+0x22a>
  {
    errorcode = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	75fb      	strb	r3, [r7, #23]
 8002880:	e000      	b.n	8002884 <HAL_SPI_Receive+0x22c>
  }

error :
 8002882:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002894:	7dfb      	ldrb	r3, [r7, #23]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b08a      	sub	sp, #40	; 0x28
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80028b8:	2301      	movs	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x32>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e1e2      	b.n	8002c96 <HAL_SPI_TransmitReceive+0x3f8>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028d8:	f7fe f93a 	bl	8000b50 <HAL_GetTick>
 80028dc:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d00e      	beq.n	8002912 <HAL_SPI_TransmitReceive+0x74>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028fa:	d106      	bne.n	800290a <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <HAL_SPI_TransmitReceive+0x6c>
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b04      	cmp	r3, #4
 8002908:	d003      	beq.n	8002912 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800290a:	2302      	movs	r3, #2
 800290c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002910:	e1b7      	b.n	8002c82 <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x86>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x86>
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d103      	bne.n	800292c <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800292a:	e1aa      	b.n	8002c82 <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b04      	cmp	r3, #4
 8002936:	d003      	beq.n	8002940 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2205      	movs	r2, #5
 800293c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	887a      	ldrh	r2, [r7, #2]
 8002966:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002982:	d805      	bhi.n	8002990 <HAL_SPI_TransmitReceive+0xf2>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d908      	bls.n	80029a2 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	e007      	b.n	80029b2 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d007      	beq.n	80029d0 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029d8:	d975      	bls.n	8002ac6 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_SPI_TransmitReceive+0x14e>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d160      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	881a      	ldrh	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3302      	adds	r3, #2
 80029fa:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0a:	e050      	b.n	8002aae <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01c      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x1ae>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d017      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x1ae>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d110      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	3302      	adds	r3, #2
 8002a38:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01a      	beq.n	8002a8e <HAL_SPI_TransmitReceive+0x1f0>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d113      	bne.n	8002a8e <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3302      	adds	r3, #2
 8002a76:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d00b      	beq.n	8002aae <HAL_SPI_TransmitReceive+0x210>
 8002a96:	f7fe f85b 	bl	8000b50 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d803      	bhi.n	8002aae <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002aac:	e0e9      	b.n	8002c82 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1a9      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x16e>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1a3      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x16e>
 8002ac4:	e0c9      	b.n	8002c5a <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_SPI_TransmitReceive+0x23c>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	f040 80b3 	bne.w	8002c40 <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d90f      	bls.n	8002b04 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3302      	adds	r3, #2
 8002af2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b02      	subs	r3, #2
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b02:	e09d      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	60ba      	str	r2, [r7, #8]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	320c      	adds	r2, #12
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b22:	e08d      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d031      	beq.n	8002b8e <HAL_SPI_TransmitReceive+0x2f0>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02c      	beq.n	8002b8e <HAL_SPI_TransmitReceive+0x2f0>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d125      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d90f      	bls.n	8002b6c <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	3302      	adds	r3, #2
 8002b5a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b02      	subs	r3, #2
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b6a:	e00e      	b.n	8002b8a <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	60ba      	str	r2, [r7, #8]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	320c      	adds	r2, #12
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d042      	beq.n	8002c20 <HAL_SPI_TransmitReceive+0x382>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d13b      	bne.n	8002c20 <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d920      	bls.n	8002bf6 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b02      	subs	r3, #2
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d81b      	bhi.n	8002c1c <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	e012      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f103 020c 	add.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	1c59      	adds	r1, r3, #1
 8002c02:	6079      	str	r1, [r7, #4]
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c26:	d00b      	beq.n	8002c40 <HAL_SPI_TransmitReceive+0x3a2>
 8002c28:	f7fd ff92 	bl	8000b50 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d803      	bhi.n	8002c40 <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c3e:	e020      	b.n	8002c82 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f47f af6c 	bne.w	8002b24 <HAL_SPI_TransmitReceive+0x286>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f af65 	bne.w	8002b24 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f94d 	bl	8002efe <SPI_EndRxTxTransaction>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7e:	e000      	b.n	8002c82 <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 8002c80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cac:	e04c      	b.n	8002d48 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d048      	beq.n	8002d48 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002cbc:	f7fd ff48 	bl	8000b50 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d83d      	bhi.n	8002d48 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce4:	d111      	bne.n	8002d0a <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cee:	d004      	beq.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf8:	d107      	bne.n	8002d0a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d12:	d10f      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e00e      	b.n	8002d66 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d101      	bne.n	8002d5c <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002d58:	2201      	movs	r2, #1
 8002d5a:	e000      	b.n	8002d5e <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1a4      	bne.n	8002cae <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002d7c:	e05a      	b.n	8002e34 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d84:	d109      	bne.n	8002d9a <SPI_WaitFifoStateUntilTimeout+0x2c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d048      	beq.n	8002e34 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002da8:	f7fd fed2 	bl	8000b50 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d83d      	bhi.n	8002e34 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dc6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dd0:	d111      	bne.n	8002df6 <SPI_WaitFifoStateUntilTimeout+0x88>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dda:	d004      	beq.n	8002de6 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de4:	d107      	bne.n	8002df6 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfe:	d10f      	bne.n	8002e20 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e008      	b.n	8002e46 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d19c      	bne.n	8002d7e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af02      	add	r7, sp, #8
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e62:	d111      	bne.n	8002e88 <SPI_EndRxTransaction+0x3a>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6c:	d004      	beq.n	8002e78 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e76:	d107      	bne.n	8002e88 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e86:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff03 	bl	8002c9e <SPI_WaitFlagStateUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea2:	f043 0220 	orr.w	r2, r3, #32
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e023      	b.n	8002ef6 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb6:	d11d      	bne.n	8002ef4 <SPI_EndRxTransaction+0xa6>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec0:	d004      	beq.n	8002ecc <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d113      	bne.n	8002ef4 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff ff48 	bl	8002d6e <SPI_WaitFifoStateUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e000      	b.n	8002ef6 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af02      	add	r7, sp, #8
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7ff ff29 	bl	8002d6e <SPI_WaitFifoStateUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e027      	b.n	8002f82 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7ff feae 	bl	8002c9e <SPI_WaitFlagStateUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e014      	b.n	8002f82 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff ff02 	bl	8002d6e <SPI_WaitFifoStateUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e000      	b.n	8002f82 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e043      	b.n	8003024 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f003 f93b 	bl	800622c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2224      	movs	r2, #36	; 0x24
 8002fba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0201 	bic.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f82c 	bl	800302c <UART_SetConfig>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e022      	b.n	8003024 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f986 	bl	80032f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800300a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fa0d 	bl	800343c <UART_CheckIdleState>
 8003022:	4603      	mov	r3, r0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003038:	2310      	movs	r3, #16
 800303a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 800303c:	2300      	movs	r3, #0
 800303e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8003040:	2300      	movs	r3, #0
 8003042:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b9f      	ldr	r3, [pc, #636]	; (80032e4 <UART_SetConfig+0x2b8>)
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	68f9      	ldr	r1, [r7, #12]
 8003070:	430b      	orrs	r3, r1
 8003072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a8e      	ldr	r2, [pc, #568]	; (80032e8 <UART_SetConfig+0x2bc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d121      	bne.n	80030f8 <UART_SetConfig+0xcc>
 80030b4:	4b8d      	ldr	r3, [pc, #564]	; (80032ec <UART_SetConfig+0x2c0>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d817      	bhi.n	80030f0 <UART_SetConfig+0xc4>
 80030c0:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <UART_SetConfig+0x9c>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030e5 	.word	0x080030e5
 80030d0:	080030eb 	.word	0x080030eb
 80030d4:	080030df 	.word	0x080030df
 80030d8:	2300      	movs	r3, #0
 80030da:	75fb      	strb	r3, [r7, #23]
 80030dc:	e01e      	b.n	800311c <UART_SetConfig+0xf0>
 80030de:	2302      	movs	r3, #2
 80030e0:	75fb      	strb	r3, [r7, #23]
 80030e2:	e01b      	b.n	800311c <UART_SetConfig+0xf0>
 80030e4:	2304      	movs	r3, #4
 80030e6:	75fb      	strb	r3, [r7, #23]
 80030e8:	e018      	b.n	800311c <UART_SetConfig+0xf0>
 80030ea:	2308      	movs	r3, #8
 80030ec:	75fb      	strb	r3, [r7, #23]
 80030ee:	e015      	b.n	800311c <UART_SetConfig+0xf0>
 80030f0:	2310      	movs	r3, #16
 80030f2:	75fb      	strb	r3, [r7, #23]
 80030f4:	bf00      	nop
 80030f6:	e011      	b.n	800311c <UART_SetConfig+0xf0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a7c      	ldr	r2, [pc, #496]	; (80032f0 <UART_SetConfig+0x2c4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d102      	bne.n	8003108 <UART_SetConfig+0xdc>
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
 8003106:	e009      	b.n	800311c <UART_SetConfig+0xf0>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a79      	ldr	r2, [pc, #484]	; (80032f4 <UART_SetConfig+0x2c8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d102      	bne.n	8003118 <UART_SetConfig+0xec>
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]
 8003116:	e001      	b.n	800311c <UART_SetConfig+0xf0>
 8003118:	2310      	movs	r3, #16
 800311a:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003124:	d16f      	bne.n	8003206 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d857      	bhi.n	80031dc <UART_SetConfig+0x1b0>
 800312c:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <UART_SetConfig+0x108>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003159 	.word	0x08003159
 8003138:	08003175 	.word	0x08003175
 800313c:	08003191 	.word	0x08003191
 8003140:	080031dd 	.word	0x080031dd
 8003144:	080031ab 	.word	0x080031ab
 8003148:	080031dd 	.word	0x080031dd
 800314c:	080031dd 	.word	0x080031dd
 8003150:	080031dd 	.word	0x080031dd
 8003154:	080031c7 	.word	0x080031c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003158:	f7ff f85a 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 800315c:	4603      	mov	r3, r0
 800315e:	005a      	lsls	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	441a      	add	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	82bb      	strh	r3, [r7, #20]
        break;
 8003172:	e036      	b.n	80031e2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003174:	f7ff f86e 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 8003178:	4603      	mov	r3, r0
 800317a:	005a      	lsls	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	441a      	add	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	82bb      	strh	r3, [r7, #20]
        break;
 800318e:	e028      	b.n	80031e2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800319a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6852      	ldr	r2, [r2, #4]
 80031a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80031a6:	82bb      	strh	r3, [r7, #20]
        break;
 80031a8:	e01b      	b.n	80031e2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031aa:	f7fe ffbb 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80031ae:	4603      	mov	r3, r0
 80031b0:	005a      	lsls	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	82bb      	strh	r3, [r7, #20]
        break;
 80031c4:	e00d      	b.n	80031e2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	82bb      	strh	r3, [r7, #20]
        break;
 80031da:	e002      	b.n	80031e2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	74fb      	strb	r3, [r7, #19]
        break;
 80031e0:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80031e2:	8abb      	ldrh	r3, [r7, #20]
 80031e4:	f023 030f 	bic.w	r3, r3, #15
 80031e8:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ea:	8abb      	ldrh	r3, [r7, #20]
 80031ec:	105b      	asrs	r3, r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	897a      	ldrh	r2, [r7, #10]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	e069      	b.n	80032da <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d863      	bhi.n	80032d4 <UART_SetConfig+0x2a8>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <UART_SetConfig+0x1e8>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003239 	.word	0x08003239
 8003218:	08003259 	.word	0x08003259
 800321c:	08003279 	.word	0x08003279
 8003220:	080032d5 	.word	0x080032d5
 8003224:	08003299 	.word	0x08003299
 8003228:	080032d5 	.word	0x080032d5
 800322c:	080032d5 	.word	0x080032d5
 8003230:	080032d5 	.word	0x080032d5
 8003234:	080032b9 	.word	0x080032b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003238:	f7fe ffea 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 800323c:	4602      	mov	r2, r0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	085b      	lsrs	r3, r3, #1
 8003244:	441a      	add	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	b29a      	uxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60da      	str	r2, [r3, #12]
        break;
 8003256:	e040      	b.n	80032da <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003258:	f7fe fffc 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 800325c:	4602      	mov	r2, r0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60da      	str	r2, [r3, #12]
        break;
 8003276:	e030      	b.n	80032da <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003282:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6852      	ldr	r2, [r2, #4]
 800328a:	fbb3 f3f2 	udiv	r3, r3, r2
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60da      	str	r2, [r3, #12]
        break;
 8003296:	e020      	b.n	80032da <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003298:	f7fe ff44 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	441a      	add	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60da      	str	r2, [r3, #12]
        break;
 80032b6:	e010      	b.n	80032da <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60da      	str	r2, [r3, #12]
        break;
 80032d2:	e002      	b.n	80032da <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	74fb      	strb	r3, [r7, #19]
        break;
 80032d8:	bf00      	nop
    }
  }

  return ret;
 80032da:	7cfb      	ldrb	r3, [r7, #19]

}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	efff69f3 	.word	0xefff69f3
 80032e8:	40013800 	.word	0x40013800
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40004400 	.word	0x40004400
 80032f4:	40004800 	.word	0x40004800

080032f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01a      	beq.n	800340e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f6:	d10a      	bne.n	800340e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
  }
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af02      	add	r7, sp, #8
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800344e:	f7fd fb7f 	bl	8000b50 <HAL_GetTick>
 8003452:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b08      	cmp	r3, #8
 8003460:	d10e      	bne.n	8003480 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003462:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f82c 	bl	80034ce <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e022      	b.n	80034c6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d10e      	bne.n	80034ac <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800348e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f816 	bl	80034ce <UART_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e00c      	b.n	80034c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034de:	e02c      	b.n	800353a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d028      	beq.n	800353a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0x30>
 80034ee:	f7fd fb2f 	bl	8000b50 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d21d      	bcs.n	800353a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800350c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e00f      	b.n	800355a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4013      	ands	r3, r2
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	429a      	cmp	r2, r3
 8003556:	d0c3      	beq.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003574:	2b84      	cmp	r3, #132	; 0x84
 8003576:	d005      	beq.n	8003584 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003578:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	3303      	adds	r3, #3
 8003582:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003584:	68fb      	ldr	r3, [r7, #12]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003598:	f3ef 8305 	mrs	r3, IPSR
 800359c:	607b      	str	r3, [r7, #4]
  return(result);
 800359e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80035ba:	f000 fff7 	bl	80045ac <vTaskStartScheduler>
  
  return osOK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80035c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685c      	ldr	r4, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035da:	b29e      	uxth	r6, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ffbd 	bl	8003562 <makeFreeRtosPriority>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f107 030c 	add.w	r3, r7, #12
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	9200      	str	r2, [sp, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	4632      	mov	r2, r6
 80035f6:	4629      	mov	r1, r5
 80035f8:	4620      	mov	r0, r4
 80035fa:	f000 fe7a 	bl	80042f2 <xTaskCreate>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d001      	beq.n	8003608 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003612 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <osDelay+0x16>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	e000      	b.n	800362a <osDelay+0x18>
 8003628:	2301      	movs	r3, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f000 ff8a 	bl	8004544 <vTaskDelay>
  
  return osOK;
 8003630:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8003642:	2001      	movs	r0, #1
 8003644:	f000 fa1a 	bl	8003a7c <xQueueCreateMutex>
 8003648:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <osMutexWait+0x18>
    return osErrorParameter;
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	e03c      	b.n	80036e6 <osMutexWait+0x92>
  }
  
  ticks = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d103      	bne.n	8003680 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003678:	f04f 33ff 	mov.w	r3, #4294967295
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e009      	b.n	8003694 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <osMutexWait+0x40>
      ticks = 1;
 8003690:	2301      	movs	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003694:	f7ff ff7d 	bl	8003592 <inHandlerMode>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d017      	beq.n	80036ce <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800369e:	f107 0308 	add.w	r3, r7, #8
 80036a2:	461a      	mov	r2, r3
 80036a4:	2100      	movs	r1, #0
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fc96 	bl	8003fd8 <xQueueReceiveFromISR>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d001      	beq.n	80036b6 <osMutexWait+0x62>
      return osErrorOS;
 80036b2:	23ff      	movs	r3, #255	; 0xff
 80036b4:	e017      	b.n	80036e6 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <osMutexWait+0x90>
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <osMutexWait+0x9c>)
 80036be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	e00a      	b.n	80036e4 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80036ce:	2300      	movs	r3, #0
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	2100      	movs	r1, #0
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fb6d 	bl	8003db4 <xQueueGenericReceive>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <osMutexWait+0x90>
    return osErrorOS;
 80036e0:	23ff      	movs	r3, #255	; 0xff
 80036e2:	e000      	b.n	80036e6 <osMutexWait+0x92>
  }
  
  return osOK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003704:	f7ff ff45 	bl	8003592 <inHandlerMode>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800370e:	f107 0308 	add.w	r3, r7, #8
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fac3 	bl	8003ca0 <xQueueGiveFromISR>
 800371a:	4603      	mov	r3, r0
 800371c:	2b01      	cmp	r3, #1
 800371e:	d001      	beq.n	8003724 <osMutexRelease+0x30>
      return osErrorOS;
 8003720:	23ff      	movs	r3, #255	; 0xff
 8003722:	e017      	b.n	8003754 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d013      	beq.n	8003752 <osMutexRelease+0x5e>
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <osMutexRelease+0x68>)
 800372c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	e00a      	b.n	8003752 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800373c:	2300      	movs	r3, #0
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f9b2 	bl	8003aac <xQueueGenericSend>
 8003748:	4603      	mov	r3, r0
 800374a:	2b01      	cmp	r3, #1
 800374c:	d001      	beq.n	8003752 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800374e:	23ff      	movs	r3, #255	; 0xff
 8003750:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	e000ed04 	.word	0xe000ed04

08003760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f103 0208 	add.w	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f103 0208 	add.w	r2, r3, #8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f103 0208 	add.w	r2, r3, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	601a      	str	r2, [r3, #0]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d103      	bne.n	8003822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e00c      	b.n	800383c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3308      	adds	r3, #8
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e002      	b.n	8003830 <vListInsert+0x2e>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	d2f6      	bcs.n	800382a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6852      	ldr	r2, [r2, #4]
 8003894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	429a      	cmp	r2, r3
 800389e:	d103      	bne.n	80038a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	1e5a      	subs	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	e7fe      	b.n	80038ee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80038f0:	f001 fce6 	bl	80052c0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	68f9      	ldr	r1, [r7, #12]
 80038fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	441a      	add	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	3b01      	subs	r3, #1
 8003922:	68f9      	ldr	r1, [r7, #12]
 8003924:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	441a      	add	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	22ff      	movs	r2, #255	; 0xff
 800393c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d114      	bne.n	8003970 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01a      	beq.n	8003984 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3310      	adds	r3, #16
 8003952:	4618      	mov	r0, r3
 8003954:	f001 f864 	bl	8004a20 <xTaskRemoveFromEventList>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d012      	beq.n	8003984 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800395e:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <xQueueGenericReset+0xcc>)
 8003960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	e009      	b.n	8003984 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3310      	adds	r3, #16
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fef3 	bl	8003760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3324      	adds	r3, #36	; 0x24
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff feee 	bl	8003760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003984:	f001 fcca 	bl	800531c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003988:	2301      	movs	r3, #1
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <xQueueGenericCreate+0x28>
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	e7fe      	b.n	80039be <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e004      	b.n	80039d6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3348      	adds	r3, #72	; 0x48
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 fd80 	bl	80054e0 <pvPortMalloc>
 80039e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	3348      	adds	r3, #72	; 0x48
 80039ec:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039ee:	79fa      	ldrb	r2, [r7, #7]
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f805 	bl	8003a0a <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8003a00:	69bb      	ldr	r3, [r7, #24]
	}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e002      	b.n	8003a2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a38:	2101      	movs	r1, #1
 8003a3a:	69b8      	ldr	r0, [r7, #24]
 8003a3c:	f7ff ff44 	bl	80038c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00e      	beq.n	8003a74 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f81c 	bl	8003aac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003a86:	2301      	movs	r3, #1
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	461a      	mov	r2, r3
 8003a92:	6939      	ldr	r1, [r7, #16]
 8003a94:	6978      	ldr	r0, [r7, #20]
 8003a96:	f7ff ff7f 	bl	8003998 <xQueueGenericCreate>
 8003a9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7ff ffd3 	bl	8003a48 <prvInitialiseMutex>

		return pxNewQueue;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
	}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08e      	sub	sp, #56	; 0x38
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003aba:	2300      	movs	r3, #0
 8003abc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <xQueueGenericSend+0x30>
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ada:	e7fe      	b.n	8003ada <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <xQueueGenericSend+0x3e>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <xQueueGenericSend+0x42>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <xQueueGenericSend+0x44>
 8003aee:	2300      	movs	r3, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <xQueueGenericSend+0x5c>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e7fe      	b.n	8003b06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d103      	bne.n	8003b16 <xQueueGenericSend+0x6a>
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <xQueueGenericSend+0x6e>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <xQueueGenericSend+0x70>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <xQueueGenericSend+0x88>
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	e7fe      	b.n	8003b32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b34:	f001 f92e 	bl	8004d94 <xTaskGetSchedulerState>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <xQueueGenericSend+0x98>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <xQueueGenericSend+0x9c>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <xQueueGenericSend+0x9e>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <xQueueGenericSend+0xb6>
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e7fe      	b.n	8003b60 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b62:	f001 fbad 	bl	80052c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <xQueueGenericSend+0xcc>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d129      	bne.n	8003bcc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7e:	f000 faa8 	bl	80040d2 <prvCopyDataToQueue>
 8003b82:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d010      	beq.n	8003bae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	3324      	adds	r3, #36	; 0x24
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 ff45 	bl	8004a20 <xTaskRemoveFromEventList>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b9c:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <xQueueGenericSend+0x1f0>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	e00a      	b.n	8003bc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bb4:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <xQueueGenericSend+0x1f0>)
 8003bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bc4:	f001 fbaa 	bl	800531c <vPortExitCritical>
				return pdPASS;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e063      	b.n	8003c94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d103      	bne.n	8003bda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bd2:	f001 fba3 	bl	800531c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e05c      	b.n	8003c94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 ff7d 	bl	8004ae4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bee:	f001 fb95 	bl	800531c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bf2:	f000 fd21 	bl	8004638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bf6:	f001 fb63 	bl	80052c0 <vPortEnterCritical>
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c00:	b25b      	sxtb	r3, r3
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d103      	bne.n	8003c10 <xQueueGenericSend+0x164>
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c16:	b25b      	sxtb	r3, r3
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d103      	bne.n	8003c26 <xQueueGenericSend+0x17a>
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c26:	f001 fb79 	bl	800531c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c2a:	1d3a      	adds	r2, r7, #4
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 ff7a 	bl	8004b2c <xTaskCheckForTimeOut>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d124      	bne.n	8003c88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c40:	f000 fb3f 	bl	80042c2 <prvIsQueueFull>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d018      	beq.n	8003c7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	3310      	adds	r3, #16
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fec0 	bl	80049d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5a:	f000 faca 	bl	80041f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c5e:	f000 fcf9 	bl	8004654 <xTaskResumeAll>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f47f af7c 	bne.w	8003b62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <xQueueGenericSend+0x1f0>)
 8003c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	e772      	b.n	8003b62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c7e:	f000 fab8 	bl	80041f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c82:	f000 fce7 	bl	8004654 <xTaskResumeAll>
 8003c86:	e76c      	b.n	8003b62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c8a:	f000 fab2 	bl	80041f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c8e:	f000 fce1 	bl	8004654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c92:	2300      	movs	r3, #0
		}
	}
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3738      	adds	r7, #56	; 0x38
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	e000ed04 	.word	0xe000ed04

08003ca0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08e      	sub	sp, #56	; 0x38
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <xQueueGiveFromISR+0x28>
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	e7fe      	b.n	8003cc6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d009      	beq.n	8003ce4 <xQueueGiveFromISR+0x44>
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	e7fe      	b.n	8003ce2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d103      	bne.n	8003cf4 <xQueueGiveFromISR+0x54>
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <xQueueGiveFromISR+0x58>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <xQueueGiveFromISR+0x5a>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <xQueueGiveFromISR+0x72>
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	e7fe      	b.n	8003d10 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d12:	f001 fba7 	bl	8005464 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d16:	f3ef 8211 	mrs	r2, BASEPRI
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	617a      	str	r2, [r7, #20]
 8003d2c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d22b      	bcs.n	8003d9a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d112      	bne.n	8003d84 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	3324      	adds	r3, #36	; 0x24
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fe58 	bl	8004a20 <xTaskRemoveFromEventList>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00e      	beq.n	8003d94 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e007      	b.n	8003d94 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d88:	3301      	adds	r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	b25a      	sxtb	r2, r3
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d94:	2301      	movs	r3, #1
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
 8003d98:	e001      	b.n	8003d9e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3738      	adds	r7, #56	; 0x38
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08e      	sub	sp, #56	; 0x38
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d109      	bne.n	8003de4 <xQueueGenericReceive+0x30>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
 8003de2:	e7fe      	b.n	8003de2 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <xQueueGenericReceive+0x3e>
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <xQueueGenericReceive+0x42>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <xQueueGenericReceive+0x44>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <xQueueGenericReceive+0x5c>
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	e7fe      	b.n	8003e0e <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e10:	f000 ffc0 	bl	8004d94 <xTaskGetSchedulerState>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <xQueueGenericReceive+0x6c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <xQueueGenericReceive+0x70>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <xQueueGenericReceive+0x72>
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <xQueueGenericReceive+0x8a>
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	e7fe      	b.n	8003e3c <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e3e:	f001 fa3f 	bl	80052c0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d046      	beq.n	8003edc <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e58:	f000 f9a5 	bl	80041a6 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d121      	bne.n	8003ea6 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	1e5a      	subs	r2, r3, #1
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003e72:	f001 f8a7 	bl	8004fc4 <pvTaskIncrementMutexHeldCount>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d027      	beq.n	8003ed4 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	3310      	adds	r3, #16
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fdc9 	bl	8004a20 <xTaskRemoveFromEventList>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01f      	beq.n	8003ed4 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8003e94:	4b4f      	ldr	r3, [pc, #316]	; (8003fd4 <xQueueGenericReceive+0x220>)
 8003e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	e016      	b.n	8003ed4 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eaa:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00f      	beq.n	8003ed4 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	3324      	adds	r3, #36	; 0x24
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fdb1 	bl	8004a20 <xTaskRemoveFromEventList>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d007      	beq.n	8003ed4 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ec4:	4b43      	ldr	r3, [pc, #268]	; (8003fd4 <xQueueGenericReceive+0x220>)
 8003ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003ed4:	f001 fa22 	bl	800531c <vPortExitCritical>
				return pdPASS;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e077      	b.n	8003fcc <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d103      	bne.n	8003eea <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ee2:	f001 fa1b 	bl	800531c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e070      	b.n	8003fcc <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fdf5 	bl	8004ae4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003efa:	2301      	movs	r3, #1
 8003efc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003efe:	f001 fa0d 	bl	800531c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f02:	f000 fb99 	bl	8004638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f06:	f001 f9db 	bl	80052c0 <vPortEnterCritical>
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f10:	b25b      	sxtb	r3, r3
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d103      	bne.n	8003f20 <xQueueGenericReceive+0x16c>
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d103      	bne.n	8003f36 <xQueueGenericReceive+0x182>
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f36:	f001 f9f1 	bl	800531c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f3a:	1d3a      	adds	r2, r7, #4
 8003f3c:	f107 0314 	add.w	r3, r7, #20
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fdf2 	bl	8004b2c <xTaskCheckForTimeOut>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d131      	bne.n	8003fb2 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f50:	f000 f9a1 	bl	8004296 <prvIsQueueEmpty>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d025      	beq.n	8003fa6 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d108      	bne.n	8003f74 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8003f62:	f001 f9ad 	bl	80052c0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 ff30 	bl	8004dd0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003f70:	f001 f9d4 	bl	800531c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	3324      	adds	r3, #36	; 0x24
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fd2b 	bl	80049d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f84:	f000 f935 	bl	80041f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f88:	f000 fb64 	bl	8004654 <xTaskResumeAll>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f47f af55 	bne.w	8003e3e <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <xQueueGenericReceive+0x220>)
 8003f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	e74b      	b.n	8003e3e <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fa8:	f000 f923 	bl	80041f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fac:	f000 fb52 	bl	8004654 <xTaskResumeAll>
 8003fb0:	e745      	b.n	8003e3e <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8003fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb4:	f000 f91d 	bl	80041f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fb8:	f000 fb4c 	bl	8004654 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fbe:	f000 f96a 	bl	8004296 <prvIsQueueEmpty>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f43f af3a 	beq.w	8003e3e <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3738      	adds	r7, #56	; 0x38
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	e000ed04 	.word	0xe000ed04

08003fd8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08e      	sub	sp, #56	; 0x38
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <xQueueReceiveFromISR+0x2a>
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	623b      	str	r3, [r7, #32]
 8004000:	e7fe      	b.n	8004000 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d103      	bne.n	8004010 <xQueueReceiveFromISR+0x38>
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <xQueueReceiveFromISR+0x3c>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <xQueueReceiveFromISR+0x3e>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <xQueueReceiveFromISR+0x56>
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	e7fe      	b.n	800402c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800402e:	f001 fa19 	bl	8005464 <vPortValidateInterruptPriority>
	__asm volatile
 8004032:	f3ef 8211 	mrs	r2, BASEPRI
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	61ba      	str	r2, [r7, #24]
 8004048:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800404a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	d02f      	beq.n	80040ba <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004068:	f000 f89d 	bl	80041a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	1e5a      	subs	r2, r3, #1
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004074:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d112      	bne.n	80040a4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	3310      	adds	r3, #16
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fcc8 	bl	8004a20 <xTaskRemoveFromEventList>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00e      	beq.n	80040b4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e007      	b.n	80040b4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80040a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040a8:	3301      	adds	r3, #1
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	b25a      	sxtb	r2, r3
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80040b4:	2301      	movs	r3, #1
 80040b6:	637b      	str	r3, [r7, #52]	; 0x34
 80040b8:	e001      	b.n	80040be <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
 80040be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3738      	adds	r7, #56	; 0x38
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b086      	sub	sp, #24
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10d      	bne.n	800410c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d14d      	bne.n	8004194 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fedd 	bl	8004ebc <xTaskPriorityDisinherit>
 8004102:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	e043      	b.n	8004194 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d119      	bne.n	8004146 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6898      	ldr	r0, [r3, #8]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	461a      	mov	r2, r3
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	f002 fab9 	bl	8006694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	441a      	add	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	d32b      	bcc.n	8004194 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	e026      	b.n	8004194 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68d8      	ldr	r0, [r3, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	461a      	mov	r2, r3
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	f002 fa9f 	bl	8006694 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	425b      	negs	r3, r3
 8004160:	441a      	add	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d207      	bcs.n	8004182 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	425b      	negs	r3, r3
 800417c:	441a      	add	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d105      	bne.n	8004194 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	3b01      	subs	r3, #1
 8004192:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800419c:	697b      	ldr	r3, [r7, #20]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d018      	beq.n	80041ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d303      	bcc.n	80041da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68d9      	ldr	r1, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	461a      	mov	r2, r3
 80041e4:	6838      	ldr	r0, [r7, #0]
 80041e6:	f002 fa55 	bl	8006694 <memcpy>
	}
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041fa:	f001 f861 	bl	80052c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004204:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004206:	e011      	b.n	800422c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d012      	beq.n	8004236 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3324      	adds	r3, #36	; 0x24
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fc03 	bl	8004a20 <xTaskRemoveFromEventList>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004220:	f000 fce2 	bl	8004be8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	3b01      	subs	r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800422c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004230:	2b00      	cmp	r3, #0
 8004232:	dce9      	bgt.n	8004208 <prvUnlockQueue+0x16>
 8004234:	e000      	b.n	8004238 <prvUnlockQueue+0x46>
					break;
 8004236:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	22ff      	movs	r2, #255	; 0xff
 800423c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004240:	f001 f86c 	bl	800531c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004244:	f001 f83c 	bl	80052c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800424e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004250:	e011      	b.n	8004276 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d012      	beq.n	8004280 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3310      	adds	r3, #16
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fbde 	bl	8004a20 <xTaskRemoveFromEventList>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800426a:	f000 fcbd 	bl	8004be8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800426e:	7bbb      	ldrb	r3, [r7, #14]
 8004270:	3b01      	subs	r3, #1
 8004272:	b2db      	uxtb	r3, r3
 8004274:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800427a:	2b00      	cmp	r3, #0
 800427c:	dce9      	bgt.n	8004252 <prvUnlockQueue+0x60>
 800427e:	e000      	b.n	8004282 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004280:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	22ff      	movs	r2, #255	; 0xff
 8004286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800428a:	f001 f847 	bl	800531c <vPortExitCritical>
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800429e:	f001 f80f 	bl	80052c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042aa:	2301      	movs	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e001      	b.n	80042b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042b4:	f001 f832 	bl	800531c <vPortExitCritical>

	return xReturn;
 80042b8:	68fb      	ldr	r3, [r7, #12]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042ca:	f000 fff9 	bl	80052c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d102      	bne.n	80042e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042da:	2301      	movs	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e001      	b.n	80042e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042e4:	f001 f81a 	bl	800531c <vPortExitCritical>

	return xReturn;
 80042e8:	68fb      	ldr	r3, [r7, #12]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08c      	sub	sp, #48	; 0x30
 80042f6:	af04      	add	r7, sp, #16
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f001 f8ea 	bl	80054e0 <pvPortMalloc>
 800430c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00e      	beq.n	8004332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004314:	2054      	movs	r0, #84	; 0x54
 8004316:	f001 f8e3 	bl	80054e0 <pvPortMalloc>
 800431a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
 8004328:	e005      	b.n	8004336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	f001 f99a 	bl	8005664 <vPortFree>
 8004330:	e001      	b.n	8004336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d013      	beq.n	8004364 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	2300      	movs	r3, #0
 8004340:	9303      	str	r3, [sp, #12]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	9302      	str	r3, [sp, #8]
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f80e 	bl	8004374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004358:	69f8      	ldr	r0, [r7, #28]
 800435a:	f000 f889 	bl	8004470 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800435e:	2301      	movs	r3, #1
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e002      	b.n	800436a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004364:	f04f 33ff 	mov.w	r3, #4294967295
 8004368:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800436a:	69bb      	ldr	r3, [r7, #24]
	}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800438c:	3b01      	subs	r3, #1
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f023 0307 	bic.w	r3, r3, #7
 800439a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <prvInitialiseNewTask+0x46>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e7fe      	b.n	80043b8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e012      	b.n	80043e6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	7819      	ldrb	r1, [r3, #0]
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	3334      	adds	r3, #52	; 0x34
 80043d0:	460a      	mov	r2, r1
 80043d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d006      	beq.n	80043ee <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	3301      	adds	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b0f      	cmp	r3, #15
 80043ea:	d9e9      	bls.n	80043c0 <prvInitialiseNewTask+0x4c>
 80043ec:	e000      	b.n	80043f0 <prvInitialiseNewTask+0x7c>
		{
			break;
 80043ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	2b06      	cmp	r3, #6
 80043fc:	d901      	bls.n	8004402 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043fe:	2306      	movs	r3, #6
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	2200      	movs	r2, #0
 8004412:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	3304      	adds	r3, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff f9c1 	bl	80037a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	3318      	adds	r3, #24
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff f9bc 	bl	80037a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	f1c3 0207 	rsb	r2, r3, #7
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	2200      	movs	r2, #0
 8004442:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	69b8      	ldr	r0, [r7, #24]
 8004452:	f000 fe31 	bl	80050b8 <pxPortInitialiseStack>
 8004456:	4602      	mov	r2, r0
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004466:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004468:	bf00      	nop
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004478:	f000 ff22 	bl	80052c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800447c:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <prvAddNewTaskToReadyList+0xb8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	4a29      	ldr	r2, [pc, #164]	; (8004528 <prvAddNewTaskToReadyList+0xb8>)
 8004484:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004486:	4b29      	ldr	r3, [pc, #164]	; (800452c <prvAddNewTaskToReadyList+0xbc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800448e:	4a27      	ldr	r2, [pc, #156]	; (800452c <prvAddNewTaskToReadyList+0xbc>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <prvAddNewTaskToReadyList+0xb8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d110      	bne.n	80044be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800449c:	f000 fbc8 	bl	8004c30 <prvInitialiseTaskLists>
 80044a0:	e00d      	b.n	80044be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044a2:	4b23      	ldr	r3, [pc, #140]	; (8004530 <prvAddNewTaskToReadyList+0xc0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044aa:	4b20      	ldr	r3, [pc, #128]	; (800452c <prvAddNewTaskToReadyList+0xbc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d802      	bhi.n	80044be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <prvAddNewTaskToReadyList+0xbc>)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044be:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <prvAddNewTaskToReadyList+0xc4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <prvAddNewTaskToReadyList+0xc4>)
 80044c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	2201      	movs	r2, #1
 80044ce:	409a      	lsls	r2, r3
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <prvAddNewTaskToReadyList+0xc8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	4a18      	ldr	r2, [pc, #96]	; (8004538 <prvAddNewTaskToReadyList+0xc8>)
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <prvAddNewTaskToReadyList+0xcc>)
 80044e8:	441a      	add	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f7ff f962 	bl	80037ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044f6:	f000 ff11 	bl	800531c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044fa:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <prvAddNewTaskToReadyList+0xc0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00e      	beq.n	8004520 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <prvAddNewTaskToReadyList+0xbc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	429a      	cmp	r2, r3
 800450e:	d207      	bcs.n	8004520 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <prvAddNewTaskToReadyList+0xd0>)
 8004512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000190 	.word	0x20000190
 800452c:	20000090 	.word	0x20000090
 8004530:	2000019c 	.word	0x2000019c
 8004534:	200001ac 	.word	0x200001ac
 8004538:	20000198 	.word	0x20000198
 800453c:	20000094 	.word	0x20000094
 8004540:	e000ed04 	.word	0xe000ed04

08004544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <vTaskDelay+0x60>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <vTaskDelay+0x2e>
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	e7fe      	b.n	8004570 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004572:	f000 f861 	bl	8004638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004576:	2100      	movs	r1, #0
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fd37 	bl	8004fec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800457e:	f000 f869 	bl	8004654 <xTaskResumeAll>
 8004582:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <vTaskDelay+0x64>)
 800458c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	200001b8 	.word	0x200001b8
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80045b2:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <vTaskStartScheduler+0x74>)
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	2300      	movs	r3, #0
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	2300      	movs	r3, #0
 80045bc:	2280      	movs	r2, #128	; 0x80
 80045be:	4919      	ldr	r1, [pc, #100]	; (8004624 <vTaskStartScheduler+0x78>)
 80045c0:	4819      	ldr	r0, [pc, #100]	; (8004628 <vTaskStartScheduler+0x7c>)
 80045c2:	f7ff fe96 	bl	80042f2 <xTaskCreate>
 80045c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d115      	bne.n	80045fa <vTaskStartScheduler+0x4e>
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <vTaskStartScheduler+0x80>)
 80045e2:	f04f 32ff 	mov.w	r2, #4294967295
 80045e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <vTaskStartScheduler+0x84>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80045ee:	4b11      	ldr	r3, [pc, #68]	; (8004634 <vTaskStartScheduler+0x88>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045f4:	f000 fdd8 	bl	80051a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045f8:	e00d      	b.n	8004616 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d109      	bne.n	8004616 <vTaskStartScheduler+0x6a>
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	e7fe      	b.n	8004614 <vTaskStartScheduler+0x68>
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	200001b4 	.word	0x200001b4
 8004624:	08006ecc 	.word	0x08006ecc
 8004628:	08004c01 	.word	0x08004c01
 800462c:	200001b0 	.word	0x200001b0
 8004630:	2000019c 	.word	0x2000019c
 8004634:	20000194 	.word	0x20000194

08004638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <vTaskSuspendAll+0x18>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	4a03      	ldr	r2, [pc, #12]	; (8004650 <vTaskSuspendAll+0x18>)
 8004644:	6013      	str	r3, [r2, #0]
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	200001b8 	.word	0x200001b8

08004654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004662:	4b41      	ldr	r3, [pc, #260]	; (8004768 <xTaskResumeAll+0x114>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <xTaskResumeAll+0x2a>
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	e7fe      	b.n	800467c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800467e:	f000 fe1f 	bl	80052c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004682:	4b39      	ldr	r3, [pc, #228]	; (8004768 <xTaskResumeAll+0x114>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3b01      	subs	r3, #1
 8004688:	4a37      	ldr	r2, [pc, #220]	; (8004768 <xTaskResumeAll+0x114>)
 800468a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800468c:	4b36      	ldr	r3, [pc, #216]	; (8004768 <xTaskResumeAll+0x114>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d161      	bne.n	8004758 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004694:	4b35      	ldr	r3, [pc, #212]	; (800476c <xTaskResumeAll+0x118>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05d      	beq.n	8004758 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800469c:	e02e      	b.n	80046fc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800469e:	4b34      	ldr	r3, [pc, #208]	; (8004770 <xTaskResumeAll+0x11c>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3318      	adds	r3, #24
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff f8e2 	bl	8003874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff f8dd 	bl	8003874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	2201      	movs	r2, #1
 80046c0:	409a      	lsls	r2, r3
 80046c2:	4b2c      	ldr	r3, [pc, #176]	; (8004774 <xTaskResumeAll+0x120>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <xTaskResumeAll+0x120>)
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4a27      	ldr	r2, [pc, #156]	; (8004778 <xTaskResumeAll+0x124>)
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f7ff f869 	bl	80037ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <xTaskResumeAll+0x128>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <xTaskResumeAll+0x12c>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046fc:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <xTaskResumeAll+0x11c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1cc      	bne.n	800469e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800470a:	f000 fb1d 	bl	8004d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <xTaskResumeAll+0x130>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d010      	beq.n	800473c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800471a:	f000 f847 	bl	80047ac <xTaskIncrementTick>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <xTaskResumeAll+0x12c>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3b01      	subs	r3, #1
 800472e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f1      	bne.n	800471a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <xTaskResumeAll+0x130>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <xTaskResumeAll+0x12c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d009      	beq.n	8004758 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004744:	2301      	movs	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <xTaskResumeAll+0x134>)
 800474a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004758:	f000 fde0 	bl	800531c <vPortExitCritical>

	return xAlreadyYielded;
 800475c:	68bb      	ldr	r3, [r7, #8]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	200001b8 	.word	0x200001b8
 800476c:	20000190 	.word	0x20000190
 8004770:	20000150 	.word	0x20000150
 8004774:	20000198 	.word	0x20000198
 8004778:	20000094 	.word	0x20000094
 800477c:	20000090 	.word	0x20000090
 8004780:	200001a4 	.word	0x200001a4
 8004784:	200001a0 	.word	0x200001a0
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <xTaskGetTickCount+0x1c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004798:	687b      	ldr	r3, [r7, #4]
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000194 	.word	0x20000194

080047ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b6:	4b50      	ldr	r3, [pc, #320]	; (80048f8 <xTaskIncrementTick+0x14c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f040 808c 	bne.w	80048d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80047c0:	4b4e      	ldr	r3, [pc, #312]	; (80048fc <xTaskIncrementTick+0x150>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047c8:	4a4c      	ldr	r2, [pc, #304]	; (80048fc <xTaskIncrementTick+0x150>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d11f      	bne.n	8004814 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80047d4:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <xTaskIncrementTick+0x154>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <xTaskIncrementTick+0x46>
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	e7fe      	b.n	80047f0 <xTaskIncrementTick+0x44>
 80047f2:	4b43      	ldr	r3, [pc, #268]	; (8004900 <xTaskIncrementTick+0x154>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	4b42      	ldr	r3, [pc, #264]	; (8004904 <xTaskIncrementTick+0x158>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a40      	ldr	r2, [pc, #256]	; (8004900 <xTaskIncrementTick+0x154>)
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4a40      	ldr	r2, [pc, #256]	; (8004904 <xTaskIncrementTick+0x158>)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	4b40      	ldr	r3, [pc, #256]	; (8004908 <xTaskIncrementTick+0x15c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	4a3e      	ldr	r2, [pc, #248]	; (8004908 <xTaskIncrementTick+0x15c>)
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	f000 fa9a 	bl	8004d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004814:	4b3d      	ldr	r3, [pc, #244]	; (800490c <xTaskIncrementTick+0x160>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	429a      	cmp	r2, r3
 800481c:	d34d      	bcc.n	80048ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <xTaskIncrementTick+0x154>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <xTaskIncrementTick+0x80>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <xTaskIncrementTick+0x82>
 800482c:	2300      	movs	r3, #0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004832:	4b36      	ldr	r3, [pc, #216]	; (800490c <xTaskIncrementTick+0x160>)
 8004834:	f04f 32ff 	mov.w	r2, #4294967295
 8004838:	601a      	str	r2, [r3, #0]
					break;
 800483a:	e03e      	b.n	80048ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800483c:	4b30      	ldr	r3, [pc, #192]	; (8004900 <xTaskIncrementTick+0x154>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	429a      	cmp	r2, r3
 8004852:	d203      	bcs.n	800485c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004854:	4a2d      	ldr	r2, [pc, #180]	; (800490c <xTaskIncrementTick+0x160>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6013      	str	r3, [r2, #0]
						break;
 800485a:	e02e      	b.n	80048ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	3304      	adds	r3, #4
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff f807 	bl	8003874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	3318      	adds	r3, #24
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fffe 	bl	8003874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	2201      	movs	r2, #1
 800487e:	409a      	lsls	r2, r3
 8004880:	4b23      	ldr	r3, [pc, #140]	; (8004910 <xTaskIncrementTick+0x164>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4313      	orrs	r3, r2
 8004886:	4a22      	ldr	r2, [pc, #136]	; (8004910 <xTaskIncrementTick+0x164>)
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <xTaskIncrementTick+0x168>)
 8004898:	441a      	add	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f7fe ff8a 	bl	80037ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048aa:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <xTaskIncrementTick+0x16c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d3b4      	bcc.n	800481e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b8:	e7b1      	b.n	800481e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048ba:	4b17      	ldr	r3, [pc, #92]	; (8004918 <xTaskIncrementTick+0x16c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4914      	ldr	r1, [pc, #80]	; (8004914 <xTaskIncrementTick+0x168>)
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d907      	bls.n	80048e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e004      	b.n	80048e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80048d8:	4b10      	ldr	r3, [pc, #64]	; (800491c <xTaskIncrementTick+0x170>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3301      	adds	r3, #1
 80048de:	4a0f      	ldr	r2, [pc, #60]	; (800491c <xTaskIncrementTick+0x170>)
 80048e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <xTaskIncrementTick+0x174>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80048ea:	2301      	movs	r3, #1
 80048ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80048ee:	697b      	ldr	r3, [r7, #20]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	200001b8 	.word	0x200001b8
 80048fc:	20000194 	.word	0x20000194
 8004900:	20000148 	.word	0x20000148
 8004904:	2000014c 	.word	0x2000014c
 8004908:	200001a8 	.word	0x200001a8
 800490c:	200001b0 	.word	0x200001b0
 8004910:	20000198 	.word	0x20000198
 8004914:	20000094 	.word	0x20000094
 8004918:	20000090 	.word	0x20000090
 800491c:	200001a0 	.word	0x200001a0
 8004920:	200001a4 	.word	0x200001a4

08004924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800492a:	4b26      	ldr	r3, [pc, #152]	; (80049c4 <vTaskSwitchContext+0xa0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004932:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <vTaskSwitchContext+0xa4>)
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004938:	e03e      	b.n	80049b8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800493a:	4b23      	ldr	r3, [pc, #140]	; (80049c8 <vTaskSwitchContext+0xa4>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004940:	4b22      	ldr	r3, [pc, #136]	; (80049cc <vTaskSwitchContext+0xa8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800494e:	7afb      	ldrb	r3, [r7, #11]
 8004950:	f1c3 031f 	rsb	r3, r3, #31
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	491e      	ldr	r1, [pc, #120]	; (80049d0 <vTaskSwitchContext+0xac>)
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <vTaskSwitchContext+0x5a>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	e7fe      	b.n	800497c <vTaskSwitchContext+0x58>
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4a11      	ldr	r2, [pc, #68]	; (80049d0 <vTaskSwitchContext+0xac>)
 800498a:	4413      	add	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	3308      	adds	r3, #8
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d104      	bne.n	80049ae <vTaskSwitchContext+0x8a>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <vTaskSwitchContext+0xb0>)
 80049b6:	6013      	str	r3, [r2, #0]
}
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	200001b8 	.word	0x200001b8
 80049c8:	200001a4 	.word	0x200001a4
 80049cc:	20000198 	.word	0x20000198
 80049d0:	20000094 	.word	0x20000094
 80049d4:	20000090 	.word	0x20000090

080049d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d109      	bne.n	80049fc <vTaskPlaceOnEventList+0x24>
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	e7fe      	b.n	80049fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049fc:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <vTaskPlaceOnEventList+0x44>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3318      	adds	r3, #24
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fe fefc 	bl	8003802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	6838      	ldr	r0, [r7, #0]
 8004a0e:	f000 faed 	bl	8004fec <prvAddCurrentTaskToDelayedList>
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000090 	.word	0x20000090

08004a20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <xTaskRemoveFromEventList+0x2a>
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	e7fe      	b.n	8004a48 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3318      	adds	r3, #24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe ff10 	bl	8003874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <xTaskRemoveFromEventList+0xac>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d11c      	bne.n	8004a96 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe ff07 	bl	8003874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <xTaskRemoveFromEventList+0xb0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <xTaskRemoveFromEventList+0xb0>)
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4a13      	ldr	r2, [pc, #76]	; (8004ad4 <xTaskRemoveFromEventList+0xb4>)
 8004a86:	441a      	add	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f7fe fe93 	bl	80037ba <vListInsertEnd>
 8004a94:	e005      	b.n	8004aa2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	3318      	adds	r3, #24
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	480e      	ldr	r0, [pc, #56]	; (8004ad8 <xTaskRemoveFromEventList+0xb8>)
 8004a9e:	f7fe fe8c 	bl	80037ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <xTaskRemoveFromEventList+0xbc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d905      	bls.n	8004abc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <xTaskRemoveFromEventList+0xc0>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e001      	b.n	8004ac0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004ac0:	697b      	ldr	r3, [r7, #20]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	200001b8 	.word	0x200001b8
 8004ad0:	20000198 	.word	0x20000198
 8004ad4:	20000094 	.word	0x20000094
 8004ad8:	20000150 	.word	0x20000150
 8004adc:	20000090 	.word	0x20000090
 8004ae0:	200001a4 	.word	0x200001a4

08004ae4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <vTaskSetTimeOutState+0x22>
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e7fe      	b.n	8004b04 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <vTaskSetTimeOutState+0x40>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <vTaskSetTimeOutState+0x44>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	605a      	str	r2, [r3, #4]
}
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	200001a8 	.word	0x200001a8
 8004b28:	20000194 	.word	0x20000194

08004b2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <xTaskCheckForTimeOut+0x24>
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e7fe      	b.n	8004b4e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <xTaskCheckForTimeOut+0x3e>
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	e7fe      	b.n	8004b68 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004b6a:	f000 fba9 	bl	80052c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b6e:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <xTaskCheckForTimeOut+0xb4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d102      	bne.n	8004b84 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e026      	b.n	8004bd2 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <xTaskCheckForTimeOut+0xb8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d007      	beq.n	8004ba0 <xTaskCheckForTimeOut+0x74>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e018      	b.n	8004bd2 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	1ad2      	subs	r2, r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d20e      	bcs.n	8004bce <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1acb      	subs	r3, r1, r3
 8004bbc:	441a      	add	r2, r3
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff ff8e 	bl	8004ae4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e001      	b.n	8004bd2 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004bd2:	f000 fba3 	bl	800531c <vPortExitCritical>

	return xReturn;
 8004bd6:	697b      	ldr	r3, [r7, #20]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000194 	.word	0x20000194
 8004be4:	200001a8 	.word	0x200001a8

08004be8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <vTaskMissedYield+0x14>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	200001a4 	.word	0x200001a4

08004c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c08:	f000 f852 	bl	8004cb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <prvIdleTask+0x28>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d9f9      	bls.n	8004c08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <prvIdleTask+0x2c>)
 8004c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c24:	e7f0      	b.n	8004c08 <prvIdleTask+0x8>
 8004c26:	bf00      	nop
 8004c28:	20000094 	.word	0x20000094
 8004c2c:	e000ed04 	.word	0xe000ed04

08004c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	e00c      	b.n	8004c56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <prvInitialiseTaskLists+0x60>)
 8004c48:	4413      	add	r3, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fd88 	bl	8003760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3301      	adds	r3, #1
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b06      	cmp	r3, #6
 8004c5a:	d9ef      	bls.n	8004c3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c5c:	480d      	ldr	r0, [pc, #52]	; (8004c94 <prvInitialiseTaskLists+0x64>)
 8004c5e:	f7fe fd7f 	bl	8003760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c62:	480d      	ldr	r0, [pc, #52]	; (8004c98 <prvInitialiseTaskLists+0x68>)
 8004c64:	f7fe fd7c 	bl	8003760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c68:	480c      	ldr	r0, [pc, #48]	; (8004c9c <prvInitialiseTaskLists+0x6c>)
 8004c6a:	f7fe fd79 	bl	8003760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c6e:	480c      	ldr	r0, [pc, #48]	; (8004ca0 <prvInitialiseTaskLists+0x70>)
 8004c70:	f7fe fd76 	bl	8003760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c74:	480b      	ldr	r0, [pc, #44]	; (8004ca4 <prvInitialiseTaskLists+0x74>)
 8004c76:	f7fe fd73 	bl	8003760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <prvInitialiseTaskLists+0x78>)
 8004c7c:	4a05      	ldr	r2, [pc, #20]	; (8004c94 <prvInitialiseTaskLists+0x64>)
 8004c7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <prvInitialiseTaskLists+0x7c>)
 8004c82:	4a05      	ldr	r2, [pc, #20]	; (8004c98 <prvInitialiseTaskLists+0x68>)
 8004c84:	601a      	str	r2, [r3, #0]
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000094 	.word	0x20000094
 8004c94:	20000120 	.word	0x20000120
 8004c98:	20000134 	.word	0x20000134
 8004c9c:	20000150 	.word	0x20000150
 8004ca0:	20000164 	.word	0x20000164
 8004ca4:	2000017c 	.word	0x2000017c
 8004ca8:	20000148 	.word	0x20000148
 8004cac:	2000014c 	.word	0x2000014c

08004cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cb6:	e028      	b.n	8004d0a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004cb8:	f7ff fcbe 	bl	8004638 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004cbc:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <prvCheckTasksWaitingTermination+0x6c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004ccc:	f7ff fcc2 	bl	8004654 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d119      	bne.n	8004d0a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8004cd6:	f000 faf3 	bl	80052c0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004cda:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <prvCheckTasksWaitingTermination+0x6c>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fdc4 	bl	8003874 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <prvCheckTasksWaitingTermination+0x70>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	4a0b      	ldr	r2, [pc, #44]	; (8004d20 <prvCheckTasksWaitingTermination+0x70>)
 8004cf4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <prvCheckTasksWaitingTermination+0x74>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <prvCheckTasksWaitingTermination+0x74>)
 8004cfe:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8004d00:	f000 fb0c 	bl	800531c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8004d04:	6838      	ldr	r0, [r7, #0]
 8004d06:	f000 f80f 	bl	8004d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <prvCheckTasksWaitingTermination+0x74>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1d2      	bne.n	8004cb8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000164 	.word	0x20000164
 8004d20:	20000190 	.word	0x20000190
 8004d24:	20000178 	.word	0x20000178

08004d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fc95 	bl	8005664 <vPortFree>
			vPortFree( pxTCB );
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fc92 	bl	8005664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <prvResetNextTaskUnblockTime+0x44>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <prvResetNextTaskUnblockTime+0x14>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <prvResetNextTaskUnblockTime+0x16>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <prvResetNextTaskUnblockTime+0x48>)
 8004d64:	f04f 32ff 	mov.w	r2, #4294967295
 8004d68:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d6a:	e008      	b.n	8004d7e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <prvResetNextTaskUnblockTime+0x44>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <prvResetNextTaskUnblockTime+0x48>)
 8004d7c:	6013      	str	r3, [r2, #0]
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20000148 	.word	0x20000148
 8004d90:	200001b0 	.word	0x200001b0

08004d94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <xTaskGetSchedulerState+0x34>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004da2:	2301      	movs	r3, #1
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	e008      	b.n	8004dba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004da8:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <xTaskGetSchedulerState+0x38>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004db0:	2302      	movs	r3, #2
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	e001      	b.n	8004dba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dba:	687b      	ldr	r3, [r7, #4]
	}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	2000019c 	.word	0x2000019c
 8004dcc:	200001b8 	.word	0x200001b8

08004dd0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d062      	beq.n	8004ea8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de6:	4b32      	ldr	r3, [pc, #200]	; (8004eb0 <vTaskPriorityInherit+0xe0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d25b      	bcs.n	8004ea8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	db06      	blt.n	8004e06 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df8:	4b2d      	ldr	r3, [pc, #180]	; (8004eb0 <vTaskPriorityInherit+0xe0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	f1c3 0207 	rsb	r2, r3, #7
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6959      	ldr	r1, [r3, #20]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4a27      	ldr	r2, [pc, #156]	; (8004eb4 <vTaskPriorityInherit+0xe4>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	4299      	cmp	r1, r3
 8004e1c:	d101      	bne.n	8004e22 <vTaskPriorityInherit+0x52>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <vTaskPriorityInherit+0x54>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d03a      	beq.n	8004e9e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fe fd21 	bl	8003874 <uxListRemove>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d115      	bne.n	8004e64 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3c:	491d      	ldr	r1, [pc, #116]	; (8004eb4 <vTaskPriorityInherit+0xe4>)
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <vTaskPriorityInherit+0x94>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	2201      	movs	r2, #1
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43da      	mvns	r2, r3
 8004e5a:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <vTaskPriorityInherit+0xe8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <vTaskPriorityInherit+0xe8>)
 8004e62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e64:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <vTaskPriorityInherit+0xe0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	2201      	movs	r2, #1
 8004e74:	409a      	lsls	r2, r3
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <vTaskPriorityInherit+0xe8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <vTaskPriorityInherit+0xe8>)
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4a09      	ldr	r2, [pc, #36]	; (8004eb4 <vTaskPriorityInherit+0xe4>)
 8004e8e:	441a      	add	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f7fe fc8f 	bl	80037ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e9c:	e004      	b.n	8004ea8 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e9e:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <vTaskPriorityInherit+0xe0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000090 	.word	0x20000090
 8004eb4:	20000094 	.word	0x20000094
 8004eb8:	20000198 	.word	0x20000198

08004ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d06c      	beq.n	8004fac <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ed2:	4b39      	ldr	r3, [pc, #228]	; (8004fb8 <xTaskPriorityDisinherit+0xfc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d009      	beq.n	8004ef0 <xTaskPriorityDisinherit+0x34>
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e7fe      	b.n	8004eee <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <xTaskPriorityDisinherit+0x50>
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	e7fe      	b.n	8004f0a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f10:	1e5a      	subs	r2, r3, #1
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d044      	beq.n	8004fac <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d140      	bne.n	8004fac <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fca0 	bl	8003874 <uxListRemove>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d115      	bne.n	8004f66 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3e:	491f      	ldr	r1, [pc, #124]	; (8004fbc <xTaskPriorityDisinherit+0x100>)
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <xTaskPriorityDisinherit+0xaa>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	2201      	movs	r2, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43da      	mvns	r2, r3
 8004f5c:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <xTaskPriorityDisinherit+0x104>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4013      	ands	r3, r2
 8004f62:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <xTaskPriorityDisinherit+0x104>)
 8004f64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f1c3 0207 	rsb	r2, r3, #7
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	2201      	movs	r2, #1
 8004f80:	409a      	lsls	r2, r3
 8004f82:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <xTaskPriorityDisinherit+0x104>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	4a0d      	ldr	r2, [pc, #52]	; (8004fc0 <xTaskPriorityDisinherit+0x104>)
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <xTaskPriorityDisinherit+0x100>)
 8004f9a:	441a      	add	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7fe fc09 	bl	80037ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fac:	697b      	ldr	r3, [r7, #20]
	}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000090 	.word	0x20000090
 8004fbc:	20000094 	.word	0x20000094
 8004fc0:	20000198 	.word	0x20000198

08004fc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004fc8:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd6:	3201      	adds	r2, #1
 8004fd8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004fda:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
	}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	20000090 	.word	0x20000090

08004fec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ff6:	4b29      	ldr	r3, [pc, #164]	; (800509c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ffc:	4b28      	ldr	r3, [pc, #160]	; (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3304      	adds	r3, #4
 8005002:	4618      	mov	r0, r3
 8005004:	f7fe fc36 	bl	8003874 <uxListRemove>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	2201      	movs	r2, #1
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43da      	mvns	r2, r3
 800501c:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4013      	ands	r3, r2
 8005022:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005024:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d10a      	bne.n	8005044 <prvAddCurrentTaskToDelayedList+0x58>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005034:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3304      	adds	r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	481a      	ldr	r0, [pc, #104]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800503e:	f7fe fbbc 	bl	80037ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005042:	e026      	b.n	8005092 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4413      	add	r3, r2
 800504a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800504c:	4b14      	ldr	r3, [pc, #80]	; (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	429a      	cmp	r2, r3
 800505a:	d209      	bcs.n	8005070 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800505c:	4b13      	ldr	r3, [pc, #76]	; (80050ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7fe fbca 	bl	8003802 <vListInsert>
}
 800506e:	e010      	b.n	8005092 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005070:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3304      	adds	r3, #4
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f7fe fbc0 	bl	8003802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005082:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	d202      	bcs.n	8005092 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800508c:	4a09      	ldr	r2, [pc, #36]	; (80050b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6013      	str	r3, [r2, #0]
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000194 	.word	0x20000194
 80050a0:	20000090 	.word	0x20000090
 80050a4:	20000198 	.word	0x20000198
 80050a8:	2000017c 	.word	0x2000017c
 80050ac:	2000014c 	.word	0x2000014c
 80050b0:	20000148 	.word	0x20000148
 80050b4:	200001b0 	.word	0x200001b0

080050b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b04      	subs	r3, #4
 80050c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3b04      	subs	r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f023 0201 	bic.w	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3b04      	subs	r3, #4
 80050e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050e8:	4a0c      	ldr	r2, [pc, #48]	; (800511c <pxPortInitialiseStack+0x64>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3b14      	subs	r3, #20
 80050f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3b04      	subs	r3, #4
 80050fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f06f 0202 	mvn.w	r2, #2
 8005106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3b20      	subs	r3, #32
 800510c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800510e:	68fb      	ldr	r3, [r7, #12]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	08005121 	.word	0x08005121

08005120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005126:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <prvTaskExitError+0x38>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512e:	d009      	beq.n	8005144 <prvTaskExitError+0x24>
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	e7fe      	b.n	8005142 <prvTaskExitError+0x22>
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8005156:	e7fe      	b.n	8005156 <prvTaskExitError+0x36>
 8005158:	20000008 	.word	0x20000008
 800515c:	00000000 	.word	0x00000000

08005160 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <pxCurrentTCBConst2>)
 8005162:	6819      	ldr	r1, [r3, #0]
 8005164:	6808      	ldr	r0, [r1, #0]
 8005166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	f380 8809 	msr	PSP, r0
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f380 8811 	msr	BASEPRI, r0
 800517a:	4770      	bx	lr
 800517c:	f3af 8000 	nop.w

08005180 <pxCurrentTCBConst2>:
 8005180:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop

08005188 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005188:	4806      	ldr	r0, [pc, #24]	; (80051a4 <prvPortStartFirstTask+0x1c>)
 800518a:	6800      	ldr	r0, [r0, #0]
 800518c:	6800      	ldr	r0, [r0, #0]
 800518e:	f380 8808 	msr	MSP, r0
 8005192:	b662      	cpsie	i
 8005194:	b661      	cpsie	f
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	df00      	svc	0
 80051a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051a2:	bf00      	nop
 80051a4:	e000ed08 	.word	0xe000ed08

080051a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051ae:	4b3b      	ldr	r3, [pc, #236]	; (800529c <xPortStartScheduler+0xf4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a3b      	ldr	r2, [pc, #236]	; (80052a0 <xPortStartScheduler+0xf8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d109      	bne.n	80051cc <xPortStartScheduler+0x24>
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e7fe      	b.n	80051ca <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051cc:	4b33      	ldr	r3, [pc, #204]	; (800529c <xPortStartScheduler+0xf4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <xPortStartScheduler+0xfc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d109      	bne.n	80051ea <xPortStartScheduler+0x42>
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	e7fe      	b.n	80051e8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051ea:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <xPortStartScheduler+0x100>)
 80051ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	22ff      	movs	r2, #255	; 0xff
 80051fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800520c:	b2da      	uxtb	r2, r3
 800520e:	4b27      	ldr	r3, [pc, #156]	; (80052ac <xPortStartScheduler+0x104>)
 8005210:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005212:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <xPortStartScheduler+0x108>)
 8005214:	2207      	movs	r2, #7
 8005216:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005218:	e009      	b.n	800522e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800521a:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <xPortStartScheduler+0x108>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3b01      	subs	r3, #1
 8005220:	4a23      	ldr	r2, [pc, #140]	; (80052b0 <xPortStartScheduler+0x108>)
 8005222:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	b2db      	uxtb	r3, r3
 800522c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005236:	2b80      	cmp	r3, #128	; 0x80
 8005238:	d0ef      	beq.n	800521a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800523a:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <xPortStartScheduler+0x108>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	4a1b      	ldr	r2, [pc, #108]	; (80052b0 <xPortStartScheduler+0x108>)
 8005242:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005244:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <xPortStartScheduler+0x108>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <xPortStartScheduler+0x108>)
 800524e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	b2da      	uxtb	r2, r3
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005258:	4b16      	ldr	r3, [pc, #88]	; (80052b4 <xPortStartScheduler+0x10c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <xPortStartScheduler+0x10c>)
 800525e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005262:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005264:	4b13      	ldr	r3, [pc, #76]	; (80052b4 <xPortStartScheduler+0x10c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a12      	ldr	r2, [pc, #72]	; (80052b4 <xPortStartScheduler+0x10c>)
 800526a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800526e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005270:	f000 f8d2 	bl	8005418 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005274:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <xPortStartScheduler+0x110>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800527a:	f000 f8e9 	bl	8005450 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800527e:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <xPortStartScheduler+0x114>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <xPortStartScheduler+0x114>)
 8005284:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005288:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800528a:	f7ff ff7d 	bl	8005188 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800528e:	f7ff ff47 	bl	8005120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	e000ed00 	.word	0xe000ed00
 80052a0:	410fc271 	.word	0x410fc271
 80052a4:	410fc270 	.word	0x410fc270
 80052a8:	e000e400 	.word	0xe000e400
 80052ac:	200001bc 	.word	0x200001bc
 80052b0:	200001c0 	.word	0x200001c0
 80052b4:	e000ed20 	.word	0xe000ed20
 80052b8:	20000008 	.word	0x20000008
 80052bc:	e000ef34 	.word	0xe000ef34

080052c0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052d8:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <vPortEnterCritical+0x54>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	4a0d      	ldr	r2, [pc, #52]	; (8005314 <vPortEnterCritical+0x54>)
 80052e0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <vPortEnterCritical+0x54>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10e      	bne.n	8005308 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <vPortEnterCritical+0x58>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d009      	beq.n	8005308 <vPortEnterCritical+0x48>
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	e7fe      	b.n	8005306 <vPortEnterCritical+0x46>
	}
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	20000008 	.word	0x20000008
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <vPortExitCritical+0x4c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <vPortExitCritical+0x22>
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	e7fe      	b.n	800533c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800533e:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <vPortExitCritical+0x4c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3b01      	subs	r3, #1
 8005344:	4a08      	ldr	r2, [pc, #32]	; (8005368 <vPortExitCritical+0x4c>)
 8005346:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <vPortExitCritical+0x4c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d104      	bne.n	800535a <vPortExitCritical+0x3e>
 8005350:	2300      	movs	r3, #0
 8005352:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000008 	.word	0x20000008
 800536c:	00000000 	.word	0x00000000

08005370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005370:	f3ef 8009 	mrs	r0, PSP
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <pxCurrentTCBConst>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	f01e 0f10 	tst.w	lr, #16
 8005380:	bf08      	it	eq
 8005382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538a:	6010      	str	r0, [r2, #0]
 800538c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005394:	f380 8811 	msr	BASEPRI, r0
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f7ff fac0 	bl	8004924 <vTaskSwitchContext>
 80053a4:	f04f 0000 	mov.w	r0, #0
 80053a8:	f380 8811 	msr	BASEPRI, r0
 80053ac:	bc08      	pop	{r3}
 80053ae:	6819      	ldr	r1, [r3, #0]
 80053b0:	6808      	ldr	r0, [r1, #0]
 80053b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b6:	f01e 0f10 	tst.w	lr, #16
 80053ba:	bf08      	it	eq
 80053bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053c0:	f380 8809 	msr	PSP, r0
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	f3af 8000 	nop.w

080053d0 <pxCurrentTCBConst>:
 80053d0:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop

080053d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053f0:	f7ff f9dc 	bl	80047ac <xTaskIncrementTick>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <xPortSysTickHandler+0x3c>)
 80053fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	2300      	movs	r3, #0
 8005404:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800541c:	4b08      	ldr	r3, [pc, #32]	; (8005440 <vPortSetupTimerInterrupt+0x28>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a08      	ldr	r2, [pc, #32]	; (8005444 <vPortSetupTimerInterrupt+0x2c>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	4a07      	ldr	r2, [pc, #28]	; (8005448 <vPortSetupTimerInterrupt+0x30>)
 800542a:	3b01      	subs	r3, #1
 800542c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800542e:	4b07      	ldr	r3, [pc, #28]	; (800544c <vPortSetupTimerInterrupt+0x34>)
 8005430:	2207      	movs	r2, #7
 8005432:	601a      	str	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	2000000c 	.word	0x2000000c
 8005444:	10624dd3 	.word	0x10624dd3
 8005448:	e000e014 	.word	0xe000e014
 800544c:	e000e010 	.word	0xe000e010

08005450 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005450:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005460 <vPortEnableVFP+0x10>
 8005454:	6801      	ldr	r1, [r0, #0]
 8005456:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800545a:	6001      	str	r1, [r0, #0]
 800545c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800545e:	bf00      	nop
 8005460:	e000ed88 	.word	0xe000ed88

08005464 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800546a:	f3ef 8305 	mrs	r3, IPSR
 800546e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b0f      	cmp	r3, #15
 8005474:	d913      	bls.n	800549e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005476:	4a16      	ldr	r2, [pc, #88]	; (80054d0 <vPortValidateInterruptPriority+0x6c>)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005480:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <vPortValidateInterruptPriority+0x70>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	7afa      	ldrb	r2, [r7, #11]
 8005486:	429a      	cmp	r2, r3
 8005488:	d209      	bcs.n	800549e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	607b      	str	r3, [r7, #4]
 800549c:	e7fe      	b.n	800549c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <vPortValidateInterruptPriority+0x74>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054a6:	4b0d      	ldr	r3, [pc, #52]	; (80054dc <vPortValidateInterruptPriority+0x78>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d909      	bls.n	80054c2 <vPortValidateInterruptPriority+0x5e>
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	e7fe      	b.n	80054c0 <vPortValidateInterruptPriority+0x5c>
	}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	e000e3f0 	.word	0xe000e3f0
 80054d4:	200001bc 	.word	0x200001bc
 80054d8:	e000ed0c 	.word	0xe000ed0c
 80054dc:	200001c0 	.word	0x200001c0

080054e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054ec:	f7ff f8a4 	bl	8004638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054f0:	4b57      	ldr	r3, [pc, #348]	; (8005650 <pvPortMalloc+0x170>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054f8:	f000 f90c 	bl	8005714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054fc:	4b55      	ldr	r3, [pc, #340]	; (8005654 <pvPortMalloc+0x174>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	f040 808c 	bne.w	8005622 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01c      	beq.n	800554a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005510:	2208      	movs	r2, #8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4413      	add	r3, r2
 8005516:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	2b00      	cmp	r3, #0
 8005520:	d013      	beq.n	800554a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f023 0307 	bic.w	r3, r3, #7
 8005528:	3308      	adds	r3, #8
 800552a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <pvPortMalloc+0x6a>
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	e7fe      	b.n	8005548 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d068      	beq.n	8005622 <pvPortMalloc+0x142>
 8005550:	4b41      	ldr	r3, [pc, #260]	; (8005658 <pvPortMalloc+0x178>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d863      	bhi.n	8005622 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800555a:	4b40      	ldr	r3, [pc, #256]	; (800565c <pvPortMalloc+0x17c>)
 800555c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800555e:	4b3f      	ldr	r3, [pc, #252]	; (800565c <pvPortMalloc+0x17c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005564:	e004      	b.n	8005570 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	429a      	cmp	r2, r3
 8005578:	d903      	bls.n	8005582 <pvPortMalloc+0xa2>
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f1      	bne.n	8005566 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005582:	4b33      	ldr	r3, [pc, #204]	; (8005650 <pvPortMalloc+0x170>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005588:	429a      	cmp	r2, r3
 800558a:	d04a      	beq.n	8005622 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2208      	movs	r2, #8
 8005592:	4413      	add	r3, r2
 8005594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	1ad2      	subs	r2, r2, r3
 80055a6:	2308      	movs	r3, #8
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d91e      	bls.n	80055ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <pvPortMalloc+0xf4>
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e7fe      	b.n	80055d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055e6:	69b8      	ldr	r0, [r7, #24]
 80055e8:	f000 f8f6 	bl	80057d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055ec:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <pvPortMalloc+0x178>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	4a18      	ldr	r2, [pc, #96]	; (8005658 <pvPortMalloc+0x178>)
 80055f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055fa:	4b17      	ldr	r3, [pc, #92]	; (8005658 <pvPortMalloc+0x178>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b18      	ldr	r3, [pc, #96]	; (8005660 <pvPortMalloc+0x180>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d203      	bcs.n	800560e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <pvPortMalloc+0x178>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a15      	ldr	r2, [pc, #84]	; (8005660 <pvPortMalloc+0x180>)
 800560c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	4b10      	ldr	r3, [pc, #64]	; (8005654 <pvPortMalloc+0x174>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	431a      	orrs	r2, r3
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005622:	f7ff f817 	bl	8004654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <pvPortMalloc+0x164>
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	e7fe      	b.n	8005642 <pvPortMalloc+0x162>
	return pvReturn;
 8005644:	69fb      	ldr	r3, [r7, #28]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3728      	adds	r7, #40	; 0x28
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20001494 	.word	0x20001494
 8005654:	200014a0 	.word	0x200014a0
 8005658:	20001498 	.word	0x20001498
 800565c:	2000148c 	.word	0x2000148c
 8005660:	2000149c 	.word	0x2000149c

08005664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d046      	beq.n	8005704 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005676:	2308      	movs	r3, #8
 8005678:	425b      	negs	r3, r3
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4413      	add	r3, r2
 800567e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	4b20      	ldr	r3, [pc, #128]	; (800570c <vPortFree+0xa8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <vPortFree+0x42>
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e7fe      	b.n	80056a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <vPortFree+0x5e>
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	e7fe      	b.n	80056c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <vPortFree+0xa8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d019      	beq.n	8005704 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d115      	bne.n	8005704 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <vPortFree+0xa8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	401a      	ands	r2, r3
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056e8:	f7fe ffa6 	bl	8004638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <vPortFree+0xac>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4413      	add	r3, r2
 80056f6:	4a06      	ldr	r2, [pc, #24]	; (8005710 <vPortFree+0xac>)
 80056f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056fa:	6938      	ldr	r0, [r7, #16]
 80056fc:	f000 f86c 	bl	80057d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005700:	f7fe ffa8 	bl	8004654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005704:	bf00      	nop
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	200014a0 	.word	0x200014a0
 8005710:	20001498 	.word	0x20001498

08005714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800571a:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800571e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005720:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <prvHeapInit+0xac>)
 8005722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3307      	adds	r3, #7
 8005732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0307 	bic.w	r3, r3, #7
 800573a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	4a1f      	ldr	r2, [pc, #124]	; (80057c0 <prvHeapInit+0xac>)
 8005744:	4413      	add	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800574c:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <prvHeapInit+0xb0>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005752:	4b1c      	ldr	r3, [pc, #112]	; (80057c4 <prvHeapInit+0xb0>)
 8005754:	2200      	movs	r2, #0
 8005756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4413      	add	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005760:	2208      	movs	r2, #8
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0307 	bic.w	r3, r3, #7
 800576e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <prvHeapInit+0xb4>)
 8005774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <prvHeapInit+0xb4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800577e:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <prvHeapInit+0xb4>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	1ad2      	subs	r2, r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005794:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <prvHeapInit+0xb4>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <prvHeapInit+0xb8>)
 80057a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <prvHeapInit+0xbc>)
 80057aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <prvHeapInit+0xc0>)
 80057ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057b2:	601a      	str	r2, [r3, #0]
}
 80057b4:	bf00      	nop
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	200001c4 	.word	0x200001c4
 80057c4:	2000148c 	.word	0x2000148c
 80057c8:	20001494 	.word	0x20001494
 80057cc:	2000149c 	.word	0x2000149c
 80057d0:	20001498 	.word	0x20001498
 80057d4:	200014a0 	.word	0x200014a0

080057d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057e0:	4b28      	ldr	r3, [pc, #160]	; (8005884 <prvInsertBlockIntoFreeList+0xac>)
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e002      	b.n	80057ec <prvInsertBlockIntoFreeList+0x14>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d8f7      	bhi.n	80057e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	4413      	add	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d108      	bne.n	800581a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	441a      	add	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	441a      	add	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d118      	bne.n	8005860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b15      	ldr	r3, [pc, #84]	; (8005888 <prvInsertBlockIntoFreeList+0xb0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d00d      	beq.n	8005856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	441a      	add	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e008      	b.n	8005868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005856:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <prvInsertBlockIntoFreeList+0xb0>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e003      	b.n	8005868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d002      	beq.n	8005876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	2000148c 	.word	0x2000148c
 8005888:	20001494 	.word	0x20001494

0800588c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800588c:	b5b0      	push	{r4, r5, r7, lr}
 800588e:	b0a2      	sub	sp, #136	; 0x88
 8005890:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005892:	f7fb f903 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005896:	f000 f8c1 	bl	8005a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800589a:	f000 f96f 	bl	8005b7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800589e:	f000 f93d 	bl	8005b1c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80058a2:	f000 f8fd 	bl	8005aa0 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MtxAcelerador */
  osMutexDef(MtxAcelerador);
 80058a6:	2300      	movs	r3, #0
 80058a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MtxAceleradorHandle = osMutexCreate(osMutex(MtxAcelerador));
 80058ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fd fec2 	bl	800363a <osMutexCreate>
 80058b6:	4602      	mov	r2, r0
 80058b8:	4b47      	ldr	r3, [pc, #284]	; (80059d8 <main+0x14c>)
 80058ba:	601a      	str	r2, [r3, #0]

  /* definition and creation of MtxQntCombustivel */
  osMutexDef(MtxQntCombustivel);
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  MtxQntCombustivelHandle = osMutexCreate(osMutex(MtxQntCombustivel));
 80058c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fd feb7 	bl	800363a <osMutexCreate>
 80058cc:	4602      	mov	r2, r0
 80058ce:	4b43      	ldr	r3, [pc, #268]	; (80059dc <main+0x150>)
 80058d0:	601a      	str	r2, [r3, #0]

  /* definition and creation of MtxInformacoes */
  osMutexDef(MtxInformacoes);
 80058d2:	2300      	movs	r3, #0
 80058d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  MtxInformacoesHandle = osMutexCreate(osMutex(MtxInformacoes));
 80058d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fd fead 	bl	800363a <osMutexCreate>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b3f      	ldr	r3, [pc, #252]	; (80059e0 <main+0x154>)
 80058e4:	601a      	str	r2, [r3, #0]

  /* definition and creation of MtxConst */
  osMutexDef(MtxConst);
 80058e6:	2300      	movs	r3, #0
 80058e8:	67bb      	str	r3, [r7, #120]	; 0x78
  MtxConstHandle = osMutexCreate(osMutex(MtxConst));
 80058ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fd fea3 	bl	800363a <osMutexCreate>
 80058f4:	4602      	mov	r2, r0
 80058f6:	4b3b      	ldr	r3, [pc, #236]	; (80059e4 <main+0x158>)
 80058f8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskLeituraAcel */
  osThreadDef(taskLeituraAcel, StartLeituraAcel, osPriorityHigh, 0, 128);
 80058fa:	4b3b      	ldr	r3, [pc, #236]	; (80059e8 <main+0x15c>)
 80058fc:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8005900:	461d      	mov	r5, r3
 8005902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005906:	682b      	ldr	r3, [r5, #0]
 8005908:	6023      	str	r3, [r4, #0]
  taskLeituraAcelHandle = osThreadCreate(osThread(taskLeituraAcel), NULL);
 800590a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f7fd fe57 	bl	80035c4 <osThreadCreate>
 8005916:	4602      	mov	r2, r0
 8005918:	4b34      	ldr	r3, [pc, #208]	; (80059ec <main+0x160>)
 800591a:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskLeituraSens */
  osThreadDef(taskLeituraSens, StartLeituraSens, osPriorityNormal, 0, 128);
 800591c:	4b34      	ldr	r3, [pc, #208]	; (80059f0 <main+0x164>)
 800591e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005922:	461d      	mov	r5, r3
 8005924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	6023      	str	r3, [r4, #0]
  taskLeituraSensHandle = osThreadCreate(osThread(taskLeituraSens), NULL);
 800592c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005930:	2100      	movs	r1, #0
 8005932:	4618      	mov	r0, r3
 8005934:	f7fd fe46 	bl	80035c4 <osThreadCreate>
 8005938:	4602      	mov	r2, r0
 800593a:	4b2e      	ldr	r3, [pc, #184]	; (80059f4 <main+0x168>)
 800593c:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskProcessamen */
  osThreadDef(taskProcessamen, StartProcessamen, osPriorityHigh, 0, 128);
 800593e:	4b2e      	ldr	r3, [pc, #184]	; (80059f8 <main+0x16c>)
 8005940:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005944:	461d      	mov	r5, r3
 8005946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800594a:	682b      	ldr	r3, [r5, #0]
 800594c:	6023      	str	r3, [r4, #0]
  taskProcessamenHandle = osThreadCreate(osThread(taskProcessamen), NULL);
 800594e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f7fd fe35 	bl	80035c4 <osThreadCreate>
 800595a:	4602      	mov	r2, r0
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <main+0x170>)
 800595e:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskAcionamento */
  osThreadDef(taskAcionamento, StartAcionamento, osPriorityHigh, 0, 128);
 8005960:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <main+0x174>)
 8005962:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005966:	461d      	mov	r5, r3
 8005968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800596a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	6023      	str	r3, [r4, #0]
  taskAcionamentoHandle = osThreadCreate(osThread(taskAcionamento), NULL);
 8005970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005974:	2100      	movs	r1, #0
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd fe24 	bl	80035c4 <osThreadCreate>
 800597c:	4602      	mov	r2, r0
 800597e:	4b21      	ldr	r3, [pc, #132]	; (8005a04 <main+0x178>)
 8005980:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskEscritaMemo */
  osThreadDef(taskEscritaMemo, StartEscritaMemoria, osPriorityIdle, 0, 128);
 8005982:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <main+0x17c>)
 8005984:	f107 0414 	add.w	r4, r7, #20
 8005988:	461d      	mov	r5, r3
 800598a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800598c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	6023      	str	r3, [r4, #0]
  taskEscritaMemoHandle = osThreadCreate(osThread(taskEscritaMemo), NULL);
 8005992:	f107 0314 	add.w	r3, r7, #20
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f7fd fe13 	bl	80035c4 <osThreadCreate>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <main+0x180>)
 80059a2:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskEscritaDisp */
  osThreadDef(taskEscritaDisp, StartEscritaDisplay, osPriorityIdle, 0, 128);
 80059a4:	4b1a      	ldr	r3, [pc, #104]	; (8005a10 <main+0x184>)
 80059a6:	463c      	mov	r4, r7
 80059a8:	461d      	mov	r5, r3
 80059aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059ae:	682b      	ldr	r3, [r5, #0]
 80059b0:	6023      	str	r3, [r4, #0]
  taskEscritaDispHandle = osThreadCreate(osThread(taskEscritaDisp), NULL);
 80059b2:	463b      	mov	r3, r7
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fd fe04 	bl	80035c4 <osThreadCreate>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <main+0x188>)
 80059c0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  LCD_Init();
 80059c2:	f000 fd13 	bl	80063ec <LCD_Init>
  LCD_Write_String(0, 0, "Teste");
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <main+0x18c>)
 80059c8:	2100      	movs	r1, #0
 80059ca:	2000      	movs	r0, #0
 80059cc:	f000 fd96 	bl	80064fc <LCD_Write_String>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80059d0:	f7fd fdf1 	bl	80035b6 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80059d4:	e7fe      	b.n	80059d4 <main+0x148>
 80059d6:	bf00      	nop
 80059d8:	200014cc 	.word	0x200014cc
 80059dc:	200014d8 	.word	0x200014d8
 80059e0:	200014d0 	.word	0x200014d0
 80059e4:	200015b8 	.word	0x200015b8
 80059e8:	08006eec 	.word	0x08006eec
 80059ec:	200014bc 	.word	0x200014bc
 80059f0:	08006f10 	.word	0x08006f10
 80059f4:	200014c8 	.word	0x200014c8
 80059f8:	08006f34 	.word	0x08006f34
 80059fc:	200014b4 	.word	0x200014b4
 8005a00:	08006f58 	.word	0x08006f58
 8005a04:	200014b8 	.word	0x200014b8
 8005a08:	08006f7c 	.word	0x08006f7c
 8005a0c:	200015b4 	.word	0x200015b4
 8005a10:	08006fa0 	.word	0x08006fa0
 8005a14:	200014c4 	.word	0x200014c4
 8005a18:	08006ed4 	.word	0x08006ed4

08005a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b090      	sub	sp, #64	; 0x40
 8005a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a22:	f107 0318 	add.w	r3, r7, #24
 8005a26:	2228      	movs	r2, #40	; 0x28
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fe3d 	bl	80066aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a30:	1d3b      	adds	r3, r7, #4
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	609a      	str	r2, [r3, #8]
 8005a3a:	60da      	str	r2, [r3, #12]
 8005a3c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a3e:	2302      	movs	r3, #2
 8005a40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a42:	2301      	movs	r3, #1
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a46:	2310      	movs	r3, #16
 8005a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8005a52:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a58:	f107 0318 	add.w	r3, r7, #24
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fb faf7 	bl	8001050 <HAL_RCC_OscConfig>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8005a68:	f000 fb6c 	bl	8006144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a6c:	230f      	movs	r3, #15
 8005a6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a70:	2302      	movs	r3, #2
 8005a72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005a82:	1d3b      	adds	r3, r7, #4
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fc f9d0 	bl	8001e2c <HAL_RCC_ClockConfig>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8005a92:	f000 fb57 	bl	8006144 <Error_Handler>
  }
}
 8005a96:	bf00      	nop
 8005a98:	3740      	adds	r7, #64	; 0x40
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005aa4:	4b1b      	ldr	r3, [pc, #108]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005aa6:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <MX_SPI1_Init+0x78>)
 8005aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005aaa:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005ab2:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ab8:	4b16      	ldr	r3, [pc, #88]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005aba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005abe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ac0:	4b14      	ldr	r3, [pc, #80]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ac6:	4b13      	ldr	r3, [pc, #76]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005acc:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005ad6:	2238      	movs	r2, #56	; 0x38
 8005ad8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ada:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005aec:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005aee:	2207      	movs	r2, #7
 8005af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005af2:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005afa:	2208      	movs	r2, #8
 8005afc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005afe:	4805      	ldr	r0, [pc, #20]	; (8005b14 <MX_SPI1_Init+0x74>)
 8005b00:	f7fc fbca 	bl	8002298 <HAL_SPI_Init>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005b0a:	f000 fb1b 	bl	8006144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	200014dc 	.word	0x200014dc
 8005b18:	40013000 	.word	0x40013000

08005b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b20:	4b14      	ldr	r3, [pc, #80]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b22:	4a15      	ldr	r2, [pc, #84]	; (8005b78 <MX_USART2_UART_Init+0x5c>)
 8005b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8005b26:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b28:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b2e:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b34:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b40:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b42:	220c      	movs	r2, #12
 8005b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b52:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b5e:	4805      	ldr	r0, [pc, #20]	; (8005b74 <MX_USART2_UART_Init+0x58>)
 8005b60:	f7fd fa13 	bl	8002f8a <HAL_UART_Init>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005b6a:	f000 faeb 	bl	8006144 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20001544 	.word	0x20001544
 8005b78:	40004400 	.word	0x40004400

08005b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	; 0x28
 8005b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b82:	f107 0314 	add.w	r3, r7, #20
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	609a      	str	r2, [r3, #8]
 8005b8e:	60da      	str	r2, [r3, #12]
 8005b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b92:	4b41      	ldr	r3, [pc, #260]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4a40      	ldr	r2, [pc, #256]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b9c:	6153      	str	r3, [r2, #20]
 8005b9e:	4b3e      	ldr	r3, [pc, #248]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005baa:	4b3b      	ldr	r3, [pc, #236]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	4a3a      	ldr	r2, [pc, #232]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005bb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bb4:	6153      	str	r3, [r2, #20]
 8005bb6:	4b38      	ldr	r3, [pc, #224]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc2:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	4a34      	ldr	r2, [pc, #208]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bcc:	6153      	str	r3, [r2, #20]
 8005bce:	4b32      	ldr	r3, [pc, #200]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	60bb      	str	r3, [r7, #8]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bda:	4b2f      	ldr	r3, [pc, #188]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	4a2e      	ldr	r2, [pc, #184]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005be4:	6153      	str	r3, [r2, #20]
 8005be6:	4b2c      	ldr	r3, [pc, #176]	; (8005c98 <MX_GPIO_Init+0x11c>)
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bee:	607b      	str	r3, [r7, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_OXIGENIO_Pin|EN_ACELERADOR_Pin|EN_MEMORIA_Pin|LCD_CE_Pin 
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f44f 6156 	mov.w	r1, #3424	; 0xd60
 8005bf8:	4828      	ldr	r0, [pc, #160]	; (8005c9c <MX_GPIO_Init+0x120>)
 8005bfa:	f7fb fa11 	bl	8001020 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8005c04:	4826      	ldr	r0, [pc, #152]	; (8005ca0 <MX_GPIO_Init+0x124>)
 8005c06:	f7fb fa0b 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|EN_TEMPERATURA_Pin, GPIO_PIN_RESET);
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c14:	f7fb fa04 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c1e:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <MX_GPIO_Init+0x128>)
 8005c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	481b      	ldr	r0, [pc, #108]	; (8005c9c <MX_GPIO_Init+0x120>)
 8005c2e:	f7fb f881 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_OXIGENIO_Pin EN_ACELERADOR_Pin EN_MEMORIA_Pin LCD_CE_Pin 
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = EN_OXIGENIO_Pin|EN_ACELERADOR_Pin|EN_MEMORIA_Pin|LCD_CE_Pin 
 8005c32:	f44f 6356 	mov.w	r3, #3424	; 0xd60
 8005c36:	617b      	str	r3, [r7, #20]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c40:	2300      	movs	r3, #0
 8005c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c44:	f107 0314 	add.w	r3, r7, #20
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4814      	ldr	r0, [pc, #80]	; (8005c9c <MX_GPIO_Init+0x120>)
 8005c4c:	f7fb f872 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LCD_RST_Pin;
 8005c50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c56:	2301      	movs	r3, #1
 8005c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c62:	f107 0314 	add.w	r3, r7, #20
 8005c66:	4619      	mov	r1, r3
 8005c68:	480d      	ldr	r0, [pc, #52]	; (8005ca0 <MX_GPIO_Init+0x124>)
 8005c6a:	f7fb f863 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin EN_TEMPERATURA_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|EN_TEMPERATURA_Pin;
 8005c6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c74:	2301      	movs	r3, #1
 8005c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c80:	f107 0314 	add.w	r3, r7, #20
 8005c84:	4619      	mov	r1, r3
 8005c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c8a:	f7fb f853 	bl	8000d34 <HAL_GPIO_Init>

}
 8005c8e:	bf00      	nop
 8005c90:	3728      	adds	r7, #40	; 0x28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	48000800 	.word	0x48000800
 8005ca0:	48000400 	.word	0x48000400
 8005ca4:	10210000 	.word	0x10210000

08005ca8 <StartLeituraAcel>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartLeituraAcel */
void StartLeituraAcel(void const * argument)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t aceleradorLocal = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	73fb      	strb	r3, [r7, #15]
	uint8_t sensorOxg_TempLocal[2];
	TickType_t xTimeBefore, xTotalTimeSuspended;


	/* Armazena o valor da contagem de tempo inicial */
	xTimeBefore = xTaskGetTickCount();
 8005cb4:	f7fe fd6a 	bl	800478c <xTaskGetTickCount>
 8005cb8:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
		/* A cada repeti��o calcula a diferen�a de tempo para o tempo inicial*/
		xTotalTimeSuspended = xTaskGetTickCount() - xTimeBefore;
 8005cba:	f7fe fd67 	bl	800478c <xTaskGetTickCount>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	613b      	str	r3, [r7, #16]

		/* se o tempo chegou ao limite desejado realiza alguma a��o e come�a a contagem novamente a partir do momento atual*/
//		if (xTotalTimeSuspended >= 1000){

			/* Armazena o valor da contagem de tempo atual */
			xTimeBefore = xTaskGetTickCount();
 8005cc6:	f7fe fd61 	bl	800478c <xTaskGetTickCount>
 8005cca:	6178      	str	r0, [r7, #20]

			aceleradorLocal = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73fb      	strb	r3, [r7, #15]
			  HAL_GPIO_WritePin(EN_ACELERADOR_GPIO_Port, EN_ACELERADOR_Pin, 0);
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2140      	movs	r1, #64	; 0x40
 8005cd4:	483f      	ldr	r0, [pc, #252]	; (8005dd4 <StartLeituraAcel+0x12c>)
 8005cd6:	f7fb f9a3 	bl	8001020 <HAL_GPIO_WritePin>
			  HAL_SPI_Receive(&hspi1, &aceleradorLocal, 1, 1000);
 8005cda:	f107 010f 	add.w	r1, r7, #15
 8005cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	483c      	ldr	r0, [pc, #240]	; (8005dd8 <StartLeituraAcel+0x130>)
 8005ce6:	f7fc fcb7 	bl	8002658 <HAL_SPI_Receive>
			  HAL_GPIO_WritePin(EN_ACELERADOR_GPIO_Port, EN_ACELERADOR_Pin, 1);
 8005cea:	2201      	movs	r2, #1
 8005cec:	2140      	movs	r1, #64	; 0x40
 8005cee:	4839      	ldr	r0, [pc, #228]	; (8005dd4 <StartLeituraAcel+0x12c>)
 8005cf0:	f7fb f996 	bl	8001020 <HAL_GPIO_WritePin>
			  aceleradorLocal = ((int)(- 128 + aceleradorLocal))*100/63;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	3b80      	subs	r3, #128	; 0x80
 8005cf8:	2264      	movs	r2, #100	; 0x64
 8005cfa:	fb02 f303 	mul.w	r3, r2, r3
 8005cfe:	4a37      	ldr	r2, [pc, #220]	; (8005ddc <StartLeituraAcel+0x134>)
 8005d00:	fb82 1203 	smull	r1, r2, r2, r3
 8005d04:	441a      	add	r2, r3
 8005d06:	1152      	asrs	r2, r2, #5
 8005d08:	17db      	asrs	r3, r3, #31
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	73fb      	strb	r3, [r7, #15]

			  // ===============================================


			  sensorOxg_TempLocal[0] = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	733b      	strb	r3, [r7, #12]
			  sensorOxg_TempLocal[1] = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	737b      	strb	r3, [r7, #13]

			  HAL_GPIO_WritePin(EN_OXIGENIO_GPIO_Port, EN_OXIGENIO_Pin, 0);
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2120      	movs	r1, #32
 8005d1c:	482d      	ldr	r0, [pc, #180]	; (8005dd4 <StartLeituraAcel+0x12c>)
 8005d1e:	f7fb f97f 	bl	8001020 <HAL_GPIO_WritePin>
			  HAL_SPI_Receive(&hspi1, &sensorOxg_TempLocal[0], 1, 1000);
 8005d22:	f107 010c 	add.w	r1, r7, #12
 8005d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	482a      	ldr	r0, [pc, #168]	; (8005dd8 <StartLeituraAcel+0x130>)
 8005d2e:	f7fc fc93 	bl	8002658 <HAL_SPI_Receive>
			  HAL_GPIO_WritePin(EN_OXIGENIO_GPIO_Port, EN_OXIGENIO_Pin, 1);
 8005d32:	2201      	movs	r2, #1
 8005d34:	2120      	movs	r1, #32
 8005d36:	4827      	ldr	r0, [pc, #156]	; (8005dd4 <StartLeituraAcel+0x12c>)
 8005d38:	f7fb f972 	bl	8001020 <HAL_GPIO_WritePin>
			  sensorOxg_TempLocal[0] = ((int)(- 128 + sensorOxg_TempLocal[0]))*100/63;
 8005d3c:	7b3b      	ldrb	r3, [r7, #12]
 8005d3e:	3b80      	subs	r3, #128	; 0x80
 8005d40:	2264      	movs	r2, #100	; 0x64
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	4a25      	ldr	r2, [pc, #148]	; (8005ddc <StartLeituraAcel+0x134>)
 8005d48:	fb82 1203 	smull	r1, r2, r2, r3
 8005d4c:	441a      	add	r2, r3
 8005d4e:	1152      	asrs	r2, r2, #5
 8005d50:	17db      	asrs	r3, r3, #31
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	733b      	strb	r3, [r7, #12]

			  HAL_GPIO_WritePin(EN_TEMPERATURA_GPIO_Port, EN_TEMPERATURA_Pin, 0);
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d62:	f7fb f95d 	bl	8001020 <HAL_GPIO_WritePin>
			  HAL_SPI_Receive(&hspi1, &sensorOxg_TempLocal[1], 1, 1000);
 8005d66:	f107 030c 	add.w	r3, r7, #12
 8005d6a:	1c59      	adds	r1, r3, #1
 8005d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d70:	2201      	movs	r2, #1
 8005d72:	4819      	ldr	r0, [pc, #100]	; (8005dd8 <StartLeituraAcel+0x130>)
 8005d74:	f7fc fc70 	bl	8002658 <HAL_SPI_Receive>
			  HAL_GPIO_WritePin(EN_TEMPERATURA_GPIO_Port, EN_TEMPERATURA_Pin, 1);
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d82:	f7fb f94d 	bl	8001020 <HAL_GPIO_WritePin>
			  sensorOxg_TempLocal[1] = ((int)(- 128 + sensorOxg_TempLocal[1]))*100/63;
 8005d86:	7b7b      	ldrb	r3, [r7, #13]
 8005d88:	3b80      	subs	r3, #128	; 0x80
 8005d8a:	2264      	movs	r2, #100	; 0x64
 8005d8c:	fb02 f303 	mul.w	r3, r2, r3
 8005d90:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <StartLeituraAcel+0x134>)
 8005d92:	fb82 1203 	smull	r1, r2, r2, r3
 8005d96:	441a      	add	r2, r3
 8005d98:	1152      	asrs	r2, r2, #5
 8005d9a:	17db      	asrs	r3, r3, #31
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	737b      	strb	r3, [r7, #13]

			  osMutexWait(MtxAceleradorHandle,1000);
 8005da2:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <StartLeituraAcel+0x138>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fd fc52 	bl	8003654 <osMutexWait>
			  aceleradorGlobal = aceleradorLocal;
 8005db0:	7bfa      	ldrb	r2, [r7, #15]
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <StartLeituraAcel+0x13c>)
 8005db4:	701a      	strb	r2, [r3, #0]
			  sensorOxg_TempGlobal[0] = sensorOxg_TempLocal[0];
 8005db6:	7b3a      	ldrb	r2, [r7, #12]
 8005db8:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <StartLeituraAcel+0x140>)
 8005dba:	701a      	strb	r2, [r3, #0]
			  sensorOxg_TempGlobal[1] = sensorOxg_TempLocal[1];
 8005dbc:	7b7a      	ldrb	r2, [r7, #13]
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <StartLeituraAcel+0x140>)
 8005dc0:	705a      	strb	r2, [r3, #1]
			  osMutexRelease(MtxAceleradorHandle);
 8005dc2:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <StartLeituraAcel+0x138>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fd fc94 	bl	80036f4 <osMutexRelease>

//		}
	  osDelay(100);
 8005dcc:	2064      	movs	r0, #100	; 0x64
 8005dce:	f7fd fc20 	bl	8003612 <osDelay>
		xTotalTimeSuspended = xTaskGetTickCount() - xTimeBefore;
 8005dd2:	e772      	b.n	8005cba <StartLeituraAcel+0x12>
 8005dd4:	48000800 	.word	0x48000800
 8005dd8:	200014dc 	.word	0x200014dc
 8005ddc:	82082083 	.word	0x82082083
 8005de0:	200014cc 	.word	0x200014cc
 8005de4:	200015bc 	.word	0x200015bc
 8005de8:	200014c0 	.word	0x200014c0

08005dec <StartLeituraSens>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeituraSens */
void StartLeituraSens(void const * argument)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeituraSens */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8005df4:	200a      	movs	r0, #10
 8005df6:	f7fd fc0c 	bl	8003612 <osDelay>
 8005dfa:	e7fb      	b.n	8005df4 <StartLeituraSens+0x8>
 8005dfc:	0000      	movs	r0, r0
	...

08005e00 <StartProcessamen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessamen */
void StartProcessamen(void const * argument)
{
 8005e00:	b5b0      	push	{r4, r5, r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	uint8_t constantesLocal[3];

  /* Infinite loop */
  for(;;)
  {
	osMutexWait(MtxAceleradorHandle, 1000);
 8005e08:	4b4d      	ldr	r3, [pc, #308]	; (8005f40 <StartProcessamen+0x140>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fd fc1f 	bl	8003654 <osMutexWait>
	aceleracaoLocal = aceleradorGlobal;
 8005e16:	4b4b      	ldr	r3, [pc, #300]	; (8005f44 <StartProcessamen+0x144>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	73fb      	strb	r3, [r7, #15]
	oxigenioLocal = sensorOxg_TempGlobal[0];
 8005e1c:	4b4a      	ldr	r3, [pc, #296]	; (8005f48 <StartProcessamen+0x148>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	73bb      	strb	r3, [r7, #14]
	temperaturaLocal = sensorOxg_TempGlobal[1];
 8005e22:	4b49      	ldr	r3, [pc, #292]	; (8005f48 <StartProcessamen+0x148>)
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	737b      	strb	r3, [r7, #13]
	osMutexRelease(MtxAceleradorHandle);
 8005e28:	4b45      	ldr	r3, [pc, #276]	; (8005f40 <StartProcessamen+0x140>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fd fc61 	bl	80036f4 <osMutexRelease>

	osMutexWait(MtxConstHandle, 1000);
 8005e32:	4b46      	ldr	r3, [pc, #280]	; (8005f4c <StartProcessamen+0x14c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fd fc0a 	bl	8003654 <osMutexWait>
	constantesLocal[0] = constantesGlobal[0];
 8005e40:	4b43      	ldr	r3, [pc, #268]	; (8005f50 <StartProcessamen+0x150>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	723b      	strb	r3, [r7, #8]
	constantesLocal[1] = constantesGlobal[1];
 8005e46:	4b42      	ldr	r3, [pc, #264]	; (8005f50 <StartProcessamen+0x150>)
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	727b      	strb	r3, [r7, #9]
	constantesLocal[2] = constantesGlobal[2];
 8005e4c:	4b40      	ldr	r3, [pc, #256]	; (8005f50 <StartProcessamen+0x150>)
 8005e4e:	789b      	ldrb	r3, [r3, #2]
 8005e50:	72bb      	strb	r3, [r7, #10]
	osMutexRelease(MtxConstHandle);
 8005e52:	4b3e      	ldr	r3, [pc, #248]	; (8005f4c <StartProcessamen+0x14c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fd fc4c 	bl	80036f4 <osMutexRelease>

	qntCombustivelLocal = (int)(aceleracaoLocal * 0.5) + (0.3 * (100 - temperaturaLocal)) + (oxigenioLocal * 0.2);
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fa fb58 	bl	8000514 <__aeabi_i2d>
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	4b3a      	ldr	r3, [pc, #232]	; (8005f54 <StartProcessamen+0x154>)
 8005e6a:	f7fa fbbd 	bl	80005e8 <__aeabi_dmul>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	460c      	mov	r4, r1
 8005e72:	4618      	mov	r0, r3
 8005e74:	4621      	mov	r1, r4
 8005e76:	f7fa fdc9 	bl	8000a0c <__aeabi_d2iz>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fa fb49 	bl	8000514 <__aeabi_i2d>
 8005e82:	4604      	mov	r4, r0
 8005e84:	460d      	mov	r5, r1
 8005e86:	7b7b      	ldrb	r3, [r7, #13]
 8005e88:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fa fb41 	bl	8000514 <__aeabi_i2d>
 8005e92:	a327      	add	r3, pc, #156	; (adr r3, 8005f30 <StartProcessamen+0x130>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa fba6 	bl	80005e8 <__aeabi_dmul>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fa f9ea 	bl	800027c <__adddf3>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	4625      	mov	r5, r4
 8005eae:	461c      	mov	r4, r3
 8005eb0:	7bbb      	ldrb	r3, [r7, #14]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fa fb2e 	bl	8000514 <__aeabi_i2d>
 8005eb8:	a31f      	add	r3, pc, #124	; (adr r3, 8005f38 <StartProcessamen+0x138>)
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f7fa fb93 	bl	80005e8 <__aeabi_dmul>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	4629      	mov	r1, r5
 8005eca:	f7fa f9d7 	bl	800027c <__adddf3>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	f7fa fdc1 	bl	8000a5c <__aeabi_d2uiz>
 8005eda:	4603      	mov	r3, r0
 8005edc:	733b      	strb	r3, [r7, #12]

	osMutexWait(MtxQntCombustivelHandle, 1000);
 8005ede:	4b1e      	ldr	r3, [pc, #120]	; (8005f58 <StartProcessamen+0x158>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fd fbb4 	bl	8003654 <osMutexWait>
	qntCombustivelGlobal = qntCombustivelLocal;
 8005eec:	4a1b      	ldr	r2, [pc, #108]	; (8005f5c <StartProcessamen+0x15c>)
 8005eee:	7b3b      	ldrb	r3, [r7, #12]
 8005ef0:	7013      	strb	r3, [r2, #0]
	osMutexRelease(MtxQntCombustivelHandle);
 8005ef2:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <StartProcessamen+0x158>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fd fbfc 	bl	80036f4 <osMutexRelease>

	osMutexWait(MtxInformacoesHandle, 1000);
 8005efc:	4b18      	ldr	r3, [pc, #96]	; (8005f60 <StartProcessamen+0x160>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fd fba5 	bl	8003654 <osMutexWait>
	informacoesGlobal[0] = qntCombustivelGlobal;
 8005f0a:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <StartProcessamen+0x15c>)
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <StartProcessamen+0x164>)
 8005f10:	701a      	strb	r2, [r3, #0]
	informacoesGlobal[1] = 222;
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <StartProcessamen+0x164>)
 8005f14:	22de      	movs	r2, #222	; 0xde
 8005f16:	705a      	strb	r2, [r3, #1]
	osMutexRelease(MtxInformacoesHandle);
 8005f18:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <StartProcessamen+0x160>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fd fbe9 	bl	80036f4 <osMutexRelease>
	osDelay(10);
 8005f22:	200a      	movs	r0, #10
 8005f24:	f7fd fb75 	bl	8003612 <osDelay>
	osMutexWait(MtxAceleradorHandle, 1000);
 8005f28:	e76e      	b.n	8005e08 <StartProcessamen+0x8>
 8005f2a:	bf00      	nop
 8005f2c:	f3af 8000 	nop.w
 8005f30:	33333333 	.word	0x33333333
 8005f34:	3fd33333 	.word	0x3fd33333
 8005f38:	9999999a 	.word	0x9999999a
 8005f3c:	3fc99999 	.word	0x3fc99999
 8005f40:	200014cc 	.word	0x200014cc
 8005f44:	200015bc 	.word	0x200015bc
 8005f48:	200014c0 	.word	0x200014c0
 8005f4c:	200015b8 	.word	0x200015b8
 8005f50:	200015c0 	.word	0x200015c0
 8005f54:	3fe00000 	.word	0x3fe00000
 8005f58:	200014d8 	.word	0x200014d8
 8005f5c:	20001540 	.word	0x20001540
 8005f60:	200014d0 	.word	0x200014d0
 8005f64:	200014d4 	.word	0x200014d4

08005f68 <StartAcionamento>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcionamento */
void StartAcionamento(void const * argument)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAcionamento */
	uint8_t qntCombustivelLocal;
  /* Infinite loop */
  for(;;)
  {
	osMutexWait(MtxQntCombustivelHandle, 1000);
 8005f70:	4b2b      	ldr	r3, [pc, #172]	; (8006020 <StartAcionamento+0xb8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fd fb6b 	bl	8003654 <osMutexWait>
	qntCombustivelLocal = qntCombustivelGlobal;
 8005f7e:	4b29      	ldr	r3, [pc, #164]	; (8006024 <StartAcionamento+0xbc>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	73fb      	strb	r3, [r7, #15]
	osMutexRelease(MtxQntCombustivelHandle);
 8005f84:	4b26      	ldr	r3, [pc, #152]	; (8006020 <StartAcionamento+0xb8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fd fbb3 	bl	80036f4 <osMutexRelease>

	if(qntCombustivelLocal < 33) {
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d812      	bhi.n	8005fba <StartAcionamento+0x52>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8005f94:	2201      	movs	r2, #1
 8005f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f9e:	f7fb f83f 	bl	8001020 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fa8:	481f      	ldr	r0, [pc, #124]	; (8006028 <StartAcionamento+0xc0>)
 8005faa:	f7fb f839 	bl	8001020 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fb4:	481c      	ldr	r0, [pc, #112]	; (8006028 <StartAcionamento+0xc0>)
 8005fb6:	f7fb f833 	bl	8001020 <HAL_GPIO_WritePin>
	}

	if(qntCombustivelLocal < 66 && qntCombustivelLocal >= 33) {
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	2b41      	cmp	r3, #65	; 0x41
 8005fbe:	d815      	bhi.n	8005fec <StartAcionamento+0x84>
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d912      	bls.n	8005fec <StartAcionamento+0x84>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fd0:	f7fb f826 	bl	8001020 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fda:	4813      	ldr	r0, [pc, #76]	; (8006028 <StartAcionamento+0xc0>)
 8005fdc:	f7fb f820 	bl	8001020 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fe6:	4810      	ldr	r0, [pc, #64]	; (8006028 <StartAcionamento+0xc0>)
 8005fe8:	f7fb f81a 	bl	8001020 <HAL_GPIO_WritePin>
	}

	if(qntCombustivelLocal >= 66) {
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b41      	cmp	r3, #65	; 0x41
 8005ff0:	d912      	bls.n	8006018 <StartAcionamento+0xb0>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ffc:	f7fb f810 	bl	8001020 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8006000:	2200      	movs	r2, #0
 8006002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006006:	4808      	ldr	r0, [pc, #32]	; (8006028 <StartAcionamento+0xc0>)
 8006008:	f7fb f80a 	bl	8001020 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 800600c:	2201      	movs	r2, #1
 800600e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006012:	4805      	ldr	r0, [pc, #20]	; (8006028 <StartAcionamento+0xc0>)
 8006014:	f7fb f804 	bl	8001020 <HAL_GPIO_WritePin>
	}

    osDelay(10);
 8006018:	200a      	movs	r0, #10
 800601a:	f7fd fafa 	bl	8003612 <osDelay>
	osMutexWait(MtxQntCombustivelHandle, 1000);
 800601e:	e7a7      	b.n	8005f70 <StartAcionamento+0x8>
 8006020:	200014d8 	.word	0x200014d8
 8006024:	20001540 	.word	0x20001540
 8006028:	48000400 	.word	0x48000400

0800602c <StartEscritaMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEscritaMemoria */
void StartEscritaMemoria(void const * argument)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEscritaMemoria */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8006034:	200a      	movs	r0, #10
 8006036:	f7fd faec 	bl	8003612 <osDelay>
 800603a:	e7fb      	b.n	8006034 <StartEscritaMemoria+0x8>

0800603c <StartEscritaDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEscritaDisplay */
void StartEscritaDisplay(void const * argument)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b09e      	sub	sp, #120	; 0x78
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	uint8_t bufferOxigenio[50];
	uint8_t bufferAcelerador[50];
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(MtxInformacoesHandle, 1000);
 8006044:	4b36      	ldr	r3, [pc, #216]	; (8006120 <StartEscritaDisplay+0xe4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800604c:	4618      	mov	r0, r3
 800604e:	f7fd fb01 	bl	8003654 <osMutexWait>
	  informacoesLocal[0] = informacoesGlobal[0];
 8006052:	4b34      	ldr	r3, [pc, #208]	; (8006124 <StartEscritaDisplay+0xe8>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	  informacoesLocal[1] = informacoesGlobal[1];
 800605a:	4b32      	ldr	r3, [pc, #200]	; (8006124 <StartEscritaDisplay+0xe8>)
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	  osMutexRelease(MtxInformacoesHandle);
 8006062:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <StartEscritaDisplay+0xe4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd fb44 	bl	80036f4 <osMutexRelease>

	  osMutexWait(MtxAceleradorHandle, 1000);
 800606c:	4b2e      	ldr	r3, [pc, #184]	; (8006128 <StartEscritaDisplay+0xec>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006074:	4618      	mov	r0, r3
 8006076:	f7fd faed 	bl	8003654 <osMutexWait>
	  aceleracaoLocal = aceleradorGlobal;
 800607a:	4b2c      	ldr	r3, [pc, #176]	; (800612c <StartEscritaDisplay+0xf0>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  oxigenioLocal = sensorOxg_TempGlobal[0];
 8006082:	4b2b      	ldr	r3, [pc, #172]	; (8006130 <StartEscritaDisplay+0xf4>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	  temperaturaLocal = sensorOxg_TempGlobal[1];
 800608a:	4b29      	ldr	r3, [pc, #164]	; (8006130 <StartEscritaDisplay+0xf4>)
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	  osMutexRelease(MtxAceleradorHandle);
 8006092:	4b25      	ldr	r3, [pc, #148]	; (8006128 <StartEscritaDisplay+0xec>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f7fd fb2c 	bl	80036f4 <osMutexRelease>

	  sprintf(bufferAcelerador, "Injecao: %d\r\n", informacoesLocal[0]);
 800609c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80060a0:	461a      	mov	r2, r3
 80060a2:	f107 0308 	add.w	r3, r7, #8
 80060a6:	4923      	ldr	r1, [pc, #140]	; (8006134 <StartEscritaDisplay+0xf8>)
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fb07 	bl	80066bc <siprintf>
	  LCD_Write_String(0, 0, bufferAcelerador);
 80060ae:	f107 0308 	add.w	r3, r7, #8
 80060b2:	461a      	mov	r2, r3
 80060b4:	2100      	movs	r1, #0
 80060b6:	2000      	movs	r0, #0
 80060b8:	f000 fa20 	bl	80064fc <LCD_Write_String>

	  sprintf(bufferAcelerador, "Aceleracao: %d\r\n", aceleracaoLocal);
 80060bc:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80060c0:	f107 0308 	add.w	r3, r7, #8
 80060c4:	491c      	ldr	r1, [pc, #112]	; (8006138 <StartEscritaDisplay+0xfc>)
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 faf8 	bl	80066bc <siprintf>
	  LCD_Write_String(0, 1, bufferAcelerador);
 80060cc:	f107 0308 	add.w	r3, r7, #8
 80060d0:	461a      	mov	r2, r3
 80060d2:	2101      	movs	r1, #1
 80060d4:	2000      	movs	r0, #0
 80060d6:	f000 fa11 	bl	80064fc <LCD_Write_String>

	  sprintf(bufferAcelerador, "Temp: %d\r\n", temperaturaLocal);
 80060da:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80060de:	f107 0308 	add.w	r3, r7, #8
 80060e2:	4916      	ldr	r1, [pc, #88]	; (800613c <StartEscritaDisplay+0x100>)
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fae9 	bl	80066bc <siprintf>
	  LCD_Write_String(0, 2, bufferAcelerador);
 80060ea:	f107 0308 	add.w	r3, r7, #8
 80060ee:	461a      	mov	r2, r3
 80060f0:	2102      	movs	r1, #2
 80060f2:	2000      	movs	r0, #0
 80060f4:	f000 fa02 	bl	80064fc <LCD_Write_String>

	  sprintf(bufferAcelerador, "Oxigenio: %d\r\n", oxigenioLocal);
 80060f8:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80060fc:	f107 0308 	add.w	r3, r7, #8
 8006100:	490f      	ldr	r1, [pc, #60]	; (8006140 <StartEscritaDisplay+0x104>)
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fada 	bl	80066bc <siprintf>
	  LCD_Write_String(0, 3, bufferAcelerador);
 8006108:	f107 0308 	add.w	r3, r7, #8
 800610c:	461a      	mov	r2, r3
 800610e:	2103      	movs	r1, #3
 8006110:	2000      	movs	r0, #0
 8006112:	f000 f9f3 	bl	80064fc <LCD_Write_String>
	  osDelay(10);
 8006116:	200a      	movs	r0, #10
 8006118:	f7fd fa7b 	bl	8003612 <osDelay>
	  osMutexWait(MtxInformacoesHandle, 1000);
 800611c:	e792      	b.n	8006044 <StartEscritaDisplay+0x8>
 800611e:	bf00      	nop
 8006120:	200014d0 	.word	0x200014d0
 8006124:	200014d4 	.word	0x200014d4
 8006128:	200014cc 	.word	0x200014cc
 800612c:	200015bc 	.word	0x200015bc
 8006130:	200014c0 	.word	0x200014c0
 8006134:	08006fb4 	.word	0x08006fb4
 8006138:	08006fc4 	.word	0x08006fc4
 800613c:	08006fd8 	.word	0x08006fd8
 8006140:	08006fe4 	.word	0x08006fe4

08006144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006148:	bf00      	nop
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800615a:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <HAL_MspInit+0x4c>)
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	4a10      	ldr	r2, [pc, #64]	; (80061a0 <HAL_MspInit+0x4c>)
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	6193      	str	r3, [r2, #24]
 8006166:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <HAL_MspInit+0x4c>)
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006172:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <HAL_MspInit+0x4c>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <HAL_MspInit+0x4c>)
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	61d3      	str	r3, [r2, #28]
 800617e:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <HAL_MspInit+0x4c>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800618a:	2200      	movs	r2, #0
 800618c:	210f      	movs	r1, #15
 800618e:	f06f 0001 	mvn.w	r0, #1
 8006192:	f7fa fda6 	bl	8000ce2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006196:	bf00      	nop
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40021000 	.word	0x40021000

080061a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08a      	sub	sp, #40	; 0x28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061ac:	f107 0314 	add.w	r3, r7, #20
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a17      	ldr	r2, [pc, #92]	; (8006220 <HAL_SPI_MspInit+0x7c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d127      	bne.n	8006216 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80061c6:	4b17      	ldr	r3, [pc, #92]	; (8006224 <HAL_SPI_MspInit+0x80>)
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	4a16      	ldr	r2, [pc, #88]	; (8006224 <HAL_SPI_MspInit+0x80>)
 80061cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061d0:	6193      	str	r3, [r2, #24]
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <HAL_SPI_MspInit+0x80>)
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061da:	613b      	str	r3, [r7, #16]
 80061dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061de:	4b11      	ldr	r3, [pc, #68]	; (8006224 <HAL_SPI_MspInit+0x80>)
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	4a10      	ldr	r2, [pc, #64]	; (8006224 <HAL_SPI_MspInit+0x80>)
 80061e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061e8:	6153      	str	r3, [r2, #20]
 80061ea:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <HAL_SPI_MspInit+0x80>)
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80061f6:	2338      	movs	r3, #56	; 0x38
 80061f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fa:	2302      	movs	r3, #2
 80061fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006202:	2303      	movs	r3, #3
 8006204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006206:	2305      	movs	r3, #5
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800620a:	f107 0314 	add.w	r3, r7, #20
 800620e:	4619      	mov	r1, r3
 8006210:	4805      	ldr	r0, [pc, #20]	; (8006228 <HAL_SPI_MspInit+0x84>)
 8006212:	f7fa fd8f 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006216:	bf00      	nop
 8006218:	3728      	adds	r7, #40	; 0x28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40013000 	.word	0x40013000
 8006224:	40021000 	.word	0x40021000
 8006228:	48000400 	.word	0x48000400

0800622c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	; 0x28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006234:	f107 0314 	add.w	r3, r7, #20
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	605a      	str	r2, [r3, #4]
 800623e:	609a      	str	r2, [r3, #8]
 8006240:	60da      	str	r2, [r3, #12]
 8006242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <HAL_UART_MspInit+0x7c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d128      	bne.n	80062a0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800624e:	4b17      	ldr	r3, [pc, #92]	; (80062ac <HAL_UART_MspInit+0x80>)
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	4a16      	ldr	r2, [pc, #88]	; (80062ac <HAL_UART_MspInit+0x80>)
 8006254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006258:	61d3      	str	r3, [r2, #28]
 800625a:	4b14      	ldr	r3, [pc, #80]	; (80062ac <HAL_UART_MspInit+0x80>)
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006266:	4b11      	ldr	r3, [pc, #68]	; (80062ac <HAL_UART_MspInit+0x80>)
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	4a10      	ldr	r2, [pc, #64]	; (80062ac <HAL_UART_MspInit+0x80>)
 800626c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006270:	6153      	str	r3, [r2, #20]
 8006272:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <HAL_UART_MspInit+0x80>)
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800627e:	230c      	movs	r3, #12
 8006280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006282:	2302      	movs	r3, #2
 8006284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800628a:	2303      	movs	r3, #3
 800628c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800628e:	2307      	movs	r3, #7
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006292:	f107 0314 	add.w	r3, r7, #20
 8006296:	4619      	mov	r1, r3
 8006298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800629c:	f7fa fd4a 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80062a0:	bf00      	nop
 80062a2:	3728      	adds	r7, #40	; 0x28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40004400 	.word	0x40004400
 80062ac:	40021000 	.word	0x40021000

080062b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062be:	b480      	push	{r7}
 80062c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062c2:	e7fe      	b.n	80062c2 <HardFault_Handler+0x4>

080062c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062c8:	e7fe      	b.n	80062c8 <MemManage_Handler+0x4>

080062ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062ca:	b480      	push	{r7}
 80062cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062ce:	e7fe      	b.n	80062ce <BusFault_Handler+0x4>

080062d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062d4:	e7fe      	b.n	80062d4 <UsageFault_Handler+0x4>

080062d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062d6:	b480      	push	{r7}
 80062d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062da:	bf00      	nop
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062e8:	f7fa fc1e 	bl	8000b28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80062ec:	f7fe fd52 	bl	8004d94 <xTaskGetSchedulerState>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d001      	beq.n	80062fa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80062f6:	f7ff f86f 	bl	80053d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062fa:	bf00      	nop
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006308:	4b11      	ldr	r3, [pc, #68]	; (8006350 <_sbrk+0x50>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <_sbrk+0x16>
		heap_end = &end;
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <_sbrk+0x50>)
 8006312:	4a10      	ldr	r2, [pc, #64]	; (8006354 <_sbrk+0x54>)
 8006314:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006316:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <_sbrk+0x50>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800631c:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <_sbrk+0x50>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4413      	add	r3, r2
 8006324:	466a      	mov	r2, sp
 8006326:	4293      	cmp	r3, r2
 8006328:	d907      	bls.n	800633a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800632a:	f000 f989 	bl	8006640 <__errno>
 800632e:	4602      	mov	r2, r0
 8006330:	230c      	movs	r3, #12
 8006332:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006334:	f04f 33ff 	mov.w	r3, #4294967295
 8006338:	e006      	b.n	8006348 <_sbrk+0x48>
	}

	heap_end += incr;
 800633a:	4b05      	ldr	r3, [pc, #20]	; (8006350 <_sbrk+0x50>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	4a03      	ldr	r2, [pc, #12]	; (8006350 <_sbrk+0x50>)
 8006344:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006346:	68fb      	ldr	r3, [r7, #12]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200014a4 	.word	0x200014a4
 8006354:	200015c8 	.word	0x200015c8

08006358 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800635c:	4b1f      	ldr	r3, [pc, #124]	; (80063dc <SystemInit+0x84>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006362:	4a1e      	ldr	r2, [pc, #120]	; (80063dc <SystemInit+0x84>)
 8006364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800636c:	4b1c      	ldr	r3, [pc, #112]	; (80063e0 <SystemInit+0x88>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1b      	ldr	r2, [pc, #108]	; (80063e0 <SystemInit+0x88>)
 8006372:	f043 0301 	orr.w	r3, r3, #1
 8006376:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <SystemInit+0x88>)
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	4918      	ldr	r1, [pc, #96]	; (80063e0 <SystemInit+0x88>)
 800637e:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <SystemInit+0x8c>)
 8006380:	4013      	ands	r3, r2
 8006382:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006384:	4b16      	ldr	r3, [pc, #88]	; (80063e0 <SystemInit+0x88>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <SystemInit+0x88>)
 800638a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800638e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006392:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006394:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <SystemInit+0x88>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a11      	ldr	r2, [pc, #68]	; (80063e0 <SystemInit+0x88>)
 800639a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800639e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80063a0:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <SystemInit+0x88>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a0e      	ldr	r2, [pc, #56]	; (80063e0 <SystemInit+0x88>)
 80063a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80063aa:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80063ac:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <SystemInit+0x88>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	4a0b      	ldr	r2, [pc, #44]	; (80063e0 <SystemInit+0x88>)
 80063b2:	f023 030f 	bic.w	r3, r3, #15
 80063b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80063b8:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <SystemInit+0x88>)
 80063ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063bc:	4908      	ldr	r1, [pc, #32]	; (80063e0 <SystemInit+0x88>)
 80063be:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <SystemInit+0x90>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80063c4:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <SystemInit+0x88>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80063ca:	4b04      	ldr	r3, [pc, #16]	; (80063dc <SystemInit+0x84>)
 80063cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063d0:	609a      	str	r2, [r3, #8]
#endif
}
 80063d2:	bf00      	nop
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	e000ed00 	.word	0xe000ed00
 80063e0:	40021000 	.word	0x40021000
 80063e4:	f87fc00c 	.word	0xf87fc00c
 80063e8:	ff00fccc 	.word	0xff00fccc

080063ec <LCD_Init>:
uint8_t spiOK = 0U;

/**
 * Initialize LCD.
 */
void LCD_Init(void) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  LCD_Reset();
 80063f0:	f000 f810 	bl	8006414 <LCD_Reset>
  LCD_Write_Command(0x21);
 80063f4:	2021      	movs	r0, #33	; 0x21
 80063f6:	f000 f8a1 	bl	800653c <LCD_Write_Command>
  LCD_Write_Command(0xD0);
 80063fa:	20d0      	movs	r0, #208	; 0xd0
 80063fc:	f000 f89e 	bl	800653c <LCD_Write_Command>
  LCD_Write_Command(0x20);
 8006400:	2020      	movs	r0, #32
 8006402:	f000 f89b 	bl	800653c <LCD_Write_Command>
  LCD_Write_Command(0x0C);
 8006406:	200c      	movs	r0, #12
 8006408:	f000 f898 	bl	800653c <LCD_Write_Command>
  LCD_Clear();
 800640c:	f000 f832 	bl	8006474 <LCD_Clear>
}
 8006410:	bf00      	nop
 8006412:	bd80      	pop	{r7, pc}

08006414 <LCD_Reset>:

/**
 * Reset LCD.
 */
void LCD_Reset(void) {
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8006418:	2200      	movs	r2, #0
 800641a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800641e:	4807      	ldr	r0, [pc, #28]	; (800643c <LCD_Reset+0x28>)
 8006420:	f7fa fdfe 	bl	8001020 <HAL_GPIO_WritePin>
  osDelay(50);
 8006424:	2032      	movs	r0, #50	; 0x32
 8006426:	f7fd f8f4 	bl	8003612 <osDelay>
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 800642a:	2201      	movs	r2, #1
 800642c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006430:	4802      	ldr	r0, [pc, #8]	; (800643c <LCD_Reset+0x28>)
 8006432:	f7fa fdf5 	bl	8001020 <HAL_GPIO_WritePin>
}
 8006436:	bf00      	nop
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	48000400 	.word	0x48000400

08006440 <LCD_Set_Postion>:
/**
 * Set LCD cursor position.
 * @param PosX X Position
 * @param PosY Y Position
 */
void LCD_Set_Postion(uint8_t PosX, uint8_t PosY) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	460a      	mov	r2, r1
 800644a:	71fb      	strb	r3, [r7, #7]
 800644c:	4613      	mov	r3, r2
 800644e:	71bb      	strb	r3, [r7, #6]
  LCD_Write_Command(0x40 | PosY);
 8006450:	79bb      	ldrb	r3, [r7, #6]
 8006452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006456:	b2db      	uxtb	r3, r3
 8006458:	4618      	mov	r0, r3
 800645a:	f000 f86f 	bl	800653c <LCD_Write_Command>
  LCD_Write_Command(0x80 | PosX);
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006464:	b2db      	uxtb	r3, r3
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f868 	bl	800653c <LCD_Write_Command>
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <LCD_Clear>:

/**
 * Clear all contents on LCD.
 */
void LCD_Clear(void) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
  uint8_t t;
  uint8_t k;
  LCD_Set_Postion(0,0);
 800647a:	2100      	movs	r1, #0
 800647c:	2000      	movs	r0, #0
 800647e:	f7ff ffdf 	bl	8006440 <LCD_Set_Postion>
  for(t=0;t<6;t++)
 8006482:	2300      	movs	r3, #0
 8006484:	71fb      	strb	r3, [r7, #7]
 8006486:	e00e      	b.n	80064a6 <LCD_Clear+0x32>
  {
    for(k=0;k<84;k++)
 8006488:	2300      	movs	r3, #0
 800648a:	71bb      	strb	r3, [r7, #6]
 800648c:	e005      	b.n	800649a <LCD_Clear+0x26>
    {
      LCD_Write_Data(0x00);
 800648e:	2000      	movs	r0, #0
 8006490:	f000 f880 	bl	8006594 <LCD_Write_Data>
    for(k=0;k<84;k++)
 8006494:	79bb      	ldrb	r3, [r7, #6]
 8006496:	3301      	adds	r3, #1
 8006498:	71bb      	strb	r3, [r7, #6]
 800649a:	79bb      	ldrb	r3, [r7, #6]
 800649c:	2b53      	cmp	r3, #83	; 0x53
 800649e:	d9f6      	bls.n	800648e <LCD_Clear+0x1a>
  for(t=0;t<6;t++)
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	3301      	adds	r3, #1
 80064a4:	71fb      	strb	r3, [r7, #7]
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	2b05      	cmp	r3, #5
 80064aa:	d9ed      	bls.n	8006488 <LCD_Clear+0x14>
    }
  }
}
 80064ac:	bf00      	nop
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <LCD_Write_Char>:

/**
 * Write a single char to LCD.
 * @param ch char to write.
 */
void LCD_Write_Char(uint8_t ch) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	3b20      	subs	r3, #32
 80064c2:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++) LCD_Write_Data(font6x8[ch][line]);
 80064c4:	2300      	movs	r3, #0
 80064c6:	73fb      	strb	r3, [r7, #15]
 80064c8:	e00f      	b.n	80064ea <LCD_Write_Char+0x36>
 80064ca:	79fa      	ldrb	r2, [r7, #7]
 80064cc:	7bf9      	ldrb	r1, [r7, #15]
 80064ce:	480a      	ldr	r0, [pc, #40]	; (80064f8 <LCD_Write_Char+0x44>)
 80064d0:	4613      	mov	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	4413      	add	r3, r2
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	4403      	add	r3, r0
 80064da:	440b      	add	r3, r1
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 f858 	bl	8006594 <LCD_Write_Data>
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	3301      	adds	r3, #1
 80064e8:	73fb      	strb	r3, [r7, #15]
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	2b05      	cmp	r3, #5
 80064ee:	d9ec      	bls.n	80064ca <LCD_Write_Char+0x16>
}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	0800702c 	.word	0x0800702c

080064fc <LCD_Write_String>:
 * Write a string to LCD.
 * @param PosX X start point
 * @param PosY Y start point
 * @param str  string to write.
 */
void LCD_Write_String(uint8_t PosX, uint8_t PosY, char * str) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	603a      	str	r2, [r7, #0]
 8006506:	71fb      	strb	r3, [r7, #7]
 8006508:	460b      	mov	r3, r1
 800650a:	71bb      	strb	r3, [r7, #6]
  LCD_Set_Postion(PosX, PosY);
 800650c:	79ba      	ldrb	r2, [r7, #6]
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff ff94 	bl	8006440 <LCD_Set_Postion>
  while(* str) {
 8006518:	e007      	b.n	800652a <LCD_Write_String+0x2e>
    LCD_Write_Char(* str);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff ffc8 	bl	80064b4 <LCD_Write_Char>
    str ++;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	3301      	adds	r3, #1
 8006528:	603b      	str	r3, [r7, #0]
  while(* str) {
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f3      	bne.n	800651a <LCD_Write_String+0x1e>
  }
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <LCD_Write_Command>:

/**
 * Write LCD command to SPI
 * @param cmd command to write.
 */
void LCD_Write_Command(uint8_t cmd) {
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8006546:	2200      	movs	r2, #0
 8006548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800654c:	480f      	ldr	r0, [pc, #60]	; (800658c <LCD_Write_Command+0x50>)
 800654e:	f7fa fd67 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8006552:	2200      	movs	r2, #0
 8006554:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006558:	480c      	ldr	r0, [pc, #48]	; (800658c <LCD_Write_Command+0x50>)
 800655a:	f7fa fd61 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &cmd, 0x01, 1000);
 800655e:	1df9      	adds	r1, r7, #7
 8006560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006564:	2201      	movs	r2, #1
 8006566:	480a      	ldr	r0, [pc, #40]	; (8006590 <LCD_Write_Command+0x54>)
 8006568:	f7fb ff20 	bl	80023ac <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 800656c:	2201      	movs	r2, #1
 800656e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006572:	4806      	ldr	r0, [pc, #24]	; (800658c <LCD_Write_Command+0x50>)
 8006574:	f7fa fd54 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8006578:	2201      	movs	r2, #1
 800657a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800657e:	4803      	ldr	r0, [pc, #12]	; (800658c <LCD_Write_Command+0x50>)
 8006580:	f7fa fd4e 	bl	8001020 <HAL_GPIO_WritePin>
}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	48000800 	.word	0x48000800
 8006590:	200014dc 	.word	0x200014dc

08006594 <LCD_Write_Data>:

/**
 * Write LCD data to SPI
 * @param data data to write.
 */
void LCD_Write_Data(uint8_t data) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	4603      	mov	r3, r0
 800659c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 800659e:	2200      	movs	r2, #0
 80065a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065a4:	480f      	ldr	r0, [pc, #60]	; (80065e4 <LCD_Write_Data+0x50>)
 80065a6:	f7fa fd3b 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80065aa:	2201      	movs	r2, #1
 80065ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065b0:	480c      	ldr	r0, [pc, #48]	; (80065e4 <LCD_Write_Data+0x50>)
 80065b2:	f7fa fd35 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &data, 0x01, 1000);
 80065b6:	1df9      	adds	r1, r7, #7
 80065b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065bc:	2201      	movs	r2, #1
 80065be:	480a      	ldr	r0, [pc, #40]	; (80065e8 <LCD_Write_Data+0x54>)
 80065c0:	f7fb fef4 	bl	80023ac <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 80065c4:	2201      	movs	r2, #1
 80065c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065ca:	4806      	ldr	r0, [pc, #24]	; (80065e4 <LCD_Write_Data+0x50>)
 80065cc:	f7fa fd28 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80065d0:	2200      	movs	r2, #0
 80065d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065d6:	4803      	ldr	r0, [pc, #12]	; (80065e4 <LCD_Write_Data+0x50>)
 80065d8:	f7fa fd22 	bl	8001020 <HAL_GPIO_WritePin>
}
 80065dc:	bf00      	nop
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	48000800 	.word	0x48000800
 80065e8:	200014dc 	.word	0x200014dc

080065ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80065ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006624 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80065f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80065f2:	e003      	b.n	80065fc <LoopCopyDataInit>

080065f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80065f4:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80065f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80065f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80065fa:	3104      	adds	r1, #4

080065fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80065fc:	480b      	ldr	r0, [pc, #44]	; (800662c <LoopForever+0xa>)
	ldr	r3, =_edata
 80065fe:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006600:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006602:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006604:	d3f6      	bcc.n	80065f4 <CopyDataInit>
	ldr	r2, =_sbss
 8006606:	4a0b      	ldr	r2, [pc, #44]	; (8006634 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006608:	e002      	b.n	8006610 <LoopFillZerobss>

0800660a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800660a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800660c:	f842 3b04 	str.w	r3, [r2], #4

08006610 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <LoopForever+0x16>)
	cmp	r2, r3
 8006612:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006614:	d3f9      	bcc.n	800660a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006616:	f7ff fe9f 	bl	8006358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800661a:	f000 f817 	bl	800664c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800661e:	f7ff f935 	bl	800588c <main>

08006622 <LoopForever>:

LoopForever:
    b LoopForever
 8006622:	e7fe      	b.n	8006622 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006624:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8006628:	08007290 	.word	0x08007290
	ldr	r0, =_sdata
 800662c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006630:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8006634:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8006638:	200015c8 	.word	0x200015c8

0800663c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800663c:	e7fe      	b.n	800663c <ADC1_2_IRQHandler>
	...

08006640 <__errno>:
 8006640:	4b01      	ldr	r3, [pc, #4]	; (8006648 <__errno+0x8>)
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	20000010 	.word	0x20000010

0800664c <__libc_init_array>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	4e0d      	ldr	r6, [pc, #52]	; (8006684 <__libc_init_array+0x38>)
 8006650:	4c0d      	ldr	r4, [pc, #52]	; (8006688 <__libc_init_array+0x3c>)
 8006652:	1ba4      	subs	r4, r4, r6
 8006654:	10a4      	asrs	r4, r4, #2
 8006656:	2500      	movs	r5, #0
 8006658:	42a5      	cmp	r5, r4
 800665a:	d109      	bne.n	8006670 <__libc_init_array+0x24>
 800665c:	4e0b      	ldr	r6, [pc, #44]	; (800668c <__libc_init_array+0x40>)
 800665e:	4c0c      	ldr	r4, [pc, #48]	; (8006690 <__libc_init_array+0x44>)
 8006660:	f000 fc28 	bl	8006eb4 <_init>
 8006664:	1ba4      	subs	r4, r4, r6
 8006666:	10a4      	asrs	r4, r4, #2
 8006668:	2500      	movs	r5, #0
 800666a:	42a5      	cmp	r5, r4
 800666c:	d105      	bne.n	800667a <__libc_init_array+0x2e>
 800666e:	bd70      	pop	{r4, r5, r6, pc}
 8006670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006674:	4798      	blx	r3
 8006676:	3501      	adds	r5, #1
 8006678:	e7ee      	b.n	8006658 <__libc_init_array+0xc>
 800667a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800667e:	4798      	blx	r3
 8006680:	3501      	adds	r5, #1
 8006682:	e7f2      	b.n	800666a <__libc_init_array+0x1e>
 8006684:	08007288 	.word	0x08007288
 8006688:	08007288 	.word	0x08007288
 800668c:	08007288 	.word	0x08007288
 8006690:	0800728c 	.word	0x0800728c

08006694 <memcpy>:
 8006694:	b510      	push	{r4, lr}
 8006696:	1e43      	subs	r3, r0, #1
 8006698:	440a      	add	r2, r1
 800669a:	4291      	cmp	r1, r2
 800669c:	d100      	bne.n	80066a0 <memcpy+0xc>
 800669e:	bd10      	pop	{r4, pc}
 80066a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a8:	e7f7      	b.n	800669a <memcpy+0x6>

080066aa <memset>:
 80066aa:	4402      	add	r2, r0
 80066ac:	4603      	mov	r3, r0
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d100      	bne.n	80066b4 <memset+0xa>
 80066b2:	4770      	bx	lr
 80066b4:	f803 1b01 	strb.w	r1, [r3], #1
 80066b8:	e7f9      	b.n	80066ae <memset+0x4>
	...

080066bc <siprintf>:
 80066bc:	b40e      	push	{r1, r2, r3}
 80066be:	b500      	push	{lr}
 80066c0:	b09c      	sub	sp, #112	; 0x70
 80066c2:	ab1d      	add	r3, sp, #116	; 0x74
 80066c4:	9002      	str	r0, [sp, #8]
 80066c6:	9006      	str	r0, [sp, #24]
 80066c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066cc:	4809      	ldr	r0, [pc, #36]	; (80066f4 <siprintf+0x38>)
 80066ce:	9107      	str	r1, [sp, #28]
 80066d0:	9104      	str	r1, [sp, #16]
 80066d2:	4909      	ldr	r1, [pc, #36]	; (80066f8 <siprintf+0x3c>)
 80066d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d8:	9105      	str	r1, [sp, #20]
 80066da:	6800      	ldr	r0, [r0, #0]
 80066dc:	9301      	str	r3, [sp, #4]
 80066de:	a902      	add	r1, sp, #8
 80066e0:	f000 f866 	bl	80067b0 <_svfiprintf_r>
 80066e4:	9b02      	ldr	r3, [sp, #8]
 80066e6:	2200      	movs	r2, #0
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	b01c      	add	sp, #112	; 0x70
 80066ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80066f0:	b003      	add	sp, #12
 80066f2:	4770      	bx	lr
 80066f4:	20000010 	.word	0x20000010
 80066f8:	ffff0208 	.word	0xffff0208

080066fc <__ssputs_r>:
 80066fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006700:	688e      	ldr	r6, [r1, #8]
 8006702:	429e      	cmp	r6, r3
 8006704:	4682      	mov	sl, r0
 8006706:	460c      	mov	r4, r1
 8006708:	4690      	mov	r8, r2
 800670a:	4699      	mov	r9, r3
 800670c:	d837      	bhi.n	800677e <__ssputs_r+0x82>
 800670e:	898a      	ldrh	r2, [r1, #12]
 8006710:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006714:	d031      	beq.n	800677a <__ssputs_r+0x7e>
 8006716:	6825      	ldr	r5, [r4, #0]
 8006718:	6909      	ldr	r1, [r1, #16]
 800671a:	1a6f      	subs	r7, r5, r1
 800671c:	6965      	ldr	r5, [r4, #20]
 800671e:	2302      	movs	r3, #2
 8006720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006724:	fb95 f5f3 	sdiv	r5, r5, r3
 8006728:	f109 0301 	add.w	r3, r9, #1
 800672c:	443b      	add	r3, r7
 800672e:	429d      	cmp	r5, r3
 8006730:	bf38      	it	cc
 8006732:	461d      	movcc	r5, r3
 8006734:	0553      	lsls	r3, r2, #21
 8006736:	d530      	bpl.n	800679a <__ssputs_r+0x9e>
 8006738:	4629      	mov	r1, r5
 800673a:	f000 fb21 	bl	8006d80 <_malloc_r>
 800673e:	4606      	mov	r6, r0
 8006740:	b950      	cbnz	r0, 8006758 <__ssputs_r+0x5c>
 8006742:	230c      	movs	r3, #12
 8006744:	f8ca 3000 	str.w	r3, [sl]
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006758:	463a      	mov	r2, r7
 800675a:	6921      	ldr	r1, [r4, #16]
 800675c:	f7ff ff9a 	bl	8006694 <memcpy>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	6126      	str	r6, [r4, #16]
 800676e:	6165      	str	r5, [r4, #20]
 8006770:	443e      	add	r6, r7
 8006772:	1bed      	subs	r5, r5, r7
 8006774:	6026      	str	r6, [r4, #0]
 8006776:	60a5      	str	r5, [r4, #8]
 8006778:	464e      	mov	r6, r9
 800677a:	454e      	cmp	r6, r9
 800677c:	d900      	bls.n	8006780 <__ssputs_r+0x84>
 800677e:	464e      	mov	r6, r9
 8006780:	4632      	mov	r2, r6
 8006782:	4641      	mov	r1, r8
 8006784:	6820      	ldr	r0, [r4, #0]
 8006786:	f000 fa93 	bl	8006cb0 <memmove>
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	1b9b      	subs	r3, r3, r6
 800678e:	60a3      	str	r3, [r4, #8]
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	441e      	add	r6, r3
 8006794:	6026      	str	r6, [r4, #0]
 8006796:	2000      	movs	r0, #0
 8006798:	e7dc      	b.n	8006754 <__ssputs_r+0x58>
 800679a:	462a      	mov	r2, r5
 800679c:	f000 fb4a 	bl	8006e34 <_realloc_r>
 80067a0:	4606      	mov	r6, r0
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d1e2      	bne.n	800676c <__ssputs_r+0x70>
 80067a6:	6921      	ldr	r1, [r4, #16]
 80067a8:	4650      	mov	r0, sl
 80067aa:	f000 fa9b 	bl	8006ce4 <_free_r>
 80067ae:	e7c8      	b.n	8006742 <__ssputs_r+0x46>

080067b0 <_svfiprintf_r>:
 80067b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	461d      	mov	r5, r3
 80067b6:	898b      	ldrh	r3, [r1, #12]
 80067b8:	061f      	lsls	r7, r3, #24
 80067ba:	b09d      	sub	sp, #116	; 0x74
 80067bc:	4680      	mov	r8, r0
 80067be:	460c      	mov	r4, r1
 80067c0:	4616      	mov	r6, r2
 80067c2:	d50f      	bpl.n	80067e4 <_svfiprintf_r+0x34>
 80067c4:	690b      	ldr	r3, [r1, #16]
 80067c6:	b96b      	cbnz	r3, 80067e4 <_svfiprintf_r+0x34>
 80067c8:	2140      	movs	r1, #64	; 0x40
 80067ca:	f000 fad9 	bl	8006d80 <_malloc_r>
 80067ce:	6020      	str	r0, [r4, #0]
 80067d0:	6120      	str	r0, [r4, #16]
 80067d2:	b928      	cbnz	r0, 80067e0 <_svfiprintf_r+0x30>
 80067d4:	230c      	movs	r3, #12
 80067d6:	f8c8 3000 	str.w	r3, [r8]
 80067da:	f04f 30ff 	mov.w	r0, #4294967295
 80067de:	e0c8      	b.n	8006972 <_svfiprintf_r+0x1c2>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	6163      	str	r3, [r4, #20]
 80067e4:	2300      	movs	r3, #0
 80067e6:	9309      	str	r3, [sp, #36]	; 0x24
 80067e8:	2320      	movs	r3, #32
 80067ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ee:	2330      	movs	r3, #48	; 0x30
 80067f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067f4:	9503      	str	r5, [sp, #12]
 80067f6:	f04f 0b01 	mov.w	fp, #1
 80067fa:	4637      	mov	r7, r6
 80067fc:	463d      	mov	r5, r7
 80067fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006802:	b10b      	cbz	r3, 8006808 <_svfiprintf_r+0x58>
 8006804:	2b25      	cmp	r3, #37	; 0x25
 8006806:	d13e      	bne.n	8006886 <_svfiprintf_r+0xd6>
 8006808:	ebb7 0a06 	subs.w	sl, r7, r6
 800680c:	d00b      	beq.n	8006826 <_svfiprintf_r+0x76>
 800680e:	4653      	mov	r3, sl
 8006810:	4632      	mov	r2, r6
 8006812:	4621      	mov	r1, r4
 8006814:	4640      	mov	r0, r8
 8006816:	f7ff ff71 	bl	80066fc <__ssputs_r>
 800681a:	3001      	adds	r0, #1
 800681c:	f000 80a4 	beq.w	8006968 <_svfiprintf_r+0x1b8>
 8006820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006822:	4453      	add	r3, sl
 8006824:	9309      	str	r3, [sp, #36]	; 0x24
 8006826:	783b      	ldrb	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 809d 	beq.w	8006968 <_svfiprintf_r+0x1b8>
 800682e:	2300      	movs	r3, #0
 8006830:	f04f 32ff 	mov.w	r2, #4294967295
 8006834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006838:	9304      	str	r3, [sp, #16]
 800683a:	9307      	str	r3, [sp, #28]
 800683c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006840:	931a      	str	r3, [sp, #104]	; 0x68
 8006842:	462f      	mov	r7, r5
 8006844:	2205      	movs	r2, #5
 8006846:	f817 1b01 	ldrb.w	r1, [r7], #1
 800684a:	4850      	ldr	r0, [pc, #320]	; (800698c <_svfiprintf_r+0x1dc>)
 800684c:	f7f9 fcc0 	bl	80001d0 <memchr>
 8006850:	9b04      	ldr	r3, [sp, #16]
 8006852:	b9d0      	cbnz	r0, 800688a <_svfiprintf_r+0xda>
 8006854:	06d9      	lsls	r1, r3, #27
 8006856:	bf44      	itt	mi
 8006858:	2220      	movmi	r2, #32
 800685a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800685e:	071a      	lsls	r2, r3, #28
 8006860:	bf44      	itt	mi
 8006862:	222b      	movmi	r2, #43	; 0x2b
 8006864:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006868:	782a      	ldrb	r2, [r5, #0]
 800686a:	2a2a      	cmp	r2, #42	; 0x2a
 800686c:	d015      	beq.n	800689a <_svfiprintf_r+0xea>
 800686e:	9a07      	ldr	r2, [sp, #28]
 8006870:	462f      	mov	r7, r5
 8006872:	2000      	movs	r0, #0
 8006874:	250a      	movs	r5, #10
 8006876:	4639      	mov	r1, r7
 8006878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800687c:	3b30      	subs	r3, #48	; 0x30
 800687e:	2b09      	cmp	r3, #9
 8006880:	d94d      	bls.n	800691e <_svfiprintf_r+0x16e>
 8006882:	b1b8      	cbz	r0, 80068b4 <_svfiprintf_r+0x104>
 8006884:	e00f      	b.n	80068a6 <_svfiprintf_r+0xf6>
 8006886:	462f      	mov	r7, r5
 8006888:	e7b8      	b.n	80067fc <_svfiprintf_r+0x4c>
 800688a:	4a40      	ldr	r2, [pc, #256]	; (800698c <_svfiprintf_r+0x1dc>)
 800688c:	1a80      	subs	r0, r0, r2
 800688e:	fa0b f000 	lsl.w	r0, fp, r0
 8006892:	4318      	orrs	r0, r3
 8006894:	9004      	str	r0, [sp, #16]
 8006896:	463d      	mov	r5, r7
 8006898:	e7d3      	b.n	8006842 <_svfiprintf_r+0x92>
 800689a:	9a03      	ldr	r2, [sp, #12]
 800689c:	1d11      	adds	r1, r2, #4
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	9103      	str	r1, [sp, #12]
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	db01      	blt.n	80068aa <_svfiprintf_r+0xfa>
 80068a6:	9207      	str	r2, [sp, #28]
 80068a8:	e004      	b.n	80068b4 <_svfiprintf_r+0x104>
 80068aa:	4252      	negs	r2, r2
 80068ac:	f043 0302 	orr.w	r3, r3, #2
 80068b0:	9207      	str	r2, [sp, #28]
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	783b      	ldrb	r3, [r7, #0]
 80068b6:	2b2e      	cmp	r3, #46	; 0x2e
 80068b8:	d10c      	bne.n	80068d4 <_svfiprintf_r+0x124>
 80068ba:	787b      	ldrb	r3, [r7, #1]
 80068bc:	2b2a      	cmp	r3, #42	; 0x2a
 80068be:	d133      	bne.n	8006928 <_svfiprintf_r+0x178>
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	1d1a      	adds	r2, r3, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	9203      	str	r2, [sp, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bfb8      	it	lt
 80068cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80068d0:	3702      	adds	r7, #2
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	4d2e      	ldr	r5, [pc, #184]	; (8006990 <_svfiprintf_r+0x1e0>)
 80068d6:	7839      	ldrb	r1, [r7, #0]
 80068d8:	2203      	movs	r2, #3
 80068da:	4628      	mov	r0, r5
 80068dc:	f7f9 fc78 	bl	80001d0 <memchr>
 80068e0:	b138      	cbz	r0, 80068f2 <_svfiprintf_r+0x142>
 80068e2:	2340      	movs	r3, #64	; 0x40
 80068e4:	1b40      	subs	r0, r0, r5
 80068e6:	fa03 f000 	lsl.w	r0, r3, r0
 80068ea:	9b04      	ldr	r3, [sp, #16]
 80068ec:	4303      	orrs	r3, r0
 80068ee:	3701      	adds	r7, #1
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	7839      	ldrb	r1, [r7, #0]
 80068f4:	4827      	ldr	r0, [pc, #156]	; (8006994 <_svfiprintf_r+0x1e4>)
 80068f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068fa:	2206      	movs	r2, #6
 80068fc:	1c7e      	adds	r6, r7, #1
 80068fe:	f7f9 fc67 	bl	80001d0 <memchr>
 8006902:	2800      	cmp	r0, #0
 8006904:	d038      	beq.n	8006978 <_svfiprintf_r+0x1c8>
 8006906:	4b24      	ldr	r3, [pc, #144]	; (8006998 <_svfiprintf_r+0x1e8>)
 8006908:	bb13      	cbnz	r3, 8006950 <_svfiprintf_r+0x1a0>
 800690a:	9b03      	ldr	r3, [sp, #12]
 800690c:	3307      	adds	r3, #7
 800690e:	f023 0307 	bic.w	r3, r3, #7
 8006912:	3308      	adds	r3, #8
 8006914:	9303      	str	r3, [sp, #12]
 8006916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006918:	444b      	add	r3, r9
 800691a:	9309      	str	r3, [sp, #36]	; 0x24
 800691c:	e76d      	b.n	80067fa <_svfiprintf_r+0x4a>
 800691e:	fb05 3202 	mla	r2, r5, r2, r3
 8006922:	2001      	movs	r0, #1
 8006924:	460f      	mov	r7, r1
 8006926:	e7a6      	b.n	8006876 <_svfiprintf_r+0xc6>
 8006928:	2300      	movs	r3, #0
 800692a:	3701      	adds	r7, #1
 800692c:	9305      	str	r3, [sp, #20]
 800692e:	4619      	mov	r1, r3
 8006930:	250a      	movs	r5, #10
 8006932:	4638      	mov	r0, r7
 8006934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006938:	3a30      	subs	r2, #48	; 0x30
 800693a:	2a09      	cmp	r2, #9
 800693c:	d903      	bls.n	8006946 <_svfiprintf_r+0x196>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0c8      	beq.n	80068d4 <_svfiprintf_r+0x124>
 8006942:	9105      	str	r1, [sp, #20]
 8006944:	e7c6      	b.n	80068d4 <_svfiprintf_r+0x124>
 8006946:	fb05 2101 	mla	r1, r5, r1, r2
 800694a:	2301      	movs	r3, #1
 800694c:	4607      	mov	r7, r0
 800694e:	e7f0      	b.n	8006932 <_svfiprintf_r+0x182>
 8006950:	ab03      	add	r3, sp, #12
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4622      	mov	r2, r4
 8006956:	4b11      	ldr	r3, [pc, #68]	; (800699c <_svfiprintf_r+0x1ec>)
 8006958:	a904      	add	r1, sp, #16
 800695a:	4640      	mov	r0, r8
 800695c:	f3af 8000 	nop.w
 8006960:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006964:	4681      	mov	r9, r0
 8006966:	d1d6      	bne.n	8006916 <_svfiprintf_r+0x166>
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	065b      	lsls	r3, r3, #25
 800696c:	f53f af35 	bmi.w	80067da <_svfiprintf_r+0x2a>
 8006970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006972:	b01d      	add	sp, #116	; 0x74
 8006974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006978:	ab03      	add	r3, sp, #12
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	4622      	mov	r2, r4
 800697e:	4b07      	ldr	r3, [pc, #28]	; (800699c <_svfiprintf_r+0x1ec>)
 8006980:	a904      	add	r1, sp, #16
 8006982:	4640      	mov	r0, r8
 8006984:	f000 f882 	bl	8006a8c <_printf_i>
 8006988:	e7ea      	b.n	8006960 <_svfiprintf_r+0x1b0>
 800698a:	bf00      	nop
 800698c:	08007254 	.word	0x08007254
 8006990:	0800725a 	.word	0x0800725a
 8006994:	0800725e 	.word	0x0800725e
 8006998:	00000000 	.word	0x00000000
 800699c:	080066fd 	.word	0x080066fd

080069a0 <_printf_common>:
 80069a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	4691      	mov	r9, r2
 80069a6:	461f      	mov	r7, r3
 80069a8:	688a      	ldr	r2, [r1, #8]
 80069aa:	690b      	ldr	r3, [r1, #16]
 80069ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069b0:	4293      	cmp	r3, r2
 80069b2:	bfb8      	it	lt
 80069b4:	4613      	movlt	r3, r2
 80069b6:	f8c9 3000 	str.w	r3, [r9]
 80069ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069be:	4606      	mov	r6, r0
 80069c0:	460c      	mov	r4, r1
 80069c2:	b112      	cbz	r2, 80069ca <_printf_common+0x2a>
 80069c4:	3301      	adds	r3, #1
 80069c6:	f8c9 3000 	str.w	r3, [r9]
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	0699      	lsls	r1, r3, #26
 80069ce:	bf42      	ittt	mi
 80069d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80069d4:	3302      	addmi	r3, #2
 80069d6:	f8c9 3000 	strmi.w	r3, [r9]
 80069da:	6825      	ldr	r5, [r4, #0]
 80069dc:	f015 0506 	ands.w	r5, r5, #6
 80069e0:	d107      	bne.n	80069f2 <_printf_common+0x52>
 80069e2:	f104 0a19 	add.w	sl, r4, #25
 80069e6:	68e3      	ldr	r3, [r4, #12]
 80069e8:	f8d9 2000 	ldr.w	r2, [r9]
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	42ab      	cmp	r3, r5
 80069f0:	dc28      	bgt.n	8006a44 <_printf_common+0xa4>
 80069f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	3300      	adds	r3, #0
 80069fa:	bf18      	it	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	0692      	lsls	r2, r2, #26
 8006a00:	d42d      	bmi.n	8006a5e <_printf_common+0xbe>
 8006a02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a06:	4639      	mov	r1, r7
 8006a08:	4630      	mov	r0, r6
 8006a0a:	47c0      	blx	r8
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d020      	beq.n	8006a52 <_printf_common+0xb2>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	68e5      	ldr	r5, [r4, #12]
 8006a14:	f8d9 2000 	ldr.w	r2, [r9]
 8006a18:	f003 0306 	and.w	r3, r3, #6
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	bf08      	it	eq
 8006a20:	1aad      	subeq	r5, r5, r2
 8006a22:	68a3      	ldr	r3, [r4, #8]
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	bf0c      	ite	eq
 8006a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a2c:	2500      	movne	r5, #0
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	bfc4      	itt	gt
 8006a32:	1a9b      	subgt	r3, r3, r2
 8006a34:	18ed      	addgt	r5, r5, r3
 8006a36:	f04f 0900 	mov.w	r9, #0
 8006a3a:	341a      	adds	r4, #26
 8006a3c:	454d      	cmp	r5, r9
 8006a3e:	d11a      	bne.n	8006a76 <_printf_common+0xd6>
 8006a40:	2000      	movs	r0, #0
 8006a42:	e008      	b.n	8006a56 <_printf_common+0xb6>
 8006a44:	2301      	movs	r3, #1
 8006a46:	4652      	mov	r2, sl
 8006a48:	4639      	mov	r1, r7
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	47c0      	blx	r8
 8006a4e:	3001      	adds	r0, #1
 8006a50:	d103      	bne.n	8006a5a <_printf_common+0xba>
 8006a52:	f04f 30ff 	mov.w	r0, #4294967295
 8006a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5a:	3501      	adds	r5, #1
 8006a5c:	e7c3      	b.n	80069e6 <_printf_common+0x46>
 8006a5e:	18e1      	adds	r1, r4, r3
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	2030      	movs	r0, #48	; 0x30
 8006a64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a68:	4422      	add	r2, r4
 8006a6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a72:	3302      	adds	r3, #2
 8006a74:	e7c5      	b.n	8006a02 <_printf_common+0x62>
 8006a76:	2301      	movs	r3, #1
 8006a78:	4622      	mov	r2, r4
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	47c0      	blx	r8
 8006a80:	3001      	adds	r0, #1
 8006a82:	d0e6      	beq.n	8006a52 <_printf_common+0xb2>
 8006a84:	f109 0901 	add.w	r9, r9, #1
 8006a88:	e7d8      	b.n	8006a3c <_printf_common+0x9c>
	...

08006a8c <_printf_i>:
 8006a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006a94:	460c      	mov	r4, r1
 8006a96:	7e09      	ldrb	r1, [r1, #24]
 8006a98:	b085      	sub	sp, #20
 8006a9a:	296e      	cmp	r1, #110	; 0x6e
 8006a9c:	4617      	mov	r7, r2
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	4698      	mov	r8, r3
 8006aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aa4:	f000 80b3 	beq.w	8006c0e <_printf_i+0x182>
 8006aa8:	d822      	bhi.n	8006af0 <_printf_i+0x64>
 8006aaa:	2963      	cmp	r1, #99	; 0x63
 8006aac:	d036      	beq.n	8006b1c <_printf_i+0x90>
 8006aae:	d80a      	bhi.n	8006ac6 <_printf_i+0x3a>
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	f000 80b9 	beq.w	8006c28 <_printf_i+0x19c>
 8006ab6:	2958      	cmp	r1, #88	; 0x58
 8006ab8:	f000 8083 	beq.w	8006bc2 <_printf_i+0x136>
 8006abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ac0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006ac4:	e032      	b.n	8006b2c <_printf_i+0xa0>
 8006ac6:	2964      	cmp	r1, #100	; 0x64
 8006ac8:	d001      	beq.n	8006ace <_printf_i+0x42>
 8006aca:	2969      	cmp	r1, #105	; 0x69
 8006acc:	d1f6      	bne.n	8006abc <_printf_i+0x30>
 8006ace:	6820      	ldr	r0, [r4, #0]
 8006ad0:	6813      	ldr	r3, [r2, #0]
 8006ad2:	0605      	lsls	r5, r0, #24
 8006ad4:	f103 0104 	add.w	r1, r3, #4
 8006ad8:	d52a      	bpl.n	8006b30 <_printf_i+0xa4>
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6011      	str	r1, [r2, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	da03      	bge.n	8006aea <_printf_i+0x5e>
 8006ae2:	222d      	movs	r2, #45	; 0x2d
 8006ae4:	425b      	negs	r3, r3
 8006ae6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006aea:	486f      	ldr	r0, [pc, #444]	; (8006ca8 <_printf_i+0x21c>)
 8006aec:	220a      	movs	r2, #10
 8006aee:	e039      	b.n	8006b64 <_printf_i+0xd8>
 8006af0:	2973      	cmp	r1, #115	; 0x73
 8006af2:	f000 809d 	beq.w	8006c30 <_printf_i+0x1a4>
 8006af6:	d808      	bhi.n	8006b0a <_printf_i+0x7e>
 8006af8:	296f      	cmp	r1, #111	; 0x6f
 8006afa:	d020      	beq.n	8006b3e <_printf_i+0xb2>
 8006afc:	2970      	cmp	r1, #112	; 0x70
 8006afe:	d1dd      	bne.n	8006abc <_printf_i+0x30>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	f043 0320 	orr.w	r3, r3, #32
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	e003      	b.n	8006b12 <_printf_i+0x86>
 8006b0a:	2975      	cmp	r1, #117	; 0x75
 8006b0c:	d017      	beq.n	8006b3e <_printf_i+0xb2>
 8006b0e:	2978      	cmp	r1, #120	; 0x78
 8006b10:	d1d4      	bne.n	8006abc <_printf_i+0x30>
 8006b12:	2378      	movs	r3, #120	; 0x78
 8006b14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b18:	4864      	ldr	r0, [pc, #400]	; (8006cac <_printf_i+0x220>)
 8006b1a:	e055      	b.n	8006bc8 <_printf_i+0x13c>
 8006b1c:	6813      	ldr	r3, [r2, #0]
 8006b1e:	1d19      	adds	r1, r3, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6011      	str	r1, [r2, #0]
 8006b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e08c      	b.n	8006c4a <_printf_i+0x1be>
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6011      	str	r1, [r2, #0]
 8006b34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b38:	bf18      	it	ne
 8006b3a:	b21b      	sxthne	r3, r3
 8006b3c:	e7cf      	b.n	8006ade <_printf_i+0x52>
 8006b3e:	6813      	ldr	r3, [r2, #0]
 8006b40:	6825      	ldr	r5, [r4, #0]
 8006b42:	1d18      	adds	r0, r3, #4
 8006b44:	6010      	str	r0, [r2, #0]
 8006b46:	0628      	lsls	r0, r5, #24
 8006b48:	d501      	bpl.n	8006b4e <_printf_i+0xc2>
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	e002      	b.n	8006b54 <_printf_i+0xc8>
 8006b4e:	0668      	lsls	r0, r5, #25
 8006b50:	d5fb      	bpl.n	8006b4a <_printf_i+0xbe>
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	4854      	ldr	r0, [pc, #336]	; (8006ca8 <_printf_i+0x21c>)
 8006b56:	296f      	cmp	r1, #111	; 0x6f
 8006b58:	bf14      	ite	ne
 8006b5a:	220a      	movne	r2, #10
 8006b5c:	2208      	moveq	r2, #8
 8006b5e:	2100      	movs	r1, #0
 8006b60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b64:	6865      	ldr	r5, [r4, #4]
 8006b66:	60a5      	str	r5, [r4, #8]
 8006b68:	2d00      	cmp	r5, #0
 8006b6a:	f2c0 8095 	blt.w	8006c98 <_printf_i+0x20c>
 8006b6e:	6821      	ldr	r1, [r4, #0]
 8006b70:	f021 0104 	bic.w	r1, r1, #4
 8006b74:	6021      	str	r1, [r4, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d13d      	bne.n	8006bf6 <_printf_i+0x16a>
 8006b7a:	2d00      	cmp	r5, #0
 8006b7c:	f040 808e 	bne.w	8006c9c <_printf_i+0x210>
 8006b80:	4665      	mov	r5, ip
 8006b82:	2a08      	cmp	r2, #8
 8006b84:	d10b      	bne.n	8006b9e <_printf_i+0x112>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	07db      	lsls	r3, r3, #31
 8006b8a:	d508      	bpl.n	8006b9e <_printf_i+0x112>
 8006b8c:	6923      	ldr	r3, [r4, #16]
 8006b8e:	6862      	ldr	r2, [r4, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	bfde      	ittt	le
 8006b94:	2330      	movle	r3, #48	; 0x30
 8006b96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b9e:	ebac 0305 	sub.w	r3, ip, r5
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	f8cd 8000 	str.w	r8, [sp]
 8006ba8:	463b      	mov	r3, r7
 8006baa:	aa03      	add	r2, sp, #12
 8006bac:	4621      	mov	r1, r4
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f7ff fef6 	bl	80069a0 <_printf_common>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d14d      	bne.n	8006c54 <_printf_i+0x1c8>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	b005      	add	sp, #20
 8006bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bc2:	4839      	ldr	r0, [pc, #228]	; (8006ca8 <_printf_i+0x21c>)
 8006bc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006bc8:	6813      	ldr	r3, [r2, #0]
 8006bca:	6821      	ldr	r1, [r4, #0]
 8006bcc:	1d1d      	adds	r5, r3, #4
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6015      	str	r5, [r2, #0]
 8006bd2:	060a      	lsls	r2, r1, #24
 8006bd4:	d50b      	bpl.n	8006bee <_printf_i+0x162>
 8006bd6:	07ca      	lsls	r2, r1, #31
 8006bd8:	bf44      	itt	mi
 8006bda:	f041 0120 	orrmi.w	r1, r1, #32
 8006bde:	6021      	strmi	r1, [r4, #0]
 8006be0:	b91b      	cbnz	r3, 8006bea <_printf_i+0x15e>
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	f022 0220 	bic.w	r2, r2, #32
 8006be8:	6022      	str	r2, [r4, #0]
 8006bea:	2210      	movs	r2, #16
 8006bec:	e7b7      	b.n	8006b5e <_printf_i+0xd2>
 8006bee:	064d      	lsls	r5, r1, #25
 8006bf0:	bf48      	it	mi
 8006bf2:	b29b      	uxthmi	r3, r3
 8006bf4:	e7ef      	b.n	8006bd6 <_printf_i+0x14a>
 8006bf6:	4665      	mov	r5, ip
 8006bf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bfc:	fb02 3311 	mls	r3, r2, r1, r3
 8006c00:	5cc3      	ldrb	r3, [r0, r3]
 8006c02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c06:	460b      	mov	r3, r1
 8006c08:	2900      	cmp	r1, #0
 8006c0a:	d1f5      	bne.n	8006bf8 <_printf_i+0x16c>
 8006c0c:	e7b9      	b.n	8006b82 <_printf_i+0xf6>
 8006c0e:	6813      	ldr	r3, [r2, #0]
 8006c10:	6825      	ldr	r5, [r4, #0]
 8006c12:	6961      	ldr	r1, [r4, #20]
 8006c14:	1d18      	adds	r0, r3, #4
 8006c16:	6010      	str	r0, [r2, #0]
 8006c18:	0628      	lsls	r0, r5, #24
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	d501      	bpl.n	8006c22 <_printf_i+0x196>
 8006c1e:	6019      	str	r1, [r3, #0]
 8006c20:	e002      	b.n	8006c28 <_printf_i+0x19c>
 8006c22:	066a      	lsls	r2, r5, #25
 8006c24:	d5fb      	bpl.n	8006c1e <_printf_i+0x192>
 8006c26:	8019      	strh	r1, [r3, #0]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	6123      	str	r3, [r4, #16]
 8006c2c:	4665      	mov	r5, ip
 8006c2e:	e7b9      	b.n	8006ba4 <_printf_i+0x118>
 8006c30:	6813      	ldr	r3, [r2, #0]
 8006c32:	1d19      	adds	r1, r3, #4
 8006c34:	6011      	str	r1, [r2, #0]
 8006c36:	681d      	ldr	r5, [r3, #0]
 8006c38:	6862      	ldr	r2, [r4, #4]
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f7f9 fac7 	bl	80001d0 <memchr>
 8006c42:	b108      	cbz	r0, 8006c48 <_printf_i+0x1bc>
 8006c44:	1b40      	subs	r0, r0, r5
 8006c46:	6060      	str	r0, [r4, #4]
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	6123      	str	r3, [r4, #16]
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c52:	e7a7      	b.n	8006ba4 <_printf_i+0x118>
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	462a      	mov	r2, r5
 8006c58:	4639      	mov	r1, r7
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	47c0      	blx	r8
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d0aa      	beq.n	8006bb8 <_printf_i+0x12c>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	079b      	lsls	r3, r3, #30
 8006c66:	d413      	bmi.n	8006c90 <_printf_i+0x204>
 8006c68:	68e0      	ldr	r0, [r4, #12]
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	4298      	cmp	r0, r3
 8006c6e:	bfb8      	it	lt
 8006c70:	4618      	movlt	r0, r3
 8006c72:	e7a3      	b.n	8006bbc <_printf_i+0x130>
 8006c74:	2301      	movs	r3, #1
 8006c76:	464a      	mov	r2, r9
 8006c78:	4639      	mov	r1, r7
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	47c0      	blx	r8
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d09a      	beq.n	8006bb8 <_printf_i+0x12c>
 8006c82:	3501      	adds	r5, #1
 8006c84:	68e3      	ldr	r3, [r4, #12]
 8006c86:	9a03      	ldr	r2, [sp, #12]
 8006c88:	1a9b      	subs	r3, r3, r2
 8006c8a:	42ab      	cmp	r3, r5
 8006c8c:	dcf2      	bgt.n	8006c74 <_printf_i+0x1e8>
 8006c8e:	e7eb      	b.n	8006c68 <_printf_i+0x1dc>
 8006c90:	2500      	movs	r5, #0
 8006c92:	f104 0919 	add.w	r9, r4, #25
 8006c96:	e7f5      	b.n	8006c84 <_printf_i+0x1f8>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1ac      	bne.n	8006bf6 <_printf_i+0x16a>
 8006c9c:	7803      	ldrb	r3, [r0, #0]
 8006c9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ca2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ca6:	e76c      	b.n	8006b82 <_printf_i+0xf6>
 8006ca8:	08007265 	.word	0x08007265
 8006cac:	08007276 	.word	0x08007276

08006cb0 <memmove>:
 8006cb0:	4288      	cmp	r0, r1
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	eb01 0302 	add.w	r3, r1, r2
 8006cb8:	d807      	bhi.n	8006cca <memmove+0x1a>
 8006cba:	1e42      	subs	r2, r0, #1
 8006cbc:	4299      	cmp	r1, r3
 8006cbe:	d00a      	beq.n	8006cd6 <memmove+0x26>
 8006cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cc4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006cc8:	e7f8      	b.n	8006cbc <memmove+0xc>
 8006cca:	4283      	cmp	r3, r0
 8006ccc:	d9f5      	bls.n	8006cba <memmove+0xa>
 8006cce:	1881      	adds	r1, r0, r2
 8006cd0:	1ad2      	subs	r2, r2, r3
 8006cd2:	42d3      	cmn	r3, r2
 8006cd4:	d100      	bne.n	8006cd8 <memmove+0x28>
 8006cd6:	bd10      	pop	{r4, pc}
 8006cd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cdc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006ce0:	e7f7      	b.n	8006cd2 <memmove+0x22>
	...

08006ce4 <_free_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	d045      	beq.n	8006d78 <_free_r+0x94>
 8006cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf0:	1f0c      	subs	r4, r1, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	bfb8      	it	lt
 8006cf6:	18e4      	addlt	r4, r4, r3
 8006cf8:	f000 f8d2 	bl	8006ea0 <__malloc_lock>
 8006cfc:	4a1f      	ldr	r2, [pc, #124]	; (8006d7c <_free_r+0x98>)
 8006cfe:	6813      	ldr	r3, [r2, #0]
 8006d00:	4610      	mov	r0, r2
 8006d02:	b933      	cbnz	r3, 8006d12 <_free_r+0x2e>
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	6014      	str	r4, [r2, #0]
 8006d08:	4628      	mov	r0, r5
 8006d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d0e:	f000 b8c8 	b.w	8006ea2 <__malloc_unlock>
 8006d12:	42a3      	cmp	r3, r4
 8006d14:	d90c      	bls.n	8006d30 <_free_r+0x4c>
 8006d16:	6821      	ldr	r1, [r4, #0]
 8006d18:	1862      	adds	r2, r4, r1
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	bf04      	itt	eq
 8006d1e:	681a      	ldreq	r2, [r3, #0]
 8006d20:	685b      	ldreq	r3, [r3, #4]
 8006d22:	6063      	str	r3, [r4, #4]
 8006d24:	bf04      	itt	eq
 8006d26:	1852      	addeq	r2, r2, r1
 8006d28:	6022      	streq	r2, [r4, #0]
 8006d2a:	6004      	str	r4, [r0, #0]
 8006d2c:	e7ec      	b.n	8006d08 <_free_r+0x24>
 8006d2e:	4613      	mov	r3, r2
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	b10a      	cbz	r2, 8006d38 <_free_r+0x54>
 8006d34:	42a2      	cmp	r2, r4
 8006d36:	d9fa      	bls.n	8006d2e <_free_r+0x4a>
 8006d38:	6819      	ldr	r1, [r3, #0]
 8006d3a:	1858      	adds	r0, r3, r1
 8006d3c:	42a0      	cmp	r0, r4
 8006d3e:	d10b      	bne.n	8006d58 <_free_r+0x74>
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	4401      	add	r1, r0
 8006d44:	1858      	adds	r0, r3, r1
 8006d46:	4282      	cmp	r2, r0
 8006d48:	6019      	str	r1, [r3, #0]
 8006d4a:	d1dd      	bne.n	8006d08 <_free_r+0x24>
 8006d4c:	6810      	ldr	r0, [r2, #0]
 8006d4e:	6852      	ldr	r2, [r2, #4]
 8006d50:	605a      	str	r2, [r3, #4]
 8006d52:	4401      	add	r1, r0
 8006d54:	6019      	str	r1, [r3, #0]
 8006d56:	e7d7      	b.n	8006d08 <_free_r+0x24>
 8006d58:	d902      	bls.n	8006d60 <_free_r+0x7c>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	602b      	str	r3, [r5, #0]
 8006d5e:	e7d3      	b.n	8006d08 <_free_r+0x24>
 8006d60:	6820      	ldr	r0, [r4, #0]
 8006d62:	1821      	adds	r1, r4, r0
 8006d64:	428a      	cmp	r2, r1
 8006d66:	bf04      	itt	eq
 8006d68:	6811      	ldreq	r1, [r2, #0]
 8006d6a:	6852      	ldreq	r2, [r2, #4]
 8006d6c:	6062      	str	r2, [r4, #4]
 8006d6e:	bf04      	itt	eq
 8006d70:	1809      	addeq	r1, r1, r0
 8006d72:	6021      	streq	r1, [r4, #0]
 8006d74:	605c      	str	r4, [r3, #4]
 8006d76:	e7c7      	b.n	8006d08 <_free_r+0x24>
 8006d78:	bd38      	pop	{r3, r4, r5, pc}
 8006d7a:	bf00      	nop
 8006d7c:	200014a8 	.word	0x200014a8

08006d80 <_malloc_r>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	1ccd      	adds	r5, r1, #3
 8006d84:	f025 0503 	bic.w	r5, r5, #3
 8006d88:	3508      	adds	r5, #8
 8006d8a:	2d0c      	cmp	r5, #12
 8006d8c:	bf38      	it	cc
 8006d8e:	250c      	movcc	r5, #12
 8006d90:	2d00      	cmp	r5, #0
 8006d92:	4606      	mov	r6, r0
 8006d94:	db01      	blt.n	8006d9a <_malloc_r+0x1a>
 8006d96:	42a9      	cmp	r1, r5
 8006d98:	d903      	bls.n	8006da2 <_malloc_r+0x22>
 8006d9a:	230c      	movs	r3, #12
 8006d9c:	6033      	str	r3, [r6, #0]
 8006d9e:	2000      	movs	r0, #0
 8006da0:	bd70      	pop	{r4, r5, r6, pc}
 8006da2:	f000 f87d 	bl	8006ea0 <__malloc_lock>
 8006da6:	4a21      	ldr	r2, [pc, #132]	; (8006e2c <_malloc_r+0xac>)
 8006da8:	6814      	ldr	r4, [r2, #0]
 8006daa:	4621      	mov	r1, r4
 8006dac:	b991      	cbnz	r1, 8006dd4 <_malloc_r+0x54>
 8006dae:	4c20      	ldr	r4, [pc, #128]	; (8006e30 <_malloc_r+0xb0>)
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	b91b      	cbnz	r3, 8006dbc <_malloc_r+0x3c>
 8006db4:	4630      	mov	r0, r6
 8006db6:	f000 f863 	bl	8006e80 <_sbrk_r>
 8006dba:	6020      	str	r0, [r4, #0]
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f000 f85e 	bl	8006e80 <_sbrk_r>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d124      	bne.n	8006e12 <_malloc_r+0x92>
 8006dc8:	230c      	movs	r3, #12
 8006dca:	6033      	str	r3, [r6, #0]
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f000 f868 	bl	8006ea2 <__malloc_unlock>
 8006dd2:	e7e4      	b.n	8006d9e <_malloc_r+0x1e>
 8006dd4:	680b      	ldr	r3, [r1, #0]
 8006dd6:	1b5b      	subs	r3, r3, r5
 8006dd8:	d418      	bmi.n	8006e0c <_malloc_r+0x8c>
 8006dda:	2b0b      	cmp	r3, #11
 8006ddc:	d90f      	bls.n	8006dfe <_malloc_r+0x7e>
 8006dde:	600b      	str	r3, [r1, #0]
 8006de0:	50cd      	str	r5, [r1, r3]
 8006de2:	18cc      	adds	r4, r1, r3
 8006de4:	4630      	mov	r0, r6
 8006de6:	f000 f85c 	bl	8006ea2 <__malloc_unlock>
 8006dea:	f104 000b 	add.w	r0, r4, #11
 8006dee:	1d23      	adds	r3, r4, #4
 8006df0:	f020 0007 	bic.w	r0, r0, #7
 8006df4:	1ac3      	subs	r3, r0, r3
 8006df6:	d0d3      	beq.n	8006da0 <_malloc_r+0x20>
 8006df8:	425a      	negs	r2, r3
 8006dfa:	50e2      	str	r2, [r4, r3]
 8006dfc:	e7d0      	b.n	8006da0 <_malloc_r+0x20>
 8006dfe:	428c      	cmp	r4, r1
 8006e00:	684b      	ldr	r3, [r1, #4]
 8006e02:	bf16      	itet	ne
 8006e04:	6063      	strne	r3, [r4, #4]
 8006e06:	6013      	streq	r3, [r2, #0]
 8006e08:	460c      	movne	r4, r1
 8006e0a:	e7eb      	b.n	8006de4 <_malloc_r+0x64>
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	6849      	ldr	r1, [r1, #4]
 8006e10:	e7cc      	b.n	8006dac <_malloc_r+0x2c>
 8006e12:	1cc4      	adds	r4, r0, #3
 8006e14:	f024 0403 	bic.w	r4, r4, #3
 8006e18:	42a0      	cmp	r0, r4
 8006e1a:	d005      	beq.n	8006e28 <_malloc_r+0xa8>
 8006e1c:	1a21      	subs	r1, r4, r0
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f000 f82e 	bl	8006e80 <_sbrk_r>
 8006e24:	3001      	adds	r0, #1
 8006e26:	d0cf      	beq.n	8006dc8 <_malloc_r+0x48>
 8006e28:	6025      	str	r5, [r4, #0]
 8006e2a:	e7db      	b.n	8006de4 <_malloc_r+0x64>
 8006e2c:	200014a8 	.word	0x200014a8
 8006e30:	200014ac 	.word	0x200014ac

08006e34 <_realloc_r>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	4607      	mov	r7, r0
 8006e38:	4614      	mov	r4, r2
 8006e3a:	460e      	mov	r6, r1
 8006e3c:	b921      	cbnz	r1, 8006e48 <_realloc_r+0x14>
 8006e3e:	4611      	mov	r1, r2
 8006e40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e44:	f7ff bf9c 	b.w	8006d80 <_malloc_r>
 8006e48:	b922      	cbnz	r2, 8006e54 <_realloc_r+0x20>
 8006e4a:	f7ff ff4b 	bl	8006ce4 <_free_r>
 8006e4e:	4625      	mov	r5, r4
 8006e50:	4628      	mov	r0, r5
 8006e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e54:	f000 f826 	bl	8006ea4 <_malloc_usable_size_r>
 8006e58:	42a0      	cmp	r0, r4
 8006e5a:	d20f      	bcs.n	8006e7c <_realloc_r+0x48>
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4638      	mov	r0, r7
 8006e60:	f7ff ff8e 	bl	8006d80 <_malloc_r>
 8006e64:	4605      	mov	r5, r0
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d0f2      	beq.n	8006e50 <_realloc_r+0x1c>
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	f7ff fc11 	bl	8006694 <memcpy>
 8006e72:	4631      	mov	r1, r6
 8006e74:	4638      	mov	r0, r7
 8006e76:	f7ff ff35 	bl	8006ce4 <_free_r>
 8006e7a:	e7e9      	b.n	8006e50 <_realloc_r+0x1c>
 8006e7c:	4635      	mov	r5, r6
 8006e7e:	e7e7      	b.n	8006e50 <_realloc_r+0x1c>

08006e80 <_sbrk_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4c06      	ldr	r4, [pc, #24]	; (8006e9c <_sbrk_r+0x1c>)
 8006e84:	2300      	movs	r3, #0
 8006e86:	4605      	mov	r5, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	f7ff fa38 	bl	8006300 <_sbrk>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_sbrk_r+0x1a>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_sbrk_r+0x1a>
 8006e98:	602b      	str	r3, [r5, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	200015c4 	.word	0x200015c4

08006ea0 <__malloc_lock>:
 8006ea0:	4770      	bx	lr

08006ea2 <__malloc_unlock>:
 8006ea2:	4770      	bx	lr

08006ea4 <_malloc_usable_size_r>:
 8006ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ea8:	1f18      	subs	r0, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	bfbc      	itt	lt
 8006eae:	580b      	ldrlt	r3, [r1, r0]
 8006eb0:	18c0      	addlt	r0, r0, r3
 8006eb2:	4770      	bx	lr

08006eb4 <_init>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	bf00      	nop
 8006eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eba:	bc08      	pop	{r3}
 8006ebc:	469e      	mov	lr, r3
 8006ebe:	4770      	bx	lr

08006ec0 <_fini>:
 8006ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec2:	bf00      	nop
 8006ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec6:	bc08      	pop	{r3}
 8006ec8:	469e      	mov	lr, r3
 8006eca:	4770      	bx	lr
