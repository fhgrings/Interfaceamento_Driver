
Paralela.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003334  08003334  00013334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033bc  080033bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080033bc  080033bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033bc  080033bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033bc  080033bc  000133bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08003434  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003434  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b68f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001784  00000000  00000000  0002b72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000600  00000000  00000000  0002ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000558  00000000  00000000  0002d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bf11  00000000  00000000  0002da10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067b7  00000000  00000000  00049921  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009bd70  00000000  00000000  000500d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebe48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a30  00000000  00000000  000ebec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800331c 	.word	0x0800331c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800331c 	.word	0x0800331c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f949 	bl	8000528 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 f808 	bl	80002ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f002 fac6 	bl	800282c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_InitTick+0x54>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_InitTick+0x58>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f961 	bl	8000592 <HAL_SYSTICK_Config>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00e      	b.n	80002f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d80a      	bhi.n	80002f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e0:	2200      	movs	r2, #0
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295
 80002e8:	f000 f929 	bl	800053e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <HAL_InitTick+0x5c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e000      	b.n	80002f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002f6:	2301      	movs	r3, #1
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000008 	.word	0x20000008
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000

0800030c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x20>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x24>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4413      	add	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_IncTick+0x24>)
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004
 8000330:	2000009c 	.word	0x2000009c

08000334 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return uwTick;  
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <HAL_GetTick+0x14>)
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	2000009c 	.word	0x2000009c

0800034c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000354:	f7ff ffee 	bl	8000334 <HAL_GetTick>
 8000358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000364:	d005      	beq.n	8000372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_Delay+0x40>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	461a      	mov	r2, r3
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	4413      	add	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000372:	bf00      	nop
 8000374:	f7ff ffde 	bl	8000334 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	429a      	cmp	r2, r3
 8000382:	d8f7      	bhi.n	8000374 <HAL_Delay+0x28>
  {
  }
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000004 	.word	0x20000004

08000390 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f003 0307 	and.w	r3, r3, #7
 800039e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ac:	4013      	ands	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <NVIC_GetPriorityGrouping+0x18>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	f003 0307 	and.w	r3, r3, #7
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 021f 	and.w	r2, r3, #31
 8000404:	4907      	ldr	r1, [pc, #28]	; (8000424 <NVIC_EnableIRQ+0x30>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	095b      	lsrs	r3, r3, #5
 800040c:	2001      	movs	r0, #1
 800040e:	fa00 f202 	lsl.w	r2, r0, r2
 8000412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e100 	.word	0xe000e100

08000428 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000438:	2b00      	cmp	r3, #0
 800043a:	da0b      	bge.n	8000454 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	b2da      	uxtb	r2, r3
 8000440:	490c      	ldr	r1, [pc, #48]	; (8000474 <NVIC_SetPriority+0x4c>)
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	f003 030f 	and.w	r3, r3, #15
 8000448:	3b04      	subs	r3, #4
 800044a:	0112      	lsls	r2, r2, #4
 800044c:	b2d2      	uxtb	r2, r2
 800044e:	440b      	add	r3, r1
 8000450:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000452:	e009      	b.n	8000468 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4907      	ldr	r1, [pc, #28]	; (8000478 <NVIC_SetPriority+0x50>)
 800045a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045e:	0112      	lsls	r2, r2, #4
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	440b      	add	r3, r1
 8000464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000ed00 	.word	0xe000ed00
 8000478:	e000e100 	.word	0xe000e100

0800047c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800047c:	b480      	push	{r7}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f003 0307 	and.w	r3, r3, #7
 800048e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	f1c3 0307 	rsb	r3, r3, #7
 8000496:	2b04      	cmp	r3, #4
 8000498:	bf28      	it	cs
 800049a:	2304      	movcs	r3, #4
 800049c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	3304      	adds	r3, #4
 80004a2:	2b06      	cmp	r3, #6
 80004a4:	d902      	bls.n	80004ac <NVIC_EncodePriority+0x30>
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	3b03      	subs	r3, #3
 80004aa:	e000      	b.n	80004ae <NVIC_EncodePriority+0x32>
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004b0:	f04f 32ff 	mov.w	r2, #4294967295
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	43da      	mvns	r2, r3
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	401a      	ands	r2, r3
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004c4:	f04f 31ff 	mov.w	r1, #4294967295
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	fa01 f303 	lsl.w	r3, r1, r3
 80004ce:	43d9      	mvns	r1, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d4:	4313      	orrs	r3, r2
         );
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3724      	adds	r7, #36	; 0x24
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004f4:	d301      	bcc.n	80004fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004f6:	2301      	movs	r3, #1
 80004f8:	e00f      	b.n	800051a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <SysTick_Config+0x40>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	3b01      	subs	r3, #1
 8000500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000502:	210f      	movs	r1, #15
 8000504:	f04f 30ff 	mov.w	r0, #4294967295
 8000508:	f7ff ff8e 	bl	8000428 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <SysTick_Config+0x40>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <SysTick_Config+0x40>)
 8000514:	2207      	movs	r2, #7
 8000516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	e000e010 	.word	0xe000e010

08000528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f7ff ff2d 	bl	8000390 <NVIC_SetPriorityGrouping>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	4603      	mov	r3, r0
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
 800054a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000550:	f7ff ff42 	bl	80003d8 <NVIC_GetPriorityGrouping>
 8000554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	68b9      	ldr	r1, [r7, #8]
 800055a:	6978      	ldr	r0, [r7, #20]
 800055c:	f7ff ff8e 	bl	800047c <NVIC_EncodePriority>
 8000560:	4602      	mov	r2, r0
 8000562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000566:	4611      	mov	r1, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ff5d 	bl	8000428 <NVIC_SetPriority>
}
 800056e:	bf00      	nop
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
 800057c:	4603      	mov	r3, r0
 800057e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff35 	bl	80003f4 <NVIC_EnableIRQ>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff ffa2 	bl	80004e4 <SysTick_Config>
 80005a0:	4603      	mov	r3, r0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005c2:	e14e      	b.n	8000862 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	2101      	movs	r1, #1
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	fa01 f303 	lsl.w	r3, r1, r3
 80005d0:	4013      	ands	r3, r2
 80005d2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f000 8140 	beq.w	800085c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d003      	beq.n	80005ec <HAL_GPIO_Init+0x40>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b12      	cmp	r3, #18
 80005ea:	d123      	bne.n	8000634 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	08da      	lsrs	r2, r3, #3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3208      	adds	r2, #8
 80005f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	f003 0307 	and.w	r3, r3, #7
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	220f      	movs	r2, #15
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	43db      	mvns	r3, r3
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4013      	ands	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	691a      	ldr	r2, [r3, #16]
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	4313      	orrs	r3, r2
 8000624:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	08da      	lsrs	r2, r3, #3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3208      	adds	r2, #8
 800062e:	6939      	ldr	r1, [r7, #16]
 8000630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	2203      	movs	r2, #3
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	43db      	mvns	r3, r3
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	4013      	ands	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	f003 0203 	and.w	r2, r3, #3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	4313      	orrs	r3, r2
 8000660:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d00b      	beq.n	8000688 <HAL_GPIO_Init+0xdc>
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d007      	beq.n	8000688 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800067c:	2b11      	cmp	r3, #17
 800067e:	d003      	beq.n	8000688 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	2b12      	cmp	r3, #18
 8000686:	d130      	bne.n	80006ea <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	2203      	movs	r2, #3
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	43db      	mvns	r3, r3
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	4013      	ands	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	68da      	ldr	r2, [r3, #12]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006be:	2201      	movs	r2, #1
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	43db      	mvns	r3, r3
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	4013      	ands	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	091b      	lsrs	r3, r3, #4
 80006d4:	f003 0201 	and.w	r2, r3, #1
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	693a      	ldr	r2, [r7, #16]
 80006e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	2203      	movs	r2, #3
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43db      	mvns	r3, r3
 80006fc:	693a      	ldr	r2, [r7, #16]
 80006fe:	4013      	ands	r3, r2
 8000700:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4313      	orrs	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	2b00      	cmp	r3, #0
 8000724:	f000 809a 	beq.w	800085c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000728:	4b55      	ldr	r3, [pc, #340]	; (8000880 <HAL_GPIO_Init+0x2d4>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a54      	ldr	r2, [pc, #336]	; (8000880 <HAL_GPIO_Init+0x2d4>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b52      	ldr	r3, [pc, #328]	; (8000880 <HAL_GPIO_Init+0x2d4>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000740:	4a50      	ldr	r2, [pc, #320]	; (8000884 <HAL_GPIO_Init+0x2d8>)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	089b      	lsrs	r3, r3, #2
 8000746:	3302      	adds	r3, #2
 8000748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	f003 0303 	and.w	r3, r3, #3
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	220f      	movs	r2, #15
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	43db      	mvns	r3, r3
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	4013      	ands	r3, r2
 8000762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800076a:	d013      	beq.n	8000794 <HAL_GPIO_Init+0x1e8>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a46      	ldr	r2, [pc, #280]	; (8000888 <HAL_GPIO_Init+0x2dc>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d00d      	beq.n	8000790 <HAL_GPIO_Init+0x1e4>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a45      	ldr	r2, [pc, #276]	; (800088c <HAL_GPIO_Init+0x2e0>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d007      	beq.n	800078c <HAL_GPIO_Init+0x1e0>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a44      	ldr	r2, [pc, #272]	; (8000890 <HAL_GPIO_Init+0x2e4>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d101      	bne.n	8000788 <HAL_GPIO_Init+0x1dc>
 8000784:	2303      	movs	r3, #3
 8000786:	e006      	b.n	8000796 <HAL_GPIO_Init+0x1ea>
 8000788:	2305      	movs	r3, #5
 800078a:	e004      	b.n	8000796 <HAL_GPIO_Init+0x1ea>
 800078c:	2302      	movs	r3, #2
 800078e:	e002      	b.n	8000796 <HAL_GPIO_Init+0x1ea>
 8000790:	2301      	movs	r3, #1
 8000792:	e000      	b.n	8000796 <HAL_GPIO_Init+0x1ea>
 8000794:	2300      	movs	r3, #0
 8000796:	697a      	ldr	r2, [r7, #20]
 8000798:	f002 0203 	and.w	r2, r2, #3
 800079c:	0092      	lsls	r2, r2, #2
 800079e:	4093      	lsls	r3, r2
 80007a0:	693a      	ldr	r2, [r7, #16]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80007a6:	4937      	ldr	r1, [pc, #220]	; (8000884 <HAL_GPIO_Init+0x2d8>)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	3302      	adds	r3, #2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007b4:	4b37      	ldr	r3, [pc, #220]	; (8000894 <HAL_GPIO_Init+0x2e8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	43db      	mvns	r3, r3
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d003      	beq.n	80007d8 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80007d8:	4a2e      	ldr	r2, [pc, #184]	; (8000894 <HAL_GPIO_Init+0x2e8>)
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <HAL_GPIO_Init+0x2e8>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	43db      	mvns	r3, r3
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	4013      	ands	r3, r2
 80007ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4313      	orrs	r3, r2
 8000800:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000802:	4a24      	ldr	r2, [pc, #144]	; (8000894 <HAL_GPIO_Init+0x2e8>)
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <HAL_GPIO_Init+0x2e8>)
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	43db      	mvns	r3, r3
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000820:	2b00      	cmp	r3, #0
 8000822:	d003      	beq.n	800082c <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	4313      	orrs	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800082c:	4a19      	ldr	r2, [pc, #100]	; (8000894 <HAL_GPIO_Init+0x2e8>)
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_GPIO_Init+0x2e8>)
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	43db      	mvns	r3, r3
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	4013      	ands	r3, r2
 8000840:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d003      	beq.n	8000856 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4313      	orrs	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_GPIO_Init+0x2e8>)
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	3301      	adds	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	fa22 f303 	lsr.w	r3, r2, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	f47f aea9 	bne.w	80005c4 <HAL_GPIO_Init+0x18>
  }
}
 8000872:	bf00      	nop
 8000874:	371c      	adds	r7, #28
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	40010000 	.word	0x40010000
 8000888:	48000400 	.word	0x48000400
 800088c:	48000800 	.word	0x48000800
 8000890:	48000c00 	.word	0x48000c00
 8000894:	40010400 	.word	0x40010400

08000898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	691a      	ldr	r2, [r3, #16]
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	4013      	ands	r3, r2
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80008b0:	2301      	movs	r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	e001      	b.n	80008ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	807b      	strh	r3, [r7, #2]
 80008d4:	4613      	mov	r3, r2
 80008d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d003      	beq.n	80008e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008de:	887a      	ldrh	r2, [r7, #2]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008e4:	e002      	b.n	80008ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008e6:	887a      	ldrh	r2, [r7, #2]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	4013      	ands	r3, r2
 800090a:	2b00      	cmp	r3, #0
 800090c:	d006      	beq.n	800091c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	4618      	mov	r0, r3
 8000918:	f001 ff6c 	bl	80027f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40010400 	.word	0x40010400

08000928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800092e:	af00      	add	r7, sp, #0
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	f000 beda 	b.w	80016f6 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	2b00      	cmp	r3, #0
 800094e:	f000 816e 	beq.w	8000c2e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000952:	4bb5      	ldr	r3, [pc, #724]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f003 030c 	and.w	r3, r3, #12
 800095a:	2b04      	cmp	r3, #4
 800095c:	d00c      	beq.n	8000978 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800095e:	4bb2      	ldr	r3, [pc, #712]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f003 030c 	and.w	r3, r3, #12
 8000966:	2b08      	cmp	r3, #8
 8000968:	d15a      	bne.n	8000a20 <HAL_RCC_OscConfig+0xf8>
 800096a:	4baf      	ldr	r3, [pc, #700]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000976:	d153      	bne.n	8000a20 <HAL_RCC_OscConfig+0xf8>
 8000978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800097c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000980:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000984:	fa93 f3a3 	rbit	r3, r3
 8000988:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800098c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000990:	fab3 f383 	clz	r3, r3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	b2db      	uxtb	r3, r3
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d102      	bne.n	80009aa <HAL_RCC_OscConfig+0x82>
 80009a4:	4ba0      	ldr	r3, [pc, #640]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	e015      	b.n	80009d6 <HAL_RCC_OscConfig+0xae>
 80009aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80009b6:	fa93 f3a3 	rbit	r3, r3
 80009ba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80009be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009c2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80009c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80009ca:	fa93 f3a3 	rbit	r3, r3
 80009ce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80009d2:	4b95      	ldr	r3, [pc, #596]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 80009d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009da:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80009de:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80009e2:	fa92 f2a2 	rbit	r2, r2
 80009e6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80009ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80009ee:	fab2 f282 	clz	r2, r2
 80009f2:	b252      	sxtb	r2, r2
 80009f4:	f042 0220 	orr.w	r2, r2, #32
 80009f8:	b252      	sxtb	r2, r2
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	f002 021f 	and.w	r2, r2, #31
 8000a00:	2101      	movs	r1, #1
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	4013      	ands	r3, r2
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f000 810f 	beq.w	8000c2c <HAL_RCC_OscConfig+0x304>
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f040 8109 	bne.w	8000c2c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f000 be6b 	b.w	80016f6 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a2a:	d106      	bne.n	8000a3a <HAL_RCC_OscConfig+0x112>
 8000a2c:	4b7e      	ldr	r3, [pc, #504]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a7d      	ldr	r2, [pc, #500]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	e030      	b.n	8000a9c <HAL_RCC_OscConfig+0x174>
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10c      	bne.n	8000a5e <HAL_RCC_OscConfig+0x136>
 8000a44:	4b78      	ldr	r3, [pc, #480]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a77      	ldr	r2, [pc, #476]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b75      	ldr	r3, [pc, #468]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a74      	ldr	r2, [pc, #464]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	e01e      	b.n	8000a9c <HAL_RCC_OscConfig+0x174>
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a68:	d10c      	bne.n	8000a84 <HAL_RCC_OscConfig+0x15c>
 8000a6a:	4b6f      	ldr	r3, [pc, #444]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a6e      	ldr	r2, [pc, #440]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	4b6c      	ldr	r3, [pc, #432]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a6b      	ldr	r2, [pc, #428]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e00b      	b.n	8000a9c <HAL_RCC_OscConfig+0x174>
 8000a84:	4b68      	ldr	r3, [pc, #416]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a67      	ldr	r2, [pc, #412]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b65      	ldr	r3, [pc, #404]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a64      	ldr	r2, [pc, #400]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a9a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a9c:	4b62      	ldr	r3, [pc, #392]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa0:	f023 020f 	bic.w	r2, r3, #15
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	495f      	ldr	r1, [pc, #380]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000aac:	4313      	orrs	r3, r2
 8000aae:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d05a      	beq.n	8000b70 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aba:	f7ff fc3b 	bl	8000334 <HAL_GetTick>
 8000abe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ac2:	e00a      	b.n	8000ada <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac4:	f7ff fc36 	bl	8000334 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	2b64      	cmp	r3, #100	; 0x64
 8000ad2:	d902      	bls.n	8000ada <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	f000 be0e 	b.w	80016f6 <HAL_RCC_OscConfig+0xdce>
 8000ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ade:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ae6:	fa93 f3a3 	rbit	r3, r3
 8000aea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000aee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af2:	fab3 f383 	clz	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	095b      	lsrs	r3, r3, #5
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d102      	bne.n	8000b0c <HAL_RCC_OscConfig+0x1e4>
 8000b06:	4b48      	ldr	r3, [pc, #288]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	e015      	b.n	8000b38 <HAL_RCC_OscConfig+0x210>
 8000b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b10:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000b18:	fa93 f3a3 	rbit	r3, r3
 8000b1c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b24:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000b28:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000b2c:	fa93 f3a3 	rbit	r3, r3
 8000b30:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000b34:	4b3c      	ldr	r3, [pc, #240]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b3c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000b40:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000b44:	fa92 f2a2 	rbit	r2, r2
 8000b48:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000b4c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b252      	sxtb	r2, r2
 8000b56:	f042 0220 	orr.w	r2, r2, #32
 8000b5a:	b252      	sxtb	r2, r2
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	f002 021f 	and.w	r2, r2, #31
 8000b62:	2101      	movs	r1, #1
 8000b64:	fa01 f202 	lsl.w	r2, r1, r2
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0aa      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x19c>
 8000b6e:	e05e      	b.n	8000c2e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b70:	f7ff fbe0 	bl	8000334 <HAL_GetTick>
 8000b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b78:	e00a      	b.n	8000b90 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b7a:	f7ff fbdb 	bl	8000334 <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	2b64      	cmp	r3, #100	; 0x64
 8000b88:	d902      	bls.n	8000b90 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	f000 bdb3 	b.w	80016f6 <HAL_RCC_OscConfig+0xdce>
 8000b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b94:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000b9c:	fa93 f3a3 	rbit	r3, r3
 8000ba0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000ba4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d102      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x29a>
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	e015      	b.n	8000bee <HAL_RCC_OscConfig+0x2c6>
 8000bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000bce:	fa93 f3a3 	rbit	r3, r3
 8000bd2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000bde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000be2:	fa93 f3a3 	rbit	r3, r3
 8000be6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_RCC_OscConfig+0x300>)
 8000bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bf2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000bf6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000bfa:	fa92 f2a2 	rbit	r2, r2
 8000bfe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000c02:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	b252      	sxtb	r2, r2
 8000c0c:	f042 0220 	orr.w	r2, r2, #32
 8000c10:	b252      	sxtb	r2, r2
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	f002 021f 	and.w	r2, r2, #31
 8000c18:	2101      	movs	r1, #1
 8000c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1e:	4013      	ands	r3, r2
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1aa      	bne.n	8000b7a <HAL_RCC_OscConfig+0x252>
 8000c24:	e003      	b.n	8000c2e <HAL_RCC_OscConfig+0x306>
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 8170 	beq.w	8000f1e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c3e:	4bd0      	ldr	r3, [pc, #832]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00b      	beq.n	8000c62 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c4a:	4bcd      	ldr	r3, [pc, #820]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d16d      	bne.n	8000d32 <HAL_RCC_OscConfig+0x40a>
 8000c56:	4bca      	ldr	r3, [pc, #808]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d167      	bne.n	8000d32 <HAL_RCC_OscConfig+0x40a>
 8000c62:	2302      	movs	r3, #2
 8000c64:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c68:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000c6c:	fa93 f3a3 	rbit	r3, r3
 8000c70:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000c74:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c78:	fab3 f383 	clz	r3, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d102      	bne.n	8000c92 <HAL_RCC_OscConfig+0x36a>
 8000c8c:	4bbc      	ldr	r3, [pc, #752]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	e013      	b.n	8000cba <HAL_RCC_OscConfig+0x392>
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c98:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c9c:	fa93 f3a3 	rbit	r3, r3
 8000ca0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000caa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000cae:	fa93 f3a3 	rbit	r3, r3
 8000cb2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000cb6:	4bb2      	ldr	r3, [pc, #712]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	2202      	movs	r2, #2
 8000cbc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000cc0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000cc4:	fa92 f2a2 	rbit	r2, r2
 8000cc8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000ccc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	b252      	sxtb	r2, r2
 8000cd6:	f042 0220 	orr.w	r2, r2, #32
 8000cda:	b252      	sxtb	r2, r2
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	f002 021f 	and.w	r2, r2, #31
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d007      	beq.n	8000cfe <HAL_RCC_OscConfig+0x3d6>
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d002      	beq.n	8000cfe <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f000 bcfc 	b.w	80016f6 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfe:	4ba0      	ldr	r3, [pc, #640]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6959      	ldr	r1, [r3, #20]
 8000d0c:	23f8      	movs	r3, #248	; 0xf8
 8000d0e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d12:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000d16:	fa93 f3a3 	rbit	r3, r3
 8000d1a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000d1e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000d22:	fab3 f383 	clz	r3, r3
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	4995      	ldr	r1, [pc, #596]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d30:	e0f5      	b.n	8000f1e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 8085 	beq.w	8000e48 <HAL_RCC_OscConfig+0x520>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d44:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000d48:	fa93 f3a3 	rbit	r3, r3
 8000d4c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000d50:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d54:	fab3 f383 	clz	r3, r3
 8000d58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	461a      	mov	r2, r3
 8000d64:	2301      	movs	r3, #1
 8000d66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fae4 	bl	8000334 <HAL_GetTick>
 8000d6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d70:	e00a      	b.n	8000d88 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d72:	f7ff fadf 	bl	8000334 <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d902      	bls.n	8000d88 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f000 bcb7 	b.w	80016f6 <HAL_RCC_OscConfig+0xdce>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d92:	fa93 f3a3 	rbit	r3, r3
 8000d96:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000d9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	095b      	lsrs	r3, r3, #5
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d102      	bne.n	8000db8 <HAL_RCC_OscConfig+0x490>
 8000db2:	4b73      	ldr	r3, [pc, #460]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	e013      	b.n	8000de0 <HAL_RCC_OscConfig+0x4b8>
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000dd0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000ddc:	4b68      	ldr	r3, [pc, #416]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	2202      	movs	r2, #2
 8000de2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000de6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000dea:	fa92 f2a2 	rbit	r2, r2
 8000dee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000df2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000df6:	fab2 f282 	clz	r2, r2
 8000dfa:	b252      	sxtb	r2, r2
 8000dfc:	f042 0220 	orr.w	r2, r2, #32
 8000e00:	b252      	sxtb	r2, r2
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	f002 021f 	and.w	r2, r2, #31
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0ae      	beq.n	8000d72 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e14:	4b5a      	ldr	r3, [pc, #360]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6959      	ldr	r1, [r3, #20]
 8000e22:	23f8      	movs	r3, #248	; 0xf8
 8000e24:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000e34:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	494f      	ldr	r1, [pc, #316]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
 8000e46:	e06a      	b.n	8000f1e <HAL_RCC_OscConfig+0x5f6>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e52:	fa93 f3a3 	rbit	r3, r3
 8000e56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000e5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e5e:	fab3 f383 	clz	r3, r3
 8000e62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2300      	movs	r3, #0
 8000e70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e72:	f7ff fa5f 	bl	8000334 <HAL_GetTick>
 8000e76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e7a:	e00a      	b.n	8000e92 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fa5a 	bl	8000334 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d902      	bls.n	8000e92 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	f000 bc32 	b.w	80016f6 <HAL_RCC_OscConfig+0xdce>
 8000e92:	2302      	movs	r3, #2
 8000e94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e9c:	fa93 f3a3 	rbit	r3, r3
 8000ea0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000ea4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea8:	fab3 f383 	clz	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d102      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x59a>
 8000ebc:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	e013      	b.n	8000eea <HAL_RCC_OscConfig+0x5c2>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000eda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ede:	fa93 f3a3 	rbit	r3, r3
 8000ee2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <HAL_RCC_OscConfig+0x658>)
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	2202      	movs	r2, #2
 8000eec:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000ef0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000ef4:	fa92 f2a2 	rbit	r2, r2
 8000ef8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000efc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	b252      	sxtb	r2, r2
 8000f06:	f042 0220 	orr.w	r2, r2, #32
 8000f0a:	b252      	sxtb	r2, r2
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	f002 021f 	and.w	r2, r2, #31
 8000f12:	2101      	movs	r1, #1
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1ae      	bne.n	8000e7c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0308 	and.w	r3, r3, #8
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80d8 	beq.w	80010de <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d067      	beq.n	8001008 <HAL_RCC_OscConfig+0x6e0>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000f4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4e:	fab3 f383 	clz	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_RCC_OscConfig+0x65c>)
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff f9e8 	bl	8000334 <HAL_GetTick>
 8000f64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f68:	e00e      	b.n	8000f88 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f6a:	f7ff f9e3 	bl	8000334 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d906      	bls.n	8000f88 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e3bb      	b.n	80016f6 <HAL_RCC_OscConfig+0xdce>
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	10908120 	.word	0x10908120
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000fa4:	fa93 f2a3 	rbit	r2, r3
 8000fa8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	fa93 f2a3 	rbit	r2, r3
 8000fc0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000fc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc6:	4ba5      	ldr	r3, [pc, #660]	; (800125c <HAL_RCC_OscConfig+0x934>)
 8000fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000fce:	2102      	movs	r1, #2
 8000fd0:	6019      	str	r1, [r3, #0]
 8000fd2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	fa93 f1a3 	rbit	r1, r3
 8000fdc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fe0:	6019      	str	r1, [r3, #0]
  return(result);
 8000fe2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f003 031f 	and.w	r3, r3, #31
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	4013      	ands	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0b1      	beq.n	8000f6a <HAL_RCC_OscConfig+0x642>
 8001006:	e06a      	b.n	80010de <HAL_RCC_OscConfig+0x7b6>
 8001008:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	fa93 f2a3 	rbit	r2, r3
 800101a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800101e:	601a      	str	r2, [r3, #0]
  return(result);
 8001020:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001024:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001026:	fab3 f383 	clz	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	4b8c      	ldr	r3, [pc, #560]	; (8001260 <HAL_RCC_OscConfig+0x938>)
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	461a      	mov	r2, r3
 8001034:	2300      	movs	r3, #0
 8001036:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001038:	f7ff f97c 	bl	8000334 <HAL_GetTick>
 800103c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001040:	e009      	b.n	8001056 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001042:	f7ff f977 	bl	8000334 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e34f      	b.n	80016f6 <HAL_RCC_OscConfig+0xdce>
 8001056:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800105a:	2202      	movs	r2, #2
 800105c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	fa93 f2a3 	rbit	r2, r3
 8001068:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001072:	2202      	movs	r2, #2
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	fa93 f2a3 	rbit	r2, r3
 8001080:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800108a:	2202      	movs	r2, #2
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	fa93 f2a3 	rbit	r2, r3
 8001098:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800109c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800109e:	4b6f      	ldr	r3, [pc, #444]	; (800125c <HAL_RCC_OscConfig+0x934>)
 80010a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010a6:	2102      	movs	r1, #2
 80010a8:	6019      	str	r1, [r3, #0]
 80010aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	fa93 f1a3 	rbit	r1, r3
 80010b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010b8:	6019      	str	r1, [r3, #0]
  return(result);
 80010ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	fab3 f383 	clz	r3, r3
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	2101      	movs	r1, #1
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1b1      	bne.n	8001042 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 8159 	beq.w	80013a0 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f4:	4b59      	ldr	r3, [pc, #356]	; (800125c <HAL_RCC_OscConfig+0x934>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d112      	bne.n	8001126 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	4b56      	ldr	r3, [pc, #344]	; (800125c <HAL_RCC_OscConfig+0x934>)
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	4a55      	ldr	r2, [pc, #340]	; (800125c <HAL_RCC_OscConfig+0x934>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	61d3      	str	r3, [r2, #28]
 800110c:	4b53      	ldr	r3, [pc, #332]	; (800125c <HAL_RCC_OscConfig+0x934>)
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001120:	2301      	movs	r3, #1
 8001122:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001126:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <HAL_RCC_OscConfig+0x93c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	2b00      	cmp	r3, #0
 8001130:	d11a      	bne.n	8001168 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001132:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_RCC_OscConfig+0x93c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a4b      	ldr	r2, [pc, #300]	; (8001264 <HAL_RCC_OscConfig+0x93c>)
 8001138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800113e:	f7ff f8f9 	bl	8000334 <HAL_GetTick>
 8001142:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001146:	e009      	b.n	800115c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001148:	f7ff f8f4 	bl	8000334 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b64      	cmp	r3, #100	; 0x64
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e2cc      	b.n	80016f6 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115c:	4b41      	ldr	r3, [pc, #260]	; (8001264 <HAL_RCC_OscConfig+0x93c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0ef      	beq.n	8001148 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d106      	bne.n	8001180 <HAL_RCC_OscConfig+0x858>
 8001172:	4b3a      	ldr	r3, [pc, #232]	; (800125c <HAL_RCC_OscConfig+0x934>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	4a39      	ldr	r2, [pc, #228]	; (800125c <HAL_RCC_OscConfig+0x934>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6213      	str	r3, [r2, #32]
 800117e:	e02f      	b.n	80011e0 <HAL_RCC_OscConfig+0x8b8>
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x87c>
 800118a:	4b34      	ldr	r3, [pc, #208]	; (800125c <HAL_RCC_OscConfig+0x934>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a33      	ldr	r2, [pc, #204]	; (800125c <HAL_RCC_OscConfig+0x934>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b31      	ldr	r3, [pc, #196]	; (800125c <HAL_RCC_OscConfig+0x934>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a30      	ldr	r2, [pc, #192]	; (800125c <HAL_RCC_OscConfig+0x934>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	e01d      	b.n	80011e0 <HAL_RCC_OscConfig+0x8b8>
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x8a0>
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <HAL_RCC_OscConfig+0x934>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a2a      	ldr	r2, [pc, #168]	; (800125c <HAL_RCC_OscConfig+0x934>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6213      	str	r3, [r2, #32]
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <HAL_RCC_OscConfig+0x934>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a27      	ldr	r2, [pc, #156]	; (800125c <HAL_RCC_OscConfig+0x934>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6213      	str	r3, [r2, #32]
 80011c6:	e00b      	b.n	80011e0 <HAL_RCC_OscConfig+0x8b8>
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_RCC_OscConfig+0x934>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_RCC_OscConfig+0x934>)
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_RCC_OscConfig+0x934>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <HAL_RCC_OscConfig+0x934>)
 80011da:	f023 0304 	bic.w	r3, r3, #4
 80011de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d06b      	beq.n	80012c2 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff f8a3 	bl	8000334 <HAL_GetTick>
 80011ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f2:	e00b      	b.n	800120c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f4:	f7ff f89e 	bl	8000334 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f241 3288 	movw	r2, #5000	; 0x1388
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e274      	b.n	80016f6 <HAL_RCC_OscConfig+0xdce>
 800120c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001210:	2202      	movs	r2, #2
 8001212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	fa93 f2a3 	rbit	r2, r3
 800121e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001228:	2202      	movs	r2, #2
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	fa93 f2a3 	rbit	r2, r3
 8001236:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800123a:	601a      	str	r2, [r3, #0]
  return(result);
 800123c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001240:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001242:	fab3 f383 	clz	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d108      	bne.n	8001268 <HAL_RCC_OscConfig+0x940>
 8001256:	4b01      	ldr	r3, [pc, #4]	; (800125c <HAL_RCC_OscConfig+0x934>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	e013      	b.n	8001284 <HAL_RCC_OscConfig+0x95c>
 800125c:	40021000 	.word	0x40021000
 8001260:	10908120 	.word	0x10908120
 8001264:	40007000 	.word	0x40007000
 8001268:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800126c:	2202      	movs	r2, #2
 800126e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001270:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	fa93 f2a3 	rbit	r2, r3
 800127a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	4bbb      	ldr	r3, [pc, #748]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001288:	2102      	movs	r1, #2
 800128a:	6011      	str	r1, [r2, #0]
 800128c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	fa92 f1a2 	rbit	r1, r2
 8001296:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800129a:	6011      	str	r1, [r2, #0]
  return(result);
 800129c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	fab2 f282 	clz	r2, r2
 80012a6:	b252      	sxtb	r2, r2
 80012a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012ac:	b252      	sxtb	r2, r2
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	f002 021f 	and.w	r2, r2, #31
 80012b4:	2101      	movs	r1, #1
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d099      	beq.n	80011f4 <HAL_RCC_OscConfig+0x8cc>
 80012c0:	e064      	b.n	800138c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff f837 	bl	8000334 <HAL_GetTick>
 80012c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff f832 	bl	8000334 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	4293      	cmp	r3, r2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e208      	b.n	80016f6 <HAL_RCC_OscConfig+0xdce>
 80012e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e8:	2202      	movs	r2, #2
 80012ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	fa93 f2a3 	rbit	r2, r3
 80012f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001300:	2202      	movs	r2, #2
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	fa93 f2a3 	rbit	r2, r3
 800130e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001312:	601a      	str	r2, [r3, #0]
  return(result);
 8001314:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001318:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	095b      	lsrs	r3, r3, #5
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d102      	bne.n	8001334 <HAL_RCC_OscConfig+0xa0c>
 800132e:	4b90      	ldr	r3, [pc, #576]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	e00d      	b.n	8001350 <HAL_RCC_OscConfig+0xa28>
 8001334:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	fa93 f2a3 	rbit	r2, r3
 8001346:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001354:	2102      	movs	r1, #2
 8001356:	6011      	str	r1, [r2, #0]
 8001358:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	fa92 f1a2 	rbit	r1, r2
 8001362:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001366:	6011      	str	r1, [r2, #0]
  return(result);
 8001368:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	fab2 f282 	clz	r2, r2
 8001372:	b252      	sxtb	r2, r2
 8001374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001378:	b252      	sxtb	r2, r2
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	f002 021f 	and.w	r2, r2, #31
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d19f      	bne.n	80012cc <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800138c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001390:	2b01      	cmp	r3, #1
 8001392:	d105      	bne.n	80013a0 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001394:	4b76      	ldr	r3, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4a75      	ldr	r2, [pc, #468]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 800139a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 81a4 	beq.w	80016f4 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ac:	4b70      	ldr	r3, [pc, #448]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	f000 819b 	beq.w	80016f0 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	f040 8113 	bne.w	80015ec <HAL_RCC_OscConfig+0xcc4>
 80013c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	fa93 f2a3 	rbit	r2, r3
 80013da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013de:	601a      	str	r2, [r3, #0]
  return(result);
 80013e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	461a      	mov	r2, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7fe ff9b 	bl	8000334 <HAL_GetTick>
 80013fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	e009      	b.n	8001418 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001404:	f7fe ff96 	bl	8000334 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e16e      	b.n	80016f6 <HAL_RCC_OscConfig+0xdce>
 8001418:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800141c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fa93 f2a3 	rbit	r2, r3
 800142c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001430:	601a      	str	r2, [r3, #0]
  return(result);
 8001432:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001436:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d102      	bne.n	8001452 <HAL_RCC_OscConfig+0xb2a>
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	e01b      	b.n	800148a <HAL_RCC_OscConfig+0xb62>
 8001452:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001456:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800145a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fa93 f2a3 	rbit	r2, r3
 8001466:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fa93 f2a3 	rbit	r2, r3
 8001480:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800148e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001492:	6011      	str	r1, [r2, #0]
 8001494:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	fa92 f1a2 	rbit	r1, r2
 800149e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014a2:	6011      	str	r1, [r2, #0]
  return(result);
 80014a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	fab2 f282 	clz	r2, r2
 80014ae:	b252      	sxtb	r2, r2
 80014b0:	f042 0220 	orr.w	r2, r2, #32
 80014b4:	b252      	sxtb	r2, r2
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	f002 021f 	and.w	r2, r2, #31
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f202 	lsl.w	r2, r1, r2
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d19d      	bne.n	8001404 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	430b      	orrs	r3, r1
 80014de:	4924      	ldr	r1, [pc, #144]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fa93 f2a3 	rbit	r2, r3
 80014f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014fc:	601a      	str	r2, [r3, #0]
  return(result);
 80014fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001502:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800150c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	461a      	mov	r2, r3
 8001514:	2301      	movs	r3, #1
 8001516:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7fe ff0c 	bl	8000334 <HAL_GetTick>
 800151c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001520:	e009      	b.n	8001536 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001522:	f7fe ff07 	bl	8000334 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e0df      	b.n	80016f6 <HAL_RCC_OscConfig+0xdce>
 8001536:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800153a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800153e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001540:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800154e:	601a      	str	r2, [r3, #0]
  return(result);
 8001550:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001554:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	095b      	lsrs	r3, r3, #5
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d104      	bne.n	8001574 <HAL_RCC_OscConfig+0xc4c>
 800156a:	4b01      	ldr	r3, [pc, #4]	; (8001570 <HAL_RCC_OscConfig+0xc48>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	e01d      	b.n	80015ac <HAL_RCC_OscConfig+0xc84>
 8001570:	40021000 	.word	0x40021000
 8001574:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800157c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fa93 f2a3 	rbit	r2, r3
 80015a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	4b55      	ldr	r3, [pc, #340]	; (8001700 <HAL_RCC_OscConfig+0xdd8>)
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80015b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015b4:	6011      	str	r1, [r2, #0]
 80015b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	fa92 f1a2 	rbit	r1, r2
 80015c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80015c4:	6011      	str	r1, [r2, #0]
  return(result);
 80015c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	fab2 f282 	clz	r2, r2
 80015d0:	b252      	sxtb	r2, r2
 80015d2:	f042 0220 	orr.w	r2, r2, #32
 80015d6:	b252      	sxtb	r2, r2
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	f002 021f 	and.w	r2, r2, #31
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d09b      	beq.n	8001522 <HAL_RCC_OscConfig+0xbfa>
 80015ea:	e083      	b.n	80016f4 <HAL_RCC_OscConfig+0xdcc>
 80015ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fa93 f2a3 	rbit	r2, r3
 8001600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001604:	601a      	str	r2, [r3, #0]
  return(result);
 8001606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001614:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	461a      	mov	r2, r3
 800161c:	2300      	movs	r3, #0
 800161e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7fe fe88 	bl	8000334 <HAL_GetTick>
 8001624:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001628:	e009      	b.n	800163e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162a:	f7fe fe83 	bl	8000334 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e05b      	b.n	80016f6 <HAL_RCC_OscConfig+0xdce>
 800163e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	fa93 f2a3 	rbit	r2, r3
 8001652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001656:	601a      	str	r2, [r3, #0]
  return(result);
 8001658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d102      	bne.n	8001678 <HAL_RCC_OscConfig+0xd50>
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_RCC_OscConfig+0xdd8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	e01b      	b.n	80016b0 <HAL_RCC_OscConfig+0xd88>
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	fa93 f2a3 	rbit	r2, r3
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_RCC_OscConfig+0xdd8>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	f107 0214 	add.w	r2, r7, #20
 80016b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016b8:	6011      	str	r1, [r2, #0]
 80016ba:	f107 0214 	add.w	r2, r7, #20
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	fa92 f1a2 	rbit	r1, r2
 80016c4:	f107 0210 	add.w	r2, r7, #16
 80016c8:	6011      	str	r1, [r2, #0]
  return(result);
 80016ca:	f107 0210 	add.w	r2, r7, #16
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	fab2 f282 	clz	r2, r2
 80016d4:	b252      	sxtb	r2, r2
 80016d6:	f042 0220 	orr.w	r2, r2, #32
 80016da:	b252      	sxtb	r2, r2
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f002 021f 	and.w	r2, r2, #31
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d19d      	bne.n	800162a <HAL_RCC_OscConfig+0xd02>
 80016ee:	e001      	b.n	80016f4 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000

08001704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b09e      	sub	sp, #120	; 0x78
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e164      	b.n	80019e6 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b92      	ldr	r3, [pc, #584]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d910      	bls.n	800174c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 0207 	bic.w	r2, r3, #7
 8001732:	498d      	ldr	r1, [pc, #564]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b8b      	ldr	r3, [pc, #556]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e14c      	b.n	80019e6 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b84      	ldr	r3, [pc, #528]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4981      	ldr	r1, [pc, #516]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80df 	beq.w	8001936 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d13d      	bne.n	80017fc <HAL_RCC_ClockConfig+0xf8>
 8001780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001784:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800178e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d102      	bne.n	80017aa <HAL_RCC_ClockConfig+0xa6>
 80017a4:	4b71      	ldr	r3, [pc, #452]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	e00f      	b.n	80017ca <HAL_RCC_ClockConfig+0xc6>
 80017aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	667b      	str	r3, [r7, #100]	; 0x64
 80017b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017bc:	663b      	str	r3, [r7, #96]	; 0x60
 80017be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017c6:	4b69      	ldr	r3, [pc, #420]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80017d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017d2:	fa92 f2a2 	rbit	r2, r2
 80017d6:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80017d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017da:	fab2 f282 	clz	r2, r2
 80017de:	b252      	sxtb	r2, r2
 80017e0:	f042 0220 	orr.w	r2, r2, #32
 80017e4:	b252      	sxtb	r2, r2
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f002 021f 	and.w	r2, r2, #31
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d17d      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0f4      	b.n	80019e6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d13d      	bne.n	8001880 <HAL_RCC_ClockConfig+0x17c>
 8001804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001808:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b01      	cmp	r3, #1
 8001826:	d102      	bne.n	800182e <HAL_RCC_ClockConfig+0x12a>
 8001828:	4b50      	ldr	r3, [pc, #320]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	e00f      	b.n	800184e <HAL_RCC_ClockConfig+0x14a>
 800182e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
 800183c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001840:	643b      	str	r3, [r7, #64]	; 0x40
 8001842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800184a:	4b48      	ldr	r3, [pc, #288]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001852:	63ba      	str	r2, [r7, #56]	; 0x38
 8001854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001856:	fa92 f2a2 	rbit	r2, r2
 800185a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 800185c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800185e:	fab2 f282 	clz	r2, r2
 8001862:	b252      	sxtb	r2, r2
 8001864:	f042 0220 	orr.w	r2, r2, #32
 8001868:	b252      	sxtb	r2, r2
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	f002 021f 	and.w	r2, r2, #31
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f202 	lsl.w	r2, r1, r2
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d13b      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0b2      	b.n	80019e6 <HAL_RCC_ClockConfig+0x2e2>
 8001880:	2302      	movs	r3, #2
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d102      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x1a4>
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	e00d      	b.n	80018c4 <HAL_RCC_ClockConfig+0x1c0>
 80018a8:	2302      	movs	r3, #2
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	2302      	movs	r3, #2
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	2202      	movs	r2, #2
 80018c6:	61ba      	str	r2, [r7, #24]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	fa92 f2a2 	rbit	r2, r2
 80018ce:	617a      	str	r2, [r7, #20]
  return(result);
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	fab2 f282 	clz	r2, r2
 80018d6:	b252      	sxtb	r2, r2
 80018d8:	f042 0220 	orr.w	r2, r2, #32
 80018dc:	b252      	sxtb	r2, r2
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	f002 021f 	and.w	r2, r2, #31
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e078      	b.n	80019e6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f023 0203 	bic.w	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	491a      	ldr	r1, [pc, #104]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001906:	f7fe fd15 	bl	8000334 <HAL_GetTick>
 800190a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190c:	e00a      	b.n	8001924 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	f7fe fd11 	bl	8000334 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e060      	b.n	80019e6 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 020c 	and.w	r2, r3, #12
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	429a      	cmp	r2, r3
 8001934:	d1eb      	bne.n	800190e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d215      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 0207 	bic.w	r2, r3, #7
 800194c:	4906      	ldr	r1, [pc, #24]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d006      	beq.n	8001970 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e03f      	b.n	80019e6 <HAL_RCC_ClockConfig+0x2e2>
 8001966:	bf00      	nop
 8001968:	40022000 	.word	0x40022000
 800196c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_RCC_ClockConfig+0x2ec>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4919      	ldr	r1, [pc, #100]	; (80019f0 <HAL_RCC_ClockConfig+0x2ec>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_RCC_ClockConfig+0x2ec>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4911      	ldr	r1, [pc, #68]	; (80019f0 <HAL_RCC_ClockConfig+0x2ec>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019ae:	f000 f859 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 80019b2:	4601      	mov	r1, r0
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_RCC_ClockConfig+0x2ec>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019bc:	23f0      	movs	r3, #240	; 0xf0
 80019be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_RCC_ClockConfig+0x2f0>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	fa21 f303 	lsr.w	r3, r1, r3
 80019da:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_RCC_ClockConfig+0x2f4>)
 80019dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019de:	2000      	movs	r0, #0
 80019e0:	f7fe fc64 	bl	80002ac <HAL_InitTick>
  
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3778      	adds	r7, #120	; 0x78
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	08003370 	.word	0x08003370
 80019f8:	20000008 	.word	0x20000008

080019fc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8001a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a18:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_RCC_MCOConfig+0x64>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <HAL_RCC_MCOConfig+0x64>)
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a28:	6153      	str	r3, [r2, #20]
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_RCC_MCOConfig+0x64>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a40:	f7fe fdb4 	bl	80005ac <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_RCC_MCOConfig+0x64>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	4903      	ldr	r1, [pc, #12]	; (8001a60 <HAL_RCC_MCOConfig+0x64>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b08b      	sub	sp, #44	; 0x2c
 8001a68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x30>
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x36>
 8001a92:	e03c      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a96:	623b      	str	r3, [r7, #32]
      break;
 8001a98:	e03c      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001aa4:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	607b      	str	r3, [r7, #4]
  return(result);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	f003 020f 	and.w	r2, r3, #15
 8001ac6:	230f      	movs	r3, #15
 8001ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa93 f3a3 	rbit	r3, r3
 8001ad0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001aec:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	e004      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	623b      	str	r3, [r7, #32]
      break;
 8001b0c:	e002      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b10:	623b      	str	r3, [r7, #32]
      break;
 8001b12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b14:	6a3b      	ldr	r3, [r7, #32]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	372c      	adds	r7, #44	; 0x2c
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	007a1200 	.word	0x007a1200
 8001b2c:	08003350 	.word	0x08003350
 8001b30:	08003360 	.word	0x08003360
 8001b34:	003d0900 	.word	0x003d0900

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000008 	.word	0x20000008

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001b56:	f7ff ffef 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b5a:	4601      	mov	r1, r0
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b64:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b68:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	603b      	str	r3, [r7, #0]
  return(result);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08003380 	.word	0x08003380

08001b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001b9a:	f7ff ffcd 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001ba8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bac:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	603b      	str	r3, [r7, #0]
  return(result);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08003380 	.word	0x08003380

08001bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e043      	b.n	8001c72 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fe38 	bl	8002874 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2224      	movs	r2, #36	; 0x24
 8001c08:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8b9 	bl	8001d94 <UART_SetConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e022      	b.n	8001c72 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fa13 	bl	8002060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c58:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fa9a 	bl	80021a4 <UART_CheckIdleState>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b088      	sub	sp, #32
 8001c7e:	af02      	add	r7, sp, #8
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4613      	mov	r3, r2
 8001c88:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d177      	bne.n	8001d8a <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HAL_UART_Transmit+0x2c>
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e070      	b.n	8001d8c <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_UART_Transmit+0x3e>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e069      	b.n	8001d8c <HAL_UART_Transmit+0x112>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2221      	movs	r2, #33	; 0x21
 8001cca:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001cce:	f7fe fb31 	bl	8000334 <HAL_GetTick>
 8001cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001ce4:	e034      	b.n	8001d50 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fa97 	bl	8002236 <UART_WaitOnFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e03c      	b.n	8001d8c <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1a:	d111      	bne.n	8001d40 <HAL_UART_Transmit+0xc6>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10d      	bne.n	8001d40 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	881a      	ldrh	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d34:	b292      	uxth	r2, r2
 8001d36:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	e007      	b.n	8001d50 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	60ba      	str	r2, [r7, #8]
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b292      	uxth	r2, r2
 8001d4e:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1c4      	bne.n	8001ce6 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2200      	movs	r2, #0
 8001d64:	2140      	movs	r1, #64	; 0x40
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fa65 	bl	8002236 <UART_WaitOnFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e00a      	b.n	8001d8c <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
  }
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001da0:	2310      	movs	r3, #16
 8001da2:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b9f      	ldr	r3, [pc, #636]	; (800204c <UART_SetConfig+0x2b8>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	68f9      	ldr	r1, [r7, #12]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a8e      	ldr	r2, [pc, #568]	; (8002050 <UART_SetConfig+0x2bc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d121      	bne.n	8001e60 <UART_SetConfig+0xcc>
 8001e1c:	4b8d      	ldr	r3, [pc, #564]	; (8002054 <UART_SetConfig+0x2c0>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d817      	bhi.n	8001e58 <UART_SetConfig+0xc4>
 8001e28:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <UART_SetConfig+0x9c>)
 8001e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2e:	bf00      	nop
 8001e30:	08001e41 	.word	0x08001e41
 8001e34:	08001e4d 	.word	0x08001e4d
 8001e38:	08001e53 	.word	0x08001e53
 8001e3c:	08001e47 	.word	0x08001e47
 8001e40:	2300      	movs	r3, #0
 8001e42:	75fb      	strb	r3, [r7, #23]
 8001e44:	e01e      	b.n	8001e84 <UART_SetConfig+0xf0>
 8001e46:	2302      	movs	r3, #2
 8001e48:	75fb      	strb	r3, [r7, #23]
 8001e4a:	e01b      	b.n	8001e84 <UART_SetConfig+0xf0>
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	75fb      	strb	r3, [r7, #23]
 8001e50:	e018      	b.n	8001e84 <UART_SetConfig+0xf0>
 8001e52:	2308      	movs	r3, #8
 8001e54:	75fb      	strb	r3, [r7, #23]
 8001e56:	e015      	b.n	8001e84 <UART_SetConfig+0xf0>
 8001e58:	2310      	movs	r3, #16
 8001e5a:	75fb      	strb	r3, [r7, #23]
 8001e5c:	bf00      	nop
 8001e5e:	e011      	b.n	8001e84 <UART_SetConfig+0xf0>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7c      	ldr	r2, [pc, #496]	; (8002058 <UART_SetConfig+0x2c4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d102      	bne.n	8001e70 <UART_SetConfig+0xdc>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]
 8001e6e:	e009      	b.n	8001e84 <UART_SetConfig+0xf0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a79      	ldr	r2, [pc, #484]	; (800205c <UART_SetConfig+0x2c8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d102      	bne.n	8001e80 <UART_SetConfig+0xec>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]
 8001e7e:	e001      	b.n	8001e84 <UART_SetConfig+0xf0>
 8001e80:	2310      	movs	r3, #16
 8001e82:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e8c:	d16f      	bne.n	8001f6e <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d857      	bhi.n	8001f44 <UART_SetConfig+0x1b0>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <UART_SetConfig+0x108>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ec1 	.word	0x08001ec1
 8001ea0:	08001edd 	.word	0x08001edd
 8001ea4:	08001ef9 	.word	0x08001ef9
 8001ea8:	08001f45 	.word	0x08001f45
 8001eac:	08001f13 	.word	0x08001f13
 8001eb0:	08001f45 	.word	0x08001f45
 8001eb4:	08001f45 	.word	0x08001f45
 8001eb8:	08001f45 	.word	0x08001f45
 8001ebc:	08001f2f 	.word	0x08001f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ec0:	f7ff fe46 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	005a      	lsls	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	441a      	add	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	82bb      	strh	r3, [r7, #20]
        break;
 8001eda:	e036      	b.n	8001f4a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001edc:	f7ff fe5a 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	005a      	lsls	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	441a      	add	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	82bb      	strh	r3, [r7, #20]
        break;
 8001ef6:	e028      	b.n	8001f4a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001f02:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6852      	ldr	r2, [r2, #4]
 8001f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f0e:	82bb      	strh	r3, [r7, #20]
        break;
 8001f10:	e01b      	b.n	8001f4a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f12:	f7ff fda7 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 8001f16:	4603      	mov	r3, r0
 8001f18:	005a      	lsls	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	82bb      	strh	r3, [r7, #20]
        break;
 8001f2c:	e00d      	b.n	8001f4a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	82bb      	strh	r3, [r7, #20]
        break;
 8001f42:	e002      	b.n	8001f4a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	74fb      	strb	r3, [r7, #19]
        break;
 8001f48:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001f4a:	8abb      	ldrh	r3, [r7, #20]
 8001f4c:	f023 030f 	bic.w	r3, r3, #15
 8001f50:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f52:	8abb      	ldrh	r3, [r7, #20]
 8001f54:	105b      	asrs	r3, r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	897b      	ldrh	r3, [r7, #10]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	897a      	ldrh	r2, [r7, #10]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	e069      	b.n	8002042 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d863      	bhi.n	800203c <UART_SetConfig+0x2a8>
 8001f74:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <UART_SetConfig+0x1e8>)
 8001f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7a:	bf00      	nop
 8001f7c:	08001fa1 	.word	0x08001fa1
 8001f80:	08001fc1 	.word	0x08001fc1
 8001f84:	08001fe1 	.word	0x08001fe1
 8001f88:	0800203d 	.word	0x0800203d
 8001f8c:	08002001 	.word	0x08002001
 8001f90:	0800203d 	.word	0x0800203d
 8001f94:	0800203d 	.word	0x0800203d
 8001f98:	0800203d 	.word	0x0800203d
 8001f9c:	08002021 	.word	0x08002021
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001fa0:	f7ff fdd6 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	441a      	add	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60da      	str	r2, [r3, #12]
        break;
 8001fbe:	e040      	b.n	8002042 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001fc0:	f7ff fde8 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	441a      	add	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60da      	str	r2, [r3, #12]
        break;
 8001fde:	e030      	b.n	8002042 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001fea:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6852      	ldr	r2, [r2, #4]
 8001ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60da      	str	r2, [r3, #12]
        break;
 8001ffe:	e020      	b.n	8002042 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002000:	f7ff fd30 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	441a      	add	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	b29a      	uxth	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60da      	str	r2, [r3, #12]
        break;
 800201e:	e010      	b.n	8002042 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	b29a      	uxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60da      	str	r2, [r3, #12]
        break;
 800203a:	e002      	b.n	8002042 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	74fb      	strb	r3, [r7, #19]
        break;
 8002040:	bf00      	nop
    }
  }

  return ret;
 8002042:	7cfb      	ldrb	r3, [r7, #19]

}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	efff69f3 	.word	0xefff69f3
 8002050:	40013800 	.word	0x40013800
 8002054:	40021000 	.word	0x40021000
 8002058:	40004400 	.word	0x40004400
 800205c:	40004800 	.word	0x40004800

08002060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01a      	beq.n	8002176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215e:	d10a      	bne.n	8002176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]
  }
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80021b6:	f7fe f8bd 	bl	8000334 <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d10e      	bne.n	80021e8 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f82c 	bl	8002236 <UART_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e022      	b.n	800222e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d10e      	bne.n	8002214 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f816 	bl	8002236 <UART_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e00c      	b.n	800222e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002246:	e02c      	b.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224e:	d028      	beq.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <UART_WaitOnFlagUntilTimeout+0x30>
 8002256:	f7fe f86d 	bl	8000334 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	429a      	cmp	r2, r3
 8002264:	d21d      	bcs.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002274:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e00f      	b.n	80022c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69da      	ldr	r2, [r3, #28]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4013      	ands	r3, r2
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d0c3      	beq.n	8002248 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	; 0x38
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_UART_Transmit(&huart2, "Iniciado", 8, 1000);
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	2208      	movs	r2, #8
 80022d8:	4997      	ldr	r1, [pc, #604]	; (8002538 <main+0x26c>)
 80022da:	4898      	ldr	r0, [pc, #608]	; (800253c <main+0x270>)
 80022dc:	f7ff fccd 	bl	8001c7a <HAL_UART_Transmit>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022e0:	f7fd ffce 	bl	8000280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022e4:	f000 f936 	bl	8002554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022e8:	f000 f9ae 	bl	8002648 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022ec:	f000 f97c 	bl	80025e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	char outputEnable = HAL_GPIO_ReadPin(OUTPUT_ENABLE_GPIO_Port, OUTPUT_ENABLE_Pin);;
 80022f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f4:	4892      	ldr	r0, [pc, #584]	; (8002540 <main+0x274>)
 80022f6:	f7fe facf 	bl	8000898 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	char bitDado0 = HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin);;  // Read state
 8002300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002308:	f7fe fac6 	bl	8000898 <HAL_GPIO_ReadPin>
 800230c:	4603      	mov	r3, r0
 800230e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	char bitDado1 = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);;  // Read state
 8002312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231a:	f7fe fabd 	bl	8000898 <HAL_GPIO_ReadPin>
 800231e:	4603      	mov	r3, r0
 8002320:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	char bitDado2 = HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);;  // Read state
 8002324:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232c:	f7fe fab4 	bl	8000898 <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	char bitDado3 = HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);;  // Read state
 8002336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800233a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233e:	f7fe faab 	bl	8000898 <HAL_GPIO_ReadPin>
 8002342:	4603      	mov	r3, r0
 8002344:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	char bitDado4 = HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);;  // Read state
 8002348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800234c:	487c      	ldr	r0, [pc, #496]	; (8002540 <main+0x274>)
 800234e:	f7fe faa3 	bl	8000898 <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
 8002354:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	char bitDado5 = HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);;  // Read state
 8002358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800235c:	4878      	ldr	r0, [pc, #480]	; (8002540 <main+0x274>)
 800235e:	f7fe fa9b 	bl	8000898 <HAL_GPIO_ReadPin>
 8002362:	4603      	mov	r3, r0
 8002364:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	char bitDado6 = HAL_GPIO_ReadPin(D6_GPIO_Port, D6_Pin);;  // Read state
 8002368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236c:	4874      	ldr	r0, [pc, #464]	; (8002540 <main+0x274>)
 800236e:	f7fe fa93 	bl	8000898 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	char bitDado7 = HAL_GPIO_ReadPin(D7_GPIO_Port, D7_Pin);;  // Read state
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	4871      	ldr	r0, [pc, #452]	; (8002540 <main+0x274>)
 800237c:	f7fe fa8c 	bl	8000898 <HAL_GPIO_ReadPin>
 8002380:	4603      	mov	r3, r0
 8002382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


  char ValorEscrito = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, (ValorEscrito & 0x01));
 800238c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800239c:	4869      	ldr	r0, [pc, #420]	; (8002544 <main+0x278>)
 800239e:	f7fe fa93 	bl	80008c8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, (ValorEscrito & 0x01) >> 1);
 80023a2:	2200      	movs	r2, #0
 80023a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023a8:	4866      	ldr	r0, [pc, #408]	; (8002544 <main+0x278>)
 80023aa:	f7fe fa8d 	bl	80008c8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, (ValorEscrito & 0x01) >> 2);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2140      	movs	r1, #64	; 0x40
 80023b2:	4863      	ldr	r0, [pc, #396]	; (8002540 <main+0x274>)
 80023b4:	f7fe fa88 	bl	80008c8 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(ALE_GPIO_Port, ALE_Pin, SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023be:	4861      	ldr	r0, [pc, #388]	; (8002544 <main+0x278>)
 80023c0:	f7fe fa82 	bl	80008c8 <HAL_GPIO_WritePin>
  	HAL_Delay(100);
 80023c4:	2064      	movs	r0, #100	; 0x64
 80023c6:	f7fd ffc1 	bl	800034c <HAL_Delay>
  	HAL_GPIO_WritePin(Start_GPIO_Port, Start_Pin, SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d0:	485c      	ldr	r0, [pc, #368]	; (8002544 <main+0x278>)
 80023d2:	f7fe fa79 	bl	80008c8 <HAL_GPIO_WritePin>
  	HAL_Delay(100);
 80023d6:	2064      	movs	r0, #100	; 0x64
 80023d8:	f7fd ffb8 	bl	800034c <HAL_Delay>

  	HAL_GPIO_WritePin(ALE_GPIO_Port, ALE_Pin, RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e2:	4858      	ldr	r0, [pc, #352]	; (8002544 <main+0x278>)
 80023e4:	f7fe fa70 	bl	80008c8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80023e8:	2064      	movs	r0, #100	; 0x64
 80023ea:	f7fd ffaf 	bl	800034c <HAL_Delay>
	HAL_GPIO_WritePin(Start_GPIO_Port, Start_Pin, RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023f4:	4853      	ldr	r0, [pc, #332]	; (8002544 <main+0x278>)
 80023f6:	f7fe fa67 	bl	80008c8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80023fa:	2064      	movs	r0, #100	; 0x64
 80023fc:	f7fd ffa6 	bl	800034c <HAL_Delay>




  	HAL_Delay(2000);
 8002400:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002404:	f7fd ffa2 	bl	800034c <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flag_EOC == 1) {
 8002408:	4b4f      	ldr	r3, [pc, #316]	; (8002548 <main+0x27c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d179      	bne.n	8002504 <main+0x238>
		outputEnable = HAL_GPIO_ReadPin(OUTPUT_ENABLE_GPIO_Port, OUTPUT_ENABLE_Pin);;
 8002410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002414:	484a      	ldr	r0, [pc, #296]	; (8002540 <main+0x274>)
 8002416:	f7fe fa3f 	bl	8000898 <HAL_GPIO_ReadPin>
 800241a:	4603      	mov	r3, r0
 800241c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		bitDado0 = HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin);;  // Read state
 8002420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002428:	f7fe fa36 	bl	8000898 <HAL_GPIO_ReadPin>
 800242c:	4603      	mov	r3, r0
 800242e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		bitDado1 = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);;  // Read state
 8002432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243a:	f7fe fa2d 	bl	8000898 <HAL_GPIO_ReadPin>
 800243e:	4603      	mov	r3, r0
 8002440:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		bitDado2 = HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);;  // Read state
 8002444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244c:	f7fe fa24 	bl	8000898 <HAL_GPIO_ReadPin>
 8002450:	4603      	mov	r3, r0
 8002452:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		bitDado3 = HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);;  // Read state
 8002456:	f44f 7100 	mov.w	r1, #512	; 0x200
 800245a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245e:	f7fe fa1b 	bl	8000898 <HAL_GPIO_ReadPin>
 8002462:	4603      	mov	r3, r0
 8002464:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bitDado4 = HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);;  // Read state
 8002468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800246c:	4834      	ldr	r0, [pc, #208]	; (8002540 <main+0x274>)
 800246e:	f7fe fa13 	bl	8000898 <HAL_GPIO_ReadPin>
 8002472:	4603      	mov	r3, r0
 8002474:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		bitDado5 = HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);;  // Read state
 8002478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800247c:	4830      	ldr	r0, [pc, #192]	; (8002540 <main+0x274>)
 800247e:	f7fe fa0b 	bl	8000898 <HAL_GPIO_ReadPin>
 8002482:	4603      	mov	r3, r0
 8002484:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		bitDado6 = HAL_GPIO_ReadPin(D6_GPIO_Port, D6_Pin);;  // Read state
 8002488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800248c:	482c      	ldr	r0, [pc, #176]	; (8002540 <main+0x274>)
 800248e:	f7fe fa03 	bl	8000898 <HAL_GPIO_ReadPin>
 8002492:	4603      	mov	r3, r0
 8002494:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		bitDado7 = HAL_GPIO_ReadPin(D7_GPIO_Port, D7_Pin);;  // Read state
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	4829      	ldr	r0, [pc, #164]	; (8002540 <main+0x274>)
 800249c:	f7fe f9fc 	bl	8000898 <HAL_GPIO_ReadPin>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		ValorLido = bitDado0|(bitDado1<<1)|(bitDado2<<2)|(bitDado3<<3)|(bitDado4<<4)|(bitDado5<<5)|(bitDado6<<6)|(bitDado7<<7);
 80024a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	b25a      	sxtb	r2, r3
 80024ae:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80024b2:	4313      	orrs	r3, r2
 80024b4:	b25a      	sxtb	r2, r3
 80024b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	4313      	orrs	r3, r2
 80024c0:	b25a      	sxtb	r2, r3
 80024c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	4313      	orrs	r3, r2
 80024cc:	b25a      	sxtb	r2, r3
 80024ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b25a      	sxtb	r2, r3
 80024da:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80024de:	015b      	lsls	r3, r3, #5
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b25a      	sxtb	r2, r3
 80024e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80024ea:	019b      	lsls	r3, r3, #6
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	4313      	orrs	r3, r2
 80024f0:	b25a      	sxtb	r2, r3
 80024f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024f6:	01db      	lsls	r3, r3, #7
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	4313      	orrs	r3, r2
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <main+0x280>)
 8002502:	701a      	strb	r2, [r3, #0]
	  }

  	  sprintf(buffer,"ValorLido: %d\r\n", ValorLido);
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <main+0x280>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	4910      	ldr	r1, [pc, #64]	; (8002550 <main+0x284>)
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fafe 	bl	8002b10 <siprintf>

	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd fe5a 	bl	80001d0 <strlen>
 800251c:	4603      	mov	r3, r0
 800251e:	b29a      	uxth	r2, r3
 8002520:	1d39      	adds	r1, r7, #4
 8002522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <main+0x270>)
 8002528:	f7ff fba7 	bl	8001c7a <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800252c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002530:	f7fd ff0c 	bl	800034c <HAL_Delay>
  {
 8002534:	e768      	b.n	8002408 <main+0x13c>
 8002536:	bf00      	nop
 8002538:	08003334 	.word	0x08003334
 800253c:	200000a8 	.word	0x200000a8
 8002540:	48000800 	.word	0x48000800
 8002544:	48000400 	.word	0x48000400
 8002548:	2000008c 	.word	0x2000008c
 800254c:	200000a3 	.word	0x200000a3
 8002550:	08003340 	.word	0x08003340

08002554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b090      	sub	sp, #64	; 0x40
 8002558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255a:	f107 0318 	add.w	r3, r7, #24
 800255e:	2228      	movs	r2, #40	; 0x28
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f000 facc 	bl	8002b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002576:	230a      	movs	r3, #10
 8002578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800257a:	2301      	movs	r3, #1
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800257e:	2310      	movs	r3, #16
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002582:	2301      	movs	r3, #1
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002586:	2302      	movs	r3, #2
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800258a:	2300      	movs	r3, #0
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800258e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002594:	f107 0318 	add.w	r3, r7, #24
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe f9c5 	bl	8000928 <HAL_RCC_OscConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80025a4:	f000 f93a 	bl	800281c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a8:	230f      	movs	r3, #15
 80025aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ac:	2302      	movs	r3, #2
 80025ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	2102      	movs	r1, #2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f89e 	bl	8001704 <HAL_RCC_ClockConfig>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80025ce:	f000 f925 	bl	800281c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_LSI, RCC_MCODIV_1);
 80025d2:	2200      	movs	r2, #0
 80025d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff fa0f 	bl	80019fc <HAL_RCC_MCOConfig>
}
 80025de:	bf00      	nop
 80025e0:	3740      	adds	r7, #64	; 0x40
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <MX_USART2_UART_Init+0x58>)
 80025ee:	4a15      	ldr	r2, [pc, #84]	; (8002644 <MX_USART2_UART_Init+0x5c>)
 80025f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <MX_USART2_UART_Init+0x58>)
 80025f4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80025f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_USART2_UART_Init+0x58>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <MX_USART2_UART_Init+0x58>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_USART2_UART_Init+0x58>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_USART2_UART_Init+0x58>)
 800260e:	220c      	movs	r2, #12
 8002610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <MX_USART2_UART_Init+0x58>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_USART2_UART_Init+0x58>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <MX_USART2_UART_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_USART2_UART_Init+0x58>)
 8002626:	2200      	movs	r2, #0
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_USART2_UART_Init+0x58>)
 800262c:	f7ff fad4 	bl	8001bd8 <HAL_UART_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002636:	f000 f8f1 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200000a8 	.word	0x200000a8
 8002644:	40004400 	.word	0x40004400

08002648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265e:	4b60      	ldr	r3, [pc, #384]	; (80027e0 <MX_GPIO_Init+0x198>)
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4a5f      	ldr	r2, [pc, #380]	; (80027e0 <MX_GPIO_Init+0x198>)
 8002664:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002668:	6153      	str	r3, [r2, #20]
 800266a:	4b5d      	ldr	r3, [pc, #372]	; (80027e0 <MX_GPIO_Init+0x198>)
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002676:	4b5a      	ldr	r3, [pc, #360]	; (80027e0 <MX_GPIO_Init+0x198>)
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	4a59      	ldr	r2, [pc, #356]	; (80027e0 <MX_GPIO_Init+0x198>)
 800267c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002680:	6153      	str	r3, [r2, #20]
 8002682:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <MX_GPIO_Init+0x198>)
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	4b54      	ldr	r3, [pc, #336]	; (80027e0 <MX_GPIO_Init+0x198>)
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	4a53      	ldr	r2, [pc, #332]	; (80027e0 <MX_GPIO_Init+0x198>)
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	6153      	str	r3, [r2, #20]
 800269a:	4b51      	ldr	r3, [pc, #324]	; (80027e0 <MX_GPIO_Init+0x198>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	4b4e      	ldr	r3, [pc, #312]	; (80027e0 <MX_GPIO_Init+0x198>)
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	4a4d      	ldr	r2, [pc, #308]	; (80027e0 <MX_GPIO_Init+0x198>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b0:	6153      	str	r3, [r2, #20]
 80026b2:	4b4b      	ldr	r3, [pc, #300]	; (80027e0 <MX_GPIO_Init+0x198>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026be:	2200      	movs	r2, #0
 80026c0:	2120      	movs	r1, #32
 80026c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c6:	f7fe f8ff 	bl	80008c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ALE_Pin|Start_Pin|C_Pin|B_Pin, GPIO_PIN_RESET);
 80026ca:	2200      	movs	r2, #0
 80026cc:	f44f 4164 	mov.w	r1, #58368	; 0xe400
 80026d0:	4844      	ldr	r0, [pc, #272]	; (80027e4 <MX_GPIO_Init+0x19c>)
 80026d2:	f7fe f8f9 	bl	80008c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2140      	movs	r1, #64	; 0x40
 80026da:	4843      	ldr	r0, [pc, #268]	; (80027e8 <MX_GPIO_Init+0x1a0>)
 80026dc:	f7fe f8f4 	bl	80008c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026e6:	4b41      	ldr	r3, [pc, #260]	; (80027ec <MX_GPIO_Init+0x1a4>)
 80026e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	483c      	ldr	r0, [pc, #240]	; (80027e8 <MX_GPIO_Init+0x1a0>)
 80026f6:	f7fd ff59 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026fa:	2320      	movs	r3, #32
 80026fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fe:	2301      	movs	r3, #1
 8002700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002714:	f7fd ff4a 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ALE_Pin Start_Pin C_Pin B_Pin */
  GPIO_InitStruct.Pin = ALE_Pin|Start_Pin|C_Pin|B_Pin;
 8002718:	f44f 4364 	mov.w	r3, #58368	; 0xe400
 800271c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271e:	2301      	movs	r3, #1
 8002720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4619      	mov	r1, r3
 8002730:	482c      	ldr	r0, [pc, #176]	; (80027e4 <MX_GPIO_Init+0x19c>)
 8002732:	f7fd ff3b 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : A_Pin */
  GPIO_InitStruct.Pin = A_Pin;
 8002736:	2340      	movs	r3, #64	; 0x40
 8002738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	4826      	ldr	r0, [pc, #152]	; (80027e8 <MX_GPIO_Init+0x1a0>)
 800274e:	f7fd ff2d 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin D4_Pin 
                           OUTPUT_ENABLE_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin 
 8002752:	f44f 53bc 	mov.w	r3, #6016	; 0x1780
 8002756:	617b      	str	r3, [r7, #20]
                          |OUTPUT_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	4820      	ldr	r0, [pc, #128]	; (80027e8 <MX_GPIO_Init+0x1a0>)
 8002768:	f7fd ff20 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800276c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800278c:	f7fd ff0e 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D2_Pin D1_Pin D0_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D1_Pin|D0_Pin;
 8002790:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4619      	mov	r1, r3
 80027a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a8:	f7fd ff00 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : EOC_Pin */
  GPIO_InitStruct.Pin = EOC_Pin;
 80027ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <MX_GPIO_Init+0x1a8>)
 80027b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EOC_GPIO_Port, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4809      	ldr	r0, [pc, #36]	; (80027e8 <MX_GPIO_Init+0x1a0>)
 80027c2:	f7fd fef3 	bl	80005ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	2028      	movs	r0, #40	; 0x28
 80027cc:	f7fd feb7 	bl	800053e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027d0:	2028      	movs	r0, #40	; 0x28
 80027d2:	f7fd fed0 	bl	8000576 <HAL_NVIC_EnableIRQ>

}
 80027d6:	bf00      	nop
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	48000400 	.word	0x48000400
 80027e8:	48000800 	.word	0x48000800
 80027ec:	10210000 	.word	0x10210000
 80027f0:	10110000 	.word	0x10110000

080027f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EOC_Pin) {
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002804:	d102      	bne.n	800280c <HAL_GPIO_EXTI_Callback+0x18>
		flag_EOC = 1;
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_GPIO_EXTI_Callback+0x24>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]
	}
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	2000008c 	.word	0x2000008c

0800281c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_MspInit+0x44>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_MspInit+0x44>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6193      	str	r3, [r2, #24]
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_MspInit+0x44>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_MspInit+0x44>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a08      	ldr	r2, [pc, #32]	; (8002870 <HAL_MspInit+0x44>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_MspInit+0x44>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002862:	2007      	movs	r0, #7
 8002864:	f7fd fe60 	bl	8000528 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000

08002874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a17      	ldr	r2, [pc, #92]	; (80028f0 <HAL_UART_MspInit+0x7c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d128      	bne.n	80028e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002896:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <HAL_UART_MspInit+0x80>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a16      	ldr	r2, [pc, #88]	; (80028f4 <HAL_UART_MspInit+0x80>)
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_UART_MspInit+0x80>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_UART_MspInit+0x80>)
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <HAL_UART_MspInit+0x80>)
 80028b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b8:	6153      	str	r3, [r2, #20]
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <HAL_UART_MspInit+0x80>)
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028c6:	230c      	movs	r3, #12
 80028c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d6:	2307      	movs	r3, #7
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e4:	f7fd fe62 	bl	80005ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028e8:	bf00      	nop
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40004400 	.word	0x40004400
 80028f4:	40021000 	.word	0x40021000

080028f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <HardFault_Handler+0x4>

0800290c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <MemManage_Handler+0x4>

08002912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <BusFault_Handler+0x4>

08002918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <UsageFault_Handler+0x4>

0800291e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800294c:	f7fd fcde 	bl	800030c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}

08002954 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002958:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800295c:	f7fd ffcc 	bl	80008f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002960:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002964:	f7fd ffc8 	bl	80008f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}

0800296c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <_sbrk+0x50>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x16>
		heap_end = &end;
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <_sbrk+0x50>)
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <_sbrk+0x54>)
 8002980:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <_sbrk+0x50>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <_sbrk+0x50>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	466a      	mov	r2, sp
 8002992:	4293      	cmp	r3, r2
 8002994:	d907      	bls.n	80029a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002996:	f000 f889 	bl	8002aac <__errno>
 800299a:	4602      	mov	r2, r0
 800299c:	230c      	movs	r3, #12
 800299e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295
 80029a4:	e006      	b.n	80029b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <_sbrk+0x50>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a03      	ldr	r2, [pc, #12]	; (80029bc <_sbrk+0x50>)
 80029b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000090 	.word	0x20000090
 80029c0:	20000120 	.word	0x20000120

080029c4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <SystemInit+0x84>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	4a1e      	ldr	r2, [pc, #120]	; (8002a48 <SystemInit+0x84>)
 80029d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <SystemInit+0x88>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <SystemInit+0x88>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <SystemInit+0x88>)
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4918      	ldr	r1, [pc, #96]	; (8002a4c <SystemInit+0x88>)
 80029ea:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <SystemInit+0x8c>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <SystemInit+0x88>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <SystemInit+0x88>)
 80029f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <SystemInit+0x88>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <SystemInit+0x88>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <SystemInit+0x88>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <SystemInit+0x88>)
 8002a12:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002a16:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <SystemInit+0x88>)
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	4a0b      	ldr	r2, [pc, #44]	; (8002a4c <SystemInit+0x88>)
 8002a1e:	f023 030f 	bic.w	r3, r3, #15
 8002a22:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <SystemInit+0x88>)
 8002a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a28:	4908      	ldr	r1, [pc, #32]	; (8002a4c <SystemInit+0x88>)
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <SystemInit+0x90>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <SystemInit+0x88>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <SystemInit+0x84>)
 8002a38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a3c:	609a      	str	r2, [r3, #8]
#endif
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	f87fc00c 	.word	0xf87fc00c
 8002a54:	ff00fccc 	.word	0xff00fccc

08002a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a5e:	e003      	b.n	8002a68 <LoopCopyDataInit>

08002a60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a66:	3104      	adds	r1, #4

08002a68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a68:	480b      	ldr	r0, [pc, #44]	; (8002a98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a70:	d3f6      	bcc.n	8002a60 <CopyDataInit>
	ldr	r2, =_sbss
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a74:	e002      	b.n	8002a7c <LoopFillZerobss>

08002a76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a78:	f842 3b04 	str.w	r3, [r2], #4

08002a7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <LoopForever+0x16>)
	cmp	r2, r3
 8002a7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a80:	d3f9      	bcc.n	8002a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a82:	f7ff ff9f 	bl	80029c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a86:	f000 f817 	bl	8002ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a8a:	f7ff fc1f 	bl	80022cc <main>

08002a8e <LoopForever>:

LoopForever:
    b LoopForever
 8002a8e:	e7fe      	b.n	8002a8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a90:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002a94:	080033c4 	.word	0x080033c4
	ldr	r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a9c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002aa0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002aa4:	20000120 	.word	0x20000120

08002aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002aa8:	e7fe      	b.n	8002aa8 <ADC1_2_IRQHandler>
	...

08002aac <__errno>:
 8002aac:	4b01      	ldr	r3, [pc, #4]	; (8002ab4 <__errno+0x8>)
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	2000000c 	.word	0x2000000c

08002ab8 <__libc_init_array>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	4e0d      	ldr	r6, [pc, #52]	; (8002af0 <__libc_init_array+0x38>)
 8002abc:	4c0d      	ldr	r4, [pc, #52]	; (8002af4 <__libc_init_array+0x3c>)
 8002abe:	1ba4      	subs	r4, r4, r6
 8002ac0:	10a4      	asrs	r4, r4, #2
 8002ac2:	2500      	movs	r5, #0
 8002ac4:	42a5      	cmp	r5, r4
 8002ac6:	d109      	bne.n	8002adc <__libc_init_array+0x24>
 8002ac8:	4e0b      	ldr	r6, [pc, #44]	; (8002af8 <__libc_init_array+0x40>)
 8002aca:	4c0c      	ldr	r4, [pc, #48]	; (8002afc <__libc_init_array+0x44>)
 8002acc:	f000 fc26 	bl	800331c <_init>
 8002ad0:	1ba4      	subs	r4, r4, r6
 8002ad2:	10a4      	asrs	r4, r4, #2
 8002ad4:	2500      	movs	r5, #0
 8002ad6:	42a5      	cmp	r5, r4
 8002ad8:	d105      	bne.n	8002ae6 <__libc_init_array+0x2e>
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ae0:	4798      	blx	r3
 8002ae2:	3501      	adds	r5, #1
 8002ae4:	e7ee      	b.n	8002ac4 <__libc_init_array+0xc>
 8002ae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aea:	4798      	blx	r3
 8002aec:	3501      	adds	r5, #1
 8002aee:	e7f2      	b.n	8002ad6 <__libc_init_array+0x1e>
 8002af0:	080033bc 	.word	0x080033bc
 8002af4:	080033bc 	.word	0x080033bc
 8002af8:	080033bc 	.word	0x080033bc
 8002afc:	080033c0 	.word	0x080033c0

08002b00 <memset>:
 8002b00:	4402      	add	r2, r0
 8002b02:	4603      	mov	r3, r0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d100      	bne.n	8002b0a <memset+0xa>
 8002b08:	4770      	bx	lr
 8002b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0e:	e7f9      	b.n	8002b04 <memset+0x4>

08002b10 <siprintf>:
 8002b10:	b40e      	push	{r1, r2, r3}
 8002b12:	b500      	push	{lr}
 8002b14:	b09c      	sub	sp, #112	; 0x70
 8002b16:	ab1d      	add	r3, sp, #116	; 0x74
 8002b18:	9002      	str	r0, [sp, #8]
 8002b1a:	9006      	str	r0, [sp, #24]
 8002b1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b20:	4809      	ldr	r0, [pc, #36]	; (8002b48 <siprintf+0x38>)
 8002b22:	9107      	str	r1, [sp, #28]
 8002b24:	9104      	str	r1, [sp, #16]
 8002b26:	4909      	ldr	r1, [pc, #36]	; (8002b4c <siprintf+0x3c>)
 8002b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b2c:	9105      	str	r1, [sp, #20]
 8002b2e:	6800      	ldr	r0, [r0, #0]
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	a902      	add	r1, sp, #8
 8002b34:	f000 f866 	bl	8002c04 <_svfiprintf_r>
 8002b38:	9b02      	ldr	r3, [sp, #8]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	b01c      	add	sp, #112	; 0x70
 8002b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b44:	b003      	add	sp, #12
 8002b46:	4770      	bx	lr
 8002b48:	2000000c 	.word	0x2000000c
 8002b4c:	ffff0208 	.word	0xffff0208

08002b50 <__ssputs_r>:
 8002b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b54:	688e      	ldr	r6, [r1, #8]
 8002b56:	429e      	cmp	r6, r3
 8002b58:	4682      	mov	sl, r0
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	4690      	mov	r8, r2
 8002b5e:	4699      	mov	r9, r3
 8002b60:	d837      	bhi.n	8002bd2 <__ssputs_r+0x82>
 8002b62:	898a      	ldrh	r2, [r1, #12]
 8002b64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b68:	d031      	beq.n	8002bce <__ssputs_r+0x7e>
 8002b6a:	6825      	ldr	r5, [r4, #0]
 8002b6c:	6909      	ldr	r1, [r1, #16]
 8002b6e:	1a6f      	subs	r7, r5, r1
 8002b70:	6965      	ldr	r5, [r4, #20]
 8002b72:	2302      	movs	r3, #2
 8002b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b78:	fb95 f5f3 	sdiv	r5, r5, r3
 8002b7c:	f109 0301 	add.w	r3, r9, #1
 8002b80:	443b      	add	r3, r7
 8002b82:	429d      	cmp	r5, r3
 8002b84:	bf38      	it	cc
 8002b86:	461d      	movcc	r5, r3
 8002b88:	0553      	lsls	r3, r2, #21
 8002b8a:	d530      	bpl.n	8002bee <__ssputs_r+0x9e>
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f000 fb2b 	bl	80031e8 <_malloc_r>
 8002b92:	4606      	mov	r6, r0
 8002b94:	b950      	cbnz	r0, 8002bac <__ssputs_r+0x5c>
 8002b96:	230c      	movs	r3, #12
 8002b98:	f8ca 3000 	str.w	r3, [sl]
 8002b9c:	89a3      	ldrh	r3, [r4, #12]
 8002b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba2:	81a3      	strh	r3, [r4, #12]
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bac:	463a      	mov	r2, r7
 8002bae:	6921      	ldr	r1, [r4, #16]
 8002bb0:	f000 faa8 	bl	8003104 <memcpy>
 8002bb4:	89a3      	ldrh	r3, [r4, #12]
 8002bb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bbe:	81a3      	strh	r3, [r4, #12]
 8002bc0:	6126      	str	r6, [r4, #16]
 8002bc2:	6165      	str	r5, [r4, #20]
 8002bc4:	443e      	add	r6, r7
 8002bc6:	1bed      	subs	r5, r5, r7
 8002bc8:	6026      	str	r6, [r4, #0]
 8002bca:	60a5      	str	r5, [r4, #8]
 8002bcc:	464e      	mov	r6, r9
 8002bce:	454e      	cmp	r6, r9
 8002bd0:	d900      	bls.n	8002bd4 <__ssputs_r+0x84>
 8002bd2:	464e      	mov	r6, r9
 8002bd4:	4632      	mov	r2, r6
 8002bd6:	4641      	mov	r1, r8
 8002bd8:	6820      	ldr	r0, [r4, #0]
 8002bda:	f000 fa9e 	bl	800311a <memmove>
 8002bde:	68a3      	ldr	r3, [r4, #8]
 8002be0:	1b9b      	subs	r3, r3, r6
 8002be2:	60a3      	str	r3, [r4, #8]
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	441e      	add	r6, r3
 8002be8:	6026      	str	r6, [r4, #0]
 8002bea:	2000      	movs	r0, #0
 8002bec:	e7dc      	b.n	8002ba8 <__ssputs_r+0x58>
 8002bee:	462a      	mov	r2, r5
 8002bf0:	f000 fb54 	bl	800329c <_realloc_r>
 8002bf4:	4606      	mov	r6, r0
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	d1e2      	bne.n	8002bc0 <__ssputs_r+0x70>
 8002bfa:	6921      	ldr	r1, [r4, #16]
 8002bfc:	4650      	mov	r0, sl
 8002bfe:	f000 faa5 	bl	800314c <_free_r>
 8002c02:	e7c8      	b.n	8002b96 <__ssputs_r+0x46>

08002c04 <_svfiprintf_r>:
 8002c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c08:	461d      	mov	r5, r3
 8002c0a:	898b      	ldrh	r3, [r1, #12]
 8002c0c:	061f      	lsls	r7, r3, #24
 8002c0e:	b09d      	sub	sp, #116	; 0x74
 8002c10:	4680      	mov	r8, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	4616      	mov	r6, r2
 8002c16:	d50f      	bpl.n	8002c38 <_svfiprintf_r+0x34>
 8002c18:	690b      	ldr	r3, [r1, #16]
 8002c1a:	b96b      	cbnz	r3, 8002c38 <_svfiprintf_r+0x34>
 8002c1c:	2140      	movs	r1, #64	; 0x40
 8002c1e:	f000 fae3 	bl	80031e8 <_malloc_r>
 8002c22:	6020      	str	r0, [r4, #0]
 8002c24:	6120      	str	r0, [r4, #16]
 8002c26:	b928      	cbnz	r0, 8002c34 <_svfiprintf_r+0x30>
 8002c28:	230c      	movs	r3, #12
 8002c2a:	f8c8 3000 	str.w	r3, [r8]
 8002c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c32:	e0c8      	b.n	8002dc6 <_svfiprintf_r+0x1c2>
 8002c34:	2340      	movs	r3, #64	; 0x40
 8002c36:	6163      	str	r3, [r4, #20]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c42:	2330      	movs	r3, #48	; 0x30
 8002c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c48:	9503      	str	r5, [sp, #12]
 8002c4a:	f04f 0b01 	mov.w	fp, #1
 8002c4e:	4637      	mov	r7, r6
 8002c50:	463d      	mov	r5, r7
 8002c52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c56:	b10b      	cbz	r3, 8002c5c <_svfiprintf_r+0x58>
 8002c58:	2b25      	cmp	r3, #37	; 0x25
 8002c5a:	d13e      	bne.n	8002cda <_svfiprintf_r+0xd6>
 8002c5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002c60:	d00b      	beq.n	8002c7a <_svfiprintf_r+0x76>
 8002c62:	4653      	mov	r3, sl
 8002c64:	4632      	mov	r2, r6
 8002c66:	4621      	mov	r1, r4
 8002c68:	4640      	mov	r0, r8
 8002c6a:	f7ff ff71 	bl	8002b50 <__ssputs_r>
 8002c6e:	3001      	adds	r0, #1
 8002c70:	f000 80a4 	beq.w	8002dbc <_svfiprintf_r+0x1b8>
 8002c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c76:	4453      	add	r3, sl
 8002c78:	9309      	str	r3, [sp, #36]	; 0x24
 8002c7a:	783b      	ldrb	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 809d 	beq.w	8002dbc <_svfiprintf_r+0x1b8>
 8002c82:	2300      	movs	r3, #0
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c8c:	9304      	str	r3, [sp, #16]
 8002c8e:	9307      	str	r3, [sp, #28]
 8002c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c94:	931a      	str	r3, [sp, #104]	; 0x68
 8002c96:	462f      	mov	r7, r5
 8002c98:	2205      	movs	r2, #5
 8002c9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002c9e:	4850      	ldr	r0, [pc, #320]	; (8002de0 <_svfiprintf_r+0x1dc>)
 8002ca0:	f7fd fa9e 	bl	80001e0 <memchr>
 8002ca4:	9b04      	ldr	r3, [sp, #16]
 8002ca6:	b9d0      	cbnz	r0, 8002cde <_svfiprintf_r+0xda>
 8002ca8:	06d9      	lsls	r1, r3, #27
 8002caa:	bf44      	itt	mi
 8002cac:	2220      	movmi	r2, #32
 8002cae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cb2:	071a      	lsls	r2, r3, #28
 8002cb4:	bf44      	itt	mi
 8002cb6:	222b      	movmi	r2, #43	; 0x2b
 8002cb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cbc:	782a      	ldrb	r2, [r5, #0]
 8002cbe:	2a2a      	cmp	r2, #42	; 0x2a
 8002cc0:	d015      	beq.n	8002cee <_svfiprintf_r+0xea>
 8002cc2:	9a07      	ldr	r2, [sp, #28]
 8002cc4:	462f      	mov	r7, r5
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	250a      	movs	r5, #10
 8002cca:	4639      	mov	r1, r7
 8002ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cd0:	3b30      	subs	r3, #48	; 0x30
 8002cd2:	2b09      	cmp	r3, #9
 8002cd4:	d94d      	bls.n	8002d72 <_svfiprintf_r+0x16e>
 8002cd6:	b1b8      	cbz	r0, 8002d08 <_svfiprintf_r+0x104>
 8002cd8:	e00f      	b.n	8002cfa <_svfiprintf_r+0xf6>
 8002cda:	462f      	mov	r7, r5
 8002cdc:	e7b8      	b.n	8002c50 <_svfiprintf_r+0x4c>
 8002cde:	4a40      	ldr	r2, [pc, #256]	; (8002de0 <_svfiprintf_r+0x1dc>)
 8002ce0:	1a80      	subs	r0, r0, r2
 8002ce2:	fa0b f000 	lsl.w	r0, fp, r0
 8002ce6:	4318      	orrs	r0, r3
 8002ce8:	9004      	str	r0, [sp, #16]
 8002cea:	463d      	mov	r5, r7
 8002cec:	e7d3      	b.n	8002c96 <_svfiprintf_r+0x92>
 8002cee:	9a03      	ldr	r2, [sp, #12]
 8002cf0:	1d11      	adds	r1, r2, #4
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	9103      	str	r1, [sp, #12]
 8002cf6:	2a00      	cmp	r2, #0
 8002cf8:	db01      	blt.n	8002cfe <_svfiprintf_r+0xfa>
 8002cfa:	9207      	str	r2, [sp, #28]
 8002cfc:	e004      	b.n	8002d08 <_svfiprintf_r+0x104>
 8002cfe:	4252      	negs	r2, r2
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	9207      	str	r2, [sp, #28]
 8002d06:	9304      	str	r3, [sp, #16]
 8002d08:	783b      	ldrb	r3, [r7, #0]
 8002d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d0c:	d10c      	bne.n	8002d28 <_svfiprintf_r+0x124>
 8002d0e:	787b      	ldrb	r3, [r7, #1]
 8002d10:	2b2a      	cmp	r3, #42	; 0x2a
 8002d12:	d133      	bne.n	8002d7c <_svfiprintf_r+0x178>
 8002d14:	9b03      	ldr	r3, [sp, #12]
 8002d16:	1d1a      	adds	r2, r3, #4
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	9203      	str	r2, [sp, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bfb8      	it	lt
 8002d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d24:	3702      	adds	r7, #2
 8002d26:	9305      	str	r3, [sp, #20]
 8002d28:	4d2e      	ldr	r5, [pc, #184]	; (8002de4 <_svfiprintf_r+0x1e0>)
 8002d2a:	7839      	ldrb	r1, [r7, #0]
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f7fd fa56 	bl	80001e0 <memchr>
 8002d34:	b138      	cbz	r0, 8002d46 <_svfiprintf_r+0x142>
 8002d36:	2340      	movs	r3, #64	; 0x40
 8002d38:	1b40      	subs	r0, r0, r5
 8002d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d3e:	9b04      	ldr	r3, [sp, #16]
 8002d40:	4303      	orrs	r3, r0
 8002d42:	3701      	adds	r7, #1
 8002d44:	9304      	str	r3, [sp, #16]
 8002d46:	7839      	ldrb	r1, [r7, #0]
 8002d48:	4827      	ldr	r0, [pc, #156]	; (8002de8 <_svfiprintf_r+0x1e4>)
 8002d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d4e:	2206      	movs	r2, #6
 8002d50:	1c7e      	adds	r6, r7, #1
 8002d52:	f7fd fa45 	bl	80001e0 <memchr>
 8002d56:	2800      	cmp	r0, #0
 8002d58:	d038      	beq.n	8002dcc <_svfiprintf_r+0x1c8>
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <_svfiprintf_r+0x1e8>)
 8002d5c:	bb13      	cbnz	r3, 8002da4 <_svfiprintf_r+0x1a0>
 8002d5e:	9b03      	ldr	r3, [sp, #12]
 8002d60:	3307      	adds	r3, #7
 8002d62:	f023 0307 	bic.w	r3, r3, #7
 8002d66:	3308      	adds	r3, #8
 8002d68:	9303      	str	r3, [sp, #12]
 8002d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d6c:	444b      	add	r3, r9
 8002d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d70:	e76d      	b.n	8002c4e <_svfiprintf_r+0x4a>
 8002d72:	fb05 3202 	mla	r2, r5, r2, r3
 8002d76:	2001      	movs	r0, #1
 8002d78:	460f      	mov	r7, r1
 8002d7a:	e7a6      	b.n	8002cca <_svfiprintf_r+0xc6>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	3701      	adds	r7, #1
 8002d80:	9305      	str	r3, [sp, #20]
 8002d82:	4619      	mov	r1, r3
 8002d84:	250a      	movs	r5, #10
 8002d86:	4638      	mov	r0, r7
 8002d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d8c:	3a30      	subs	r2, #48	; 0x30
 8002d8e:	2a09      	cmp	r2, #9
 8002d90:	d903      	bls.n	8002d9a <_svfiprintf_r+0x196>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0c8      	beq.n	8002d28 <_svfiprintf_r+0x124>
 8002d96:	9105      	str	r1, [sp, #20]
 8002d98:	e7c6      	b.n	8002d28 <_svfiprintf_r+0x124>
 8002d9a:	fb05 2101 	mla	r1, r5, r1, r2
 8002d9e:	2301      	movs	r3, #1
 8002da0:	4607      	mov	r7, r0
 8002da2:	e7f0      	b.n	8002d86 <_svfiprintf_r+0x182>
 8002da4:	ab03      	add	r3, sp, #12
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4622      	mov	r2, r4
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <_svfiprintf_r+0x1ec>)
 8002dac:	a904      	add	r1, sp, #16
 8002dae:	4640      	mov	r0, r8
 8002db0:	f3af 8000 	nop.w
 8002db4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002db8:	4681      	mov	r9, r0
 8002dba:	d1d6      	bne.n	8002d6a <_svfiprintf_r+0x166>
 8002dbc:	89a3      	ldrh	r3, [r4, #12]
 8002dbe:	065b      	lsls	r3, r3, #25
 8002dc0:	f53f af35 	bmi.w	8002c2e <_svfiprintf_r+0x2a>
 8002dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dc6:	b01d      	add	sp, #116	; 0x74
 8002dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dcc:	ab03      	add	r3, sp, #12
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <_svfiprintf_r+0x1ec>)
 8002dd4:	a904      	add	r1, sp, #16
 8002dd6:	4640      	mov	r0, r8
 8002dd8:	f000 f882 	bl	8002ee0 <_printf_i>
 8002ddc:	e7ea      	b.n	8002db4 <_svfiprintf_r+0x1b0>
 8002dde:	bf00      	nop
 8002de0:	08003388 	.word	0x08003388
 8002de4:	0800338e 	.word	0x0800338e
 8002de8:	08003392 	.word	0x08003392
 8002dec:	00000000 	.word	0x00000000
 8002df0:	08002b51 	.word	0x08002b51

08002df4 <_printf_common>:
 8002df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df8:	4691      	mov	r9, r2
 8002dfa:	461f      	mov	r7, r3
 8002dfc:	688a      	ldr	r2, [r1, #8]
 8002dfe:	690b      	ldr	r3, [r1, #16]
 8002e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bfb8      	it	lt
 8002e08:	4613      	movlt	r3, r2
 8002e0a:	f8c9 3000 	str.w	r3, [r9]
 8002e0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e12:	4606      	mov	r6, r0
 8002e14:	460c      	mov	r4, r1
 8002e16:	b112      	cbz	r2, 8002e1e <_printf_common+0x2a>
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f8c9 3000 	str.w	r3, [r9]
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	0699      	lsls	r1, r3, #26
 8002e22:	bf42      	ittt	mi
 8002e24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e28:	3302      	addmi	r3, #2
 8002e2a:	f8c9 3000 	strmi.w	r3, [r9]
 8002e2e:	6825      	ldr	r5, [r4, #0]
 8002e30:	f015 0506 	ands.w	r5, r5, #6
 8002e34:	d107      	bne.n	8002e46 <_printf_common+0x52>
 8002e36:	f104 0a19 	add.w	sl, r4, #25
 8002e3a:	68e3      	ldr	r3, [r4, #12]
 8002e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	42ab      	cmp	r3, r5
 8002e44:	dc28      	bgt.n	8002e98 <_printf_common+0xa4>
 8002e46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	3300      	adds	r3, #0
 8002e4e:	bf18      	it	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	0692      	lsls	r2, r2, #26
 8002e54:	d42d      	bmi.n	8002eb2 <_printf_common+0xbe>
 8002e56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e5a:	4639      	mov	r1, r7
 8002e5c:	4630      	mov	r0, r6
 8002e5e:	47c0      	blx	r8
 8002e60:	3001      	adds	r0, #1
 8002e62:	d020      	beq.n	8002ea6 <_printf_common+0xb2>
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	68e5      	ldr	r5, [r4, #12]
 8002e68:	f8d9 2000 	ldr.w	r2, [r9]
 8002e6c:	f003 0306 	and.w	r3, r3, #6
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	bf08      	it	eq
 8002e74:	1aad      	subeq	r5, r5, r2
 8002e76:	68a3      	ldr	r3, [r4, #8]
 8002e78:	6922      	ldr	r2, [r4, #16]
 8002e7a:	bf0c      	ite	eq
 8002e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e80:	2500      	movne	r5, #0
 8002e82:	4293      	cmp	r3, r2
 8002e84:	bfc4      	itt	gt
 8002e86:	1a9b      	subgt	r3, r3, r2
 8002e88:	18ed      	addgt	r5, r5, r3
 8002e8a:	f04f 0900 	mov.w	r9, #0
 8002e8e:	341a      	adds	r4, #26
 8002e90:	454d      	cmp	r5, r9
 8002e92:	d11a      	bne.n	8002eca <_printf_common+0xd6>
 8002e94:	2000      	movs	r0, #0
 8002e96:	e008      	b.n	8002eaa <_printf_common+0xb6>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	4652      	mov	r2, sl
 8002e9c:	4639      	mov	r1, r7
 8002e9e:	4630      	mov	r0, r6
 8002ea0:	47c0      	blx	r8
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d103      	bne.n	8002eae <_printf_common+0xba>
 8002ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eae:	3501      	adds	r5, #1
 8002eb0:	e7c3      	b.n	8002e3a <_printf_common+0x46>
 8002eb2:	18e1      	adds	r1, r4, r3
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	2030      	movs	r0, #48	; 0x30
 8002eb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ebc:	4422      	add	r2, r4
 8002ebe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ec2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	e7c5      	b.n	8002e56 <_printf_common+0x62>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	4622      	mov	r2, r4
 8002ece:	4639      	mov	r1, r7
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	47c0      	blx	r8
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	d0e6      	beq.n	8002ea6 <_printf_common+0xb2>
 8002ed8:	f109 0901 	add.w	r9, r9, #1
 8002edc:	e7d8      	b.n	8002e90 <_printf_common+0x9c>
	...

08002ee0 <_printf_i>:
 8002ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ee4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ee8:	460c      	mov	r4, r1
 8002eea:	7e09      	ldrb	r1, [r1, #24]
 8002eec:	b085      	sub	sp, #20
 8002eee:	296e      	cmp	r1, #110	; 0x6e
 8002ef0:	4617      	mov	r7, r2
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	4698      	mov	r8, r3
 8002ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ef8:	f000 80b3 	beq.w	8003062 <_printf_i+0x182>
 8002efc:	d822      	bhi.n	8002f44 <_printf_i+0x64>
 8002efe:	2963      	cmp	r1, #99	; 0x63
 8002f00:	d036      	beq.n	8002f70 <_printf_i+0x90>
 8002f02:	d80a      	bhi.n	8002f1a <_printf_i+0x3a>
 8002f04:	2900      	cmp	r1, #0
 8002f06:	f000 80b9 	beq.w	800307c <_printf_i+0x19c>
 8002f0a:	2958      	cmp	r1, #88	; 0x58
 8002f0c:	f000 8083 	beq.w	8003016 <_printf_i+0x136>
 8002f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f18:	e032      	b.n	8002f80 <_printf_i+0xa0>
 8002f1a:	2964      	cmp	r1, #100	; 0x64
 8002f1c:	d001      	beq.n	8002f22 <_printf_i+0x42>
 8002f1e:	2969      	cmp	r1, #105	; 0x69
 8002f20:	d1f6      	bne.n	8002f10 <_printf_i+0x30>
 8002f22:	6820      	ldr	r0, [r4, #0]
 8002f24:	6813      	ldr	r3, [r2, #0]
 8002f26:	0605      	lsls	r5, r0, #24
 8002f28:	f103 0104 	add.w	r1, r3, #4
 8002f2c:	d52a      	bpl.n	8002f84 <_printf_i+0xa4>
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6011      	str	r1, [r2, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	da03      	bge.n	8002f3e <_printf_i+0x5e>
 8002f36:	222d      	movs	r2, #45	; 0x2d
 8002f38:	425b      	negs	r3, r3
 8002f3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f3e:	486f      	ldr	r0, [pc, #444]	; (80030fc <_printf_i+0x21c>)
 8002f40:	220a      	movs	r2, #10
 8002f42:	e039      	b.n	8002fb8 <_printf_i+0xd8>
 8002f44:	2973      	cmp	r1, #115	; 0x73
 8002f46:	f000 809d 	beq.w	8003084 <_printf_i+0x1a4>
 8002f4a:	d808      	bhi.n	8002f5e <_printf_i+0x7e>
 8002f4c:	296f      	cmp	r1, #111	; 0x6f
 8002f4e:	d020      	beq.n	8002f92 <_printf_i+0xb2>
 8002f50:	2970      	cmp	r1, #112	; 0x70
 8002f52:	d1dd      	bne.n	8002f10 <_printf_i+0x30>
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	f043 0320 	orr.w	r3, r3, #32
 8002f5a:	6023      	str	r3, [r4, #0]
 8002f5c:	e003      	b.n	8002f66 <_printf_i+0x86>
 8002f5e:	2975      	cmp	r1, #117	; 0x75
 8002f60:	d017      	beq.n	8002f92 <_printf_i+0xb2>
 8002f62:	2978      	cmp	r1, #120	; 0x78
 8002f64:	d1d4      	bne.n	8002f10 <_printf_i+0x30>
 8002f66:	2378      	movs	r3, #120	; 0x78
 8002f68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f6c:	4864      	ldr	r0, [pc, #400]	; (8003100 <_printf_i+0x220>)
 8002f6e:	e055      	b.n	800301c <_printf_i+0x13c>
 8002f70:	6813      	ldr	r3, [r2, #0]
 8002f72:	1d19      	adds	r1, r3, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6011      	str	r1, [r2, #0]
 8002f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f80:	2301      	movs	r3, #1
 8002f82:	e08c      	b.n	800309e <_printf_i+0x1be>
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6011      	str	r1, [r2, #0]
 8002f88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f8c:	bf18      	it	ne
 8002f8e:	b21b      	sxthne	r3, r3
 8002f90:	e7cf      	b.n	8002f32 <_printf_i+0x52>
 8002f92:	6813      	ldr	r3, [r2, #0]
 8002f94:	6825      	ldr	r5, [r4, #0]
 8002f96:	1d18      	adds	r0, r3, #4
 8002f98:	6010      	str	r0, [r2, #0]
 8002f9a:	0628      	lsls	r0, r5, #24
 8002f9c:	d501      	bpl.n	8002fa2 <_printf_i+0xc2>
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	e002      	b.n	8002fa8 <_printf_i+0xc8>
 8002fa2:	0668      	lsls	r0, r5, #25
 8002fa4:	d5fb      	bpl.n	8002f9e <_printf_i+0xbe>
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	4854      	ldr	r0, [pc, #336]	; (80030fc <_printf_i+0x21c>)
 8002faa:	296f      	cmp	r1, #111	; 0x6f
 8002fac:	bf14      	ite	ne
 8002fae:	220a      	movne	r2, #10
 8002fb0:	2208      	moveq	r2, #8
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fb8:	6865      	ldr	r5, [r4, #4]
 8002fba:	60a5      	str	r5, [r4, #8]
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	f2c0 8095 	blt.w	80030ec <_printf_i+0x20c>
 8002fc2:	6821      	ldr	r1, [r4, #0]
 8002fc4:	f021 0104 	bic.w	r1, r1, #4
 8002fc8:	6021      	str	r1, [r4, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d13d      	bne.n	800304a <_printf_i+0x16a>
 8002fce:	2d00      	cmp	r5, #0
 8002fd0:	f040 808e 	bne.w	80030f0 <_printf_i+0x210>
 8002fd4:	4665      	mov	r5, ip
 8002fd6:	2a08      	cmp	r2, #8
 8002fd8:	d10b      	bne.n	8002ff2 <_printf_i+0x112>
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	07db      	lsls	r3, r3, #31
 8002fde:	d508      	bpl.n	8002ff2 <_printf_i+0x112>
 8002fe0:	6923      	ldr	r3, [r4, #16]
 8002fe2:	6862      	ldr	r2, [r4, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	bfde      	ittt	le
 8002fe8:	2330      	movle	r3, #48	; 0x30
 8002fea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ff2:	ebac 0305 	sub.w	r3, ip, r5
 8002ff6:	6123      	str	r3, [r4, #16]
 8002ff8:	f8cd 8000 	str.w	r8, [sp]
 8002ffc:	463b      	mov	r3, r7
 8002ffe:	aa03      	add	r2, sp, #12
 8003000:	4621      	mov	r1, r4
 8003002:	4630      	mov	r0, r6
 8003004:	f7ff fef6 	bl	8002df4 <_printf_common>
 8003008:	3001      	adds	r0, #1
 800300a:	d14d      	bne.n	80030a8 <_printf_i+0x1c8>
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	b005      	add	sp, #20
 8003012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003016:	4839      	ldr	r0, [pc, #228]	; (80030fc <_printf_i+0x21c>)
 8003018:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800301c:	6813      	ldr	r3, [r2, #0]
 800301e:	6821      	ldr	r1, [r4, #0]
 8003020:	1d1d      	adds	r5, r3, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6015      	str	r5, [r2, #0]
 8003026:	060a      	lsls	r2, r1, #24
 8003028:	d50b      	bpl.n	8003042 <_printf_i+0x162>
 800302a:	07ca      	lsls	r2, r1, #31
 800302c:	bf44      	itt	mi
 800302e:	f041 0120 	orrmi.w	r1, r1, #32
 8003032:	6021      	strmi	r1, [r4, #0]
 8003034:	b91b      	cbnz	r3, 800303e <_printf_i+0x15e>
 8003036:	6822      	ldr	r2, [r4, #0]
 8003038:	f022 0220 	bic.w	r2, r2, #32
 800303c:	6022      	str	r2, [r4, #0]
 800303e:	2210      	movs	r2, #16
 8003040:	e7b7      	b.n	8002fb2 <_printf_i+0xd2>
 8003042:	064d      	lsls	r5, r1, #25
 8003044:	bf48      	it	mi
 8003046:	b29b      	uxthmi	r3, r3
 8003048:	e7ef      	b.n	800302a <_printf_i+0x14a>
 800304a:	4665      	mov	r5, ip
 800304c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003050:	fb02 3311 	mls	r3, r2, r1, r3
 8003054:	5cc3      	ldrb	r3, [r0, r3]
 8003056:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800305a:	460b      	mov	r3, r1
 800305c:	2900      	cmp	r1, #0
 800305e:	d1f5      	bne.n	800304c <_printf_i+0x16c>
 8003060:	e7b9      	b.n	8002fd6 <_printf_i+0xf6>
 8003062:	6813      	ldr	r3, [r2, #0]
 8003064:	6825      	ldr	r5, [r4, #0]
 8003066:	6961      	ldr	r1, [r4, #20]
 8003068:	1d18      	adds	r0, r3, #4
 800306a:	6010      	str	r0, [r2, #0]
 800306c:	0628      	lsls	r0, r5, #24
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	d501      	bpl.n	8003076 <_printf_i+0x196>
 8003072:	6019      	str	r1, [r3, #0]
 8003074:	e002      	b.n	800307c <_printf_i+0x19c>
 8003076:	066a      	lsls	r2, r5, #25
 8003078:	d5fb      	bpl.n	8003072 <_printf_i+0x192>
 800307a:	8019      	strh	r1, [r3, #0]
 800307c:	2300      	movs	r3, #0
 800307e:	6123      	str	r3, [r4, #16]
 8003080:	4665      	mov	r5, ip
 8003082:	e7b9      	b.n	8002ff8 <_printf_i+0x118>
 8003084:	6813      	ldr	r3, [r2, #0]
 8003086:	1d19      	adds	r1, r3, #4
 8003088:	6011      	str	r1, [r2, #0]
 800308a:	681d      	ldr	r5, [r3, #0]
 800308c:	6862      	ldr	r2, [r4, #4]
 800308e:	2100      	movs	r1, #0
 8003090:	4628      	mov	r0, r5
 8003092:	f7fd f8a5 	bl	80001e0 <memchr>
 8003096:	b108      	cbz	r0, 800309c <_printf_i+0x1bc>
 8003098:	1b40      	subs	r0, r0, r5
 800309a:	6060      	str	r0, [r4, #4]
 800309c:	6863      	ldr	r3, [r4, #4]
 800309e:	6123      	str	r3, [r4, #16]
 80030a0:	2300      	movs	r3, #0
 80030a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030a6:	e7a7      	b.n	8002ff8 <_printf_i+0x118>
 80030a8:	6923      	ldr	r3, [r4, #16]
 80030aa:	462a      	mov	r2, r5
 80030ac:	4639      	mov	r1, r7
 80030ae:	4630      	mov	r0, r6
 80030b0:	47c0      	blx	r8
 80030b2:	3001      	adds	r0, #1
 80030b4:	d0aa      	beq.n	800300c <_printf_i+0x12c>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	079b      	lsls	r3, r3, #30
 80030ba:	d413      	bmi.n	80030e4 <_printf_i+0x204>
 80030bc:	68e0      	ldr	r0, [r4, #12]
 80030be:	9b03      	ldr	r3, [sp, #12]
 80030c0:	4298      	cmp	r0, r3
 80030c2:	bfb8      	it	lt
 80030c4:	4618      	movlt	r0, r3
 80030c6:	e7a3      	b.n	8003010 <_printf_i+0x130>
 80030c8:	2301      	movs	r3, #1
 80030ca:	464a      	mov	r2, r9
 80030cc:	4639      	mov	r1, r7
 80030ce:	4630      	mov	r0, r6
 80030d0:	47c0      	blx	r8
 80030d2:	3001      	adds	r0, #1
 80030d4:	d09a      	beq.n	800300c <_printf_i+0x12c>
 80030d6:	3501      	adds	r5, #1
 80030d8:	68e3      	ldr	r3, [r4, #12]
 80030da:	9a03      	ldr	r2, [sp, #12]
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	42ab      	cmp	r3, r5
 80030e0:	dcf2      	bgt.n	80030c8 <_printf_i+0x1e8>
 80030e2:	e7eb      	b.n	80030bc <_printf_i+0x1dc>
 80030e4:	2500      	movs	r5, #0
 80030e6:	f104 0919 	add.w	r9, r4, #25
 80030ea:	e7f5      	b.n	80030d8 <_printf_i+0x1f8>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ac      	bne.n	800304a <_printf_i+0x16a>
 80030f0:	7803      	ldrb	r3, [r0, #0]
 80030f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030fa:	e76c      	b.n	8002fd6 <_printf_i+0xf6>
 80030fc:	08003399 	.word	0x08003399
 8003100:	080033aa 	.word	0x080033aa

08003104 <memcpy>:
 8003104:	b510      	push	{r4, lr}
 8003106:	1e43      	subs	r3, r0, #1
 8003108:	440a      	add	r2, r1
 800310a:	4291      	cmp	r1, r2
 800310c:	d100      	bne.n	8003110 <memcpy+0xc>
 800310e:	bd10      	pop	{r4, pc}
 8003110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003118:	e7f7      	b.n	800310a <memcpy+0x6>

0800311a <memmove>:
 800311a:	4288      	cmp	r0, r1
 800311c:	b510      	push	{r4, lr}
 800311e:	eb01 0302 	add.w	r3, r1, r2
 8003122:	d807      	bhi.n	8003134 <memmove+0x1a>
 8003124:	1e42      	subs	r2, r0, #1
 8003126:	4299      	cmp	r1, r3
 8003128:	d00a      	beq.n	8003140 <memmove+0x26>
 800312a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800312e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003132:	e7f8      	b.n	8003126 <memmove+0xc>
 8003134:	4283      	cmp	r3, r0
 8003136:	d9f5      	bls.n	8003124 <memmove+0xa>
 8003138:	1881      	adds	r1, r0, r2
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	42d3      	cmn	r3, r2
 800313e:	d100      	bne.n	8003142 <memmove+0x28>
 8003140:	bd10      	pop	{r4, pc}
 8003142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003146:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800314a:	e7f7      	b.n	800313c <memmove+0x22>

0800314c <_free_r>:
 800314c:	b538      	push	{r3, r4, r5, lr}
 800314e:	4605      	mov	r5, r0
 8003150:	2900      	cmp	r1, #0
 8003152:	d045      	beq.n	80031e0 <_free_r+0x94>
 8003154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003158:	1f0c      	subs	r4, r1, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	bfb8      	it	lt
 800315e:	18e4      	addlt	r4, r4, r3
 8003160:	f000 f8d2 	bl	8003308 <__malloc_lock>
 8003164:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <_free_r+0x98>)
 8003166:	6813      	ldr	r3, [r2, #0]
 8003168:	4610      	mov	r0, r2
 800316a:	b933      	cbnz	r3, 800317a <_free_r+0x2e>
 800316c:	6063      	str	r3, [r4, #4]
 800316e:	6014      	str	r4, [r2, #0]
 8003170:	4628      	mov	r0, r5
 8003172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003176:	f000 b8c8 	b.w	800330a <__malloc_unlock>
 800317a:	42a3      	cmp	r3, r4
 800317c:	d90c      	bls.n	8003198 <_free_r+0x4c>
 800317e:	6821      	ldr	r1, [r4, #0]
 8003180:	1862      	adds	r2, r4, r1
 8003182:	4293      	cmp	r3, r2
 8003184:	bf04      	itt	eq
 8003186:	681a      	ldreq	r2, [r3, #0]
 8003188:	685b      	ldreq	r3, [r3, #4]
 800318a:	6063      	str	r3, [r4, #4]
 800318c:	bf04      	itt	eq
 800318e:	1852      	addeq	r2, r2, r1
 8003190:	6022      	streq	r2, [r4, #0]
 8003192:	6004      	str	r4, [r0, #0]
 8003194:	e7ec      	b.n	8003170 <_free_r+0x24>
 8003196:	4613      	mov	r3, r2
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	b10a      	cbz	r2, 80031a0 <_free_r+0x54>
 800319c:	42a2      	cmp	r2, r4
 800319e:	d9fa      	bls.n	8003196 <_free_r+0x4a>
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	1858      	adds	r0, r3, r1
 80031a4:	42a0      	cmp	r0, r4
 80031a6:	d10b      	bne.n	80031c0 <_free_r+0x74>
 80031a8:	6820      	ldr	r0, [r4, #0]
 80031aa:	4401      	add	r1, r0
 80031ac:	1858      	adds	r0, r3, r1
 80031ae:	4282      	cmp	r2, r0
 80031b0:	6019      	str	r1, [r3, #0]
 80031b2:	d1dd      	bne.n	8003170 <_free_r+0x24>
 80031b4:	6810      	ldr	r0, [r2, #0]
 80031b6:	6852      	ldr	r2, [r2, #4]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	4401      	add	r1, r0
 80031bc:	6019      	str	r1, [r3, #0]
 80031be:	e7d7      	b.n	8003170 <_free_r+0x24>
 80031c0:	d902      	bls.n	80031c8 <_free_r+0x7c>
 80031c2:	230c      	movs	r3, #12
 80031c4:	602b      	str	r3, [r5, #0]
 80031c6:	e7d3      	b.n	8003170 <_free_r+0x24>
 80031c8:	6820      	ldr	r0, [r4, #0]
 80031ca:	1821      	adds	r1, r4, r0
 80031cc:	428a      	cmp	r2, r1
 80031ce:	bf04      	itt	eq
 80031d0:	6811      	ldreq	r1, [r2, #0]
 80031d2:	6852      	ldreq	r2, [r2, #4]
 80031d4:	6062      	str	r2, [r4, #4]
 80031d6:	bf04      	itt	eq
 80031d8:	1809      	addeq	r1, r1, r0
 80031da:	6021      	streq	r1, [r4, #0]
 80031dc:	605c      	str	r4, [r3, #4]
 80031de:	e7c7      	b.n	8003170 <_free_r+0x24>
 80031e0:	bd38      	pop	{r3, r4, r5, pc}
 80031e2:	bf00      	nop
 80031e4:	20000094 	.word	0x20000094

080031e8 <_malloc_r>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	1ccd      	adds	r5, r1, #3
 80031ec:	f025 0503 	bic.w	r5, r5, #3
 80031f0:	3508      	adds	r5, #8
 80031f2:	2d0c      	cmp	r5, #12
 80031f4:	bf38      	it	cc
 80031f6:	250c      	movcc	r5, #12
 80031f8:	2d00      	cmp	r5, #0
 80031fa:	4606      	mov	r6, r0
 80031fc:	db01      	blt.n	8003202 <_malloc_r+0x1a>
 80031fe:	42a9      	cmp	r1, r5
 8003200:	d903      	bls.n	800320a <_malloc_r+0x22>
 8003202:	230c      	movs	r3, #12
 8003204:	6033      	str	r3, [r6, #0]
 8003206:	2000      	movs	r0, #0
 8003208:	bd70      	pop	{r4, r5, r6, pc}
 800320a:	f000 f87d 	bl	8003308 <__malloc_lock>
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <_malloc_r+0xac>)
 8003210:	6814      	ldr	r4, [r2, #0]
 8003212:	4621      	mov	r1, r4
 8003214:	b991      	cbnz	r1, 800323c <_malloc_r+0x54>
 8003216:	4c20      	ldr	r4, [pc, #128]	; (8003298 <_malloc_r+0xb0>)
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	b91b      	cbnz	r3, 8003224 <_malloc_r+0x3c>
 800321c:	4630      	mov	r0, r6
 800321e:	f000 f863 	bl	80032e8 <_sbrk_r>
 8003222:	6020      	str	r0, [r4, #0]
 8003224:	4629      	mov	r1, r5
 8003226:	4630      	mov	r0, r6
 8003228:	f000 f85e 	bl	80032e8 <_sbrk_r>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d124      	bne.n	800327a <_malloc_r+0x92>
 8003230:	230c      	movs	r3, #12
 8003232:	6033      	str	r3, [r6, #0]
 8003234:	4630      	mov	r0, r6
 8003236:	f000 f868 	bl	800330a <__malloc_unlock>
 800323a:	e7e4      	b.n	8003206 <_malloc_r+0x1e>
 800323c:	680b      	ldr	r3, [r1, #0]
 800323e:	1b5b      	subs	r3, r3, r5
 8003240:	d418      	bmi.n	8003274 <_malloc_r+0x8c>
 8003242:	2b0b      	cmp	r3, #11
 8003244:	d90f      	bls.n	8003266 <_malloc_r+0x7e>
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	50cd      	str	r5, [r1, r3]
 800324a:	18cc      	adds	r4, r1, r3
 800324c:	4630      	mov	r0, r6
 800324e:	f000 f85c 	bl	800330a <__malloc_unlock>
 8003252:	f104 000b 	add.w	r0, r4, #11
 8003256:	1d23      	adds	r3, r4, #4
 8003258:	f020 0007 	bic.w	r0, r0, #7
 800325c:	1ac3      	subs	r3, r0, r3
 800325e:	d0d3      	beq.n	8003208 <_malloc_r+0x20>
 8003260:	425a      	negs	r2, r3
 8003262:	50e2      	str	r2, [r4, r3]
 8003264:	e7d0      	b.n	8003208 <_malloc_r+0x20>
 8003266:	428c      	cmp	r4, r1
 8003268:	684b      	ldr	r3, [r1, #4]
 800326a:	bf16      	itet	ne
 800326c:	6063      	strne	r3, [r4, #4]
 800326e:	6013      	streq	r3, [r2, #0]
 8003270:	460c      	movne	r4, r1
 8003272:	e7eb      	b.n	800324c <_malloc_r+0x64>
 8003274:	460c      	mov	r4, r1
 8003276:	6849      	ldr	r1, [r1, #4]
 8003278:	e7cc      	b.n	8003214 <_malloc_r+0x2c>
 800327a:	1cc4      	adds	r4, r0, #3
 800327c:	f024 0403 	bic.w	r4, r4, #3
 8003280:	42a0      	cmp	r0, r4
 8003282:	d005      	beq.n	8003290 <_malloc_r+0xa8>
 8003284:	1a21      	subs	r1, r4, r0
 8003286:	4630      	mov	r0, r6
 8003288:	f000 f82e 	bl	80032e8 <_sbrk_r>
 800328c:	3001      	adds	r0, #1
 800328e:	d0cf      	beq.n	8003230 <_malloc_r+0x48>
 8003290:	6025      	str	r5, [r4, #0]
 8003292:	e7db      	b.n	800324c <_malloc_r+0x64>
 8003294:	20000094 	.word	0x20000094
 8003298:	20000098 	.word	0x20000098

0800329c <_realloc_r>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	4607      	mov	r7, r0
 80032a0:	4614      	mov	r4, r2
 80032a2:	460e      	mov	r6, r1
 80032a4:	b921      	cbnz	r1, 80032b0 <_realloc_r+0x14>
 80032a6:	4611      	mov	r1, r2
 80032a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032ac:	f7ff bf9c 	b.w	80031e8 <_malloc_r>
 80032b0:	b922      	cbnz	r2, 80032bc <_realloc_r+0x20>
 80032b2:	f7ff ff4b 	bl	800314c <_free_r>
 80032b6:	4625      	mov	r5, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032bc:	f000 f826 	bl	800330c <_malloc_usable_size_r>
 80032c0:	42a0      	cmp	r0, r4
 80032c2:	d20f      	bcs.n	80032e4 <_realloc_r+0x48>
 80032c4:	4621      	mov	r1, r4
 80032c6:	4638      	mov	r0, r7
 80032c8:	f7ff ff8e 	bl	80031e8 <_malloc_r>
 80032cc:	4605      	mov	r5, r0
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d0f2      	beq.n	80032b8 <_realloc_r+0x1c>
 80032d2:	4631      	mov	r1, r6
 80032d4:	4622      	mov	r2, r4
 80032d6:	f7ff ff15 	bl	8003104 <memcpy>
 80032da:	4631      	mov	r1, r6
 80032dc:	4638      	mov	r0, r7
 80032de:	f7ff ff35 	bl	800314c <_free_r>
 80032e2:	e7e9      	b.n	80032b8 <_realloc_r+0x1c>
 80032e4:	4635      	mov	r5, r6
 80032e6:	e7e7      	b.n	80032b8 <_realloc_r+0x1c>

080032e8 <_sbrk_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	4c06      	ldr	r4, [pc, #24]	; (8003304 <_sbrk_r+0x1c>)
 80032ec:	2300      	movs	r3, #0
 80032ee:	4605      	mov	r5, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	6023      	str	r3, [r4, #0]
 80032f4:	f7ff fb3a 	bl	800296c <_sbrk>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d102      	bne.n	8003302 <_sbrk_r+0x1a>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	b103      	cbz	r3, 8003302 <_sbrk_r+0x1a>
 8003300:	602b      	str	r3, [r5, #0]
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	2000011c 	.word	0x2000011c

08003308 <__malloc_lock>:
 8003308:	4770      	bx	lr

0800330a <__malloc_unlock>:
 800330a:	4770      	bx	lr

0800330c <_malloc_usable_size_r>:
 800330c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003310:	1f18      	subs	r0, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	bfbc      	itt	lt
 8003316:	580b      	ldrlt	r3, [r1, r0]
 8003318:	18c0      	addlt	r0, r0, r3
 800331a:	4770      	bx	lr

0800331c <_init>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	bf00      	nop
 8003320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003322:	bc08      	pop	{r3}
 8003324:	469e      	mov	lr, r3
 8003326:	4770      	bx	lr

08003328 <_fini>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	bf00      	nop
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr
