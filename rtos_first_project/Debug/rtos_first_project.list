
rtos_first_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006808  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d44  08006d44  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006d44  08006d44  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d44  08006d44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001624  20000074  08006dc0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001698  08006dc0  00021698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bda  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ed1  00000000  00000000  00036c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  00039b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  0003a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ec16  00000000  00000000  0003b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cda7  00000000  00000000  0005a2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6869  00000000  00000000  00067075  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d8de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004228  00000000  00000000  0010d95c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006980 	.word	0x08006980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006980 	.word	0x08006980

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f92f 	bl	80004f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	200f      	movs	r0, #15
 8000298:	f000 f808 	bl	80002ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f004 ffb2 	bl	8005204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_InitTick+0x54>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_InitTick+0x58>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f939 	bl	8000542 <HAL_SYSTICK_Config>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00e      	b.n	80002f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d80a      	bhi.n	80002f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e0:	2200      	movs	r2, #0
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295
 80002e8:	f000 f90f 	bl	800050a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <HAL_InitTick+0x5c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e000      	b.n	80002f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002f6:	2301      	movs	r3, #1
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000000c 	.word	0x2000000c
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000

0800030c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x20>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x24>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4413      	add	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_IncTick+0x24>)
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004
 8000330:	200015a8 	.word	0x200015a8

08000334 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return uwTick;  
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <HAL_GetTick+0x14>)
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	200015a8 	.word	0x200015a8

0800034c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000354:	f7ff ffee 	bl	8000334 <HAL_GetTick>
 8000358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000364:	d005      	beq.n	8000372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_Delay+0x40>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	461a      	mov	r2, r3
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	4413      	add	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000372:	bf00      	nop
 8000374:	f7ff ffde 	bl	8000334 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	429a      	cmp	r2, r3
 8000382:	d8f7      	bhi.n	8000374 <HAL_Delay+0x28>
  {
  }
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000004 	.word	0x20000004

08000390 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f003 0307 	and.w	r3, r3, #7
 800039e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ac:	4013      	ands	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <NVIC_GetPriorityGrouping+0x18>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	f003 0307 	and.w	r3, r3, #7
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	2b00      	cmp	r3, #0
 8000406:	da0b      	bge.n	8000420 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	490c      	ldr	r1, [pc, #48]	; (8000440 <NVIC_SetPriority+0x4c>)
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f003 030f 	and.w	r3, r3, #15
 8000414:	3b04      	subs	r3, #4
 8000416:	0112      	lsls	r2, r2, #4
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	440b      	add	r3, r1
 800041c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800041e:	e009      	b.n	8000434 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4907      	ldr	r1, [pc, #28]	; (8000444 <NVIC_SetPriority+0x50>)
 8000426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042a:	0112      	lsls	r2, r2, #4
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	440b      	add	r3, r1
 8000430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	e000ed00 	.word	0xe000ed00
 8000444:	e000e100 	.word	0xe000e100

08000448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000448:	b480      	push	{r7}
 800044a:	b089      	sub	sp, #36	; 0x24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	f1c3 0307 	rsb	r3, r3, #7
 8000462:	2b04      	cmp	r3, #4
 8000464:	bf28      	it	cs
 8000466:	2304      	movcs	r3, #4
 8000468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	3304      	adds	r3, #4
 800046e:	2b06      	cmp	r3, #6
 8000470:	d902      	bls.n	8000478 <NVIC_EncodePriority+0x30>
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	3b03      	subs	r3, #3
 8000476:	e000      	b.n	800047a <NVIC_EncodePriority+0x32>
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047c:	f04f 32ff 	mov.w	r2, #4294967295
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	43da      	mvns	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	401a      	ands	r2, r3
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000490:	f04f 31ff 	mov.w	r1, #4294967295
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	43d9      	mvns	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	4313      	orrs	r3, r2
         );
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3724      	adds	r7, #36	; 0x24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004c0:	d301      	bcc.n	80004c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004c2:	2301      	movs	r3, #1
 80004c4:	e00f      	b.n	80004e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <SysTick_Config+0x40>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ce:	210f      	movs	r1, #15
 80004d0:	f04f 30ff 	mov.w	r0, #4294967295
 80004d4:	f7ff ff8e 	bl	80003f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <SysTick_Config+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <SysTick_Config+0x40>)
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff47 	bl	8000390 <NVIC_SetPriorityGrouping>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	4603      	mov	r3, r0
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800051c:	f7ff ff5c 	bl	80003d8 <NVIC_GetPriorityGrouping>
 8000520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	68b9      	ldr	r1, [r7, #8]
 8000526:	6978      	ldr	r0, [r7, #20]
 8000528:	f7ff ff8e 	bl	8000448 <NVIC_EncodePriority>
 800052c:	4602      	mov	r2, r0
 800052e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff5d 	bl	80003f4 <NVIC_SetPriority>
}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffb0 	bl	80004b0 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800055c:	b480      	push	{r7}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000572:	e14e      	b.n	8000812 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	2101      	movs	r1, #1
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f000 8140 	beq.w	800080c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d003      	beq.n	800059c <HAL_GPIO_Init+0x40>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b12      	cmp	r3, #18
 800059a:	d123      	bne.n	80005e4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	08da      	lsrs	r2, r3, #3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	220f      	movs	r2, #15
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	691a      	ldr	r2, [r3, #16]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	08da      	lsrs	r2, r3, #3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3208      	adds	r2, #8
 80005de:	6939      	ldr	r1, [r7, #16]
 80005e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2203      	movs	r2, #3
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f003 0203 	and.w	r2, r3, #3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	4313      	orrs	r3, r2
 8000610:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d00b      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d007      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800062c:	2b11      	cmp	r3, #17
 800062e:	d003      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2b12      	cmp	r3, #18
 8000636:	d130      	bne.n	800069a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	2203      	movs	r2, #3
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	4013      	ands	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	4313      	orrs	r3, r2
 8000660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800066e:	2201      	movs	r2, #1
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	091b      	lsrs	r3, r3, #4
 8000684:	f003 0201 	and.w	r2, r3, #1
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	4313      	orrs	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2203      	movs	r2, #3
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	4013      	ands	r3, r2
 80006b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f000 809a 	beq.w	800080c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d8:	4b55      	ldr	r3, [pc, #340]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a54      	ldr	r2, [pc, #336]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b52      	ldr	r3, [pc, #328]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006f0:	4a50      	ldr	r2, [pc, #320]	; (8000834 <HAL_GPIO_Init+0x2d8>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	3302      	adds	r3, #2
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	f003 0303 	and.w	r3, r3, #3
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	220f      	movs	r2, #15
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800071a:	d013      	beq.n	8000744 <HAL_GPIO_Init+0x1e8>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a46      	ldr	r2, [pc, #280]	; (8000838 <HAL_GPIO_Init+0x2dc>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d00d      	beq.n	8000740 <HAL_GPIO_Init+0x1e4>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a45      	ldr	r2, [pc, #276]	; (800083c <HAL_GPIO_Init+0x2e0>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d007      	beq.n	800073c <HAL_GPIO_Init+0x1e0>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a44      	ldr	r2, [pc, #272]	; (8000840 <HAL_GPIO_Init+0x2e4>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d101      	bne.n	8000738 <HAL_GPIO_Init+0x1dc>
 8000734:	2303      	movs	r3, #3
 8000736:	e006      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000738:	2305      	movs	r3, #5
 800073a:	e004      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 800073c:	2302      	movs	r3, #2
 800073e:	e002      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000740:	2301      	movs	r3, #1
 8000742:	e000      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000744:	2300      	movs	r3, #0
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	f002 0203 	and.w	r2, r2, #3
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	4093      	lsls	r3, r2
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	4313      	orrs	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000756:	4937      	ldr	r1, [pc, #220]	; (8000834 <HAL_GPIO_Init+0x2d8>)
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	089b      	lsrs	r3, r3, #2
 800075c:	3302      	adds	r3, #2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000764:	4b37      	ldr	r3, [pc, #220]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	43db      	mvns	r3, r3
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4313      	orrs	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000788:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	43db      	mvns	r3, r3
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	4013      	ands	r3, r2
 800079c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	43db      	mvns	r3, r3
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4013      	ands	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4313      	orrs	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	43db      	mvns	r3, r3
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4013      	ands	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4313      	orrs	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	fa22 f303 	lsr.w	r3, r2, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	f47f aea9 	bne.w	8000574 <HAL_GPIO_Init+0x18>
  }
}
 8000822:	bf00      	nop
 8000824:	371c      	adds	r7, #28
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000
 8000838:	48000400 	.word	0x48000400
 800083c:	48000800 	.word	0x48000800
 8000840:	48000c00 	.word	0x48000c00
 8000844:	40010400 	.word	0x40010400

08000848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	691a      	ldr	r2, [r3, #16]
 8000858:	887b      	ldrh	r3, [r7, #2]
 800085a:	4013      	ands	r3, r2
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e001      	b.n	800086a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	807b      	strh	r3, [r7, #2]
 8000884:	4613      	mov	r3, r2
 8000886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000888:	787b      	ldrb	r3, [r7, #1]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800088e:	887a      	ldrh	r2, [r7, #2]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000894:	e002      	b.n	800089c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000896:	887a      	ldrh	r2, [r7, #2]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	f000 beda 	b.w	8001676 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f000 816e 	beq.w	8000bae <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008d2:	4bb5      	ldr	r3, [pc, #724]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 030c 	and.w	r3, r3, #12
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d00c      	beq.n	80008f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008de:	4bb2      	ldr	r3, [pc, #712]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f003 030c 	and.w	r3, r3, #12
 80008e6:	2b08      	cmp	r3, #8
 80008e8:	d15a      	bne.n	80009a0 <HAL_RCC_OscConfig+0xf8>
 80008ea:	4baf      	ldr	r3, [pc, #700]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008f6:	d153      	bne.n	80009a0 <HAL_RCC_OscConfig+0xf8>
 80008f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000900:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000904:	fa93 f3a3 	rbit	r3, r3
 8000908:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800090c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000910:	fab3 f383 	clz	r3, r3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	095b      	lsrs	r3, r3, #5
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b01      	cmp	r3, #1
 8000922:	d102      	bne.n	800092a <HAL_RCC_OscConfig+0x82>
 8000924:	4ba0      	ldr	r3, [pc, #640]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	e015      	b.n	8000956 <HAL_RCC_OscConfig+0xae>
 800092a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800092e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000932:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000936:	fa93 f3a3 	rbit	r3, r3
 800093a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800093e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000942:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000946:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800094a:	fa93 f3a3 	rbit	r3, r3
 800094e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000952:	4b95      	ldr	r3, [pc, #596]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000956:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800095a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800095e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000962:	fa92 f2a2 	rbit	r2, r2
 8000966:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800096a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800096e:	fab2 f282 	clz	r2, r2
 8000972:	b252      	sxtb	r2, r2
 8000974:	f042 0220 	orr.w	r2, r2, #32
 8000978:	b252      	sxtb	r2, r2
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	f002 021f 	and.w	r2, r2, #31
 8000980:	2101      	movs	r1, #1
 8000982:	fa01 f202 	lsl.w	r2, r1, r2
 8000986:	4013      	ands	r3, r2
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 810f 	beq.w	8000bac <HAL_RCC_OscConfig+0x304>
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	f040 8109 	bne.w	8000bac <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	f000 be6b 	b.w	8001676 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009aa:	d106      	bne.n	80009ba <HAL_RCC_OscConfig+0x112>
 80009ac:	4b7e      	ldr	r3, [pc, #504]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a7d      	ldr	r2, [pc, #500]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80009b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	e030      	b.n	8000a1c <HAL_RCC_OscConfig+0x174>
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10c      	bne.n	80009de <HAL_RCC_OscConfig+0x136>
 80009c4:	4b78      	ldr	r3, [pc, #480]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a77      	ldr	r2, [pc, #476]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80009ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b75      	ldr	r3, [pc, #468]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a74      	ldr	r2, [pc, #464]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80009d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	e01e      	b.n	8000a1c <HAL_RCC_OscConfig+0x174>
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009e8:	d10c      	bne.n	8000a04 <HAL_RCC_OscConfig+0x15c>
 80009ea:	4b6f      	ldr	r3, [pc, #444]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a6e      	ldr	r2, [pc, #440]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80009f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	4b6c      	ldr	r3, [pc, #432]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a6b      	ldr	r2, [pc, #428]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 80009fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a00:	6013      	str	r3, [r2, #0]
 8000a02:	e00b      	b.n	8000a1c <HAL_RCC_OscConfig+0x174>
 8000a04:	4b68      	ldr	r3, [pc, #416]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a67      	ldr	r2, [pc, #412]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b65      	ldr	r3, [pc, #404]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a64      	ldr	r2, [pc, #400]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a1a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a1c:	4b62      	ldr	r3, [pc, #392]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a20:	f023 020f 	bic.w	r2, r3, #15
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	495f      	ldr	r1, [pc, #380]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d05a      	beq.n	8000af0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a3a:	f7ff fc7b 	bl	8000334 <HAL_GetTick>
 8000a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a42:	e00a      	b.n	8000a5a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a44:	f7ff fc76 	bl	8000334 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	2b64      	cmp	r3, #100	; 0x64
 8000a52:	d902      	bls.n	8000a5a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000a54:	2303      	movs	r3, #3
 8000a56:	f000 be0e 	b.w	8001676 <HAL_RCC_OscConfig+0xdce>
 8000a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a5e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a62:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a66:	fa93 f3a3 	rbit	r3, r3
 8000a6a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a6e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a72:	fab3 f383 	clz	r3, r3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	095b      	lsrs	r3, r3, #5
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d102      	bne.n	8000a8c <HAL_RCC_OscConfig+0x1e4>
 8000a86:	4b48      	ldr	r3, [pc, #288]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	e015      	b.n	8000ab8 <HAL_RCC_OscConfig+0x210>
 8000a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a90:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a94:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a98:	fa93 f3a3 	rbit	r3, r3
 8000a9c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aa4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000aa8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000aac:	fa93 f3a3 	rbit	r3, r3
 8000ab0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ab4:	4b3c      	ldr	r3, [pc, #240]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000abc:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ac0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ac4:	fa92 f2a2 	rbit	r2, r2
 8000ac8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000acc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b252      	sxtb	r2, r2
 8000ad6:	f042 0220 	orr.w	r2, r2, #32
 8000ada:	b252      	sxtb	r2, r2
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	f002 021f 	and.w	r2, r2, #31
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae8:	4013      	ands	r3, r2
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0aa      	beq.n	8000a44 <HAL_RCC_OscConfig+0x19c>
 8000aee:	e05e      	b.n	8000bae <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af0:	f7ff fc20 	bl	8000334 <HAL_GetTick>
 8000af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af8:	e00a      	b.n	8000b10 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000afa:	f7ff fc1b 	bl	8000334 <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	2b64      	cmp	r3, #100	; 0x64
 8000b08:	d902      	bls.n	8000b10 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	f000 bdb3 	b.w	8001676 <HAL_RCC_OscConfig+0xdce>
 8000b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b14:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000b1c:	fa93 f3a3 	rbit	r3, r3
 8000b20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000b24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b28:	fab3 f383 	clz	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d102      	bne.n	8000b42 <HAL_RCC_OscConfig+0x29a>
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	e015      	b.n	8000b6e <HAL_RCC_OscConfig+0x2c6>
 8000b42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b4e:	fa93 f3a3 	rbit	r3, r3
 8000b52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b62:	fa93 f3a3 	rbit	r3, r3
 8000b66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_RCC_OscConfig+0x300>)
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b72:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b76:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b7a:	fa92 f2a2 	rbit	r2, r2
 8000b7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b252      	sxtb	r2, r2
 8000b8c:	f042 0220 	orr.w	r2, r2, #32
 8000b90:	b252      	sxtb	r2, r2
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	f002 021f 	and.w	r2, r2, #31
 8000b98:	2101      	movs	r1, #1
 8000b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1aa      	bne.n	8000afa <HAL_RCC_OscConfig+0x252>
 8000ba4:	e003      	b.n	8000bae <HAL_RCC_OscConfig+0x306>
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 8170 	beq.w	8000e9e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bbe:	4bd0      	ldr	r3, [pc, #832]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00b      	beq.n	8000be2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bca:	4bcd      	ldr	r3, [pc, #820]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 030c 	and.w	r3, r3, #12
 8000bd2:	2b08      	cmp	r3, #8
 8000bd4:	d16d      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x40a>
 8000bd6:	4bca      	ldr	r3, [pc, #808]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d167      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x40a>
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000bec:	fa93 f3a3 	rbit	r3, r3
 8000bf0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000bf4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bf8:	fab3 f383 	clz	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d102      	bne.n	8000c12 <HAL_RCC_OscConfig+0x36a>
 8000c0c:	4bbc      	ldr	r3, [pc, #752]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	e013      	b.n	8000c3a <HAL_RCC_OscConfig+0x392>
 8000c12:	2302      	movs	r3, #2
 8000c14:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c18:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c1c:	fa93 f3a3 	rbit	r3, r3
 8000c20:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000c24:	2302      	movs	r3, #2
 8000c26:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000c2a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000c2e:	fa93 f3a3 	rbit	r3, r3
 8000c32:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c36:	4bb2      	ldr	r3, [pc, #712]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c40:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c44:	fa92 f2a2 	rbit	r2, r2
 8000c48:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000c4c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b252      	sxtb	r2, r2
 8000c56:	f042 0220 	orr.w	r2, r2, #32
 8000c5a:	b252      	sxtb	r2, r2
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	f002 021f 	and.w	r2, r2, #31
 8000c62:	2101      	movs	r1, #1
 8000c64:	fa01 f202 	lsl.w	r2, r1, r2
 8000c68:	4013      	ands	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d007      	beq.n	8000c7e <HAL_RCC_OscConfig+0x3d6>
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d002      	beq.n	8000c7e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f000 bcfc 	b.w	8001676 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7e:	4ba0      	ldr	r3, [pc, #640]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6959      	ldr	r1, [r3, #20]
 8000c8c:	23f8      	movs	r3, #248	; 0xf8
 8000c8e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c92:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c96:	fa93 f3a3 	rbit	r3, r3
 8000c9a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000c9e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000ca2:	fab3 f383 	clz	r3, r3
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	4995      	ldr	r1, [pc, #596]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000cac:	4313      	orrs	r3, r2
 8000cae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb0:	e0f5      	b.n	8000e9e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 8085 	beq.w	8000dc8 <HAL_RCC_OscConfig+0x520>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000cc8:	fa93 f3a3 	rbit	r3, r3
 8000ccc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000cd0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cd4:	fab3 f383 	clz	r3, r3
 8000cd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fb24 	bl	8000334 <HAL_GetTick>
 8000cec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf0:	e00a      	b.n	8000d08 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf2:	f7ff fb1f 	bl	8000334 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d902      	bls.n	8000d08 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	f000 bcb7 	b.w	8001676 <HAL_RCC_OscConfig+0xdce>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000d1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1e:	fab3 f383 	clz	r3, r3
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	095b      	lsrs	r3, r3, #5
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d102      	bne.n	8000d38 <HAL_RCC_OscConfig+0x490>
 8000d32:	4b73      	ldr	r3, [pc, #460]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	e013      	b.n	8000d60 <HAL_RCC_OscConfig+0x4b8>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d50:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d54:	fa93 f3a3 	rbit	r3, r3
 8000d58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d5c:	4b68      	ldr	r3, [pc, #416]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d60:	2202      	movs	r2, #2
 8000d62:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d66:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d6a:	fa92 f2a2 	rbit	r2, r2
 8000d6e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	b252      	sxtb	r2, r2
 8000d7c:	f042 0220 	orr.w	r2, r2, #32
 8000d80:	b252      	sxtb	r2, r2
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	f002 021f 	and.w	r2, r2, #31
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0ae      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d94:	4b5a      	ldr	r3, [pc, #360]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	6959      	ldr	r1, [r3, #20]
 8000da2:	23f8      	movs	r3, #248	; 0xf8
 8000da4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000dac:	fa93 f3a3 	rbit	r3, r3
 8000db0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000db4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	494f      	ldr	r1, [pc, #316]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]
 8000dc6:	e06a      	b.n	8000e9e <HAL_RCC_OscConfig+0x5f6>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000dda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dde:	fab3 f383 	clz	r3, r3
 8000de2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000de6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	461a      	mov	r2, r3
 8000dee:	2300      	movs	r3, #0
 8000df0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df2:	f7ff fa9f 	bl	8000334 <HAL_GetTick>
 8000df6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfa:	e00a      	b.n	8000e12 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fa9a 	bl	8000334 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d902      	bls.n	8000e12 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	f000 bc32 	b.w	8001676 <HAL_RCC_OscConfig+0xdce>
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000e24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e28:	fab3 f383 	clz	r3, r3
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d102      	bne.n	8000e42 <HAL_RCC_OscConfig+0x59a>
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	e013      	b.n	8000e6a <HAL_RCC_OscConfig+0x5c2>
 8000e42:	2302      	movs	r3, #2
 8000e44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e4c:	fa93 f3a3 	rbit	r3, r3
 8000e50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e54:	2302      	movs	r3, #2
 8000e56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e5e:	fa93 f3a3 	rbit	r3, r3
 8000e62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <HAL_RCC_OscConfig+0x658>)
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e70:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e74:	fa92 f2a2 	rbit	r2, r2
 8000e78:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e7c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	b252      	sxtb	r2, r2
 8000e86:	f042 0220 	orr.w	r2, r2, #32
 8000e8a:	b252      	sxtb	r2, r2
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	f002 021f 	and.w	r2, r2, #31
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f202 	lsl.w	r2, r1, r2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1ae      	bne.n	8000dfc <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 80d8 	beq.w	800105e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d067      	beq.n	8000f88 <HAL_RCC_OscConfig+0x6e0>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000eca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_RCC_OscConfig+0x65c>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	461a      	mov	r2, r3
 8000edc:	2301      	movs	r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee0:	f7ff fa28 	bl	8000334 <HAL_GetTick>
 8000ee4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee8:	e00e      	b.n	8000f08 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eea:	f7ff fa23 	bl	8000334 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d906      	bls.n	8000f08 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e3bb      	b.n	8001676 <HAL_RCC_OscConfig+0xdce>
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	10908120 	.word	0x10908120
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f24:	fa93 f2a3 	rbit	r2, r3
 8000f28:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f32:	2202      	movs	r2, #2
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	fa93 f2a3 	rbit	r2, r3
 8000f40:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f46:	4ba5      	ldr	r3, [pc, #660]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8000f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f4a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f4e:	2102      	movs	r1, #2
 8000f50:	6019      	str	r1, [r3, #0]
 8000f52:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	fa93 f1a3 	rbit	r1, r3
 8000f5c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f60:	6019      	str	r1, [r3, #0]
  return(result);
 8000f62:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	fab3 f383 	clz	r3, r3
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0b1      	beq.n	8000eea <HAL_RCC_OscConfig+0x642>
 8000f86:	e06a      	b.n	800105e <HAL_RCC_OscConfig+0x7b6>
 8000f88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f90:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	fa93 f2a3 	rbit	r2, r3
 8000f9a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f9e:	601a      	str	r2, [r3, #0]
  return(result);
 8000fa0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fa4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa6:	fab3 f383 	clz	r3, r3
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b8c      	ldr	r3, [pc, #560]	; (80011e0 <HAL_RCC_OscConfig+0x938>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb8:	f7ff f9bc 	bl	8000334 <HAL_GetTick>
 8000fbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc0:	e009      	b.n	8000fd6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc2:	f7ff f9b7 	bl	8000334 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e34f      	b.n	8001676 <HAL_RCC_OscConfig+0xdce>
 8000fd6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fda:	2202      	movs	r2, #2
 8000fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	fa93 f2a3 	rbit	r2, r3
 8000fe8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	fa93 f2a3 	rbit	r2, r3
 8001000:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800100a:	2202      	movs	r2, #2
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	fa93 f2a3 	rbit	r2, r3
 8001018:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800101c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800101e:	4b6f      	ldr	r3, [pc, #444]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8001020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001022:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001026:	2102      	movs	r1, #2
 8001028:	6019      	str	r1, [r3, #0]
 800102a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	fa93 f1a3 	rbit	r1, r3
 8001034:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001038:	6019      	str	r1, [r3, #0]
  return(result);
 800103a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	fab3 f383 	clz	r3, r3
 8001044:	b25b      	sxtb	r3, r3
 8001046:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800104a:	b25b      	sxtb	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f003 031f 	and.w	r3, r3, #31
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	4013      	ands	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1b1      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 8159 	beq.w	8001320 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001074:	4b59      	ldr	r3, [pc, #356]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d112      	bne.n	80010a6 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	4b56      	ldr	r3, [pc, #344]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	4a55      	ldr	r2, [pc, #340]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	61d3      	str	r3, [r2, #28]
 800108c:	4b53      	ldr	r3, [pc, #332]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a6:	4b4f      	ldr	r3, [pc, #316]	; (80011e4 <HAL_RCC_OscConfig+0x93c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d11a      	bne.n	80010e8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b2:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <HAL_RCC_OscConfig+0x93c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a4b      	ldr	r2, [pc, #300]	; (80011e4 <HAL_RCC_OscConfig+0x93c>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010be:	f7ff f939 	bl	8000334 <HAL_GetTick>
 80010c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c6:	e009      	b.n	80010dc <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c8:	f7ff f934 	bl	8000334 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b64      	cmp	r3, #100	; 0x64
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e2cc      	b.n	8001676 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010dc:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <HAL_RCC_OscConfig+0x93c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0ef      	beq.n	80010c8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d106      	bne.n	8001100 <HAL_RCC_OscConfig+0x858>
 80010f2:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4a39      	ldr	r2, [pc, #228]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6213      	str	r3, [r2, #32]
 80010fe:	e02f      	b.n	8001160 <HAL_RCC_OscConfig+0x8b8>
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x87c>
 800110a:	4b34      	ldr	r3, [pc, #208]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a33      	ldr	r2, [pc, #204]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	4a30      	ldr	r2, [pc, #192]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 800111c:	f023 0304 	bic.w	r3, r3, #4
 8001120:	6213      	str	r3, [r2, #32]
 8001122:	e01d      	b.n	8001160 <HAL_RCC_OscConfig+0x8b8>
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x8a0>
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4a27      	ldr	r2, [pc, #156]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6213      	str	r3, [r2, #32]
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0x8b8>
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4a23      	ldr	r2, [pc, #140]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	6213      	str	r3, [r2, #32]
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a20      	ldr	r2, [pc, #128]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 800115a:	f023 0304 	bic.w	r3, r3, #4
 800115e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d06b      	beq.n	8001242 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116a:	f7ff f8e3 	bl	8000334 <HAL_GetTick>
 800116e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001172:	e00b      	b.n	800118c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001174:	f7ff f8de 	bl	8000334 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	f241 3288 	movw	r2, #5000	; 0x1388
 8001184:	4293      	cmp	r3, r2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e274      	b.n	8001676 <HAL_RCC_OscConfig+0xdce>
 800118c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001190:	2202      	movs	r2, #2
 8001192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	fa93 f2a3 	rbit	r2, r3
 800119e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011a8:	2202      	movs	r2, #2
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	fa93 f2a3 	rbit	r2, r3
 80011b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011ba:	601a      	str	r2, [r3, #0]
  return(result);
 80011bc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	095b      	lsrs	r3, r3, #5
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d108      	bne.n	80011e8 <HAL_RCC_OscConfig+0x940>
 80011d6:	4b01      	ldr	r3, [pc, #4]	; (80011dc <HAL_RCC_OscConfig+0x934>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	e013      	b.n	8001204 <HAL_RCC_OscConfig+0x95c>
 80011dc:	40021000 	.word	0x40021000
 80011e0:	10908120 	.word	0x10908120
 80011e4:	40007000 	.word	0x40007000
 80011e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011ec:	2202      	movs	r2, #2
 80011ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	fa93 f2a3 	rbit	r2, r3
 80011fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	4bbb      	ldr	r3, [pc, #748]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001208:	2102      	movs	r1, #2
 800120a:	6011      	str	r1, [r2, #0]
 800120c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	fa92 f1a2 	rbit	r1, r2
 8001216:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800121a:	6011      	str	r1, [r2, #0]
  return(result);
 800121c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	fab2 f282 	clz	r2, r2
 8001226:	b252      	sxtb	r2, r2
 8001228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800122c:	b252      	sxtb	r2, r2
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	f002 021f 	and.w	r2, r2, #31
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d099      	beq.n	8001174 <HAL_RCC_OscConfig+0x8cc>
 8001240:	e064      	b.n	800130c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff f877 	bl	8000334 <HAL_GetTick>
 8001246:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124a:	e00b      	b.n	8001264 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800124c:	f7ff f872 	bl	8000334 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f241 3288 	movw	r2, #5000	; 0x1388
 800125c:	4293      	cmp	r3, r2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e208      	b.n	8001676 <HAL_RCC_OscConfig+0xdce>
 8001264:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001268:	2202      	movs	r2, #2
 800126a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	fa93 f2a3 	rbit	r2, r3
 8001276:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001280:	2202      	movs	r2, #2
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	fa93 f2a3 	rbit	r2, r3
 800128e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001292:	601a      	str	r2, [r3, #0]
  return(result);
 8001294:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001298:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	095b      	lsrs	r3, r3, #5
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d102      	bne.n	80012b4 <HAL_RCC_OscConfig+0xa0c>
 80012ae:	4b90      	ldr	r3, [pc, #576]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	e00d      	b.n	80012d0 <HAL_RCC_OscConfig+0xa28>
 80012b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012b8:	2202      	movs	r2, #2
 80012ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	fa93 f2a3 	rbit	r2, r3
 80012c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	4b88      	ldr	r3, [pc, #544]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012d4:	2102      	movs	r1, #2
 80012d6:	6011      	str	r1, [r2, #0]
 80012d8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	fa92 f1a2 	rbit	r1, r2
 80012e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012e6:	6011      	str	r1, [r2, #0]
  return(result);
 80012e8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	fab2 f282 	clz	r2, r2
 80012f2:	b252      	sxtb	r2, r2
 80012f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012f8:	b252      	sxtb	r2, r2
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	f002 021f 	and.w	r2, r2, #31
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f202 	lsl.w	r2, r1, r2
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d19f      	bne.n	800124c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800130c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001310:	2b01      	cmp	r3, #1
 8001312:	d105      	bne.n	8001320 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001314:	4b76      	ldr	r3, [pc, #472]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	4a75      	ldr	r2, [pc, #468]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 800131a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800131e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 81a4 	beq.w	8001674 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800132c:	4b70      	ldr	r3, [pc, #448]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b08      	cmp	r3, #8
 8001336:	f000 819b 	beq.w	8001670 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	2b02      	cmp	r3, #2
 8001342:	f040 8113 	bne.w	800156c <HAL_RCC_OscConfig+0xcc4>
 8001346:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800134a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800134e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	fa93 f2a3 	rbit	r2, r3
 800135a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800135e:	601a      	str	r2, [r3, #0]
  return(result);
 8001360:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001364:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	fab3 f383 	clz	r3, r3
 800136a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800136e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	461a      	mov	r2, r3
 8001376:	2300      	movs	r3, #0
 8001378:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7fe ffdb 	bl	8000334 <HAL_GetTick>
 800137e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	e009      	b.n	8001398 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001384:	f7fe ffd6 	bl	8000334 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e16e      	b.n	8001676 <HAL_RCC_OscConfig+0xdce>
 8001398:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800139c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	fa93 f2a3 	rbit	r2, r3
 80013ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013b0:	601a      	str	r2, [r3, #0]
  return(result);
 80013b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d102      	bne.n	80013d2 <HAL_RCC_OscConfig+0xb2a>
 80013cc:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	e01b      	b.n	800140a <HAL_RCC_OscConfig+0xb62>
 80013d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	fa93 f2a3 	rbit	r2, r3
 80013e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	fa93 f2a3 	rbit	r2, r3
 8001400:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800140e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001412:	6011      	str	r1, [r2, #0]
 8001414:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	fa92 f1a2 	rbit	r1, r2
 800141e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001422:	6011      	str	r1, [r2, #0]
  return(result);
 8001424:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	fab2 f282 	clz	r2, r2
 800142e:	b252      	sxtb	r2, r2
 8001430:	f042 0220 	orr.w	r2, r2, #32
 8001434:	b252      	sxtb	r2, r2
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	f002 021f 	and.w	r2, r2, #31
 800143c:	2101      	movs	r1, #1
 800143e:	fa01 f202 	lsl.w	r2, r1, r2
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d19d      	bne.n	8001384 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	430b      	orrs	r3, r1
 800145e:	4924      	ldr	r1, [pc, #144]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
 8001464:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800146c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	fa93 f2a3 	rbit	r2, r3
 8001478:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800147c:	601a      	str	r2, [r3, #0]
  return(result);
 800147e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001482:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001484:	fab3 f383 	clz	r3, r3
 8001488:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800148c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	461a      	mov	r2, r3
 8001494:	2301      	movs	r3, #1
 8001496:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7fe ff4c 	bl	8000334 <HAL_GetTick>
 800149c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a0:	e009      	b.n	80014b6 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a2:	f7fe ff47 	bl	8000334 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e0df      	b.n	8001676 <HAL_RCC_OscConfig+0xdce>
 80014b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fa93 f2a3 	rbit	r2, r3
 80014ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014ce:	601a      	str	r2, [r3, #0]
  return(result);
 80014d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	095b      	lsrs	r3, r3, #5
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d104      	bne.n	80014f4 <HAL_RCC_OscConfig+0xc4c>
 80014ea:	4b01      	ldr	r3, [pc, #4]	; (80014f0 <HAL_RCC_OscConfig+0xc48>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	e01d      	b.n	800152c <HAL_RCC_OscConfig+0xc84>
 80014f0:	40021000 	.word	0x40021000
 80014f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fa93 f2a3 	rbit	r2, r3
 8001522:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	4b55      	ldr	r3, [pc, #340]	; (8001680 <HAL_RCC_OscConfig+0xdd8>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001530:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001534:	6011      	str	r1, [r2, #0]
 8001536:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	fa92 f1a2 	rbit	r1, r2
 8001540:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001544:	6011      	str	r1, [r2, #0]
  return(result);
 8001546:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	fab2 f282 	clz	r2, r2
 8001550:	b252      	sxtb	r2, r2
 8001552:	f042 0220 	orr.w	r2, r2, #32
 8001556:	b252      	sxtb	r2, r2
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	f002 021f 	and.w	r2, r2, #31
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f202 	lsl.w	r2, r1, r2
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d09b      	beq.n	80014a2 <HAL_RCC_OscConfig+0xbfa>
 800156a:	e083      	b.n	8001674 <HAL_RCC_OscConfig+0xdcc>
 800156c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f2a3 	rbit	r2, r3
 8001580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001584:	601a      	str	r2, [r3, #0]
  return(result);
 8001586:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800158a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001594:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	461a      	mov	r2, r3
 800159c:	2300      	movs	r3, #0
 800159e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7fe fec8 	bl	8000334 <HAL_GetTick>
 80015a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a8:	e009      	b.n	80015be <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7fe fec3 	bl	8000334 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e05b      	b.n	8001676 <HAL_RCC_OscConfig+0xdce>
 80015be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fa93 f2a3 	rbit	r2, r3
 80015d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d6:	601a      	str	r2, [r3, #0]
  return(result);
 80015d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015de:	fab3 f383 	clz	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	095b      	lsrs	r3, r3, #5
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d102      	bne.n	80015f8 <HAL_RCC_OscConfig+0xd50>
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <HAL_RCC_OscConfig+0xdd8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	e01b      	b.n	8001630 <HAL_RCC_OscConfig+0xd88>
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f2a3 	rbit	r2, r3
 800160c:	f107 0320 	add.w	r3, r7, #32
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	fa93 f2a3 	rbit	r2, r3
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_RCC_OscConfig+0xdd8>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	f107 0214 	add.w	r2, r7, #20
 8001634:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001638:	6011      	str	r1, [r2, #0]
 800163a:	f107 0214 	add.w	r2, r7, #20
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	fa92 f1a2 	rbit	r1, r2
 8001644:	f107 0210 	add.w	r2, r7, #16
 8001648:	6011      	str	r1, [r2, #0]
  return(result);
 800164a:	f107 0210 	add.w	r2, r7, #16
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	fab2 f282 	clz	r2, r2
 8001654:	b252      	sxtb	r2, r2
 8001656:	f042 0220 	orr.w	r2, r2, #32
 800165a:	b252      	sxtb	r2, r2
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	f002 021f 	and.w	r2, r2, #31
 8001662:	2101      	movs	r1, #1
 8001664:	fa01 f202 	lsl.w	r2, r1, r2
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d19d      	bne.n	80015aa <HAL_RCC_OscConfig+0xd02>
 800166e:	e001      	b.n	8001674 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b09e      	sub	sp, #120	; 0x78
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e164      	b.n	8001966 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	4b92      	ldr	r3, [pc, #584]	; (80018e8 <HAL_RCC_ClockConfig+0x264>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d910      	bls.n	80016cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b8f      	ldr	r3, [pc, #572]	; (80018e8 <HAL_RCC_ClockConfig+0x264>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0207 	bic.w	r2, r3, #7
 80016b2:	498d      	ldr	r1, [pc, #564]	; (80018e8 <HAL_RCC_ClockConfig+0x264>)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b8b      	ldr	r3, [pc, #556]	; (80018e8 <HAL_RCC_ClockConfig+0x264>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e14c      	b.n	8001966 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b84      	ldr	r3, [pc, #528]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4981      	ldr	r1, [pc, #516]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80df 	beq.w	80018b6 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d13d      	bne.n	800177c <HAL_RCC_ClockConfig+0xf8>
 8001700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001704:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800170e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d102      	bne.n	800172a <HAL_RCC_ClockConfig+0xa6>
 8001724:	4b71      	ldr	r3, [pc, #452]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	e00f      	b.n	800174a <HAL_RCC_ClockConfig+0xc6>
 800172a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	667b      	str	r3, [r7, #100]	; 0x64
 8001738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173c:	663b      	str	r3, [r7, #96]	; 0x60
 800173e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001746:	4b69      	ldr	r3, [pc, #420]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800174e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001752:	fa92 f2a2 	rbit	r2, r2
 8001756:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800175a:	fab2 f282 	clz	r2, r2
 800175e:	b252      	sxtb	r2, r2
 8001760:	f042 0220 	orr.w	r2, r2, #32
 8001764:	b252      	sxtb	r2, r2
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	f002 021f 	and.w	r2, r2, #31
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d17d      	bne.n	8001874 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0f4      	b.n	8001966 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d13d      	bne.n	8001800 <HAL_RCC_ClockConfig+0x17c>
 8001784:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001788:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_ClockConfig+0x12a>
 80017a8:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	e00f      	b.n	80017ce <HAL_RCC_ClockConfig+0x14a>
 80017ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	647b      	str	r3, [r7, #68]	; 0x44
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	643b      	str	r3, [r7, #64]	; 0x40
 80017c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ca:	4b48      	ldr	r3, [pc, #288]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80017d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017d6:	fa92 f2a2 	rbit	r2, r2
 80017da:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80017dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017de:	fab2 f282 	clz	r2, r2
 80017e2:	b252      	sxtb	r2, r2
 80017e4:	f042 0220 	orr.w	r2, r2, #32
 80017e8:	b252      	sxtb	r2, r2
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f002 021f 	and.w	r2, r2, #31
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f202 	lsl.w	r2, r1, r2
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d13b      	bne.n	8001874 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0b2      	b.n	8001966 <HAL_RCC_ClockConfig+0x2e2>
 8001800:	2302      	movs	r3, #2
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800180c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	095b      	lsrs	r3, r3, #5
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d102      	bne.n	8001828 <HAL_RCC_ClockConfig+0x1a4>
 8001822:	4b32      	ldr	r3, [pc, #200]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e00d      	b.n	8001844 <HAL_RCC_ClockConfig+0x1c0>
 8001828:	2302      	movs	r3, #2
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
 8001834:	2302      	movs	r3, #2
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2202      	movs	r2, #2
 8001846:	61ba      	str	r2, [r7, #24]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	fa92 f2a2 	rbit	r2, r2
 800184e:	617a      	str	r2, [r7, #20]
  return(result);
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	fab2 f282 	clz	r2, r2
 8001856:	b252      	sxtb	r2, r2
 8001858:	f042 0220 	orr.w	r2, r2, #32
 800185c:	b252      	sxtb	r2, r2
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	f002 021f 	and.w	r2, r2, #31
 8001864:	2101      	movs	r1, #1
 8001866:	fa01 f202 	lsl.w	r2, r1, r2
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e078      	b.n	8001966 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f023 0203 	bic.w	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	491a      	ldr	r1, [pc, #104]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001886:	f7fe fd55 	bl	8000334 <HAL_GetTick>
 800188a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188e:	f7fe fd51 	bl	8000334 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f241 3288 	movw	r2, #5000	; 0x1388
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e060      	b.n	8001966 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_RCC_ClockConfig+0x268>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 020c 	and.w	r2, r3, #12
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d1eb      	bne.n	800188e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_RCC_ClockConfig+0x264>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d215      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_RCC_ClockConfig+0x264>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 0207 	bic.w	r2, r3, #7
 80018cc:	4906      	ldr	r1, [pc, #24]	; (80018e8 <HAL_RCC_ClockConfig+0x264>)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_RCC_ClockConfig+0x264>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d006      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e03f      	b.n	8001966 <HAL_RCC_ClockConfig+0x2e2>
 80018e6:	bf00      	nop
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_RCC_ClockConfig+0x2ec>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4919      	ldr	r1, [pc, #100]	; (8001970 <HAL_RCC_ClockConfig+0x2ec>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_RCC_ClockConfig+0x2ec>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4911      	ldr	r1, [pc, #68]	; (8001970 <HAL_RCC_ClockConfig+0x2ec>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800192e:	f000 f825 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8001932:	4601      	mov	r1, r0
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_RCC_ClockConfig+0x2ec>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800193c:	23f0      	movs	r3, #240	; 0xf0
 800193e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	60fb      	str	r3, [r7, #12]
  return(result);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <HAL_RCC_ClockConfig+0x2f0>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	fa21 f303 	lsr.w	r3, r1, r3
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_RCC_ClockConfig+0x2f4>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800195e:	200f      	movs	r0, #15
 8001960:	f7fe fca4 	bl	80002ac <HAL_InitTick>
  
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3778      	adds	r7, #120	; 0x78
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	08006a6c 	.word	0x08006a6c
 8001978:	2000000c 	.word	0x2000000c

0800197c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b08b      	sub	sp, #44	; 0x2c
 8001980:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x30>
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x36>
 80019aa:	e03c      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019ae:	623b      	str	r3, [r7, #32]
      break;
 80019b0:	e03c      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019b8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80019bc:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	607b      	str	r3, [r7, #4]
  return(result);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019d2:	5cd3      	ldrb	r3, [r2, r3]
 80019d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f003 020f 	and.w	r2, r3, #15
 80019de:	230f      	movs	r3, #15
 80019e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xcc>)
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	e004      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	623b      	str	r3, [r7, #32]
      break;
 8001a24:	e002      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a28:	623b      	str	r3, [r7, #32]
      break;
 8001a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	372c      	adds	r7, #44	; 0x2c
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	08006a4c 	.word	0x08006a4c
 8001a48:	08006a5c 	.word	0x08006a5c
 8001a4c:	003d0900 	.word	0x003d0900

08001a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	2000000c 	.word	0x2000000c

08001a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a6e:	f7ff ffef 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a72:	4601      	mov	r1, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a7c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a80:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	603b      	str	r3, [r7, #0]
  return(result);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	08006a7c 	.word	0x08006a7c

08001aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ab2:	f7ff ffcd 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001ac0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ac4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	603b      	str	r3, [r7, #0]
  return(result);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x40>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08006a7c 	.word	0x08006a7c

08001af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07c      	b.n	8001bfc <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d106      	bne.n	8001b22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f003 fb99 	bl	8005254 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b42:	d902      	bls.n	8001b4a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e002      	b.n	8001b50 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001b58:	d007      	beq.n	8001b6a <HAL_SPI_Init+0x7a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b62:	d002      	beq.n	8001b6a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10b      	bne.n	8001b8a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b7a:	d903      	bls.n	8001b84 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
 8001b82:	e002      	b.n	8001b8a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	ea42 0103 	orr.w	r1, r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0204 	and.w	r2, r3, #4
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	ea42 0103 	orr.w	r1, r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_SPI_Transmit+0x26>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e13e      	b.n	8001ea8 <HAL_SPI_Transmit+0x2a4>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c32:	f7fe fb7f 	bl	8000334 <HAL_GetTick>
 8001c36:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d002      	beq.n	8001c4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c44:	2302      	movs	r3, #2
 8001c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c48:	e125      	b.n	8001e96 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_SPI_Transmit+0x52>
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c5a:	e11c      	b.n	8001e96 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	88fa      	ldrh	r2, [r7, #6]
 8001c74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	88fa      	ldrh	r2, [r7, #6]
 8001c7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca6:	d107      	bne.n	8001cb8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc2:	2b40      	cmp	r3, #64	; 0x40
 8001cc4:	d007      	beq.n	8001cd6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001cde:	d947      	bls.n	8001d70 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <HAL_SPI_Transmit+0xee>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d138      	bne.n	8001d64 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d10:	e028      	b.n	8001d64 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d10f      	bne.n	8001d40 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	881a      	ldrh	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d3e:	e011      	b.n	8001d64 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_SPI_Transmit+0x15a>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d00a      	beq.n	8001d64 <HAL_SPI_Transmit+0x160>
 8001d4e:	f7fe faf1 	bl	8000334 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d802      	bhi.n	8001d64 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d62:	e098      	b.n	8001e96 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1d1      	bne.n	8001d12 <HAL_SPI_Transmit+0x10e>
 8001d6e:	e070      	b.n	8001e52 <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <HAL_SPI_Transmit+0x17e>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d162      	bne.n	8001e48 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d90f      	bls.n	8001dac <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	881a      	ldrh	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3302      	adds	r3, #2
 8001d9a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3b02      	subs	r3, #2
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001daa:	e04d      	b.n	8001e48 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	60ba      	str	r2, [r7, #8]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	320c      	adds	r2, #12
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001dca:	e03d      	b.n	8001e48 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d124      	bne.n	8001e24 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d90f      	bls.n	8001e04 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	881a      	ldrh	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3302      	adds	r3, #2
 8001df2:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b02      	subs	r3, #2
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e02:	e021      	b.n	8001e48 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	60ba      	str	r2, [r7, #8]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	320c      	adds	r2, #12
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e22:	e011      	b.n	8001e48 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_SPI_Transmit+0x23e>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d00a      	beq.n	8001e48 <HAL_SPI_Transmit+0x244>
 8001e32:	f7fe fa7f 	bl	8000334 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d802      	bhi.n	8001e48 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e46:	e026      	b.n	8001e96 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1bc      	bne.n	8001dcc <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	6839      	ldr	r1, [r7, #0]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f902 	bl	8002060 <SPI_EndRxTxTransaction>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2220      	movs	r2, #32
 8001e66:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10a      	bne.n	8001e86 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	77fb      	strb	r3, [r7, #31]
 8001e92:	e000      	b.n	8001e96 <HAL_SPI_Transmit+0x292>
  }

error:
 8001e94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ebe:	e04c      	b.n	8001f5a <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec6:	d048      	beq.n	8001f5a <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001ece:	f7fe fa31 	bl	8000334 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d83d      	bhi.n	8001f5a <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ef6:	d111      	bne.n	8001f1c <SPI_WaitFlagStateUntilTimeout+0x6c>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f00:	d004      	beq.n	8001f0c <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0a:	d107      	bne.n	8001f1c <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f24:	d10f      	bne.n	8001f46 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e00e      	b.n	8001f78 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4013      	ands	r3, r2
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d101      	bne.n	8001f6e <SPI_WaitFlagStateUntilTimeout+0xbe>
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	e000      	b.n	8001f70 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8001f6e:	2200      	movs	r2, #0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d1a4      	bne.n	8001ec0 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8001f8e:	e05a      	b.n	8002046 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f96:	d109      	bne.n	8001fac <SPI_WaitFifoStateUntilTimeout+0x2c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	330c      	adds	r3, #12
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d048      	beq.n	8002046 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <SPI_WaitFifoStateUntilTimeout+0x4a>
 8001fba:	f7fe f9bb 	bl	8000334 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d83d      	bhi.n	8002046 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fe2:	d111      	bne.n	8002008 <SPI_WaitFifoStateUntilTimeout+0x88>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fec:	d004      	beq.n	8001ff8 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff6:	d107      	bne.n	8002008 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002010:	d10f      	bne.n	8002032 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e008      	b.n	8002058 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4013      	ands	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d19c      	bne.n	8001f90 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff ff81 	bl	8001f80 <SPI_WaitFifoStateUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e027      	b.n	80020e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2200      	movs	r2, #0
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7ff ff06 	bl	8001eb0 <SPI_WaitFlagStateUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	f043 0220 	orr.w	r2, r3, #32
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e014      	b.n	80020e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f7ff ff5a 	bl	8001f80 <SPI_WaitFifoStateUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d6:	f043 0220 	orr.w	r2, r3, #32
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e000      	b.n	80020e4 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e043      	b.n	8002186 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f003 f8fe 	bl	8005314 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8b9 	bl	80022a8 <UART_SetConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e022      	b.n	8002186 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fa13 	bl	8002574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800215c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800216c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fa9a 	bl	80026b8 <UART_CheckIdleState>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b088      	sub	sp, #32
 8002192:	af02      	add	r7, sp, #8
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	d177      	bne.n	800229e <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_UART_Transmit+0x2c>
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e070      	b.n	80022a0 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_UART_Transmit+0x3e>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e069      	b.n	80022a0 <HAL_UART_Transmit+0x112>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2221      	movs	r2, #33	; 0x21
 80021de:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80021e2:	f7fe f8a7 	bl	8000334 <HAL_GetTick>
 80021e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	88fa      	ldrh	r2, [r7, #6]
 80021ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	88fa      	ldrh	r2, [r7, #6]
 80021f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80021f8:	e034      	b.n	8002264 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2200      	movs	r2, #0
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fa97 	bl	800274a <UART_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e03c      	b.n	80022a0 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222e:	d111      	bne.n	8002254 <HAL_UART_Transmit+0xc6>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10d      	bne.n	8002254 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	881a      	ldrh	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002248:	b292      	uxth	r2, r2
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	3302      	adds	r3, #2
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	e007      	b.n	8002264 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	60ba      	str	r2, [r7, #8]
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b292      	uxth	r2, r2
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1c4      	bne.n	80021fa <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2200      	movs	r2, #0
 8002278:	2140      	movs	r1, #64	; 0x40
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fa65 	bl	800274a <UART_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e00a      	b.n	80022a0 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
  }
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80022b4:	2310      	movs	r3, #16
 80022b6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80022bc:	2300      	movs	r3, #0
 80022be:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b9f      	ldr	r3, [pc, #636]	; (8002560 <UART_SetConfig+0x2b8>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	68f9      	ldr	r1, [r7, #12]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a8e      	ldr	r2, [pc, #568]	; (8002564 <UART_SetConfig+0x2bc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d121      	bne.n	8002374 <UART_SetConfig+0xcc>
 8002330:	4b8d      	ldr	r3, [pc, #564]	; (8002568 <UART_SetConfig+0x2c0>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b03      	cmp	r3, #3
 800233a:	d817      	bhi.n	800236c <UART_SetConfig+0xc4>
 800233c:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <UART_SetConfig+0x9c>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002355 	.word	0x08002355
 8002348:	08002361 	.word	0x08002361
 800234c:	08002367 	.word	0x08002367
 8002350:	0800235b 	.word	0x0800235b
 8002354:	2300      	movs	r3, #0
 8002356:	75fb      	strb	r3, [r7, #23]
 8002358:	e01e      	b.n	8002398 <UART_SetConfig+0xf0>
 800235a:	2302      	movs	r3, #2
 800235c:	75fb      	strb	r3, [r7, #23]
 800235e:	e01b      	b.n	8002398 <UART_SetConfig+0xf0>
 8002360:	2304      	movs	r3, #4
 8002362:	75fb      	strb	r3, [r7, #23]
 8002364:	e018      	b.n	8002398 <UART_SetConfig+0xf0>
 8002366:	2308      	movs	r3, #8
 8002368:	75fb      	strb	r3, [r7, #23]
 800236a:	e015      	b.n	8002398 <UART_SetConfig+0xf0>
 800236c:	2310      	movs	r3, #16
 800236e:	75fb      	strb	r3, [r7, #23]
 8002370:	bf00      	nop
 8002372:	e011      	b.n	8002398 <UART_SetConfig+0xf0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a7c      	ldr	r2, [pc, #496]	; (800256c <UART_SetConfig+0x2c4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d102      	bne.n	8002384 <UART_SetConfig+0xdc>
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
 8002382:	e009      	b.n	8002398 <UART_SetConfig+0xf0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a79      	ldr	r2, [pc, #484]	; (8002570 <UART_SetConfig+0x2c8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d102      	bne.n	8002394 <UART_SetConfig+0xec>
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]
 8002392:	e001      	b.n	8002398 <UART_SetConfig+0xf0>
 8002394:	2310      	movs	r3, #16
 8002396:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a0:	d16f      	bne.n	8002482 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d857      	bhi.n	8002458 <UART_SetConfig+0x1b0>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <UART_SetConfig+0x108>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023d5 	.word	0x080023d5
 80023b4:	080023f1 	.word	0x080023f1
 80023b8:	0800240d 	.word	0x0800240d
 80023bc:	08002459 	.word	0x08002459
 80023c0:	08002427 	.word	0x08002427
 80023c4:	08002459 	.word	0x08002459
 80023c8:	08002459 	.word	0x08002459
 80023cc:	08002459 	.word	0x08002459
 80023d0:	08002443 	.word	0x08002443
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023d4:	f7ff fb48 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 80023d8:	4603      	mov	r3, r0
 80023da:	005a      	lsls	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	441a      	add	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	82bb      	strh	r3, [r7, #20]
        break;
 80023ee:	e036      	b.n	800245e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80023f0:	f7ff fb5c 	bl	8001aac <HAL_RCC_GetPCLK2Freq>
 80023f4:	4603      	mov	r3, r0
 80023f6:	005a      	lsls	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	441a      	add	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	82bb      	strh	r3, [r7, #20]
        break;
 800240a:	e028      	b.n	800245e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002416:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6852      	ldr	r2, [r2, #4]
 800241e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002422:	82bb      	strh	r3, [r7, #20]
        break;
 8002424:	e01b      	b.n	800245e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002426:	f7ff faa9 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800242a:	4603      	mov	r3, r0
 800242c:	005a      	lsls	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	441a      	add	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	82bb      	strh	r3, [r7, #20]
        break;
 8002440:	e00d      	b.n	800245e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	82bb      	strh	r3, [r7, #20]
        break;
 8002456:	e002      	b.n	800245e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	74fb      	strb	r3, [r7, #19]
        break;
 800245c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800245e:	8abb      	ldrh	r3, [r7, #20]
 8002460:	f023 030f 	bic.w	r3, r3, #15
 8002464:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002466:	8abb      	ldrh	r3, [r7, #20]
 8002468:	105b      	asrs	r3, r3, #1
 800246a:	b29b      	uxth	r3, r3
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	b29a      	uxth	r2, r3
 8002472:	897b      	ldrh	r3, [r7, #10]
 8002474:	4313      	orrs	r3, r2
 8002476:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	897a      	ldrh	r2, [r7, #10]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	e069      	b.n	8002556 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	2b08      	cmp	r3, #8
 8002486:	d863      	bhi.n	8002550 <UART_SetConfig+0x2a8>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <UART_SetConfig+0x1e8>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024b5 	.word	0x080024b5
 8002494:	080024d5 	.word	0x080024d5
 8002498:	080024f5 	.word	0x080024f5
 800249c:	08002551 	.word	0x08002551
 80024a0:	08002515 	.word	0x08002515
 80024a4:	08002551 	.word	0x08002551
 80024a8:	08002551 	.word	0x08002551
 80024ac:	08002551 	.word	0x08002551
 80024b0:	08002535 	.word	0x08002535
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024b4:	f7ff fad8 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	441a      	add	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60da      	str	r2, [r3, #12]
        break;
 80024d2:	e040      	b.n	8002556 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024d4:	f7ff faea 	bl	8001aac <HAL_RCC_GetPCLK2Freq>
 80024d8:	4602      	mov	r2, r0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	441a      	add	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60da      	str	r2, [r3, #12]
        break;
 80024f2:	e030      	b.n	8002556 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80024fe:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6852      	ldr	r2, [r2, #4]
 8002506:	fbb3 f3f2 	udiv	r3, r3, r2
 800250a:	b29a      	uxth	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60da      	str	r2, [r3, #12]
        break;
 8002512:	e020      	b.n	8002556 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002514:	f7ff fa32 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	085b      	lsrs	r3, r3, #1
 8002520:	441a      	add	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	b29a      	uxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60da      	str	r2, [r3, #12]
        break;
 8002532:	e010      	b.n	8002556 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	b29a      	uxth	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60da      	str	r2, [r3, #12]
        break;
 800254e:	e002      	b.n	8002556 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	74fb      	strb	r3, [r7, #19]
        break;
 8002554:	bf00      	nop
    }
  }

  return ret;
 8002556:	7cfb      	ldrb	r3, [r7, #19]

}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	efff69f3 	.word	0xefff69f3
 8002564:	40013800 	.word	0x40013800
 8002568:	40021000 	.word	0x40021000
 800256c:	40004400 	.word	0x40004400
 8002570:	40004800 	.word	0x40004800

08002574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01a      	beq.n	800268a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002672:	d10a      	bne.n	800268a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	605a      	str	r2, [r3, #4]
  }
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af02      	add	r7, sp, #8
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80026ca:	f7fd fe33 	bl	8000334 <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d10e      	bne.n	80026fc <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f82c 	bl	800274a <UART_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e022      	b.n	8002742 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b04      	cmp	r3, #4
 8002708:	d10e      	bne.n	8002728 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800270a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f816 	bl	800274a <UART_WaitOnFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e00c      	b.n	8002742 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800275a:	e02c      	b.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d028      	beq.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <UART_WaitOnFlagUntilTimeout+0x30>
 800276a:	f7fd fde3 	bl	8000334 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	429a      	cmp	r2, r3
 8002778:	d21d      	bcs.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002788:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e00f      	b.n	80027d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	bf0c      	ite	eq
 80027c6:	2301      	moveq	r3, #1
 80027c8:	2300      	movne	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d0c3      	beq.n	800275c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80027ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f0:	2b84      	cmp	r3, #132	; 0x84
 80027f2:	d005      	beq.n	8002800 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80027f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	3303      	adds	r3, #3
 80027fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002800:	68fb      	ldr	r3, [r7, #12]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002814:	f3ef 8305 	mrs	r3, IPSR
 8002818:	607b      	str	r3, [r7, #4]
  return(result);
 800281a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002836:	f000 fff7 	bl	8003828 <vTaskStartScheduler>
  
  return osOK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}

08002840 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002842:	b087      	sub	sp, #28
 8002844:	af02      	add	r7, sp, #8
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685c      	ldr	r4, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002856:	b29e      	uxth	r6, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ffbd 	bl	80027de <makeFreeRtosPriority>
 8002864:	4602      	mov	r2, r0
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	9200      	str	r2, [sp, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	4632      	mov	r2, r6
 8002872:	4629      	mov	r1, r5
 8002874:	4620      	mov	r0, r4
 8002876:	f000 fe7a 	bl	800356e <xTaskCreate>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d001      	beq.n	8002884 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002884:	68fb      	ldr	r3, [r7, #12]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800288e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <osDelay+0x16>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	e000      	b.n	80028a6 <osDelay+0x18>
 80028a4:	2301      	movs	r3, #1
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 ff8a 	bl	80037c0 <vTaskDelay>
  
  return osOK;
 80028ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80028be:	2001      	movs	r0, #1
 80028c0:	f000 fa1a 	bl	8002cf8 <xQueueCreateMutex>
 80028c4:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <osMutexWait+0x18>
    return osErrorParameter;
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	e03c      	b.n	8002962 <osMutexWait+0x92>
  }
  
  ticks = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d103      	bne.n	80028fc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	e009      	b.n	8002910 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <osMutexWait+0x40>
      ticks = 1;
 800290c:	2301      	movs	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002910:	f7ff ff7d 	bl	800280e <inHandlerMode>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d017      	beq.n	800294a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	461a      	mov	r2, r3
 8002920:	2100      	movs	r1, #0
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fc96 	bl	8003254 <xQueueReceiveFromISR>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d001      	beq.n	8002932 <osMutexWait+0x62>
      return osErrorOS;
 800292e:	23ff      	movs	r3, #255	; 0xff
 8002930:	e017      	b.n	8002962 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <osMutexWait+0x90>
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <osMutexWait+0x9c>)
 800293a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	e00a      	b.n	8002960 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800294a:	2300      	movs	r3, #0
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	2100      	movs	r1, #0
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fb6d 	bl	8003030 <xQueueGenericReceive>
 8002956:	4603      	mov	r3, r0
 8002958:	2b01      	cmp	r3, #1
 800295a:	d001      	beq.n	8002960 <osMutexWait+0x90>
    return osErrorOS;
 800295c:	23ff      	movs	r3, #255	; 0xff
 800295e:	e000      	b.n	8002962 <osMutexWait+0x92>
  }
  
  return osOK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	e000ed04 	.word	0xe000ed04

08002970 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002980:	f7ff ff45 	bl	800280e <inHandlerMode>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fac3 	bl	8002f1c <xQueueGiveFromISR>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d001      	beq.n	80029a0 <osMutexRelease+0x30>
      return osErrorOS;
 800299c:	23ff      	movs	r3, #255	; 0xff
 800299e:	e017      	b.n	80029d0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d013      	beq.n	80029ce <osMutexRelease+0x5e>
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <osMutexRelease+0x68>)
 80029a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	e00a      	b.n	80029ce <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80029b8:	2300      	movs	r3, #0
 80029ba:	2200      	movs	r2, #0
 80029bc:	2100      	movs	r1, #0
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f9b2 	bl	8002d28 <xQueueGenericSend>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d001      	beq.n	80029ce <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80029ca:	23ff      	movs	r3, #255	; 0xff
 80029cc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	e000ed04 	.word	0xe000ed04

080029dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f103 0208 	add.w	r2, r3, #8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f103 0208 	add.w	r2, r3, #8
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f103 0208 	add.w	r2, r3, #8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	601a      	str	r2, [r3, #0]
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d103      	bne.n	8002a9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	e00c      	b.n	8002ab8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e002      	b.n	8002aac <vListInsert+0x2e>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d2f6      	bcs.n	8002aa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	601a      	str	r2, [r3, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6892      	ldr	r2, [r2, #8]
 8002b06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6852      	ldr	r2, [r2, #4]
 8002b10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d103      	bne.n	8002b24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	1e5a      	subs	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	e7fe      	b.n	8002b6a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002b6c:	f001 fcd8 	bl	8004520 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	68f9      	ldr	r1, [r7, #12]
 8002b7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	441a      	add	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	68f9      	ldr	r1, [r7, #12]
 8002ba0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	441a      	add	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	22ff      	movs	r2, #255	; 0xff
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	22ff      	movs	r2, #255	; 0xff
 8002bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d114      	bne.n	8002bec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01a      	beq.n	8002c00 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3310      	adds	r3, #16
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 f854 	bl	8003c7c <xTaskRemoveFromEventList>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d012      	beq.n	8002c00 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <xQueueGenericReset+0xcc>)
 8002bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	e009      	b.n	8002c00 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3310      	adds	r3, #16
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fef3 	bl	80029dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3324      	adds	r3, #36	; 0x24
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff feee 	bl	80029dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c00:	f001 fcbc 	bl	800457c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c04:	2301      	movs	r3, #1
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000ed04 	.word	0xe000ed04

08002c14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <xQueueGenericCreate+0x28>
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	e7fe      	b.n	8002c3a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	e004      	b.n	8002c52 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3348      	adds	r3, #72	; 0x48
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 fd72 	bl	8004740 <pvPortMalloc>
 8002c5c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	3348      	adds	r3, #72	; 0x48
 8002c68:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c6a:	79fa      	ldrb	r2, [r7, #7]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f805 	bl	8002c86 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
	}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e002      	b.n	8002ca8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	69b8      	ldr	r0, [r7, #24]
 8002cb8:	f7ff ff44 	bl	8002b44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f81c 	bl	8002d28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002d02:	2301      	movs	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6939      	ldr	r1, [r7, #16]
 8002d10:	6978      	ldr	r0, [r7, #20]
 8002d12:	f7ff ff7f 	bl	8002c14 <xQueueGenericCreate>
 8002d16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff ffd3 	bl	8002cc4 <prvInitialiseMutex>

		return pxNewQueue;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
	}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08e      	sub	sp, #56	; 0x38
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <xQueueGenericSend+0x30>
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d56:	e7fe      	b.n	8002d56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d103      	bne.n	8002d66 <xQueueGenericSend+0x3e>
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <xQueueGenericSend+0x42>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <xQueueGenericSend+0x44>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <xQueueGenericSend+0x5c>
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	e7fe      	b.n	8002d82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d103      	bne.n	8002d92 <xQueueGenericSend+0x6a>
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <xQueueGenericSend+0x6e>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <xQueueGenericSend+0x70>
 8002d96:	2300      	movs	r3, #0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <xQueueGenericSend+0x88>
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	623b      	str	r3, [r7, #32]
 8002dae:	e7fe      	b.n	8002dae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002db0:	f001 f91e 	bl	8003ff0 <xTaskGetSchedulerState>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <xQueueGenericSend+0x98>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <xQueueGenericSend+0x9c>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <xQueueGenericSend+0x9e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <xQueueGenericSend+0xb6>
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	e7fe      	b.n	8002ddc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dde:	f001 fb9f 	bl	8004520 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <xQueueGenericSend+0xcc>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d129      	bne.n	8002e48 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dfa:	f000 faa8 	bl	800334e <prvCopyDataToQueue>
 8002dfe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	3324      	adds	r3, #36	; 0x24
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 ff35 	bl	8003c7c <xTaskRemoveFromEventList>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e18:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <xQueueGenericSend+0x1f0>)
 8002e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	e00a      	b.n	8002e40 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e30:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <xQueueGenericSend+0x1f0>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e40:	f001 fb9c 	bl	800457c <vPortExitCritical>
				return pdPASS;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e063      	b.n	8002f10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e4e:	f001 fb95 	bl	800457c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e05c      	b.n	8002f10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 ff6d 	bl	8003d40 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e6a:	f001 fb87 	bl	800457c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e6e:	f000 fd21 	bl	80038b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e72:	f001 fb55 	bl	8004520 <vPortEnterCritical>
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e82:	d103      	bne.n	8002e8c <xQueueGenericSend+0x164>
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d103      	bne.n	8002ea2 <xQueueGenericSend+0x17a>
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea2:	f001 fb6b 	bl	800457c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea6:	1d3a      	adds	r2, r7, #4
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 ff6a 	bl	8003d88 <xTaskCheckForTimeOut>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d124      	bne.n	8002f04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ebc:	f000 fb3f 	bl	800353e <prvIsQueueFull>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d018      	beq.n	8002ef8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	3310      	adds	r3, #16
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 feb0 	bl	8003c34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed6:	f000 faca 	bl	800346e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eda:	f000 fcf9 	bl	80038d0 <xTaskResumeAll>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f47f af7c 	bne.w	8002dde <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <xQueueGenericSend+0x1f0>)
 8002ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	e772      	b.n	8002dde <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002efa:	f000 fab8 	bl	800346e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002efe:	f000 fce7 	bl	80038d0 <xTaskResumeAll>
 8002f02:	e76c      	b.n	8002dde <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f06:	f000 fab2 	bl	800346e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f0a:	f000 fce1 	bl	80038d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f0e:	2300      	movs	r3, #0
		}
	}
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3738      	adds	r7, #56	; 0x38
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	e000ed04 	.word	0xe000ed04

08002f1c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08e      	sub	sp, #56	; 0x38
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <xQueueGiveFromISR+0x28>
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	e7fe      	b.n	8002f42 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <xQueueGiveFromISR+0x44>
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e7fe      	b.n	8002f5e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <xQueueGiveFromISR+0x54>
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <xQueueGiveFromISR+0x58>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <xQueueGiveFromISR+0x5a>
 8002f74:	2300      	movs	r3, #0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <xQueueGiveFromISR+0x72>
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e7fe      	b.n	8002f8c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f8e:	f001 fb99 	bl	80046c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f92:	f3ef 8211 	mrs	r2, BASEPRI
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	617a      	str	r2, [r7, #20]
 8002fa8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002faa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d22b      	bcs.n	8003016 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d112      	bne.n	8003000 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d016      	beq.n	8003010 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	3324      	adds	r3, #36	; 0x24
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fe48 	bl	8003c7c <xTaskRemoveFromEventList>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00e      	beq.n	8003010 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00b      	beq.n	8003010 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e007      	b.n	8003010 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003004:	3301      	adds	r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	b25a      	sxtb	r2, r3
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003010:	2301      	movs	r3, #1
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
 8003014:	e001      	b.n	800301a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003026:	4618      	mov	r0, r3
 8003028:	3738      	adds	r7, #56	; 0x38
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08e      	sub	sp, #56	; 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800303e:	2300      	movs	r3, #0
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <xQueueGenericReceive+0x30>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	e7fe      	b.n	800305e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <xQueueGenericReceive+0x3e>
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <xQueueGenericReceive+0x42>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <xQueueGenericReceive+0x44>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <xQueueGenericReceive+0x5c>
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	623b      	str	r3, [r7, #32]
 800308a:	e7fe      	b.n	800308a <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800308c:	f000 ffb0 	bl	8003ff0 <xTaskGetSchedulerState>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <xQueueGenericReceive+0x6c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <xQueueGenericReceive+0x70>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <xQueueGenericReceive+0x72>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <xQueueGenericReceive+0x8a>
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	e7fe      	b.n	80030b8 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80030ba:	f001 fa31 	bl	8004520 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d046      	beq.n	8003158 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d4:	f000 f9a5 	bl	8003422 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d121      	bne.n	8003122 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d104      	bne.n	80030f8 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80030ee:	f001 f897 	bl	8004220 <pvTaskIncrementMutexHeldCount>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d027      	beq.n	8003150 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	3310      	adds	r3, #16
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fdb9 	bl	8003c7c <xTaskRemoveFromEventList>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01f      	beq.n	8003150 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8003110:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <xQueueGenericReceive+0x220>)
 8003112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	e016      	b.n	8003150 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003126:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00f      	beq.n	8003150 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	3324      	adds	r3, #36	; 0x24
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fda1 	bl	8003c7c <xTaskRemoveFromEventList>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <xQueueGenericReceive+0x220>)
 8003142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003150:	f001 fa14 	bl	800457c <vPortExitCritical>
				return pdPASS;
 8003154:	2301      	movs	r3, #1
 8003156:	e077      	b.n	8003248 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800315e:	f001 fa0d 	bl	800457c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003162:	2300      	movs	r3, #0
 8003164:	e070      	b.n	8003248 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fde5 	bl	8003d40 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003176:	2301      	movs	r3, #1
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800317a:	f001 f9ff 	bl	800457c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800317e:	f000 fb99 	bl	80038b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003182:	f001 f9cd 	bl	8004520 <vPortEnterCritical>
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800318c:	b25b      	sxtb	r3, r3
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003192:	d103      	bne.n	800319c <xQueueGenericReceive+0x16c>
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d103      	bne.n	80031b2 <xQueueGenericReceive+0x182>
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031b2:	f001 f9e3 	bl	800457c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031b6:	1d3a      	adds	r2, r7, #4
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fde2 	bl	8003d88 <xTaskCheckForTimeOut>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d131      	bne.n	800322e <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031cc:	f000 f9a1 	bl	8003512 <prvIsQueueEmpty>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d025      	beq.n	8003222 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 80031de:	f001 f99f 	bl	8004520 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 ff20 	bl	800402c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80031ec:	f001 f9c6 	bl	800457c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	3324      	adds	r3, #36	; 0x24
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fd1b 	bl	8003c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003200:	f000 f935 	bl	800346e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003204:	f000 fb64 	bl	80038d0 <xTaskResumeAll>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f47f af55 	bne.w	80030ba <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <xQueueGenericReceive+0x220>)
 8003212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	e74b      	b.n	80030ba <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003222:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003224:	f000 f923 	bl	800346e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003228:	f000 fb52 	bl	80038d0 <xTaskResumeAll>
 800322c:	e745      	b.n	80030ba <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800322e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003230:	f000 f91d 	bl	800346e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003234:	f000 fb4c 	bl	80038d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800323a:	f000 f96a 	bl	8003512 <prvIsQueueEmpty>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	f43f af3a 	beq.w	80030ba <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003246:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003248:	4618      	mov	r0, r3
 800324a:	3738      	adds	r7, #56	; 0x38
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	e000ed04 	.word	0xe000ed04

08003254 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08e      	sub	sp, #56	; 0x38
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <xQueueReceiveFromISR+0x2a>
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	623b      	str	r3, [r7, #32]
 800327c:	e7fe      	b.n	800327c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d103      	bne.n	800328c <xQueueReceiveFromISR+0x38>
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <xQueueReceiveFromISR+0x3c>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <xQueueReceiveFromISR+0x3e>
 8003290:	2300      	movs	r3, #0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <xQueueReceiveFromISR+0x56>
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	e7fe      	b.n	80032a8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032aa:	f001 fa0b 	bl	80046c4 <vPortValidateInterruptPriority>
	__asm volatile
 80032ae:	f3ef 8211 	mrs	r2, BASEPRI
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	61ba      	str	r2, [r7, #24]
 80032c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80032c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d02f      	beq.n	8003336 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032e4:	f000 f89d 	bl	8003422 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	1e5a      	subs	r2, r3, #1
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80032f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d112      	bne.n	8003320 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	3310      	adds	r3, #16
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fcb8 	bl	8003c7c <xTaskRemoveFromEventList>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00e      	beq.n	8003330 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e007      	b.n	8003330 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003324:	3301      	adds	r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	b25a      	sxtb	r2, r3
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003330:	2301      	movs	r3, #1
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
 8003334:	e001      	b.n	800333a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003336:	2300      	movs	r3, #0
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003346:	4618      	mov	r0, r3
 8003348:	3738      	adds	r7, #56	; 0x38
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10d      	bne.n	8003388 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d14d      	bne.n	8003410 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fecd 	bl	8004118 <xTaskPriorityDisinherit>
 800337e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	e043      	b.n	8003410 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d119      	bne.n	80033c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6898      	ldr	r0, [r3, #8]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	461a      	mov	r2, r3
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	f002 fa3f 	bl	800581c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	441a      	add	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d32b      	bcc.n	8003410 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	e026      	b.n	8003410 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	68d8      	ldr	r0, [r3, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	461a      	mov	r2, r3
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	f002 fa25 	bl	800581c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	425b      	negs	r3, r3
 80033dc:	441a      	add	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d207      	bcs.n	80033fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	425b      	negs	r3, r3
 80033f8:	441a      	add	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d105      	bne.n	8003410 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	3b01      	subs	r3, #1
 800340e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003418:	697b      	ldr	r3, [r7, #20]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d018      	beq.n	8003466 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d303      	bcc.n	8003456 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68d9      	ldr	r1, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	461a      	mov	r2, r3
 8003460:	6838      	ldr	r0, [r7, #0]
 8003462:	f002 f9db 	bl	800581c <memcpy>
	}
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003476:	f001 f853 	bl	8004520 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003480:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003482:	e011      	b.n	80034a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d012      	beq.n	80034b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fbf3 	bl	8003c7c <xTaskRemoveFromEventList>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800349c:	f000 fcd2 	bl	8003e44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	dce9      	bgt.n	8003484 <prvUnlockQueue+0x16>
 80034b0:	e000      	b.n	80034b4 <prvUnlockQueue+0x46>
					break;
 80034b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	22ff      	movs	r2, #255	; 0xff
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034bc:	f001 f85e 	bl	800457c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034c0:	f001 f82e 	bl	8004520 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034cc:	e011      	b.n	80034f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d012      	beq.n	80034fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3310      	adds	r3, #16
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fbce 	bl	8003c7c <xTaskRemoveFromEventList>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034e6:	f000 fcad 	bl	8003e44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034ea:	7bbb      	ldrb	r3, [r7, #14]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	dce9      	bgt.n	80034ce <prvUnlockQueue+0x60>
 80034fa:	e000      	b.n	80034fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	22ff      	movs	r2, #255	; 0xff
 8003502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003506:	f001 f839 	bl	800457c <vPortExitCritical>
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800351a:	f001 f801 	bl	8004520 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003526:	2301      	movs	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	e001      	b.n	8003530 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003530:	f001 f824 	bl	800457c <vPortExitCritical>

	return xReturn;
 8003534:	68fb      	ldr	r3, [r7, #12]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003546:	f000 ffeb 	bl	8004520 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	429a      	cmp	r2, r3
 8003554:	d102      	bne.n	800355c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003556:	2301      	movs	r3, #1
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e001      	b.n	8003560 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003560:	f001 f80c 	bl	800457c <vPortExitCritical>

	return xReturn;
 8003564:	68fb      	ldr	r3, [r7, #12]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800356e:	b580      	push	{r7, lr}
 8003570:	b08c      	sub	sp, #48	; 0x30
 8003572:	af04      	add	r7, sp, #16
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4618      	mov	r0, r3
 8003584:	f001 f8dc 	bl	8004740 <pvPortMalloc>
 8003588:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003590:	2054      	movs	r0, #84	; 0x54
 8003592:	f001 f8d5 	bl	8004740 <pvPortMalloc>
 8003596:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
 80035a4:	e005      	b.n	80035b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035a6:	6978      	ldr	r0, [r7, #20]
 80035a8:	f001 f98c 	bl	80048c4 <vPortFree>
 80035ac:	e001      	b.n	80035b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d013      	beq.n	80035e0 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9303      	str	r3, [sp, #12]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	9302      	str	r3, [sp, #8]
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f80e 	bl	80035f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035d4:	69f8      	ldr	r0, [r7, #28]
 80035d6:	f000 f889 	bl	80036ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	e002      	b.n	80035e6 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
 80035e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035e6:	69bb      	ldr	r3, [r7, #24]
	}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003608:	3b01      	subs	r3, #1
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f023 0307 	bic.w	r3, r3, #7
 8003616:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <prvInitialiseNewTask+0x46>
	__asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e7fe      	b.n	8003634 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e012      	b.n	8003662 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	7819      	ldrb	r1, [r3, #0]
 8003644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	3334      	adds	r3, #52	; 0x34
 800364c:	460a      	mov	r2, r1
 800364e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3301      	adds	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b0f      	cmp	r3, #15
 8003666:	d9e9      	bls.n	800363c <prvInitialiseNewTask+0x4c>
 8003668:	e000      	b.n	800366c <prvInitialiseNewTask+0x7c>
		{
			break;
 800366a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	2b06      	cmp	r3, #6
 8003678:	d901      	bls.n	800367e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800367a:	2306      	movs	r3, #6
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2200      	movs	r2, #0
 800368e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	3304      	adds	r3, #4
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff f9c1 	bl	8002a1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	3318      	adds	r3, #24
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff f9bc 	bl	8002a1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	f1c3 0207 	rsb	r2, r3, #7
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	2200      	movs	r2, #0
 80036be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	68f9      	ldr	r1, [r7, #12]
 80036cc:	69b8      	ldr	r0, [r7, #24]
 80036ce:	f000 fe21 	bl	8004314 <pxPortInitialiseStack>
 80036d2:	4602      	mov	r2, r0
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036e4:	bf00      	nop
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036f4:	f000 ff14 	bl	8004520 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036f8:	4b2a      	ldr	r3, [pc, #168]	; (80037a4 <prvAddNewTaskToReadyList+0xb8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	4a29      	ldr	r2, [pc, #164]	; (80037a4 <prvAddNewTaskToReadyList+0xb8>)
 8003700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003702:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <prvAddNewTaskToReadyList+0xbc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800370a:	4a27      	ldr	r2, [pc, #156]	; (80037a8 <prvAddNewTaskToReadyList+0xbc>)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003710:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <prvAddNewTaskToReadyList+0xb8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d110      	bne.n	800373a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003718:	f000 fbb8 	bl	8003e8c <prvInitialiseTaskLists>
 800371c:	e00d      	b.n	800373a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800371e:	4b23      	ldr	r3, [pc, #140]	; (80037ac <prvAddNewTaskToReadyList+0xc0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <prvAddNewTaskToReadyList+0xbc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	429a      	cmp	r2, r3
 8003732:	d802      	bhi.n	800373a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <prvAddNewTaskToReadyList+0xbc>)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800373a:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <prvAddNewTaskToReadyList+0xc4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3301      	adds	r3, #1
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <prvAddNewTaskToReadyList+0xc4>)
 8003742:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	2201      	movs	r2, #1
 800374a:	409a      	lsls	r2, r3
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <prvAddNewTaskToReadyList+0xc8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4313      	orrs	r3, r2
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <prvAddNewTaskToReadyList+0xc8>)
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4a15      	ldr	r2, [pc, #84]	; (80037b8 <prvAddNewTaskToReadyList+0xcc>)
 8003764:	441a      	add	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f7ff f962 	bl	8002a36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003772:	f000 ff03 	bl	800457c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <prvAddNewTaskToReadyList+0xc0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00e      	beq.n	800379c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <prvAddNewTaskToReadyList+0xbc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	429a      	cmp	r2, r3
 800378a:	d207      	bcs.n	800379c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <prvAddNewTaskToReadyList+0xd0>)
 800378e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000190 	.word	0x20000190
 80037a8:	20000090 	.word	0x20000090
 80037ac:	2000019c 	.word	0x2000019c
 80037b0:	200001ac 	.word	0x200001ac
 80037b4:	20000198 	.word	0x20000198
 80037b8:	20000094 	.word	0x20000094
 80037bc:	e000ed04 	.word	0xe000ed04

080037c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <vTaskDelay+0x60>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <vTaskDelay+0x2e>
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	e7fe      	b.n	80037ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80037ee:	f000 f861 	bl	80038b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037f2:	2100      	movs	r1, #0
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fd27 	bl	8004248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037fa:	f000 f869 	bl	80038d0 <xTaskResumeAll>
 80037fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d107      	bne.n	8003816 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <vTaskDelay+0x64>)
 8003808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200001b8 	.word	0x200001b8
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <vTaskStartScheduler+0x74>)
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	2300      	movs	r3, #0
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	2300      	movs	r3, #0
 8003838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800383c:	4918      	ldr	r1, [pc, #96]	; (80038a0 <vTaskStartScheduler+0x78>)
 800383e:	4819      	ldr	r0, [pc, #100]	; (80038a4 <vTaskStartScheduler+0x7c>)
 8003840:	f7ff fe95 	bl	800356e <xTaskCreate>
 8003844:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d115      	bne.n	8003878 <vTaskStartScheduler+0x50>
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <vTaskStartScheduler+0x80>)
 8003860:	f04f 32ff 	mov.w	r2, #4294967295
 8003864:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <vTaskStartScheduler+0x84>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <vTaskStartScheduler+0x88>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003872:	f000 fdc9 	bl	8004408 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003876:	e00d      	b.n	8003894 <vTaskStartScheduler+0x6c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d109      	bne.n	8003894 <vTaskStartScheduler+0x6c>
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	e7fe      	b.n	8003892 <vTaskStartScheduler+0x6a>
}
 8003894:	bf00      	nop
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	200001b4 	.word	0x200001b4
 80038a0:	08006998 	.word	0x08006998
 80038a4:	08003e5d 	.word	0x08003e5d
 80038a8:	200001b0 	.word	0x200001b0
 80038ac:	2000019c 	.word	0x2000019c
 80038b0:	20000194 	.word	0x20000194

080038b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <vTaskSuspendAll+0x18>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	4a03      	ldr	r2, [pc, #12]	; (80038cc <vTaskSuspendAll+0x18>)
 80038c0:	6013      	str	r3, [r2, #0]
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	200001b8 	.word	0x200001b8

080038d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038de:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <xTaskResumeAll+0x114>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <xTaskResumeAll+0x2a>
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	e7fe      	b.n	80038f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038fa:	f000 fe11 	bl	8004520 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038fe:	4b39      	ldr	r3, [pc, #228]	; (80039e4 <xTaskResumeAll+0x114>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3b01      	subs	r3, #1
 8003904:	4a37      	ldr	r2, [pc, #220]	; (80039e4 <xTaskResumeAll+0x114>)
 8003906:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003908:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <xTaskResumeAll+0x114>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d161      	bne.n	80039d4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003910:	4b35      	ldr	r3, [pc, #212]	; (80039e8 <xTaskResumeAll+0x118>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05d      	beq.n	80039d4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003918:	e02e      	b.n	8003978 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <xTaskResumeAll+0x11c>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3318      	adds	r3, #24
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff f8e2 	bl	8002af0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3304      	adds	r3, #4
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff f8dd 	bl	8002af0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	2201      	movs	r2, #1
 800393c:	409a      	lsls	r2, r3
 800393e:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <xTaskResumeAll+0x120>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <xTaskResumeAll+0x120>)
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <xTaskResumeAll+0x124>)
 8003956:	441a      	add	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3304      	adds	r3, #4
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f7ff f869 	bl	8002a36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <xTaskResumeAll+0x128>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	429a      	cmp	r2, r3
 8003970:	d302      	bcc.n	8003978 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <xTaskResumeAll+0x12c>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003978:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <xTaskResumeAll+0x11c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1cc      	bne.n	800391a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003986:	f000 fb0d 	bl	8003fa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <xTaskResumeAll+0x130>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d010      	beq.n	80039b8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003996:	f000 f837 	bl	8003a08 <xTaskIncrementTick>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <xTaskResumeAll+0x12c>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f1      	bne.n	8003996 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <xTaskResumeAll+0x130>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039b8:	4b10      	ldr	r3, [pc, #64]	; (80039fc <xTaskResumeAll+0x12c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <xTaskResumeAll+0x134>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039d4:	f000 fdd2 	bl	800457c <vPortExitCritical>

	return xAlreadyYielded;
 80039d8:	68bb      	ldr	r3, [r7, #8]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200001b8 	.word	0x200001b8
 80039e8:	20000190 	.word	0x20000190
 80039ec:	20000150 	.word	0x20000150
 80039f0:	20000198 	.word	0x20000198
 80039f4:	20000094 	.word	0x20000094
 80039f8:	20000090 	.word	0x20000090
 80039fc:	200001a4 	.word	0x200001a4
 8003a00:	200001a0 	.word	0x200001a0
 8003a04:	e000ed04 	.word	0xe000ed04

08003a08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a12:	4b50      	ldr	r3, [pc, #320]	; (8003b54 <xTaskIncrementTick+0x14c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f040 808c 	bne.w	8003b34 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003a1c:	4b4e      	ldr	r3, [pc, #312]	; (8003b58 <xTaskIncrementTick+0x150>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a24:	4a4c      	ldr	r2, [pc, #304]	; (8003b58 <xTaskIncrementTick+0x150>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11f      	bne.n	8003a70 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a30:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <xTaskIncrementTick+0x154>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <xTaskIncrementTick+0x46>
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	e7fe      	b.n	8003a4c <xTaskIncrementTick+0x44>
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <xTaskIncrementTick+0x154>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	4b42      	ldr	r3, [pc, #264]	; (8003b60 <xTaskIncrementTick+0x158>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a40      	ldr	r2, [pc, #256]	; (8003b5c <xTaskIncrementTick+0x154>)
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <xTaskIncrementTick+0x158>)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <xTaskIncrementTick+0x15c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	4a3e      	ldr	r2, [pc, #248]	; (8003b64 <xTaskIncrementTick+0x15c>)
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	f000 fa9a 	bl	8003fa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a70:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <xTaskIncrementTick+0x160>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d34d      	bcc.n	8003b16 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a7a:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <xTaskIncrementTick+0x154>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <xTaskIncrementTick+0x80>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <xTaskIncrementTick+0x82>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8e:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <xTaskIncrementTick+0x160>)
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295
 8003a94:	601a      	str	r2, [r3, #0]
					break;
 8003a96:	e03e      	b.n	8003b16 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a98:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <xTaskIncrementTick+0x154>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d203      	bcs.n	8003ab8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ab0:	4a2d      	ldr	r2, [pc, #180]	; (8003b68 <xTaskIncrementTick+0x160>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]
						break;
 8003ab6:	e02e      	b.n	8003b16 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff f817 	bl	8002af0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	3318      	adds	r3, #24
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff f80e 	bl	8002af0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	2201      	movs	r2, #1
 8003ada:	409a      	lsls	r2, r3
 8003adc:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <xTaskIncrementTick+0x164>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <xTaskIncrementTick+0x164>)
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <xTaskIncrementTick+0x168>)
 8003af4:	441a      	add	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	3304      	adds	r3, #4
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f7fe ff9a 	bl	8002a36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b06:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <xTaskIncrementTick+0x16c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d3b4      	bcc.n	8003a7a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003b10:	2301      	movs	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b14:	e7b1      	b.n	8003a7a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b16:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <xTaskIncrementTick+0x16c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	4914      	ldr	r1, [pc, #80]	; (8003b70 <xTaskIncrementTick+0x168>)
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d907      	bls.n	8003b3e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e004      	b.n	8003b3e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b34:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <xTaskIncrementTick+0x170>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	4a0f      	ldr	r2, [pc, #60]	; (8003b78 <xTaskIncrementTick+0x170>)
 8003b3c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b3e:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <xTaskIncrementTick+0x174>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003b46:	2301      	movs	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b4a:	697b      	ldr	r3, [r7, #20]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	200001b8 	.word	0x200001b8
 8003b58:	20000194 	.word	0x20000194
 8003b5c:	20000148 	.word	0x20000148
 8003b60:	2000014c 	.word	0x2000014c
 8003b64:	200001a8 	.word	0x200001a8
 8003b68:	200001b0 	.word	0x200001b0
 8003b6c:	20000198 	.word	0x20000198
 8003b70:	20000094 	.word	0x20000094
 8003b74:	20000090 	.word	0x20000090
 8003b78:	200001a0 	.word	0x200001a0
 8003b7c:	200001a4 	.word	0x200001a4

08003b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <vTaskSwitchContext+0xa0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b8e:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <vTaskSwitchContext+0xa4>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b94:	e03e      	b.n	8003c14 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003b96:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <vTaskSwitchContext+0xa4>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <vTaskSwitchContext+0xa8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003baa:	7afb      	ldrb	r3, [r7, #11]
 8003bac:	f1c3 031f 	rsb	r3, r3, #31
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	491e      	ldr	r1, [pc, #120]	; (8003c2c <vTaskSwitchContext+0xac>)
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <vTaskSwitchContext+0x5a>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	e7fe      	b.n	8003bd8 <vTaskSwitchContext+0x58>
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4a11      	ldr	r2, [pc, #68]	; (8003c2c <vTaskSwitchContext+0xac>)
 8003be6:	4413      	add	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d104      	bne.n	8003c0a <vTaskSwitchContext+0x8a>
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <vTaskSwitchContext+0xb0>)
 8003c12:	6013      	str	r3, [r2, #0]
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	200001b8 	.word	0x200001b8
 8003c24:	200001a4 	.word	0x200001a4
 8003c28:	20000198 	.word	0x20000198
 8003c2c:	20000094 	.word	0x20000094
 8003c30:	20000090 	.word	0x20000090

08003c34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <vTaskPlaceOnEventList+0x24>
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e7fe      	b.n	8003c56 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <vTaskPlaceOnEventList+0x44>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3318      	adds	r3, #24
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7fe ff0c 	bl	8002a7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c66:	2101      	movs	r1, #1
 8003c68:	6838      	ldr	r0, [r7, #0]
 8003c6a:	f000 faed 	bl	8004248 <prvAddCurrentTaskToDelayedList>
}
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000090 	.word	0x20000090

08003c7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <xTaskRemoveFromEventList+0x2a>
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e7fe      	b.n	8003ca4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	3318      	adds	r3, #24
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe ff20 	bl	8002af0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <xTaskRemoveFromEventList+0xac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11c      	bne.n	8003cf2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe ff17 	bl	8002af0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <xTaskRemoveFromEventList+0xb0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	4a16      	ldr	r2, [pc, #88]	; (8003d2c <xTaskRemoveFromEventList+0xb0>)
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <xTaskRemoveFromEventList+0xb4>)
 8003ce2:	441a      	add	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f7fe fea3 	bl	8002a36 <vListInsertEnd>
 8003cf0:	e005      	b.n	8003cfe <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	3318      	adds	r3, #24
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	480e      	ldr	r0, [pc, #56]	; (8003d34 <xTaskRemoveFromEventList+0xb8>)
 8003cfa:	f7fe fe9c 	bl	8002a36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <xTaskRemoveFromEventList+0xbc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d905      	bls.n	8003d18 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <xTaskRemoveFromEventList+0xc0>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e001      	b.n	8003d1c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003d1c:	697b      	ldr	r3, [r7, #20]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200001b8 	.word	0x200001b8
 8003d2c:	20000198 	.word	0x20000198
 8003d30:	20000094 	.word	0x20000094
 8003d34:	20000150 	.word	0x20000150
 8003d38:	20000090 	.word	0x20000090
 8003d3c:	200001a4 	.word	0x200001a4

08003d40 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <vTaskSetTimeOutState+0x22>
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e7fe      	b.n	8003d60 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d62:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <vTaskSetTimeOutState+0x40>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <vTaskSetTimeOutState+0x44>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	200001a8 	.word	0x200001a8
 8003d84:	20000194 	.word	0x20000194

08003d88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <xTaskCheckForTimeOut+0x24>
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	e7fe      	b.n	8003daa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <xTaskCheckForTimeOut+0x3e>
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	e7fe      	b.n	8003dc4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003dc6:	f000 fbab 	bl	8004520 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dca:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <xTaskCheckForTimeOut+0xb4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d102      	bne.n	8003de0 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e026      	b.n	8003e2e <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <xTaskCheckForTimeOut+0xb8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d007      	beq.n	8003dfc <xTaskCheckForTimeOut+0x74>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003df6:	2301      	movs	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e018      	b.n	8003e2e <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	1ad2      	subs	r2, r2, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d20e      	bcs.n	8003e2a <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1acb      	subs	r3, r1, r3
 8003e18:	441a      	add	r2, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff8e 	bl	8003d40 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e001      	b.n	8003e2e <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003e2e:	f000 fba5 	bl	800457c <vPortExitCritical>

	return xReturn;
 8003e32:	697b      	ldr	r3, [r7, #20]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000194 	.word	0x20000194
 8003e40:	200001a8 	.word	0x200001a8

08003e44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <vTaskMissedYield+0x14>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	200001a4 	.word	0x200001a4

08003e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e64:	f000 f852 	bl	8003f0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <prvIdleTask+0x28>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d9f9      	bls.n	8003e64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <prvIdleTask+0x2c>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e80:	e7f0      	b.n	8003e64 <prvIdleTask+0x8>
 8003e82:	bf00      	nop
 8003e84:	20000094 	.word	0x20000094
 8003e88:	e000ed04 	.word	0xe000ed04

08003e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	e00c      	b.n	8003eb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4a12      	ldr	r2, [pc, #72]	; (8003eec <prvInitialiseTaskLists+0x60>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fd98 	bl	80029dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d9ef      	bls.n	8003e98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <prvInitialiseTaskLists+0x64>)
 8003eba:	f7fe fd8f 	bl	80029dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ebe:	480d      	ldr	r0, [pc, #52]	; (8003ef4 <prvInitialiseTaskLists+0x68>)
 8003ec0:	f7fe fd8c 	bl	80029dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <prvInitialiseTaskLists+0x6c>)
 8003ec6:	f7fe fd89 	bl	80029dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003eca:	480c      	ldr	r0, [pc, #48]	; (8003efc <prvInitialiseTaskLists+0x70>)
 8003ecc:	f7fe fd86 	bl	80029dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ed0:	480b      	ldr	r0, [pc, #44]	; (8003f00 <prvInitialiseTaskLists+0x74>)
 8003ed2:	f7fe fd83 	bl	80029dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <prvInitialiseTaskLists+0x78>)
 8003ed8:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <prvInitialiseTaskLists+0x64>)
 8003eda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvInitialiseTaskLists+0x7c>)
 8003ede:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <prvInitialiseTaskLists+0x68>)
 8003ee0:	601a      	str	r2, [r3, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000094 	.word	0x20000094
 8003ef0:	20000120 	.word	0x20000120
 8003ef4:	20000134 	.word	0x20000134
 8003ef8:	20000150 	.word	0x20000150
 8003efc:	20000164 	.word	0x20000164
 8003f00:	2000017c 	.word	0x2000017c
 8003f04:	20000148 	.word	0x20000148
 8003f08:	2000014c 	.word	0x2000014c

08003f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f12:	e028      	b.n	8003f66 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003f14:	f7ff fcce 	bl	80038b4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003f18:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <prvCheckTasksWaitingTermination+0x6c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8003f28:	f7ff fcd2 	bl	80038d0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d119      	bne.n	8003f66 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003f32:	f000 faf5 	bl	8004520 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <prvCheckTasksWaitingTermination+0x6c>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fdd4 	bl	8002af0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <prvCheckTasksWaitingTermination+0x70>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	4a0b      	ldr	r2, [pc, #44]	; (8003f7c <prvCheckTasksWaitingTermination+0x70>)
 8003f50:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <prvCheckTasksWaitingTermination+0x74>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <prvCheckTasksWaitingTermination+0x74>)
 8003f5a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8003f5c:	f000 fb0e 	bl	800457c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003f60:	6838      	ldr	r0, [r7, #0]
 8003f62:	f000 f80f 	bl	8003f84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f66:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <prvCheckTasksWaitingTermination+0x74>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1d2      	bne.n	8003f14 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000164 	.word	0x20000164
 8003f7c:	20000190 	.word	0x20000190
 8003f80:	20000178 	.word	0x20000178

08003f84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fc97 	bl	80048c4 <vPortFree>
			vPortFree( pxTCB );
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fc94 	bl	80048c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <prvResetNextTaskUnblockTime+0x44>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <prvResetNextTaskUnblockTime+0x14>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <prvResetNextTaskUnblockTime+0x16>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <prvResetNextTaskUnblockTime+0x48>)
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fc6:	e008      	b.n	8003fda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <prvResetNextTaskUnblockTime+0x44>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4a05      	ldr	r2, [pc, #20]	; (8003fec <prvResetNextTaskUnblockTime+0x48>)
 8003fd8:	6013      	str	r3, [r2, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000148 	.word	0x20000148
 8003fec:	200001b0 	.word	0x200001b0

08003ff0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <xTaskGetSchedulerState+0x34>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d102      	bne.n	8004004 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ffe:	2301      	movs	r3, #1
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	e008      	b.n	8004016 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004004:	4b08      	ldr	r3, [pc, #32]	; (8004028 <xTaskGetSchedulerState+0x38>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800400c:	2302      	movs	r3, #2
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	e001      	b.n	8004016 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004016:	687b      	ldr	r3, [r7, #4]
	}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	2000019c 	.word	0x2000019c
 8004028:	200001b8 	.word	0x200001b8

0800402c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d062      	beq.n	8004104 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004042:	4b32      	ldr	r3, [pc, #200]	; (800410c <vTaskPriorityInherit+0xe0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	429a      	cmp	r2, r3
 800404a:	d25b      	bcs.n	8004104 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	db06      	blt.n	8004062 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004054:	4b2d      	ldr	r3, [pc, #180]	; (800410c <vTaskPriorityInherit+0xe0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f1c3 0207 	rsb	r2, r3, #7
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6959      	ldr	r1, [r3, #20]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4a27      	ldr	r2, [pc, #156]	; (8004110 <vTaskPriorityInherit+0xe4>)
 8004074:	4413      	add	r3, r2
 8004076:	4299      	cmp	r1, r3
 8004078:	d101      	bne.n	800407e <vTaskPriorityInherit+0x52>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <vTaskPriorityInherit+0x54>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d03a      	beq.n	80040fa <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3304      	adds	r3, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fd31 	bl	8002af0 <uxListRemove>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d115      	bne.n	80040c0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	491d      	ldr	r1, [pc, #116]	; (8004110 <vTaskPriorityInherit+0xe4>)
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <vTaskPriorityInherit+0x94>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	2201      	movs	r2, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43da      	mvns	r2, r3
 80040b6:	4b17      	ldr	r3, [pc, #92]	; (8004114 <vTaskPriorityInherit+0xe8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4013      	ands	r3, r2
 80040bc:	4a15      	ldr	r2, [pc, #84]	; (8004114 <vTaskPriorityInherit+0xe8>)
 80040be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040c0:	4b12      	ldr	r3, [pc, #72]	; (800410c <vTaskPriorityInherit+0xe0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	2201      	movs	r2, #1
 80040d0:	409a      	lsls	r2, r3
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <vTaskPriorityInherit+0xe8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <vTaskPriorityInherit+0xe8>)
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4a09      	ldr	r2, [pc, #36]	; (8004110 <vTaskPriorityInherit+0xe4>)
 80040ea:	441a      	add	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3304      	adds	r3, #4
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f7fe fc9f 	bl	8002a36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040f8:	e004      	b.n	8004104 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040fa:	4b04      	ldr	r3, [pc, #16]	; (800410c <vTaskPriorityInherit+0xe0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20000090 	.word	0x20000090
 8004110:	20000094 	.word	0x20000094
 8004114:	20000198 	.word	0x20000198

08004118 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d06c      	beq.n	8004208 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800412e:	4b39      	ldr	r3, [pc, #228]	; (8004214 <xTaskPriorityDisinherit+0xfc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	429a      	cmp	r2, r3
 8004136:	d009      	beq.n	800414c <xTaskPriorityDisinherit+0x34>
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e7fe      	b.n	800414a <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <xTaskPriorityDisinherit+0x50>
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	e7fe      	b.n	8004166 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416c:	1e5a      	subs	r2, r3, #1
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	429a      	cmp	r2, r3
 800417c:	d044      	beq.n	8004208 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004182:	2b00      	cmp	r3, #0
 8004184:	d140      	bne.n	8004208 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	3304      	adds	r3, #4
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe fcb0 	bl	8002af0 <uxListRemove>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d115      	bne.n	80041c2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	491f      	ldr	r1, [pc, #124]	; (8004218 <xTaskPriorityDisinherit+0x100>)
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <xTaskPriorityDisinherit+0xaa>
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	2201      	movs	r2, #1
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43da      	mvns	r2, r3
 80041b8:	4b18      	ldr	r3, [pc, #96]	; (800421c <xTaskPriorityDisinherit+0x104>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4013      	ands	r3, r2
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <xTaskPriorityDisinherit+0x104>)
 80041c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	f1c3 0207 	rsb	r2, r3, #7
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	2201      	movs	r2, #1
 80041dc:	409a      	lsls	r2, r3
 80041de:	4b0f      	ldr	r3, [pc, #60]	; (800421c <xTaskPriorityDisinherit+0x104>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	4a0d      	ldr	r2, [pc, #52]	; (800421c <xTaskPriorityDisinherit+0x104>)
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4a08      	ldr	r2, [pc, #32]	; (8004218 <xTaskPriorityDisinherit+0x100>)
 80041f6:	441a      	add	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	f7fe fc19 	bl	8002a36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004204:	2301      	movs	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004208:	697b      	ldr	r3, [r7, #20]
	}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000090 	.word	0x20000090
 8004218:	20000094 	.word	0x20000094
 800421c:	20000198 	.word	0x20000198

08004220 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004224:	4b07      	ldr	r3, [pc, #28]	; (8004244 <pvTaskIncrementMutexHeldCount+0x24>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <pvTaskIncrementMutexHeldCount+0x24>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004232:	3201      	adds	r2, #1
 8004234:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004236:	4b03      	ldr	r3, [pc, #12]	; (8004244 <pvTaskIncrementMutexHeldCount+0x24>)
 8004238:	681b      	ldr	r3, [r3, #0]
	}
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	20000090 	.word	0x20000090

08004248 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004252:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004258:	4b28      	ldr	r3, [pc, #160]	; (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3304      	adds	r3, #4
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fc46 	bl	8002af0 <uxListRemove>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800426a:	4b24      	ldr	r3, [pc, #144]	; (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	2201      	movs	r2, #1
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	4b21      	ldr	r3, [pc, #132]	; (8004300 <prvAddCurrentTaskToDelayedList+0xb8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4013      	ands	r3, r2
 800427e:	4a20      	ldr	r2, [pc, #128]	; (8004300 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004280:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d10a      	bne.n	80042a0 <prvAddCurrentTaskToDelayedList+0x58>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004290:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3304      	adds	r3, #4
 8004296:	4619      	mov	r1, r3
 8004298:	481a      	ldr	r0, [pc, #104]	; (8004304 <prvAddCurrentTaskToDelayedList+0xbc>)
 800429a:	f7fe fbcc 	bl	8002a36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800429e:	e026      	b.n	80042ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042a8:	4b14      	ldr	r3, [pc, #80]	; (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d209      	bcs.n	80042cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <prvAddCurrentTaskToDelayedList+0xc0>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f7fe fbda 	bl	8002a7e <vListInsert>
}
 80042ca:	e010      	b.n	80042ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <prvAddCurrentTaskToDelayedList+0xc4>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7fe fbd0 	bl	8002a7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d202      	bcs.n	80042ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042e8:	4a09      	ldr	r2, [pc, #36]	; (8004310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6013      	str	r3, [r2, #0]
}
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000194 	.word	0x20000194
 80042fc:	20000090 	.word	0x20000090
 8004300:	20000198 	.word	0x20000198
 8004304:	2000017c 	.word	0x2000017c
 8004308:	2000014c 	.word	0x2000014c
 800430c:	20000148 	.word	0x20000148
 8004310:	200001b0 	.word	0x200001b0

08004314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3b04      	subs	r3, #4
 8004324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800432c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b04      	subs	r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f023 0201 	bic.w	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3b04      	subs	r3, #4
 8004342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004344:	4a0c      	ldr	r2, [pc, #48]	; (8004378 <pxPortInitialiseStack+0x64>)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b14      	subs	r3, #20
 800434e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b04      	subs	r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f06f 0202 	mvn.w	r2, #2
 8004362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3b20      	subs	r3, #32
 8004368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	0800437d 	.word	0x0800437d

0800437c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <prvTaskExitError+0x38>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d009      	beq.n	80043a0 <prvTaskExitError+0x24>
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	e7fe      	b.n	800439e <prvTaskExitError+0x22>
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80043b2:	e7fe      	b.n	80043b2 <prvTaskExitError+0x36>
 80043b4:	20000008 	.word	0x20000008
	...

080043c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <pxCurrentTCBConst2>)
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	6808      	ldr	r0, [r1, #0]
 80043c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ca:	f380 8809 	msr	PSP, r0
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f380 8811 	msr	BASEPRI, r0
 80043da:	4770      	bx	lr
 80043dc:	f3af 8000 	nop.w

080043e0 <pxCurrentTCBConst2>:
 80043e0:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop

080043e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80043e8:	4806      	ldr	r0, [pc, #24]	; (8004404 <prvPortStartFirstTask+0x1c>)
 80043ea:	6800      	ldr	r0, [r0, #0]
 80043ec:	6800      	ldr	r0, [r0, #0]
 80043ee:	f380 8808 	msr	MSP, r0
 80043f2:	b662      	cpsie	i
 80043f4:	b661      	cpsie	f
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	df00      	svc	0
 8004400:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004402:	bf00      	nop
 8004404:	e000ed08 	.word	0xe000ed08

08004408 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <xPortStartScheduler+0xf4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a3b      	ldr	r2, [pc, #236]	; (8004500 <xPortStartScheduler+0xf8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d109      	bne.n	800442c <xPortStartScheduler+0x24>
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	e7fe      	b.n	800442a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800442c:	4b33      	ldr	r3, [pc, #204]	; (80044fc <xPortStartScheduler+0xf4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a34      	ldr	r2, [pc, #208]	; (8004504 <xPortStartScheduler+0xfc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d109      	bne.n	800444a <xPortStartScheduler+0x42>
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e7fe      	b.n	8004448 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800444a:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <xPortStartScheduler+0x100>)
 800444c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	22ff      	movs	r2, #255	; 0xff
 800445a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800446c:	b2da      	uxtb	r2, r3
 800446e:	4b27      	ldr	r3, [pc, #156]	; (800450c <xPortStartScheduler+0x104>)
 8004470:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <xPortStartScheduler+0x108>)
 8004474:	2207      	movs	r2, #7
 8004476:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004478:	e009      	b.n	800448e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800447a:	4b25      	ldr	r3, [pc, #148]	; (8004510 <xPortStartScheduler+0x108>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3b01      	subs	r3, #1
 8004480:	4a23      	ldr	r2, [pc, #140]	; (8004510 <xPortStartScheduler+0x108>)
 8004482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	b2db      	uxtb	r3, r3
 800448c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	2b80      	cmp	r3, #128	; 0x80
 8004498:	d0ef      	beq.n	800447a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <xPortStartScheduler+0x108>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <xPortStartScheduler+0x108>)
 80044a2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <xPortStartScheduler+0x108>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044ac:	4a18      	ldr	r2, [pc, #96]	; (8004510 <xPortStartScheduler+0x108>)
 80044ae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044b8:	4b16      	ldr	r3, [pc, #88]	; (8004514 <xPortStartScheduler+0x10c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <xPortStartScheduler+0x10c>)
 80044be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044c2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044c4:	4b13      	ldr	r3, [pc, #76]	; (8004514 <xPortStartScheduler+0x10c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a12      	ldr	r2, [pc, #72]	; (8004514 <xPortStartScheduler+0x10c>)
 80044ca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044ce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044d0:	f000 f8d2 	bl	8004678 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044d4:	4b10      	ldr	r3, [pc, #64]	; (8004518 <xPortStartScheduler+0x110>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044da:	f000 f8e9 	bl	80046b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <xPortStartScheduler+0x114>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a0e      	ldr	r2, [pc, #56]	; (800451c <xPortStartScheduler+0x114>)
 80044e4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044e8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044ea:	f7ff ff7d 	bl	80043e8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80044ee:	f7ff ff45 	bl	800437c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	e000ed00 	.word	0xe000ed00
 8004500:	410fc271 	.word	0x410fc271
 8004504:	410fc270 	.word	0x410fc270
 8004508:	e000e400 	.word	0xe000e400
 800450c:	200001bc 	.word	0x200001bc
 8004510:	200001c0 	.word	0x200001c0
 8004514:	e000ed20 	.word	0xe000ed20
 8004518:	20000008 	.word	0x20000008
 800451c:	e000ef34 	.word	0xe000ef34

08004520 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <vPortEnterCritical+0x54>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <vPortEnterCritical+0x54>)
 8004540:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <vPortEnterCritical+0x54>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d10e      	bne.n	8004568 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <vPortEnterCritical+0x58>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <vPortEnterCritical+0x48>
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	e7fe      	b.n	8004566 <vPortEnterCritical+0x46>
	}
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	20000008 	.word	0x20000008
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <vPortExitCritical+0x4c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <vPortExitCritical+0x22>
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	e7fe      	b.n	800459c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <vPortExitCritical+0x4c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <vPortExitCritical+0x4c>)
 80045a6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <vPortExitCritical+0x4c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <vPortExitCritical+0x3e>
 80045b0:	2300      	movs	r3, #0
 80045b2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000008 	.word	0x20000008
 80045cc:	00000000 	.word	0x00000000

080045d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045d0:	f3ef 8009 	mrs	r0, PSP
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <pxCurrentTCBConst>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f01e 0f10 	tst.w	lr, #16
 80045e0:	bf08      	it	eq
 80045e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ea:	6010      	str	r0, [r2, #0]
 80045ec:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80045f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045f4:	f380 8811 	msr	BASEPRI, r0
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f7ff fabe 	bl	8003b80 <vTaskSwitchContext>
 8004604:	f04f 0000 	mov.w	r0, #0
 8004608:	f380 8811 	msr	BASEPRI, r0
 800460c:	bc08      	pop	{r3}
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	6808      	ldr	r0, [r1, #0]
 8004612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004616:	f01e 0f10 	tst.w	lr, #16
 800461a:	bf08      	it	eq
 800461c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004620:	f380 8809 	msr	PSP, r0
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst>:
 8004630:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004650:	f7ff f9da 	bl	8003a08 <xTaskIncrementTick>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <xPortSysTickHandler+0x3c>)
 800465c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	2300      	movs	r3, #0
 8004664:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <vPortSetupTimerInterrupt+0x28>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <vPortSetupTimerInterrupt+0x2c>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	099b      	lsrs	r3, r3, #6
 8004688:	4a07      	ldr	r2, [pc, #28]	; (80046a8 <vPortSetupTimerInterrupt+0x30>)
 800468a:	3b01      	subs	r3, #1
 800468c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <vPortSetupTimerInterrupt+0x34>)
 8004690:	2207      	movs	r2, #7
 8004692:	601a      	str	r2, [r3, #0]
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	2000000c 	.word	0x2000000c
 80046a4:	10624dd3 	.word	0x10624dd3
 80046a8:	e000e014 	.word	0xe000e014
 80046ac:	e000e010 	.word	0xe000e010

080046b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046c0 <vPortEnableVFP+0x10>
 80046b4:	6801      	ldr	r1, [r0, #0]
 80046b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046ba:	6001      	str	r1, [r0, #0]
 80046bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046be:	bf00      	nop
 80046c0:	e000ed88 	.word	0xe000ed88

080046c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80046ca:	f3ef 8305 	mrs	r3, IPSR
 80046ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b0f      	cmp	r3, #15
 80046d4:	d913      	bls.n	80046fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046d6:	4a16      	ldr	r2, [pc, #88]	; (8004730 <vPortValidateInterruptPriority+0x6c>)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046e0:	4b14      	ldr	r3, [pc, #80]	; (8004734 <vPortValidateInterruptPriority+0x70>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	7afa      	ldrb	r2, [r7, #11]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d209      	bcs.n	80046fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	e7fe      	b.n	80046fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046fe:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <vPortValidateInterruptPriority+0x74>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <vPortValidateInterruptPriority+0x78>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d909      	bls.n	8004722 <vPortValidateInterruptPriority+0x5e>
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	e7fe      	b.n	8004720 <vPortValidateInterruptPriority+0x5c>
	}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000e3f0 	.word	0xe000e3f0
 8004734:	200001bc 	.word	0x200001bc
 8004738:	e000ed0c 	.word	0xe000ed0c
 800473c:	200001c0 	.word	0x200001c0

08004740 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	; 0x28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800474c:	f7ff f8b2 	bl	80038b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004750:	4b57      	ldr	r3, [pc, #348]	; (80048b0 <pvPortMalloc+0x170>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004758:	f000 f90c 	bl	8004974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800475c:	4b55      	ldr	r3, [pc, #340]	; (80048b4 <pvPortMalloc+0x174>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	f040 808c 	bne.w	8004882 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01c      	beq.n	80047aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004770:	2208      	movs	r2, #8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	2b00      	cmp	r3, #0
 8004780:	d013      	beq.n	80047aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f023 0307 	bic.w	r3, r3, #7
 8004788:	3308      	adds	r3, #8
 800478a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <pvPortMalloc+0x6a>
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e7fe      	b.n	80047a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d068      	beq.n	8004882 <pvPortMalloc+0x142>
 80047b0:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <pvPortMalloc+0x178>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d863      	bhi.n	8004882 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047ba:	4b40      	ldr	r3, [pc, #256]	; (80048bc <pvPortMalloc+0x17c>)
 80047bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047be:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <pvPortMalloc+0x17c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047c4:	e004      	b.n	80047d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d903      	bls.n	80047e2 <pvPortMalloc+0xa2>
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f1      	bne.n	80047c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047e2:	4b33      	ldr	r3, [pc, #204]	; (80048b0 <pvPortMalloc+0x170>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d04a      	beq.n	8004882 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2208      	movs	r2, #8
 80047f2:	4413      	add	r3, r2
 80047f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	1ad2      	subs	r2, r2, r3
 8004806:	2308      	movs	r3, #8
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	429a      	cmp	r2, r3
 800480c:	d91e      	bls.n	800484c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800480e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4413      	add	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <pvPortMalloc+0xf4>
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e7fe      	b.n	8004832 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	1ad2      	subs	r2, r2, r3
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004846:	69b8      	ldr	r0, [r7, #24]
 8004848:	f000 f8f6 	bl	8004a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800484c:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <pvPortMalloc+0x178>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <pvPortMalloc+0x178>)
 8004858:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <pvPortMalloc+0x178>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <pvPortMalloc+0x180>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d203      	bcs.n	800486e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <pvPortMalloc+0x178>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <pvPortMalloc+0x180>)
 800486c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <pvPortMalloc+0x174>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	431a      	orrs	r2, r3
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004882:	f7ff f825 	bl	80038d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <pvPortMalloc+0x164>
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	e7fe      	b.n	80048a2 <pvPortMalloc+0x162>
	return pvReturn;
 80048a4:	69fb      	ldr	r3, [r7, #28]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3728      	adds	r7, #40	; 0x28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20001554 	.word	0x20001554
 80048b4:	20001560 	.word	0x20001560
 80048b8:	20001558 	.word	0x20001558
 80048bc:	2000154c 	.word	0x2000154c
 80048c0:	2000155c 	.word	0x2000155c

080048c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d046      	beq.n	8004964 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048d6:	2308      	movs	r3, #8
 80048d8:	425b      	negs	r3, r3
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4b20      	ldr	r3, [pc, #128]	; (800496c <vPortFree+0xa8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <vPortFree+0x42>
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e7fe      	b.n	8004904 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <vPortFree+0x5e>
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	e7fe      	b.n	8004920 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <vPortFree+0xa8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d019      	beq.n	8004964 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d115      	bne.n	8004964 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <vPortFree+0xa8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	43db      	mvns	r3, r3
 8004942:	401a      	ands	r2, r3
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004948:	f7fe ffb4 	bl	80038b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <vPortFree+0xac>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4413      	add	r3, r2
 8004956:	4a06      	ldr	r2, [pc, #24]	; (8004970 <vPortFree+0xac>)
 8004958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800495a:	6938      	ldr	r0, [r7, #16]
 800495c:	f000 f86c 	bl	8004a38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004960:	f7fe ffb6 	bl	80038d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004964:	bf00      	nop
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20001560 	.word	0x20001560
 8004970:	20001558 	.word	0x20001558

08004974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800497a:	f241 3388 	movw	r3, #5000	; 0x1388
 800497e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004980:	4b27      	ldr	r3, [pc, #156]	; (8004a20 <prvHeapInit+0xac>)
 8004982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00c      	beq.n	80049a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3307      	adds	r3, #7
 8004992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0307 	bic.w	r3, r3, #7
 800499a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <prvHeapInit+0xac>)
 80049a4:	4413      	add	r3, r2
 80049a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049ac:	4a1d      	ldr	r2, [pc, #116]	; (8004a24 <prvHeapInit+0xb0>)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <prvHeapInit+0xb0>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049c0:	2208      	movs	r2, #8
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <prvHeapInit+0xb4>)
 80049d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <prvHeapInit+0xb4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <prvHeapInit+0xb4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	1ad2      	subs	r2, r2, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <prvHeapInit+0xb4>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <prvHeapInit+0xb8>)
 8004a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <prvHeapInit+0xbc>)
 8004a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <prvHeapInit+0xc0>)
 8004a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a12:	601a      	str	r2, [r3, #0]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	200001c4 	.word	0x200001c4
 8004a24:	2000154c 	.word	0x2000154c
 8004a28:	20001554 	.word	0x20001554
 8004a2c:	2000155c 	.word	0x2000155c
 8004a30:	20001558 	.word	0x20001558
 8004a34:	20001560 	.word	0x20001560

08004a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a40:	4b28      	ldr	r3, [pc, #160]	; (8004ae4 <prvInsertBlockIntoFreeList+0xac>)
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e002      	b.n	8004a4c <prvInsertBlockIntoFreeList+0x14>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d8f7      	bhi.n	8004a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	4413      	add	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d108      	bne.n	8004a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	441a      	add	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	441a      	add	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d118      	bne.n	8004ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d00d      	beq.n	8004ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e008      	b.n	8004ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e003      	b.n	8004ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d002      	beq.n	8004ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	2000154c 	.word	0x2000154c
 8004ae8:	20001554 	.word	0x20001554

08004aec <__io_putchar>:

/* USER CODE BEGIN PFP */


//Reimplementa��o das fun��es para direcionar o printf para a UART2
int __io_putchar(int ch) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8004afa:	f107 010c 	add.w	r1, r7, #12
 8004afe:	230a      	movs	r3, #10
 8004b00:	2201      	movs	r2, #1
 8004b02:	4804      	ldr	r0, [pc, #16]	; (8004b14 <__io_putchar+0x28>)
 8004b04:	f7fd fb43 	bl	800218e <HAL_UART_Transmit>
	return ch;
 8004b08:	687b      	ldr	r3, [r7, #4]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20001624 	.word	0x20001624

08004b18 <_write>:

int _write(int file,char *ptr, int len){
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e009      	b.n	8004b3e <_write+0x26>
		__io_putchar(*ptr++);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	60ba      	str	r2, [r7, #8]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ffda 	bl	8004aec <__io_putchar>
	for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	dbf1      	blt.n	8004b2a <_write+0x12>
	}
	return len;
 8004b46:	687b      	ldr	r3, [r7, #4]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b50:	b5b0      	push	{r4, r5, r7, lr}
 8004b52:	b092      	sub	sp, #72	; 0x48
 8004b54:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b56:	f7fb fb93 	bl	8000280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b5a:	f000 f877 	bl	8004c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b5e:	f000 f925 	bl	8004dac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004b62:	f000 f8f3 	bl	8004d4c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8004b66:	f000 f8b3 	bl	8004cd0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init();
 8004b6a:	f000 fd03 	bl	8005574 <LCD_Init>

  LCD_Write_String(0, 0, "Inicio do programa");
 8004b6e:	4a2b      	ldr	r2, [pc, #172]	; (8004c1c <main+0xcc>)
 8004b70:	2100      	movs	r1, #0
 8004b72:	2000      	movs	r0, #0
 8004b74:	f000 fd86 	bl	8005684 <LCD_Write_String>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexButtons */
  osMutexDef(MutexButtons);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	647b      	str	r3, [r7, #68]	; 0x44
  MutexButtonsHandle = osMutexCreate(osMutex(MutexButtons));
 8004b7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fd fe98 	bl	80028b6 <osMutexCreate>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <main+0xd0>)
 8004b8a:	601a      	str	r2, [r3, #0]

  /* definition and creation of MutexTimer */
  osMutexDef(MutexTimer);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	643b      	str	r3, [r7, #64]	; 0x40
  MutexTimerHandle = osMutexCreate(osMutex(MutexTimer));
 8004b90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fd fe8e 	bl	80028b6 <osMutexCreate>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <main+0xd4>)
 8004b9e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 256);
 8004ba0:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <main+0xd8>)
 8004ba2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004ba6:	461d      	mov	r5, r3
 8004ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	6023      	str	r3, [r4, #0]
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8004bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fd fe42 	bl	8002840 <osThreadCreate>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <main+0xdc>)
 8004bc0:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask02, osPriorityRealtime, 0, 256);
 8004bc2:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <main+0xe0>)
 8004bc4:	f107 0418 	add.w	r4, r7, #24
 8004bc8:	461d      	mov	r5, r3
 8004bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bce:	682b      	ldr	r3, [r5, #0]
 8004bd0:	6023      	str	r3, [r4, #0]
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8004bd2:	f107 0318 	add.w	r3, r7, #24
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fd fe31 	bl	8002840 <osThreadCreate>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <main+0xe4>)
 8004be2:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, StartTask03, osPriorityIdle, 0, 256);
 8004be4:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <main+0xe8>)
 8004be6:	1d3c      	adds	r4, r7, #4
 8004be8:	461d      	mov	r5, r3
 8004bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bee:	682b      	ldr	r3, [r5, #0]
 8004bf0:	6023      	str	r3, [r4, #0]
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8004bf2:	1d3b      	adds	r3, r7, #4
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fd fe22 	bl	8002840 <osThreadCreate>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <main+0xec>)
 8004c00:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  printf("Program Ready");
 8004c02:	480f      	ldr	r0, [pc, #60]	; (8004c40 <main+0xf0>)
 8004c04:	f000 fe1e 	bl	8005844 <iprintf>
  HAL_UART_Transmit(&huart2, "inicio", 6, 1000);
 8004c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c0c:	2206      	movs	r2, #6
 8004c0e:	490d      	ldr	r1, [pc, #52]	; (8004c44 <main+0xf4>)
 8004c10:	480d      	ldr	r0, [pc, #52]	; (8004c48 <main+0xf8>)
 8004c12:	f7fd fabc 	bl	800218e <HAL_UART_Transmit>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004c16:	f7fd fe0c 	bl	8002832 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004c1a:	e7fe      	b.n	8004c1a <main+0xca>
 8004c1c:	080069a0 	.word	0x080069a0
 8004c20:	200015b0 	.word	0x200015b0
 8004c24:	200015b4 	.word	0x200015b4
 8004c28:	080069d4 	.word	0x080069d4
 8004c2c:	200015ac 	.word	0x200015ac
 8004c30:	080069f0 	.word	0x080069f0
 8004c34:	200015bc 	.word	0x200015bc
 8004c38:	08006a0c 	.word	0x08006a0c
 8004c3c:	200015b8 	.word	0x200015b8
 8004c40:	080069b4 	.word	0x080069b4
 8004c44:	080069c4 	.word	0x080069c4
 8004c48:	20001624 	.word	0x20001624

08004c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b090      	sub	sp, #64	; 0x40
 8004c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c52:	f107 0318 	add.w	r3, r7, #24
 8004c56:	2228      	movs	r2, #40	; 0x28
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fde9 	bl	8005832 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c60:	1d3b      	adds	r3, r7, #4
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c72:	2301      	movs	r3, #1
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c76:	2310      	movs	r3, #16
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004c82:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c88:	f107 0318 	add.w	r3, r7, #24
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fb fe0b 	bl	80008a8 <HAL_RCC_OscConfig>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8004c98:	f000 faac 	bl	80051f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c9c:	230f      	movs	r3, #15
 8004c9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004cb2:	1d3b      	adds	r3, r7, #4
 8004cb4:	2102      	movs	r1, #2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fc fce4 	bl	8001684 <HAL_RCC_ClockConfig>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8004cc2:	f000 fa97 	bl	80051f4 <Error_Handler>
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	3740      	adds	r7, #64	; 0x40
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004cd4:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <MX_SPI1_Init+0x78>)
 8004cd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004cda:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ce8:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004cee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cf0:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004cf6:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004cfc:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d06:	2238      	movs	r2, #56	; 0x38
 8004d08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d1e:	2207      	movs	r2, #7
 8004d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d2e:	4805      	ldr	r0, [pc, #20]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d30:	f7fc fede 	bl	8001af0 <HAL_SPI_Init>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004d3a:	f000 fa5b 	bl	80051f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	200015c0 	.word	0x200015c0
 8004d48:	40013000 	.word	0x40013000

08004d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d50:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d52:	4a15      	ldr	r2, [pc, #84]	; (8004da8 <MX_USART2_UART_Init+0x5c>)
 8004d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004d56:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d58:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8004d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d5e:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d70:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d72:	220c      	movs	r2, #12
 8004d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d8e:	4805      	ldr	r0, [pc, #20]	; (8004da4 <MX_USART2_UART_Init+0x58>)
 8004d90:	f7fd f9ac 	bl	80020ec <HAL_UART_Init>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004d9a:	f000 fa2b 	bl	80051f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20001624 	.word	0x20001624
 8004da8:	40004400 	.word	0x40004400

08004dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db2:	f107 0314 	add.w	r3, r7, #20
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	609a      	str	r2, [r3, #8]
 8004dbe:	60da      	str	r2, [r3, #12]
 8004dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dc2:	4b53      	ldr	r3, [pc, #332]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	4a52      	ldr	r2, [pc, #328]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dcc:	6153      	str	r3, [r2, #20]
 8004dce:	4b50      	ldr	r3, [pc, #320]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004dda:	4b4d      	ldr	r3, [pc, #308]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	4a4c      	ldr	r2, [pc, #304]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004de4:	6153      	str	r3, [r2, #20]
 8004de6:	4b4a      	ldr	r3, [pc, #296]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df2:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	4a46      	ldr	r2, [pc, #280]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfc:	6153      	str	r3, [r2, #20]
 8004dfe:	4b44      	ldr	r3, [pc, #272]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e0a:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4a40      	ldr	r2, [pc, #256]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e14:	6153      	str	r3, [r2, #20]
 8004e16:	4b3e      	ldr	r3, [pc, #248]	; (8004f10 <MX_GPIO_Init+0x164>)
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e1e:	607b      	str	r3, [r7, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004e22:	2200      	movs	r2, #0
 8004e24:	2120      	movs	r1, #32
 8004e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e2a:	f7fb fd25 	bl	8000878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e34:	4837      	ldr	r0, [pc, #220]	; (8004f14 <MX_GPIO_Init+0x168>)
 8004e36:	f7fb fd1f 	bl	8000878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CE_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004e40:	4835      	ldr	r0, [pc, #212]	; (8004f18 <MX_GPIO_Init+0x16c>)
 8004e42:	f7fb fd19 	bl	8000878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e4c:	4b33      	ldr	r3, [pc, #204]	; (8004f1c <MX_GPIO_Init+0x170>)
 8004e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004e54:	f107 0314 	add.w	r3, r7, #20
 8004e58:	4619      	mov	r1, r3
 8004e5a:	482f      	ldr	r0, [pc, #188]	; (8004f18 <MX_GPIO_Init+0x16c>)
 8004e5c:	f7fb fb7e 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004e60:	2320      	movs	r3, #32
 8004e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e64:	2301      	movs	r3, #1
 8004e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004e70:	f107 0314 	add.w	r3, r7, #20
 8004e74:	4619      	mov	r1, r3
 8004e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e7a:	f7fb fb6f 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : B3_Pin B1C12_Pin */
  GPIO_InitStruct.Pin = B3_Pin|B1C12_Pin;
 8004e7e:	f241 0310 	movw	r3, #4112	; 0x1010
 8004e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e8c:	f107 0314 	add.w	r3, r7, #20
 8004e90:	4619      	mov	r1, r3
 8004e92:	4821      	ldr	r0, [pc, #132]	; (8004f18 <MX_GPIO_Init+0x16c>)
 8004e94:	f7fb fb62 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8004e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8004eaa:	f107 0314 	add.w	r3, r7, #20
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4818      	ldr	r0, [pc, #96]	; (8004f14 <MX_GPIO_Init+0x168>)
 8004eb2:	f7fb fb53 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8004eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8004ec4:	f107 0314 	add.w	r3, r7, #20
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ece:	f7fb fb45 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CE_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_DC_Pin;
 8004ed2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	4619      	mov	r1, r3
 8004eea:	480b      	ldr	r0, [pc, #44]	; (8004f18 <MX_GPIO_Init+0x16c>)
 8004eec:	f7fb fb36 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pin : B4_Pin */
  GPIO_InitStruct.Pin = B4_Pin;
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B4_GPIO_Port, &GPIO_InitStruct);
 8004efc:	f107 0314 	add.w	r3, r7, #20
 8004f00:	4619      	mov	r1, r3
 8004f02:	4804      	ldr	r0, [pc, #16]	; (8004f14 <MX_GPIO_Init+0x168>)
 8004f04:	f7fb fb2a 	bl	800055c <HAL_GPIO_Init>

}
 8004f08:	bf00      	nop
 8004f0a:	3728      	adds	r7, #40	; 0x28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000
 8004f14:	48000400 	.word	0x48000400
 8004f18:	48000800 	.word	0x48000800
 8004f1c:	10210000 	.word	0x10210000

08004f20 <StartTask1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int leitura = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(MutexButtonsHandle,1000);
 8004f2c:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <StartTask1+0xa8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fd fccb 	bl	80028d0 <osMutexWait>
	  leitura =buttonTest;
 8004f3a:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <StartTask1+0xac>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
	  osMutexRelease(MutexButtonsHandle);
 8004f40:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <StartTask1+0xa8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fd fd13 	bl	8002970 <osMutexRelease>

	  if(leitura == 0) {
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d136      	bne.n	8004fbe <StartTask1+0x9e>
		  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) {
 8004f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f54:	481e      	ldr	r0, [pc, #120]	; (8004fd0 <StartTask1+0xb0>)
 8004f56:	f7fb fc77 	bl	8000848 <HAL_GPIO_ReadPin>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <StartTask1+0x44>
			  leitura = 1;
 8004f60:	2301      	movs	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
		  }

		  if(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == 0) {
 8004f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f6c:	f7fb fc6c 	bl	8000848 <HAL_GPIO_ReadPin>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <StartTask1+0x5a>
			  leitura = 2;
 8004f76:	2302      	movs	r3, #2
 8004f78:	60fb      	str	r3, [r7, #12]
		  }

		  if(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) == 0) {
 8004f7a:	2110      	movs	r1, #16
 8004f7c:	4814      	ldr	r0, [pc, #80]	; (8004fd0 <StartTask1+0xb0>)
 8004f7e:	f7fb fc63 	bl	8000848 <HAL_GPIO_ReadPin>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <StartTask1+0x6c>
			  leitura = 3;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	60fb      	str	r3, [r7, #12]
		  }

		  if(HAL_GPIO_ReadPin(B4_GPIO_Port, B4_Pin) == 0) {
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	4811      	ldr	r0, [pc, #68]	; (8004fd4 <StartTask1+0xb4>)
 8004f90:	f7fb fc5a 	bl	8000848 <HAL_GPIO_ReadPin>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <StartTask1+0x7e>
			  leitura = 4;
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	60fb      	str	r3, [r7, #12]
		  }

		  osMutexWait(MutexButtonsHandle,1000);
 8004f9e:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <StartTask1+0xa8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fd fc92 	bl	80028d0 <osMutexWait>
		  buttonTest = leitura;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <StartTask1+0xac>)
 8004fb2:	701a      	strb	r2, [r3, #0]
		  osMutexRelease(MutexButtonsHandle);
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <StartTask1+0xa8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fd fcd9 	bl	8002970 <osMutexRelease>
	  }
	  osDelay(10);
 8004fbe:	200a      	movs	r0, #10
 8004fc0:	f7fd fc65 	bl	800288e <osDelay>
	  osMutexWait(MutexButtonsHandle,1000);
 8004fc4:	e7b2      	b.n	8004f2c <StartTask1+0xc>
 8004fc6:	bf00      	nop
 8004fc8:	200015b0 	.word	0x200015b0
 8004fcc:	20001564 	.word	0x20001564
 8004fd0:	48000800 	.word	0x48000800
 8004fd4:	48000400 	.word	0x48000400

08004fd8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b092      	sub	sp, #72	; 0x48
 8004fdc:	af04      	add	r7, sp, #16
 8004fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  int second = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
  int minute = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	633b      	str	r3, [r7, #48]	; 0x30
  int hour = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  int working = 1;
 8004fec:	2301      	movs	r3, #1
 8004fee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t lapse1[12] = "";
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	f107 031c 	add.w	r3, r7, #28
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	605a      	str	r2, [r3, #4]
  uint8_t lapse2[12] = "";
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	f107 0310 	add.w	r3, r7, #16
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	605a      	str	r2, [r3, #4]
  int localButtonClicked = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(MutexButtonsHandle, 1000);
 8005010:	4b54      	ldr	r3, [pc, #336]	; (8005164 <StartTask02+0x18c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005018:	4618      	mov	r0, r3
 800501a:	f7fd fc59 	bl	80028d0 <osMutexWait>
	  localButtonClicked =buttonTest;
 800501e:	4b52      	ldr	r3, [pc, #328]	; (8005168 <StartTask02+0x190>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
	  osMutexRelease(MutexButtonsHandle);
 8005024:	4b4f      	ldr	r3, [pc, #316]	; (8005164 <StartTask02+0x18c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fd fca1 	bl	8002970 <osMutexRelease>

	  switch (localButtonClicked) {
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	3b01      	subs	r3, #1
 8005032:	2b03      	cmp	r3, #3
 8005034:	d84a      	bhi.n	80050cc <StartTask02+0xf4>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <StartTask02+0x64>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	0800504d 	.word	0x0800504d
 8005040:	08005087 	.word	0x08005087
 8005044:	0800509d 	.word	0x0800509d
 8005048:	080050b5 	.word	0x080050b5
	  case 1:
		  second = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	637b      	str	r3, [r7, #52]	; 0x34
		  minute = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	633b      	str	r3, [r7, #48]	; 0x30
		  hour = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
		  sprintf(lapse1, "00:00:00\r\n");
 8005058:	f107 0318 	add.w	r3, r7, #24
 800505c:	4a43      	ldr	r2, [pc, #268]	; (800516c <StartTask02+0x194>)
 800505e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005060:	c303      	stmia	r3!, {r0, r1}
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	3302      	adds	r3, #2
 8005066:	0c12      	lsrs	r2, r2, #16
 8005068:	701a      	strb	r2, [r3, #0]
		  sprintf(lapse2, "00:00:00\r\n");
 800506a:	f107 030c 	add.w	r3, r7, #12
 800506e:	4a3f      	ldr	r2, [pc, #252]	; (800516c <StartTask02+0x194>)
 8005070:	ca07      	ldmia	r2, {r0, r1, r2}
 8005072:	c303      	stmia	r3!, {r0, r1}
 8005074:	801a      	strh	r2, [r3, #0]
 8005076:	3302      	adds	r3, #2
 8005078:	0c12      	lsrs	r2, r2, #16
 800507a:	701a      	strb	r2, [r3, #0]
		  working = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28
		  localButtonClicked = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
		  break;
 8005084:	e05c      	b.n	8005140 <StartTask02+0x168>
	  case 2:
		  if(working == 1)
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	2b01      	cmp	r3, #1
 800508a:	d102      	bne.n	8005092 <StartTask02+0xba>
			  working = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005090:	e001      	b.n	8005096 <StartTask02+0xbe>
		  else
			  working = 1;
 8005092:	2301      	movs	r3, #1
 8005094:	62bb      	str	r3, [r7, #40]	; 0x28
		  localButtonClicked = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
		  break;
 800509a:	e051      	b.n	8005140 <StartTask02+0x168>
	  case 3:
		  sprintf(lapse1, "%d:%d:%d", hour, minute, second);
 800509c:	f107 0018 	add.w	r0, r7, #24
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050a8:	4931      	ldr	r1, [pc, #196]	; (8005170 <StartTask02+0x198>)
 80050aa:	f000 fbe3 	bl	8005874 <siprintf>
		  localButtonClicked = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
		  break;
 80050b2:	e045      	b.n	8005140 <StartTask02+0x168>
	  case 4:
		  sprintf(lapse2, "%d:%d:%d", hour, minute, second);
 80050b4:	f107 000c 	add.w	r0, r7, #12
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c0:	492b      	ldr	r1, [pc, #172]	; (8005170 <StartTask02+0x198>)
 80050c2:	f000 fbd7 	bl	8005874 <siprintf>
		  localButtonClicked = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
		  break;
 80050ca:	e039      	b.n	8005140 <StartTask02+0x168>
	  default:
	    if(working == 0)
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d035      	beq.n	800513e <StartTask02+0x166>
		  break;
		if(second == 59) {
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	2b3b      	cmp	r3, #59	; 0x3b
 80050d6:	d111      	bne.n	80050fc <StartTask02+0x124>
			second = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
			minute ++;
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	3301      	adds	r3, #1
 80050e0:	633b      	str	r3, [r7, #48]	; 0x30
			if(minute == 59) {
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2b3b      	cmp	r3, #59	; 0x3b
 80050e6:	d109      	bne.n	80050fc <StartTask02+0x124>
				  minute = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	633b      	str	r3, [r7, #48]	; 0x30
				  hour ++;
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	3301      	adds	r3, #1
 80050f0:	62fb      	str	r3, [r7, #44]	; 0x2c
				if(hour == 59) {
 80050f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f4:	2b3b      	cmp	r3, #59	; 0x3b
 80050f6:	d101      	bne.n	80050fc <StartTask02+0x124>
				  hour = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
			}
		}
		second ++;
 80050fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fe:	3301      	adds	r3, #1
 8005100:	637b      	str	r3, [r7, #52]	; 0x34

		osMutexWait(MutexTimerHandle, 1000);
 8005102:	4b1c      	ldr	r3, [pc, #112]	; (8005174 <StartTask02+0x19c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800510a:	4618      	mov	r0, r3
 800510c:	f7fd fbe0 	bl	80028d0 <osMutexWait>
		sprintf(timer, "%d:%d:%d\r\n%s\r\n%s", hour, minute, second, lapse1, lapse2);
 8005110:	f107 030c 	add.w	r3, r7, #12
 8005114:	9302      	str	r3, [sp, #8]
 8005116:	f107 0318 	add.w	r3, r7, #24
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005124:	4914      	ldr	r1, [pc, #80]	; (8005178 <StartTask02+0x1a0>)
 8005126:	4815      	ldr	r0, [pc, #84]	; (800517c <StartTask02+0x1a4>)
 8005128:	f000 fba4 	bl	8005874 <siprintf>
		osMutexRelease(MutexTimerHandle);
 800512c:	4b11      	ldr	r3, [pc, #68]	; (8005174 <StartTask02+0x19c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f7fd fc1d 	bl	8002970 <osMutexRelease>
		osDelay(10);
 8005136:	200a      	movs	r0, #10
 8005138:	f7fd fba9 	bl	800288e <osDelay>
		break;
 800513c:	e000      	b.n	8005140 <StartTask02+0x168>
		  break;
 800513e:	bf00      	nop
	  }

	  osMutexWait(MutexButtonsHandle, 1000);
 8005140:	4b08      	ldr	r3, [pc, #32]	; (8005164 <StartTask02+0x18c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005148:	4618      	mov	r0, r3
 800514a:	f7fd fbc1 	bl	80028d0 <osMutexWait>
	 buttonTest = localButtonClicked;
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	b2da      	uxtb	r2, r3
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <StartTask02+0x190>)
 8005154:	701a      	strb	r2, [r3, #0]
	  osMutexRelease(MutexButtonsHandle);
 8005156:	4b03      	ldr	r3, [pc, #12]	; (8005164 <StartTask02+0x18c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd fc08 	bl	8002970 <osMutexRelease>
	  osMutexWait(MutexButtonsHandle, 1000);
 8005160:	e756      	b.n	8005010 <StartTask02+0x38>
 8005162:	bf00      	nop
 8005164:	200015b0 	.word	0x200015b0
 8005168:	20001564 	.word	0x20001564
 800516c:	08006a20 	.word	0x08006a20
 8005170:	08006a2c 	.word	0x08006a2c
 8005174:	200015b4 	.word	0x200015b4
 8005178:	08006a38 	.word	0x08006a38
 800517c:	20001568 	.word	0x20001568

08005180 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {

	  osMutexWait(MutexButtonsHandle, 1000);
 8005188:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <StartTask03+0x60>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005190:	4618      	mov	r0, r3
 8005192:	f7fd fb9d 	bl	80028d0 <osMutexWait>
	  buttonTest = 1;
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <StartTask03+0x64>)
 8005198:	2201      	movs	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]
	  osMutexRelease(MutexButtonsHandle);
 800519c:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <StartTask03+0x60>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fd fbe5 	bl	8002970 <osMutexRelease>
	osMutexWait(MutexTimerHandle, 1000);
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <StartTask03+0x68>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fd fb8e 	bl	80028d0 <osMutexWait>
	HAL_UART_Transmit(&huart2, timer, strlen(timer), 1000);
 80051b4:	480d      	ldr	r0, [pc, #52]	; (80051ec <StartTask03+0x6c>)
 80051b6:	f7fb f80b 	bl	80001d0 <strlen>
 80051ba:	4603      	mov	r3, r0
 80051bc:	b29a      	uxth	r2, r3
 80051be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051c2:	490a      	ldr	r1, [pc, #40]	; (80051ec <StartTask03+0x6c>)
 80051c4:	480a      	ldr	r0, [pc, #40]	; (80051f0 <StartTask03+0x70>)
 80051c6:	f7fc ffe2 	bl	800218e <HAL_UART_Transmit>
	osMutexRelease(MutexTimerHandle);
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <StartTask03+0x68>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fd fbce 	bl	8002970 <osMutexRelease>


    osDelay(1000);
 80051d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051d8:	f7fd fb59 	bl	800288e <osDelay>
  {
 80051dc:	e7d4      	b.n	8005188 <StartTask03+0x8>
 80051de:	bf00      	nop
 80051e0:	200015b0 	.word	0x200015b0
 80051e4:	20001564 	.word	0x20001564
 80051e8:	200015b4 	.word	0x200015b4
 80051ec:	20001568 	.word	0x20001568
 80051f0:	20001624 	.word	0x20001624

080051f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800520a:	4b11      	ldr	r3, [pc, #68]	; (8005250 <HAL_MspInit+0x4c>)
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	4a10      	ldr	r2, [pc, #64]	; (8005250 <HAL_MspInit+0x4c>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	6193      	str	r3, [r2, #24]
 8005216:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <HAL_MspInit+0x4c>)
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_MspInit+0x4c>)
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <HAL_MspInit+0x4c>)
 8005228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522c:	61d3      	str	r3, [r2, #28]
 800522e:	4b08      	ldr	r3, [pc, #32]	; (8005250 <HAL_MspInit+0x4c>)
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800523a:	2200      	movs	r2, #0
 800523c:	210f      	movs	r1, #15
 800523e:	f06f 0001 	mvn.w	r0, #1
 8005242:	f7fb f962 	bl	800050a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40021000 	.word	0x40021000

08005254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08a      	sub	sp, #40	; 0x28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a25      	ldr	r2, [pc, #148]	; (8005308 <HAL_SPI_MspInit+0xb4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d144      	bne.n	8005300 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005276:	4b25      	ldr	r3, [pc, #148]	; (800530c <HAL_SPI_MspInit+0xb8>)
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	4a24      	ldr	r2, [pc, #144]	; (800530c <HAL_SPI_MspInit+0xb8>)
 800527c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005280:	6193      	str	r3, [r2, #24]
 8005282:	4b22      	ldr	r3, [pc, #136]	; (800530c <HAL_SPI_MspInit+0xb8>)
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800528e:	4b1f      	ldr	r3, [pc, #124]	; (800530c <HAL_SPI_MspInit+0xb8>)
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	4a1e      	ldr	r2, [pc, #120]	; (800530c <HAL_SPI_MspInit+0xb8>)
 8005294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005298:	6153      	str	r3, [r2, #20]
 800529a:	4b1c      	ldr	r3, [pc, #112]	; (800530c <HAL_SPI_MspInit+0xb8>)
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a6:	4b19      	ldr	r3, [pc, #100]	; (800530c <HAL_SPI_MspInit+0xb8>)
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	4a18      	ldr	r2, [pc, #96]	; (800530c <HAL_SPI_MspInit+0xb8>)
 80052ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052b0:	6153      	str	r3, [r2, #20]
 80052b2:	4b16      	ldr	r3, [pc, #88]	; (800530c <HAL_SPI_MspInit+0xb8>)
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80052be:	23c0      	movs	r3, #192	; 0xc0
 80052c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c2:	2302      	movs	r3, #2
 80052c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052ca:	2303      	movs	r3, #3
 80052cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052ce:	2305      	movs	r3, #5
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d2:	f107 0314 	add.w	r3, r7, #20
 80052d6:	4619      	mov	r1, r3
 80052d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052dc:	f7fb f93e 	bl	800055c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80052e0:	2308      	movs	r3, #8
 80052e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e4:	2302      	movs	r3, #2
 80052e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052ec:	2303      	movs	r3, #3
 80052ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052f0:	2305      	movs	r3, #5
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052f4:	f107 0314 	add.w	r3, r7, #20
 80052f8:	4619      	mov	r1, r3
 80052fa:	4805      	ldr	r0, [pc, #20]	; (8005310 <HAL_SPI_MspInit+0xbc>)
 80052fc:	f7fb f92e 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005300:	bf00      	nop
 8005302:	3728      	adds	r7, #40	; 0x28
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40013000 	.word	0x40013000
 800530c:	40021000 	.word	0x40021000
 8005310:	48000400 	.word	0x48000400

08005314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	; 0x28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800531c:	f107 0314 	add.w	r3, r7, #20
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	60da      	str	r2, [r3, #12]
 800532a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a17      	ldr	r2, [pc, #92]	; (8005390 <HAL_UART_MspInit+0x7c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d128      	bne.n	8005388 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <HAL_UART_MspInit+0x80>)
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	4a16      	ldr	r2, [pc, #88]	; (8005394 <HAL_UART_MspInit+0x80>)
 800533c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005340:	61d3      	str	r3, [r2, #28]
 8005342:	4b14      	ldr	r3, [pc, #80]	; (8005394 <HAL_UART_MspInit+0x80>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800534e:	4b11      	ldr	r3, [pc, #68]	; (8005394 <HAL_UART_MspInit+0x80>)
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	4a10      	ldr	r2, [pc, #64]	; (8005394 <HAL_UART_MspInit+0x80>)
 8005354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005358:	6153      	str	r3, [r2, #20]
 800535a:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <HAL_UART_MspInit+0x80>)
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005366:	230c      	movs	r3, #12
 8005368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536a:	2302      	movs	r3, #2
 800536c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005372:	2303      	movs	r3, #3
 8005374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005376:	2307      	movs	r3, #7
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800537a:	f107 0314 	add.w	r3, r7, #20
 800537e:	4619      	mov	r1, r3
 8005380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005384:	f7fb f8ea 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005388:	bf00      	nop
 800538a:	3728      	adds	r7, #40	; 0x28
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40004400 	.word	0x40004400
 8005394:	40021000 	.word	0x40021000

08005398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800539c:	bf00      	nop
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053a6:	b480      	push	{r7}
 80053a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053aa:	e7fe      	b.n	80053aa <HardFault_Handler+0x4>

080053ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053b0:	e7fe      	b.n	80053b0 <MemManage_Handler+0x4>

080053b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053b2:	b480      	push	{r7}
 80053b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053b6:	e7fe      	b.n	80053b6 <BusFault_Handler+0x4>

080053b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053bc:	e7fe      	b.n	80053bc <UsageFault_Handler+0x4>

080053be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053be:	b480      	push	{r7}
 80053c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053d0:	f7fa ff9c 	bl	800030c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80053d4:	f7fe fe0c 	bl	8003ff0 <xTaskGetSchedulerState>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d001      	beq.n	80053e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80053de:	f7ff f92b 	bl	8004638 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b086      	sub	sp, #24
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e00a      	b.n	800540e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80053f8:	f3af 8000 	nop.w
 80053fc:	4601      	mov	r1, r0
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	60ba      	str	r2, [r7, #8]
 8005404:	b2ca      	uxtb	r2, r1
 8005406:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	3301      	adds	r3, #1
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	dbf0      	blt.n	80053f8 <_read+0x12>
	}

return len;
 8005416:	687b      	ldr	r3, [r7, #4]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	return -1;
 8005428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005448:	605a      	str	r2, [r3, #4]
	return 0;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <_isatty>:

int _isatty(int file)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	return 1;
 8005460:	2301      	movs	r3, #1
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
	return 0;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <_sbrk+0x50>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <_sbrk+0x16>
		heap_end = &end;
 8005498:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <_sbrk+0x50>)
 800549a:	4a10      	ldr	r2, [pc, #64]	; (80054dc <_sbrk+0x54>)
 800549c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <_sbrk+0x50>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80054a4:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <_sbrk+0x50>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4413      	add	r3, r2
 80054ac:	466a      	mov	r2, sp
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d907      	bls.n	80054c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80054b2:	f000 f989 	bl	80057c8 <__errno>
 80054b6:	4602      	mov	r2, r0
 80054b8:	230c      	movs	r3, #12
 80054ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295
 80054c0:	e006      	b.n	80054d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <_sbrk+0x50>)
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4413      	add	r3, r2
 80054ca:	4a03      	ldr	r2, [pc, #12]	; (80054d8 <_sbrk+0x50>)
 80054cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80054ce:	68fb      	ldr	r3, [r7, #12]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	2000159c 	.word	0x2000159c
 80054dc:	20001698 	.word	0x20001698

080054e0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054e4:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <SystemInit+0x84>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <SystemInit+0x84>)
 80054ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80054f4:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <SystemInit+0x88>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <SystemInit+0x88>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005500:	4b19      	ldr	r3, [pc, #100]	; (8005568 <SystemInit+0x88>)
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	4918      	ldr	r1, [pc, #96]	; (8005568 <SystemInit+0x88>)
 8005506:	4b19      	ldr	r3, [pc, #100]	; (800556c <SystemInit+0x8c>)
 8005508:	4013      	ands	r3, r2
 800550a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800550c:	4b16      	ldr	r3, [pc, #88]	; (8005568 <SystemInit+0x88>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a15      	ldr	r2, [pc, #84]	; (8005568 <SystemInit+0x88>)
 8005512:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800551a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800551c:	4b12      	ldr	r3, [pc, #72]	; (8005568 <SystemInit+0x88>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a11      	ldr	r2, [pc, #68]	; (8005568 <SystemInit+0x88>)
 8005522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005526:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <SystemInit+0x88>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4a0e      	ldr	r2, [pc, #56]	; (8005568 <SystemInit+0x88>)
 800552e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005532:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <SystemInit+0x88>)
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	4a0b      	ldr	r2, [pc, #44]	; (8005568 <SystemInit+0x88>)
 800553a:	f023 030f 	bic.w	r3, r3, #15
 800553e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <SystemInit+0x88>)
 8005542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005544:	4908      	ldr	r1, [pc, #32]	; (8005568 <SystemInit+0x88>)
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <SystemInit+0x90>)
 8005548:	4013      	ands	r3, r2
 800554a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <SystemInit+0x88>)
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005552:	4b04      	ldr	r3, [pc, #16]	; (8005564 <SystemInit+0x84>)
 8005554:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005558:	609a      	str	r2, [r3, #8]
#endif
}
 800555a:	bf00      	nop
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	e000ed00 	.word	0xe000ed00
 8005568:	40021000 	.word	0x40021000
 800556c:	f87fc00c 	.word	0xf87fc00c
 8005570:	ff00fccc 	.word	0xff00fccc

08005574 <LCD_Init>:
uint8_t spiOK = 0U;

/**
 * Initialize LCD.
 */
void LCD_Init(void) {
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  LCD_Reset();
 8005578:	f000 f810 	bl	800559c <LCD_Reset>
  LCD_Write_Command(0x21);
 800557c:	2021      	movs	r0, #33	; 0x21
 800557e:	f000 f8a1 	bl	80056c4 <LCD_Write_Command>
  LCD_Write_Command(0xD0);
 8005582:	20d0      	movs	r0, #208	; 0xd0
 8005584:	f000 f89e 	bl	80056c4 <LCD_Write_Command>
  LCD_Write_Command(0x20);
 8005588:	2020      	movs	r0, #32
 800558a:	f000 f89b 	bl	80056c4 <LCD_Write_Command>
  LCD_Write_Command(0x0C);
 800558e:	200c      	movs	r0, #12
 8005590:	f000 f898 	bl	80056c4 <LCD_Write_Command>
  LCD_Clear();
 8005594:	f000 f832 	bl	80055fc <LCD_Clear>
}
 8005598:	bf00      	nop
 800559a:	bd80      	pop	{r7, pc}

0800559c <LCD_Reset>:

/**
 * Reset LCD.
 */
void LCD_Reset(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80055a0:	2200      	movs	r2, #0
 80055a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055a6:	4807      	ldr	r0, [pc, #28]	; (80055c4 <LCD_Reset+0x28>)
 80055a8:	f7fb f966 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80055ac:	2032      	movs	r0, #50	; 0x32
 80055ae:	f7fa fecd 	bl	800034c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80055b2:	2201      	movs	r2, #1
 80055b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055b8:	4802      	ldr	r0, [pc, #8]	; (80055c4 <LCD_Reset+0x28>)
 80055ba:	f7fb f95d 	bl	8000878 <HAL_GPIO_WritePin>
}
 80055be:	bf00      	nop
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	48000400 	.word	0x48000400

080055c8 <LCD_Set_Postion>:
/**
 * Set LCD cursor position.
 * @param PosX X Position
 * @param PosY Y Position
 */
void LCD_Set_Postion(uint8_t PosX, uint8_t PosY) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	460a      	mov	r2, r1
 80055d2:	71fb      	strb	r3, [r7, #7]
 80055d4:	4613      	mov	r3, r2
 80055d6:	71bb      	strb	r3, [r7, #6]
  LCD_Write_Command(0x40 | PosY);
 80055d8:	79bb      	ldrb	r3, [r7, #6]
 80055da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 f86f 	bl	80056c4 <LCD_Write_Command>
  LCD_Write_Command(0x80 | PosX);
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f868 	bl	80056c4 <LCD_Write_Command>
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <LCD_Clear>:

/**
 * Clear all contents on LCD.
 */
void LCD_Clear(void) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
  uint8_t t;
  uint8_t k;
  LCD_Set_Postion(0,0);
 8005602:	2100      	movs	r1, #0
 8005604:	2000      	movs	r0, #0
 8005606:	f7ff ffdf 	bl	80055c8 <LCD_Set_Postion>
  for(t=0;t<6;t++)
 800560a:	2300      	movs	r3, #0
 800560c:	71fb      	strb	r3, [r7, #7]
 800560e:	e00e      	b.n	800562e <LCD_Clear+0x32>
  {
    for(k=0;k<84;k++)
 8005610:	2300      	movs	r3, #0
 8005612:	71bb      	strb	r3, [r7, #6]
 8005614:	e005      	b.n	8005622 <LCD_Clear+0x26>
    {
      LCD_Write_Data(0x00);
 8005616:	2000      	movs	r0, #0
 8005618:	f000 f880 	bl	800571c <LCD_Write_Data>
    for(k=0;k<84;k++)
 800561c:	79bb      	ldrb	r3, [r7, #6]
 800561e:	3301      	adds	r3, #1
 8005620:	71bb      	strb	r3, [r7, #6]
 8005622:	79bb      	ldrb	r3, [r7, #6]
 8005624:	2b53      	cmp	r3, #83	; 0x53
 8005626:	d9f6      	bls.n	8005616 <LCD_Clear+0x1a>
  for(t=0;t<6;t++)
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	3301      	adds	r3, #1
 800562c:	71fb      	strb	r3, [r7, #7]
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	2b05      	cmp	r3, #5
 8005632:	d9ed      	bls.n	8005610 <LCD_Clear+0x14>
    }
  }
}
 8005634:	bf00      	nop
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <LCD_Write_Char>:

/**
 * Write a single char to LCD.
 * @param ch char to write.
 */
void LCD_Write_Char(uint8_t ch) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	3b20      	subs	r3, #32
 800564a:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++) LCD_Write_Data(font6x8[ch][line]);
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	e00f      	b.n	8005672 <LCD_Write_Char+0x36>
 8005652:	79fa      	ldrb	r2, [r7, #7]
 8005654:	7bf9      	ldrb	r1, [r7, #15]
 8005656:	480a      	ldr	r0, [pc, #40]	; (8005680 <LCD_Write_Char+0x44>)
 8005658:	4613      	mov	r3, r2
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	4413      	add	r3, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	4403      	add	r3, r0
 8005662:	440b      	add	r3, r1
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f000 f858 	bl	800571c <LCD_Write_Data>
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	3301      	adds	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b05      	cmp	r3, #5
 8005676:	d9ec      	bls.n	8005652 <LCD_Write_Char+0x16>
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	08006a84 	.word	0x08006a84

08005684 <LCD_Write_String>:
 * Write a string to LCD.
 * @param PosX X start point
 * @param PosY Y start point
 * @param str  string to write.
 */
void LCD_Write_String(uint8_t PosX, uint8_t PosY, char * str) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	603a      	str	r2, [r7, #0]
 800568e:	71fb      	strb	r3, [r7, #7]
 8005690:	460b      	mov	r3, r1
 8005692:	71bb      	strb	r3, [r7, #6]
  LCD_Set_Postion(PosX, PosY);
 8005694:	79ba      	ldrb	r2, [r7, #6]
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff ff94 	bl	80055c8 <LCD_Set_Postion>
  while(* str) {
 80056a0:	e007      	b.n	80056b2 <LCD_Write_String+0x2e>
    LCD_Write_Char(* str);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff ffc8 	bl	800563c <LCD_Write_Char>
    str ++;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	603b      	str	r3, [r7, #0]
  while(* str) {
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f3      	bne.n	80056a2 <LCD_Write_String+0x1e>
  }
}
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <LCD_Write_Command>:

/**
 * Write LCD command to SPI
 * @param cmd command to write.
 */
void LCD_Write_Command(uint8_t cmd) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 80056ce:	2200      	movs	r2, #0
 80056d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056d4:	480f      	ldr	r0, [pc, #60]	; (8005714 <LCD_Write_Command+0x50>)
 80056d6:	f7fb f8cf 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80056da:	2200      	movs	r2, #0
 80056dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056e0:	480c      	ldr	r0, [pc, #48]	; (8005714 <LCD_Write_Command+0x50>)
 80056e2:	f7fb f8c9 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &cmd, 0x01, 1000);
 80056e6:	1df9      	adds	r1, r7, #7
 80056e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056ec:	2201      	movs	r2, #1
 80056ee:	480a      	ldr	r0, [pc, #40]	; (8005718 <LCD_Write_Command+0x54>)
 80056f0:	f7fc fa88 	bl	8001c04 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 80056f4:	2201      	movs	r2, #1
 80056f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056fa:	4806      	ldr	r0, [pc, #24]	; (8005714 <LCD_Write_Command+0x50>)
 80056fc:	f7fb f8bc 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005700:	2201      	movs	r2, #1
 8005702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005706:	4803      	ldr	r0, [pc, #12]	; (8005714 <LCD_Write_Command+0x50>)
 8005708:	f7fb f8b6 	bl	8000878 <HAL_GPIO_WritePin>
}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	48000800 	.word	0x48000800
 8005718:	200015c0 	.word	0x200015c0

0800571c <LCD_Write_Data>:

/**
 * Write LCD data to SPI
 * @param data data to write.
 */
void LCD_Write_Data(uint8_t data) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8005726:	2200      	movs	r2, #0
 8005728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800572c:	480f      	ldr	r0, [pc, #60]	; (800576c <LCD_Write_Data+0x50>)
 800572e:	f7fb f8a3 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005732:	2201      	movs	r2, #1
 8005734:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005738:	480c      	ldr	r0, [pc, #48]	; (800576c <LCD_Write_Data+0x50>)
 800573a:	f7fb f89d 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &data, 0x01, 1000);
 800573e:	1df9      	adds	r1, r7, #7
 8005740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005744:	2201      	movs	r2, #1
 8005746:	480a      	ldr	r0, [pc, #40]	; (8005770 <LCD_Write_Data+0x54>)
 8005748:	f7fc fa5c 	bl	8001c04 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 800574c:	2201      	movs	r2, #1
 800574e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005752:	4806      	ldr	r0, [pc, #24]	; (800576c <LCD_Write_Data+0x50>)
 8005754:	f7fb f890 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005758:	2200      	movs	r2, #0
 800575a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800575e:	4803      	ldr	r0, [pc, #12]	; (800576c <LCD_Write_Data+0x50>)
 8005760:	f7fb f88a 	bl	8000878 <HAL_GPIO_WritePin>
}
 8005764:	bf00      	nop
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	48000800 	.word	0x48000800
 8005770:	200015c0 	.word	0x200015c0

08005774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005778:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800577a:	e003      	b.n	8005784 <LoopCopyDataInit>

0800577c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800577e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005780:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005782:	3104      	adds	r1, #4

08005784 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005784:	480b      	ldr	r0, [pc, #44]	; (80057b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005788:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800578a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800578c:	d3f6      	bcc.n	800577c <CopyDataInit>
	ldr	r2, =_sbss
 800578e:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8005790:	e002      	b.n	8005798 <LoopFillZerobss>

08005792 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005792:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005794:	f842 3b04 	str.w	r3, [r2], #4

08005798 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005798:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <LoopForever+0x16>)
	cmp	r2, r3
 800579a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800579c:	d3f9      	bcc.n	8005792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800579e:	f7ff fe9f 	bl	80054e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057a2:	f000 f817 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057a6:	f7ff f9d3 	bl	8004b50 <main>

080057aa <LoopForever>:

LoopForever:
    b LoopForever
 80057aa:	e7fe      	b.n	80057aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80057ac:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80057b0:	08006d4c 	.word	0x08006d4c
	ldr	r0, =_sdata
 80057b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80057b8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80057bc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80057c0:	20001698 	.word	0x20001698

080057c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80057c4:	e7fe      	b.n	80057c4 <ADC1_2_IRQHandler>
	...

080057c8 <__errno>:
 80057c8:	4b01      	ldr	r3, [pc, #4]	; (80057d0 <__errno+0x8>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000010 	.word	0x20000010

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4e0d      	ldr	r6, [pc, #52]	; (800580c <__libc_init_array+0x38>)
 80057d8:	4c0d      	ldr	r4, [pc, #52]	; (8005810 <__libc_init_array+0x3c>)
 80057da:	1ba4      	subs	r4, r4, r6
 80057dc:	10a4      	asrs	r4, r4, #2
 80057de:	2500      	movs	r5, #0
 80057e0:	42a5      	cmp	r5, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	4e0b      	ldr	r6, [pc, #44]	; (8005814 <__libc_init_array+0x40>)
 80057e6:	4c0c      	ldr	r4, [pc, #48]	; (8005818 <__libc_init_array+0x44>)
 80057e8:	f001 f8ca 	bl	8006980 <_init>
 80057ec:	1ba4      	subs	r4, r4, r6
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	2500      	movs	r5, #0
 80057f2:	42a5      	cmp	r5, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057fc:	4798      	blx	r3
 80057fe:	3501      	adds	r5, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005806:	4798      	blx	r3
 8005808:	3501      	adds	r5, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	08006d44 	.word	0x08006d44
 8005810:	08006d44 	.word	0x08006d44
 8005814:	08006d44 	.word	0x08006d44
 8005818:	08006d48 	.word	0x08006d48

0800581c <memcpy>:
 800581c:	b510      	push	{r4, lr}
 800581e:	1e43      	subs	r3, r0, #1
 8005820:	440a      	add	r2, r1
 8005822:	4291      	cmp	r1, r2
 8005824:	d100      	bne.n	8005828 <memcpy+0xc>
 8005826:	bd10      	pop	{r4, pc}
 8005828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800582c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005830:	e7f7      	b.n	8005822 <memcpy+0x6>

08005832 <memset>:
 8005832:	4402      	add	r2, r0
 8005834:	4603      	mov	r3, r0
 8005836:	4293      	cmp	r3, r2
 8005838:	d100      	bne.n	800583c <memset+0xa>
 800583a:	4770      	bx	lr
 800583c:	f803 1b01 	strb.w	r1, [r3], #1
 8005840:	e7f9      	b.n	8005836 <memset+0x4>
	...

08005844 <iprintf>:
 8005844:	b40f      	push	{r0, r1, r2, r3}
 8005846:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <iprintf+0x2c>)
 8005848:	b513      	push	{r0, r1, r4, lr}
 800584a:	681c      	ldr	r4, [r3, #0]
 800584c:	b124      	cbz	r4, 8005858 <iprintf+0x14>
 800584e:	69a3      	ldr	r3, [r4, #24]
 8005850:	b913      	cbnz	r3, 8005858 <iprintf+0x14>
 8005852:	4620      	mov	r0, r4
 8005854:	f000 f86e 	bl	8005934 <__sinit>
 8005858:	ab05      	add	r3, sp, #20
 800585a:	9a04      	ldr	r2, [sp, #16]
 800585c:	68a1      	ldr	r1, [r4, #8]
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	4620      	mov	r0, r4
 8005862:	f000 fac7 	bl	8005df4 <_vfiprintf_r>
 8005866:	b002      	add	sp, #8
 8005868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800586c:	b004      	add	sp, #16
 800586e:	4770      	bx	lr
 8005870:	20000010 	.word	0x20000010

08005874 <siprintf>:
 8005874:	b40e      	push	{r1, r2, r3}
 8005876:	b500      	push	{lr}
 8005878:	b09c      	sub	sp, #112	; 0x70
 800587a:	ab1d      	add	r3, sp, #116	; 0x74
 800587c:	9002      	str	r0, [sp, #8]
 800587e:	9006      	str	r0, [sp, #24]
 8005880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005884:	4809      	ldr	r0, [pc, #36]	; (80058ac <siprintf+0x38>)
 8005886:	9107      	str	r1, [sp, #28]
 8005888:	9104      	str	r1, [sp, #16]
 800588a:	4909      	ldr	r1, [pc, #36]	; (80058b0 <siprintf+0x3c>)
 800588c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005890:	9105      	str	r1, [sp, #20]
 8005892:	6800      	ldr	r0, [r0, #0]
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	a902      	add	r1, sp, #8
 8005898:	f000 f98a 	bl	8005bb0 <_svfiprintf_r>
 800589c:	9b02      	ldr	r3, [sp, #8]
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	b01c      	add	sp, #112	; 0x70
 80058a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058a8:	b003      	add	sp, #12
 80058aa:	4770      	bx	lr
 80058ac:	20000010 	.word	0x20000010
 80058b0:	ffff0208 	.word	0xffff0208

080058b4 <std>:
 80058b4:	2300      	movs	r3, #0
 80058b6:	b510      	push	{r4, lr}
 80058b8:	4604      	mov	r4, r0
 80058ba:	e9c0 3300 	strd	r3, r3, [r0]
 80058be:	6083      	str	r3, [r0, #8]
 80058c0:	8181      	strh	r1, [r0, #12]
 80058c2:	6643      	str	r3, [r0, #100]	; 0x64
 80058c4:	81c2      	strh	r2, [r0, #14]
 80058c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058ca:	6183      	str	r3, [r0, #24]
 80058cc:	4619      	mov	r1, r3
 80058ce:	2208      	movs	r2, #8
 80058d0:	305c      	adds	r0, #92	; 0x5c
 80058d2:	f7ff ffae 	bl	8005832 <memset>
 80058d6:	4b05      	ldr	r3, [pc, #20]	; (80058ec <std+0x38>)
 80058d8:	6263      	str	r3, [r4, #36]	; 0x24
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <std+0x3c>)
 80058dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <std+0x40>)
 80058e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <std+0x44>)
 80058e4:	6224      	str	r4, [r4, #32]
 80058e6:	6323      	str	r3, [r4, #48]	; 0x30
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	bf00      	nop
 80058ec:	08006351 	.word	0x08006351
 80058f0:	08006373 	.word	0x08006373
 80058f4:	080063ab 	.word	0x080063ab
 80058f8:	080063cf 	.word	0x080063cf

080058fc <_cleanup_r>:
 80058fc:	4901      	ldr	r1, [pc, #4]	; (8005904 <_cleanup_r+0x8>)
 80058fe:	f000 b885 	b.w	8005a0c <_fwalk_reent>
 8005902:	bf00      	nop
 8005904:	080066a9 	.word	0x080066a9

08005908 <__sfmoreglue>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	1e4a      	subs	r2, r1, #1
 800590c:	2568      	movs	r5, #104	; 0x68
 800590e:	4355      	muls	r5, r2
 8005910:	460e      	mov	r6, r1
 8005912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005916:	f000 f897 	bl	8005a48 <_malloc_r>
 800591a:	4604      	mov	r4, r0
 800591c:	b140      	cbz	r0, 8005930 <__sfmoreglue+0x28>
 800591e:	2100      	movs	r1, #0
 8005920:	e9c0 1600 	strd	r1, r6, [r0]
 8005924:	300c      	adds	r0, #12
 8005926:	60a0      	str	r0, [r4, #8]
 8005928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800592c:	f7ff ff81 	bl	8005832 <memset>
 8005930:	4620      	mov	r0, r4
 8005932:	bd70      	pop	{r4, r5, r6, pc}

08005934 <__sinit>:
 8005934:	6983      	ldr	r3, [r0, #24]
 8005936:	b510      	push	{r4, lr}
 8005938:	4604      	mov	r4, r0
 800593a:	bb33      	cbnz	r3, 800598a <__sinit+0x56>
 800593c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005940:	6503      	str	r3, [r0, #80]	; 0x50
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <__sinit+0x58>)
 8005944:	4a12      	ldr	r2, [pc, #72]	; (8005990 <__sinit+0x5c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6282      	str	r2, [r0, #40]	; 0x28
 800594a:	4298      	cmp	r0, r3
 800594c:	bf04      	itt	eq
 800594e:	2301      	moveq	r3, #1
 8005950:	6183      	streq	r3, [r0, #24]
 8005952:	f000 f81f 	bl	8005994 <__sfp>
 8005956:	6060      	str	r0, [r4, #4]
 8005958:	4620      	mov	r0, r4
 800595a:	f000 f81b 	bl	8005994 <__sfp>
 800595e:	60a0      	str	r0, [r4, #8]
 8005960:	4620      	mov	r0, r4
 8005962:	f000 f817 	bl	8005994 <__sfp>
 8005966:	2200      	movs	r2, #0
 8005968:	60e0      	str	r0, [r4, #12]
 800596a:	2104      	movs	r1, #4
 800596c:	6860      	ldr	r0, [r4, #4]
 800596e:	f7ff ffa1 	bl	80058b4 <std>
 8005972:	2201      	movs	r2, #1
 8005974:	2109      	movs	r1, #9
 8005976:	68a0      	ldr	r0, [r4, #8]
 8005978:	f7ff ff9c 	bl	80058b4 <std>
 800597c:	2202      	movs	r2, #2
 800597e:	2112      	movs	r1, #18
 8005980:	68e0      	ldr	r0, [r4, #12]
 8005982:	f7ff ff97 	bl	80058b4 <std>
 8005986:	2301      	movs	r3, #1
 8005988:	61a3      	str	r3, [r4, #24]
 800598a:	bd10      	pop	{r4, pc}
 800598c:	08006cac 	.word	0x08006cac
 8005990:	080058fd 	.word	0x080058fd

08005994 <__sfp>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	4b1b      	ldr	r3, [pc, #108]	; (8005a04 <__sfp+0x70>)
 8005998:	681e      	ldr	r6, [r3, #0]
 800599a:	69b3      	ldr	r3, [r6, #24]
 800599c:	4607      	mov	r7, r0
 800599e:	b913      	cbnz	r3, 80059a6 <__sfp+0x12>
 80059a0:	4630      	mov	r0, r6
 80059a2:	f7ff ffc7 	bl	8005934 <__sinit>
 80059a6:	3648      	adds	r6, #72	; 0x48
 80059a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	d503      	bpl.n	80059b8 <__sfp+0x24>
 80059b0:	6833      	ldr	r3, [r6, #0]
 80059b2:	b133      	cbz	r3, 80059c2 <__sfp+0x2e>
 80059b4:	6836      	ldr	r6, [r6, #0]
 80059b6:	e7f7      	b.n	80059a8 <__sfp+0x14>
 80059b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059bc:	b16d      	cbz	r5, 80059da <__sfp+0x46>
 80059be:	3468      	adds	r4, #104	; 0x68
 80059c0:	e7f4      	b.n	80059ac <__sfp+0x18>
 80059c2:	2104      	movs	r1, #4
 80059c4:	4638      	mov	r0, r7
 80059c6:	f7ff ff9f 	bl	8005908 <__sfmoreglue>
 80059ca:	6030      	str	r0, [r6, #0]
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d1f1      	bne.n	80059b4 <__sfp+0x20>
 80059d0:	230c      	movs	r3, #12
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	4604      	mov	r4, r0
 80059d6:	4620      	mov	r0, r4
 80059d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <__sfp+0x74>)
 80059dc:	6665      	str	r5, [r4, #100]	; 0x64
 80059de:	e9c4 5500 	strd	r5, r5, [r4]
 80059e2:	60a5      	str	r5, [r4, #8]
 80059e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80059e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80059ec:	2208      	movs	r2, #8
 80059ee:	4629      	mov	r1, r5
 80059f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059f4:	f7ff ff1d 	bl	8005832 <memset>
 80059f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a00:	e7e9      	b.n	80059d6 <__sfp+0x42>
 8005a02:	bf00      	nop
 8005a04:	08006cac 	.word	0x08006cac
 8005a08:	ffff0001 	.word	0xffff0001

08005a0c <_fwalk_reent>:
 8005a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a10:	4680      	mov	r8, r0
 8005a12:	4689      	mov	r9, r1
 8005a14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a18:	2600      	movs	r6, #0
 8005a1a:	b914      	cbnz	r4, 8005a22 <_fwalk_reent+0x16>
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a22:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005a26:	3f01      	subs	r7, #1
 8005a28:	d501      	bpl.n	8005a2e <_fwalk_reent+0x22>
 8005a2a:	6824      	ldr	r4, [r4, #0]
 8005a2c:	e7f5      	b.n	8005a1a <_fwalk_reent+0xe>
 8005a2e:	89ab      	ldrh	r3, [r5, #12]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d907      	bls.n	8005a44 <_fwalk_reent+0x38>
 8005a34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	d003      	beq.n	8005a44 <_fwalk_reent+0x38>
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	4640      	mov	r0, r8
 8005a40:	47c8      	blx	r9
 8005a42:	4306      	orrs	r6, r0
 8005a44:	3568      	adds	r5, #104	; 0x68
 8005a46:	e7ee      	b.n	8005a26 <_fwalk_reent+0x1a>

08005a48 <_malloc_r>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	1ccd      	adds	r5, r1, #3
 8005a4c:	f025 0503 	bic.w	r5, r5, #3
 8005a50:	3508      	adds	r5, #8
 8005a52:	2d0c      	cmp	r5, #12
 8005a54:	bf38      	it	cc
 8005a56:	250c      	movcc	r5, #12
 8005a58:	2d00      	cmp	r5, #0
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	db01      	blt.n	8005a62 <_malloc_r+0x1a>
 8005a5e:	42a9      	cmp	r1, r5
 8005a60:	d903      	bls.n	8005a6a <_malloc_r+0x22>
 8005a62:	230c      	movs	r3, #12
 8005a64:	6033      	str	r3, [r6, #0]
 8005a66:	2000      	movs	r0, #0
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
 8005a6a:	f000 fed6 	bl	800681a <__malloc_lock>
 8005a6e:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <_malloc_r+0xac>)
 8005a70:	6814      	ldr	r4, [r2, #0]
 8005a72:	4621      	mov	r1, r4
 8005a74:	b991      	cbnz	r1, 8005a9c <_malloc_r+0x54>
 8005a76:	4c20      	ldr	r4, [pc, #128]	; (8005af8 <_malloc_r+0xb0>)
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	b91b      	cbnz	r3, 8005a84 <_malloc_r+0x3c>
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f000 fc57 	bl	8006330 <_sbrk_r>
 8005a82:	6020      	str	r0, [r4, #0]
 8005a84:	4629      	mov	r1, r5
 8005a86:	4630      	mov	r0, r6
 8005a88:	f000 fc52 	bl	8006330 <_sbrk_r>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d124      	bne.n	8005ada <_malloc_r+0x92>
 8005a90:	230c      	movs	r3, #12
 8005a92:	6033      	str	r3, [r6, #0]
 8005a94:	4630      	mov	r0, r6
 8005a96:	f000 fec1 	bl	800681c <__malloc_unlock>
 8005a9a:	e7e4      	b.n	8005a66 <_malloc_r+0x1e>
 8005a9c:	680b      	ldr	r3, [r1, #0]
 8005a9e:	1b5b      	subs	r3, r3, r5
 8005aa0:	d418      	bmi.n	8005ad4 <_malloc_r+0x8c>
 8005aa2:	2b0b      	cmp	r3, #11
 8005aa4:	d90f      	bls.n	8005ac6 <_malloc_r+0x7e>
 8005aa6:	600b      	str	r3, [r1, #0]
 8005aa8:	50cd      	str	r5, [r1, r3]
 8005aaa:	18cc      	adds	r4, r1, r3
 8005aac:	4630      	mov	r0, r6
 8005aae:	f000 feb5 	bl	800681c <__malloc_unlock>
 8005ab2:	f104 000b 	add.w	r0, r4, #11
 8005ab6:	1d23      	adds	r3, r4, #4
 8005ab8:	f020 0007 	bic.w	r0, r0, #7
 8005abc:	1ac3      	subs	r3, r0, r3
 8005abe:	d0d3      	beq.n	8005a68 <_malloc_r+0x20>
 8005ac0:	425a      	negs	r2, r3
 8005ac2:	50e2      	str	r2, [r4, r3]
 8005ac4:	e7d0      	b.n	8005a68 <_malloc_r+0x20>
 8005ac6:	428c      	cmp	r4, r1
 8005ac8:	684b      	ldr	r3, [r1, #4]
 8005aca:	bf16      	itet	ne
 8005acc:	6063      	strne	r3, [r4, #4]
 8005ace:	6013      	streq	r3, [r2, #0]
 8005ad0:	460c      	movne	r4, r1
 8005ad2:	e7eb      	b.n	8005aac <_malloc_r+0x64>
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	6849      	ldr	r1, [r1, #4]
 8005ad8:	e7cc      	b.n	8005a74 <_malloc_r+0x2c>
 8005ada:	1cc4      	adds	r4, r0, #3
 8005adc:	f024 0403 	bic.w	r4, r4, #3
 8005ae0:	42a0      	cmp	r0, r4
 8005ae2:	d005      	beq.n	8005af0 <_malloc_r+0xa8>
 8005ae4:	1a21      	subs	r1, r4, r0
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f000 fc22 	bl	8006330 <_sbrk_r>
 8005aec:	3001      	adds	r0, #1
 8005aee:	d0cf      	beq.n	8005a90 <_malloc_r+0x48>
 8005af0:	6025      	str	r5, [r4, #0]
 8005af2:	e7db      	b.n	8005aac <_malloc_r+0x64>
 8005af4:	200015a0 	.word	0x200015a0
 8005af8:	200015a4 	.word	0x200015a4

08005afc <__ssputs_r>:
 8005afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	688e      	ldr	r6, [r1, #8]
 8005b02:	429e      	cmp	r6, r3
 8005b04:	4682      	mov	sl, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	4690      	mov	r8, r2
 8005b0a:	4699      	mov	r9, r3
 8005b0c:	d837      	bhi.n	8005b7e <__ssputs_r+0x82>
 8005b0e:	898a      	ldrh	r2, [r1, #12]
 8005b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b14:	d031      	beq.n	8005b7a <__ssputs_r+0x7e>
 8005b16:	6825      	ldr	r5, [r4, #0]
 8005b18:	6909      	ldr	r1, [r1, #16]
 8005b1a:	1a6f      	subs	r7, r5, r1
 8005b1c:	6965      	ldr	r5, [r4, #20]
 8005b1e:	2302      	movs	r3, #2
 8005b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b24:	fb95 f5f3 	sdiv	r5, r5, r3
 8005b28:	f109 0301 	add.w	r3, r9, #1
 8005b2c:	443b      	add	r3, r7
 8005b2e:	429d      	cmp	r5, r3
 8005b30:	bf38      	it	cc
 8005b32:	461d      	movcc	r5, r3
 8005b34:	0553      	lsls	r3, r2, #21
 8005b36:	d530      	bpl.n	8005b9a <__ssputs_r+0x9e>
 8005b38:	4629      	mov	r1, r5
 8005b3a:	f7ff ff85 	bl	8005a48 <_malloc_r>
 8005b3e:	4606      	mov	r6, r0
 8005b40:	b950      	cbnz	r0, 8005b58 <__ssputs_r+0x5c>
 8005b42:	230c      	movs	r3, #12
 8005b44:	f8ca 3000 	str.w	r3, [sl]
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b4e:	81a3      	strh	r3, [r4, #12]
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295
 8005b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b58:	463a      	mov	r2, r7
 8005b5a:	6921      	ldr	r1, [r4, #16]
 8005b5c:	f7ff fe5e 	bl	800581c <memcpy>
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6a:	81a3      	strh	r3, [r4, #12]
 8005b6c:	6126      	str	r6, [r4, #16]
 8005b6e:	6165      	str	r5, [r4, #20]
 8005b70:	443e      	add	r6, r7
 8005b72:	1bed      	subs	r5, r5, r7
 8005b74:	6026      	str	r6, [r4, #0]
 8005b76:	60a5      	str	r5, [r4, #8]
 8005b78:	464e      	mov	r6, r9
 8005b7a:	454e      	cmp	r6, r9
 8005b7c:	d900      	bls.n	8005b80 <__ssputs_r+0x84>
 8005b7e:	464e      	mov	r6, r9
 8005b80:	4632      	mov	r2, r6
 8005b82:	4641      	mov	r1, r8
 8005b84:	6820      	ldr	r0, [r4, #0]
 8005b86:	f000 fe2f 	bl	80067e8 <memmove>
 8005b8a:	68a3      	ldr	r3, [r4, #8]
 8005b8c:	1b9b      	subs	r3, r3, r6
 8005b8e:	60a3      	str	r3, [r4, #8]
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	441e      	add	r6, r3
 8005b94:	6026      	str	r6, [r4, #0]
 8005b96:	2000      	movs	r0, #0
 8005b98:	e7dc      	b.n	8005b54 <__ssputs_r+0x58>
 8005b9a:	462a      	mov	r2, r5
 8005b9c:	f000 fe8e 	bl	80068bc <_realloc_r>
 8005ba0:	4606      	mov	r6, r0
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d1e2      	bne.n	8005b6c <__ssputs_r+0x70>
 8005ba6:	6921      	ldr	r1, [r4, #16]
 8005ba8:	4650      	mov	r0, sl
 8005baa:	f000 fe39 	bl	8006820 <_free_r>
 8005bae:	e7c8      	b.n	8005b42 <__ssputs_r+0x46>

08005bb0 <_svfiprintf_r>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	461d      	mov	r5, r3
 8005bb6:	898b      	ldrh	r3, [r1, #12]
 8005bb8:	061f      	lsls	r7, r3, #24
 8005bba:	b09d      	sub	sp, #116	; 0x74
 8005bbc:	4680      	mov	r8, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	d50f      	bpl.n	8005be4 <_svfiprintf_r+0x34>
 8005bc4:	690b      	ldr	r3, [r1, #16]
 8005bc6:	b96b      	cbnz	r3, 8005be4 <_svfiprintf_r+0x34>
 8005bc8:	2140      	movs	r1, #64	; 0x40
 8005bca:	f7ff ff3d 	bl	8005a48 <_malloc_r>
 8005bce:	6020      	str	r0, [r4, #0]
 8005bd0:	6120      	str	r0, [r4, #16]
 8005bd2:	b928      	cbnz	r0, 8005be0 <_svfiprintf_r+0x30>
 8005bd4:	230c      	movs	r3, #12
 8005bd6:	f8c8 3000 	str.w	r3, [r8]
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295
 8005bde:	e0c8      	b.n	8005d72 <_svfiprintf_r+0x1c2>
 8005be0:	2340      	movs	r3, #64	; 0x40
 8005be2:	6163      	str	r3, [r4, #20]
 8005be4:	2300      	movs	r3, #0
 8005be6:	9309      	str	r3, [sp, #36]	; 0x24
 8005be8:	2320      	movs	r3, #32
 8005bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bee:	2330      	movs	r3, #48	; 0x30
 8005bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bf4:	9503      	str	r5, [sp, #12]
 8005bf6:	f04f 0b01 	mov.w	fp, #1
 8005bfa:	4637      	mov	r7, r6
 8005bfc:	463d      	mov	r5, r7
 8005bfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c02:	b10b      	cbz	r3, 8005c08 <_svfiprintf_r+0x58>
 8005c04:	2b25      	cmp	r3, #37	; 0x25
 8005c06:	d13e      	bne.n	8005c86 <_svfiprintf_r+0xd6>
 8005c08:	ebb7 0a06 	subs.w	sl, r7, r6
 8005c0c:	d00b      	beq.n	8005c26 <_svfiprintf_r+0x76>
 8005c0e:	4653      	mov	r3, sl
 8005c10:	4632      	mov	r2, r6
 8005c12:	4621      	mov	r1, r4
 8005c14:	4640      	mov	r0, r8
 8005c16:	f7ff ff71 	bl	8005afc <__ssputs_r>
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f000 80a4 	beq.w	8005d68 <_svfiprintf_r+0x1b8>
 8005c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c22:	4453      	add	r3, sl
 8005c24:	9309      	str	r3, [sp, #36]	; 0x24
 8005c26:	783b      	ldrb	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 809d 	beq.w	8005d68 <_svfiprintf_r+0x1b8>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f04f 32ff 	mov.w	r2, #4294967295
 8005c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c38:	9304      	str	r3, [sp, #16]
 8005c3a:	9307      	str	r3, [sp, #28]
 8005c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c40:	931a      	str	r3, [sp, #104]	; 0x68
 8005c42:	462f      	mov	r7, r5
 8005c44:	2205      	movs	r2, #5
 8005c46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005c4a:	4850      	ldr	r0, [pc, #320]	; (8005d8c <_svfiprintf_r+0x1dc>)
 8005c4c:	f7fa fac8 	bl	80001e0 <memchr>
 8005c50:	9b04      	ldr	r3, [sp, #16]
 8005c52:	b9d0      	cbnz	r0, 8005c8a <_svfiprintf_r+0xda>
 8005c54:	06d9      	lsls	r1, r3, #27
 8005c56:	bf44      	itt	mi
 8005c58:	2220      	movmi	r2, #32
 8005c5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c5e:	071a      	lsls	r2, r3, #28
 8005c60:	bf44      	itt	mi
 8005c62:	222b      	movmi	r2, #43	; 0x2b
 8005c64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c68:	782a      	ldrb	r2, [r5, #0]
 8005c6a:	2a2a      	cmp	r2, #42	; 0x2a
 8005c6c:	d015      	beq.n	8005c9a <_svfiprintf_r+0xea>
 8005c6e:	9a07      	ldr	r2, [sp, #28]
 8005c70:	462f      	mov	r7, r5
 8005c72:	2000      	movs	r0, #0
 8005c74:	250a      	movs	r5, #10
 8005c76:	4639      	mov	r1, r7
 8005c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c7c:	3b30      	subs	r3, #48	; 0x30
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d94d      	bls.n	8005d1e <_svfiprintf_r+0x16e>
 8005c82:	b1b8      	cbz	r0, 8005cb4 <_svfiprintf_r+0x104>
 8005c84:	e00f      	b.n	8005ca6 <_svfiprintf_r+0xf6>
 8005c86:	462f      	mov	r7, r5
 8005c88:	e7b8      	b.n	8005bfc <_svfiprintf_r+0x4c>
 8005c8a:	4a40      	ldr	r2, [pc, #256]	; (8005d8c <_svfiprintf_r+0x1dc>)
 8005c8c:	1a80      	subs	r0, r0, r2
 8005c8e:	fa0b f000 	lsl.w	r0, fp, r0
 8005c92:	4318      	orrs	r0, r3
 8005c94:	9004      	str	r0, [sp, #16]
 8005c96:	463d      	mov	r5, r7
 8005c98:	e7d3      	b.n	8005c42 <_svfiprintf_r+0x92>
 8005c9a:	9a03      	ldr	r2, [sp, #12]
 8005c9c:	1d11      	adds	r1, r2, #4
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	9103      	str	r1, [sp, #12]
 8005ca2:	2a00      	cmp	r2, #0
 8005ca4:	db01      	blt.n	8005caa <_svfiprintf_r+0xfa>
 8005ca6:	9207      	str	r2, [sp, #28]
 8005ca8:	e004      	b.n	8005cb4 <_svfiprintf_r+0x104>
 8005caa:	4252      	negs	r2, r2
 8005cac:	f043 0302 	orr.w	r3, r3, #2
 8005cb0:	9207      	str	r2, [sp, #28]
 8005cb2:	9304      	str	r3, [sp, #16]
 8005cb4:	783b      	ldrb	r3, [r7, #0]
 8005cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8005cb8:	d10c      	bne.n	8005cd4 <_svfiprintf_r+0x124>
 8005cba:	787b      	ldrb	r3, [r7, #1]
 8005cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cbe:	d133      	bne.n	8005d28 <_svfiprintf_r+0x178>
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	1d1a      	adds	r2, r3, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	9203      	str	r2, [sp, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bfb8      	it	lt
 8005ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cd0:	3702      	adds	r7, #2
 8005cd2:	9305      	str	r3, [sp, #20]
 8005cd4:	4d2e      	ldr	r5, [pc, #184]	; (8005d90 <_svfiprintf_r+0x1e0>)
 8005cd6:	7839      	ldrb	r1, [r7, #0]
 8005cd8:	2203      	movs	r2, #3
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f7fa fa80 	bl	80001e0 <memchr>
 8005ce0:	b138      	cbz	r0, 8005cf2 <_svfiprintf_r+0x142>
 8005ce2:	2340      	movs	r3, #64	; 0x40
 8005ce4:	1b40      	subs	r0, r0, r5
 8005ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	4303      	orrs	r3, r0
 8005cee:	3701      	adds	r7, #1
 8005cf0:	9304      	str	r3, [sp, #16]
 8005cf2:	7839      	ldrb	r1, [r7, #0]
 8005cf4:	4827      	ldr	r0, [pc, #156]	; (8005d94 <_svfiprintf_r+0x1e4>)
 8005cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cfa:	2206      	movs	r2, #6
 8005cfc:	1c7e      	adds	r6, r7, #1
 8005cfe:	f7fa fa6f 	bl	80001e0 <memchr>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d038      	beq.n	8005d78 <_svfiprintf_r+0x1c8>
 8005d06:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <_svfiprintf_r+0x1e8>)
 8005d08:	bb13      	cbnz	r3, 8005d50 <_svfiprintf_r+0x1a0>
 8005d0a:	9b03      	ldr	r3, [sp, #12]
 8005d0c:	3307      	adds	r3, #7
 8005d0e:	f023 0307 	bic.w	r3, r3, #7
 8005d12:	3308      	adds	r3, #8
 8005d14:	9303      	str	r3, [sp, #12]
 8005d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d18:	444b      	add	r3, r9
 8005d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d1c:	e76d      	b.n	8005bfa <_svfiprintf_r+0x4a>
 8005d1e:	fb05 3202 	mla	r2, r5, r2, r3
 8005d22:	2001      	movs	r0, #1
 8005d24:	460f      	mov	r7, r1
 8005d26:	e7a6      	b.n	8005c76 <_svfiprintf_r+0xc6>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	3701      	adds	r7, #1
 8005d2c:	9305      	str	r3, [sp, #20]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	250a      	movs	r5, #10
 8005d32:	4638      	mov	r0, r7
 8005d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d38:	3a30      	subs	r2, #48	; 0x30
 8005d3a:	2a09      	cmp	r2, #9
 8005d3c:	d903      	bls.n	8005d46 <_svfiprintf_r+0x196>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0c8      	beq.n	8005cd4 <_svfiprintf_r+0x124>
 8005d42:	9105      	str	r1, [sp, #20]
 8005d44:	e7c6      	b.n	8005cd4 <_svfiprintf_r+0x124>
 8005d46:	fb05 2101 	mla	r1, r5, r1, r2
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4607      	mov	r7, r0
 8005d4e:	e7f0      	b.n	8005d32 <_svfiprintf_r+0x182>
 8005d50:	ab03      	add	r3, sp, #12
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	4622      	mov	r2, r4
 8005d56:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <_svfiprintf_r+0x1ec>)
 8005d58:	a904      	add	r1, sp, #16
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	f3af 8000 	nop.w
 8005d60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d64:	4681      	mov	r9, r0
 8005d66:	d1d6      	bne.n	8005d16 <_svfiprintf_r+0x166>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	065b      	lsls	r3, r3, #25
 8005d6c:	f53f af35 	bmi.w	8005bda <_svfiprintf_r+0x2a>
 8005d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d72:	b01d      	add	sp, #116	; 0x74
 8005d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d78:	ab03      	add	r3, sp, #12
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <_svfiprintf_r+0x1ec>)
 8005d80:	a904      	add	r1, sp, #16
 8005d82:	4640      	mov	r0, r8
 8005d84:	f000 f9c2 	bl	800610c <_printf_i>
 8005d88:	e7ea      	b.n	8005d60 <_svfiprintf_r+0x1b0>
 8005d8a:	bf00      	nop
 8005d8c:	08006d10 	.word	0x08006d10
 8005d90:	08006d16 	.word	0x08006d16
 8005d94:	08006d1a 	.word	0x08006d1a
 8005d98:	00000000 	.word	0x00000000
 8005d9c:	08005afd 	.word	0x08005afd

08005da0 <__sfputc_r>:
 8005da0:	6893      	ldr	r3, [r2, #8]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	b410      	push	{r4}
 8005da8:	6093      	str	r3, [r2, #8]
 8005daa:	da08      	bge.n	8005dbe <__sfputc_r+0x1e>
 8005dac:	6994      	ldr	r4, [r2, #24]
 8005dae:	42a3      	cmp	r3, r4
 8005db0:	db01      	blt.n	8005db6 <__sfputc_r+0x16>
 8005db2:	290a      	cmp	r1, #10
 8005db4:	d103      	bne.n	8005dbe <__sfputc_r+0x1e>
 8005db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dba:	f000 bb0d 	b.w	80063d8 <__swbuf_r>
 8005dbe:	6813      	ldr	r3, [r2, #0]
 8005dc0:	1c58      	adds	r0, r3, #1
 8005dc2:	6010      	str	r0, [r2, #0]
 8005dc4:	7019      	strb	r1, [r3, #0]
 8005dc6:	4608      	mov	r0, r1
 8005dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <__sfputs_r>:
 8005dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	460f      	mov	r7, r1
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	18d5      	adds	r5, r2, r3
 8005dd8:	42ac      	cmp	r4, r5
 8005dda:	d101      	bne.n	8005de0 <__sfputs_r+0x12>
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e007      	b.n	8005df0 <__sfputs_r+0x22>
 8005de0:	463a      	mov	r2, r7
 8005de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de6:	4630      	mov	r0, r6
 8005de8:	f7ff ffda 	bl	8005da0 <__sfputc_r>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d1f3      	bne.n	8005dd8 <__sfputs_r+0xa>
 8005df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005df4 <_vfiprintf_r>:
 8005df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	460c      	mov	r4, r1
 8005dfa:	b09d      	sub	sp, #116	; 0x74
 8005dfc:	4617      	mov	r7, r2
 8005dfe:	461d      	mov	r5, r3
 8005e00:	4606      	mov	r6, r0
 8005e02:	b118      	cbz	r0, 8005e0c <_vfiprintf_r+0x18>
 8005e04:	6983      	ldr	r3, [r0, #24]
 8005e06:	b90b      	cbnz	r3, 8005e0c <_vfiprintf_r+0x18>
 8005e08:	f7ff fd94 	bl	8005934 <__sinit>
 8005e0c:	4b7c      	ldr	r3, [pc, #496]	; (8006000 <_vfiprintf_r+0x20c>)
 8005e0e:	429c      	cmp	r4, r3
 8005e10:	d158      	bne.n	8005ec4 <_vfiprintf_r+0xd0>
 8005e12:	6874      	ldr	r4, [r6, #4]
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	0718      	lsls	r0, r3, #28
 8005e18:	d55e      	bpl.n	8005ed8 <_vfiprintf_r+0xe4>
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d05b      	beq.n	8005ed8 <_vfiprintf_r+0xe4>
 8005e20:	2300      	movs	r3, #0
 8005e22:	9309      	str	r3, [sp, #36]	; 0x24
 8005e24:	2320      	movs	r3, #32
 8005e26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e2a:	2330      	movs	r3, #48	; 0x30
 8005e2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e30:	9503      	str	r5, [sp, #12]
 8005e32:	f04f 0b01 	mov.w	fp, #1
 8005e36:	46b8      	mov	r8, r7
 8005e38:	4645      	mov	r5, r8
 8005e3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e3e:	b10b      	cbz	r3, 8005e44 <_vfiprintf_r+0x50>
 8005e40:	2b25      	cmp	r3, #37	; 0x25
 8005e42:	d154      	bne.n	8005eee <_vfiprintf_r+0xfa>
 8005e44:	ebb8 0a07 	subs.w	sl, r8, r7
 8005e48:	d00b      	beq.n	8005e62 <_vfiprintf_r+0x6e>
 8005e4a:	4653      	mov	r3, sl
 8005e4c:	463a      	mov	r2, r7
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4630      	mov	r0, r6
 8005e52:	f7ff ffbc 	bl	8005dce <__sfputs_r>
 8005e56:	3001      	adds	r0, #1
 8005e58:	f000 80c2 	beq.w	8005fe0 <_vfiprintf_r+0x1ec>
 8005e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5e:	4453      	add	r3, sl
 8005e60:	9309      	str	r3, [sp, #36]	; 0x24
 8005e62:	f898 3000 	ldrb.w	r3, [r8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80ba 	beq.w	8005fe0 <_vfiprintf_r+0x1ec>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e76:	9304      	str	r3, [sp, #16]
 8005e78:	9307      	str	r3, [sp, #28]
 8005e7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e7e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e80:	46a8      	mov	r8, r5
 8005e82:	2205      	movs	r2, #5
 8005e84:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005e88:	485e      	ldr	r0, [pc, #376]	; (8006004 <_vfiprintf_r+0x210>)
 8005e8a:	f7fa f9a9 	bl	80001e0 <memchr>
 8005e8e:	9b04      	ldr	r3, [sp, #16]
 8005e90:	bb78      	cbnz	r0, 8005ef2 <_vfiprintf_r+0xfe>
 8005e92:	06d9      	lsls	r1, r3, #27
 8005e94:	bf44      	itt	mi
 8005e96:	2220      	movmi	r2, #32
 8005e98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e9c:	071a      	lsls	r2, r3, #28
 8005e9e:	bf44      	itt	mi
 8005ea0:	222b      	movmi	r2, #43	; 0x2b
 8005ea2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ea6:	782a      	ldrb	r2, [r5, #0]
 8005ea8:	2a2a      	cmp	r2, #42	; 0x2a
 8005eaa:	d02a      	beq.n	8005f02 <_vfiprintf_r+0x10e>
 8005eac:	9a07      	ldr	r2, [sp, #28]
 8005eae:	46a8      	mov	r8, r5
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	250a      	movs	r5, #10
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eba:	3b30      	subs	r3, #48	; 0x30
 8005ebc:	2b09      	cmp	r3, #9
 8005ebe:	d969      	bls.n	8005f94 <_vfiprintf_r+0x1a0>
 8005ec0:	b360      	cbz	r0, 8005f1c <_vfiprintf_r+0x128>
 8005ec2:	e024      	b.n	8005f0e <_vfiprintf_r+0x11a>
 8005ec4:	4b50      	ldr	r3, [pc, #320]	; (8006008 <_vfiprintf_r+0x214>)
 8005ec6:	429c      	cmp	r4, r3
 8005ec8:	d101      	bne.n	8005ece <_vfiprintf_r+0xda>
 8005eca:	68b4      	ldr	r4, [r6, #8]
 8005ecc:	e7a2      	b.n	8005e14 <_vfiprintf_r+0x20>
 8005ece:	4b4f      	ldr	r3, [pc, #316]	; (800600c <_vfiprintf_r+0x218>)
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	bf08      	it	eq
 8005ed4:	68f4      	ldreq	r4, [r6, #12]
 8005ed6:	e79d      	b.n	8005e14 <_vfiprintf_r+0x20>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4630      	mov	r0, r6
 8005edc:	f000 fae0 	bl	80064a0 <__swsetup_r>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d09d      	beq.n	8005e20 <_vfiprintf_r+0x2c>
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee8:	b01d      	add	sp, #116	; 0x74
 8005eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eee:	46a8      	mov	r8, r5
 8005ef0:	e7a2      	b.n	8005e38 <_vfiprintf_r+0x44>
 8005ef2:	4a44      	ldr	r2, [pc, #272]	; (8006004 <_vfiprintf_r+0x210>)
 8005ef4:	1a80      	subs	r0, r0, r2
 8005ef6:	fa0b f000 	lsl.w	r0, fp, r0
 8005efa:	4318      	orrs	r0, r3
 8005efc:	9004      	str	r0, [sp, #16]
 8005efe:	4645      	mov	r5, r8
 8005f00:	e7be      	b.n	8005e80 <_vfiprintf_r+0x8c>
 8005f02:	9a03      	ldr	r2, [sp, #12]
 8005f04:	1d11      	adds	r1, r2, #4
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	9103      	str	r1, [sp, #12]
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	db01      	blt.n	8005f12 <_vfiprintf_r+0x11e>
 8005f0e:	9207      	str	r2, [sp, #28]
 8005f10:	e004      	b.n	8005f1c <_vfiprintf_r+0x128>
 8005f12:	4252      	negs	r2, r2
 8005f14:	f043 0302 	orr.w	r3, r3, #2
 8005f18:	9207      	str	r2, [sp, #28]
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	f898 3000 	ldrb.w	r3, [r8]
 8005f20:	2b2e      	cmp	r3, #46	; 0x2e
 8005f22:	d10e      	bne.n	8005f42 <_vfiprintf_r+0x14e>
 8005f24:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005f28:	2b2a      	cmp	r3, #42	; 0x2a
 8005f2a:	d138      	bne.n	8005f9e <_vfiprintf_r+0x1aa>
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	1d1a      	adds	r2, r3, #4
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	9203      	str	r2, [sp, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bfb8      	it	lt
 8005f38:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f3c:	f108 0802 	add.w	r8, r8, #2
 8005f40:	9305      	str	r3, [sp, #20]
 8005f42:	4d33      	ldr	r5, [pc, #204]	; (8006010 <_vfiprintf_r+0x21c>)
 8005f44:	f898 1000 	ldrb.w	r1, [r8]
 8005f48:	2203      	movs	r2, #3
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f7fa f948 	bl	80001e0 <memchr>
 8005f50:	b140      	cbz	r0, 8005f64 <_vfiprintf_r+0x170>
 8005f52:	2340      	movs	r3, #64	; 0x40
 8005f54:	1b40      	subs	r0, r0, r5
 8005f56:	fa03 f000 	lsl.w	r0, r3, r0
 8005f5a:	9b04      	ldr	r3, [sp, #16]
 8005f5c:	4303      	orrs	r3, r0
 8005f5e:	f108 0801 	add.w	r8, r8, #1
 8005f62:	9304      	str	r3, [sp, #16]
 8005f64:	f898 1000 	ldrb.w	r1, [r8]
 8005f68:	482a      	ldr	r0, [pc, #168]	; (8006014 <_vfiprintf_r+0x220>)
 8005f6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f6e:	2206      	movs	r2, #6
 8005f70:	f108 0701 	add.w	r7, r8, #1
 8005f74:	f7fa f934 	bl	80001e0 <memchr>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d037      	beq.n	8005fec <_vfiprintf_r+0x1f8>
 8005f7c:	4b26      	ldr	r3, [pc, #152]	; (8006018 <_vfiprintf_r+0x224>)
 8005f7e:	bb1b      	cbnz	r3, 8005fc8 <_vfiprintf_r+0x1d4>
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	3307      	adds	r3, #7
 8005f84:	f023 0307 	bic.w	r3, r3, #7
 8005f88:	3308      	adds	r3, #8
 8005f8a:	9303      	str	r3, [sp, #12]
 8005f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8e:	444b      	add	r3, r9
 8005f90:	9309      	str	r3, [sp, #36]	; 0x24
 8005f92:	e750      	b.n	8005e36 <_vfiprintf_r+0x42>
 8005f94:	fb05 3202 	mla	r2, r5, r2, r3
 8005f98:	2001      	movs	r0, #1
 8005f9a:	4688      	mov	r8, r1
 8005f9c:	e78a      	b.n	8005eb4 <_vfiprintf_r+0xc0>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f108 0801 	add.w	r8, r8, #1
 8005fa4:	9305      	str	r3, [sp, #20]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	250a      	movs	r5, #10
 8005faa:	4640      	mov	r0, r8
 8005fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fb0:	3a30      	subs	r2, #48	; 0x30
 8005fb2:	2a09      	cmp	r2, #9
 8005fb4:	d903      	bls.n	8005fbe <_vfiprintf_r+0x1ca>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0c3      	beq.n	8005f42 <_vfiprintf_r+0x14e>
 8005fba:	9105      	str	r1, [sp, #20]
 8005fbc:	e7c1      	b.n	8005f42 <_vfiprintf_r+0x14e>
 8005fbe:	fb05 2101 	mla	r1, r5, r1, r2
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4680      	mov	r8, r0
 8005fc6:	e7f0      	b.n	8005faa <_vfiprintf_r+0x1b6>
 8005fc8:	ab03      	add	r3, sp, #12
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	4622      	mov	r2, r4
 8005fce:	4b13      	ldr	r3, [pc, #76]	; (800601c <_vfiprintf_r+0x228>)
 8005fd0:	a904      	add	r1, sp, #16
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f3af 8000 	nop.w
 8005fd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005fdc:	4681      	mov	r9, r0
 8005fde:	d1d5      	bne.n	8005f8c <_vfiprintf_r+0x198>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	065b      	lsls	r3, r3, #25
 8005fe4:	f53f af7e 	bmi.w	8005ee4 <_vfiprintf_r+0xf0>
 8005fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fea:	e77d      	b.n	8005ee8 <_vfiprintf_r+0xf4>
 8005fec:	ab03      	add	r3, sp, #12
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	; (800601c <_vfiprintf_r+0x228>)
 8005ff4:	a904      	add	r1, sp, #16
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f000 f888 	bl	800610c <_printf_i>
 8005ffc:	e7ec      	b.n	8005fd8 <_vfiprintf_r+0x1e4>
 8005ffe:	bf00      	nop
 8006000:	08006cd0 	.word	0x08006cd0
 8006004:	08006d10 	.word	0x08006d10
 8006008:	08006cf0 	.word	0x08006cf0
 800600c:	08006cb0 	.word	0x08006cb0
 8006010:	08006d16 	.word	0x08006d16
 8006014:	08006d1a 	.word	0x08006d1a
 8006018:	00000000 	.word	0x00000000
 800601c:	08005dcf 	.word	0x08005dcf

08006020 <_printf_common>:
 8006020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006024:	4691      	mov	r9, r2
 8006026:	461f      	mov	r7, r3
 8006028:	688a      	ldr	r2, [r1, #8]
 800602a:	690b      	ldr	r3, [r1, #16]
 800602c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006030:	4293      	cmp	r3, r2
 8006032:	bfb8      	it	lt
 8006034:	4613      	movlt	r3, r2
 8006036:	f8c9 3000 	str.w	r3, [r9]
 800603a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800603e:	4606      	mov	r6, r0
 8006040:	460c      	mov	r4, r1
 8006042:	b112      	cbz	r2, 800604a <_printf_common+0x2a>
 8006044:	3301      	adds	r3, #1
 8006046:	f8c9 3000 	str.w	r3, [r9]
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	0699      	lsls	r1, r3, #26
 800604e:	bf42      	ittt	mi
 8006050:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006054:	3302      	addmi	r3, #2
 8006056:	f8c9 3000 	strmi.w	r3, [r9]
 800605a:	6825      	ldr	r5, [r4, #0]
 800605c:	f015 0506 	ands.w	r5, r5, #6
 8006060:	d107      	bne.n	8006072 <_printf_common+0x52>
 8006062:	f104 0a19 	add.w	sl, r4, #25
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	f8d9 2000 	ldr.w	r2, [r9]
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	42ab      	cmp	r3, r5
 8006070:	dc28      	bgt.n	80060c4 <_printf_common+0xa4>
 8006072:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006076:	6822      	ldr	r2, [r4, #0]
 8006078:	3300      	adds	r3, #0
 800607a:	bf18      	it	ne
 800607c:	2301      	movne	r3, #1
 800607e:	0692      	lsls	r2, r2, #26
 8006080:	d42d      	bmi.n	80060de <_printf_common+0xbe>
 8006082:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006086:	4639      	mov	r1, r7
 8006088:	4630      	mov	r0, r6
 800608a:	47c0      	blx	r8
 800608c:	3001      	adds	r0, #1
 800608e:	d020      	beq.n	80060d2 <_printf_common+0xb2>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	68e5      	ldr	r5, [r4, #12]
 8006094:	f8d9 2000 	ldr.w	r2, [r9]
 8006098:	f003 0306 	and.w	r3, r3, #6
 800609c:	2b04      	cmp	r3, #4
 800609e:	bf08      	it	eq
 80060a0:	1aad      	subeq	r5, r5, r2
 80060a2:	68a3      	ldr	r3, [r4, #8]
 80060a4:	6922      	ldr	r2, [r4, #16]
 80060a6:	bf0c      	ite	eq
 80060a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060ac:	2500      	movne	r5, #0
 80060ae:	4293      	cmp	r3, r2
 80060b0:	bfc4      	itt	gt
 80060b2:	1a9b      	subgt	r3, r3, r2
 80060b4:	18ed      	addgt	r5, r5, r3
 80060b6:	f04f 0900 	mov.w	r9, #0
 80060ba:	341a      	adds	r4, #26
 80060bc:	454d      	cmp	r5, r9
 80060be:	d11a      	bne.n	80060f6 <_printf_common+0xd6>
 80060c0:	2000      	movs	r0, #0
 80060c2:	e008      	b.n	80060d6 <_printf_common+0xb6>
 80060c4:	2301      	movs	r3, #1
 80060c6:	4652      	mov	r2, sl
 80060c8:	4639      	mov	r1, r7
 80060ca:	4630      	mov	r0, r6
 80060cc:	47c0      	blx	r8
 80060ce:	3001      	adds	r0, #1
 80060d0:	d103      	bne.n	80060da <_printf_common+0xba>
 80060d2:	f04f 30ff 	mov.w	r0, #4294967295
 80060d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060da:	3501      	adds	r5, #1
 80060dc:	e7c3      	b.n	8006066 <_printf_common+0x46>
 80060de:	18e1      	adds	r1, r4, r3
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	2030      	movs	r0, #48	; 0x30
 80060e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060e8:	4422      	add	r2, r4
 80060ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f2:	3302      	adds	r3, #2
 80060f4:	e7c5      	b.n	8006082 <_printf_common+0x62>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4622      	mov	r2, r4
 80060fa:	4639      	mov	r1, r7
 80060fc:	4630      	mov	r0, r6
 80060fe:	47c0      	blx	r8
 8006100:	3001      	adds	r0, #1
 8006102:	d0e6      	beq.n	80060d2 <_printf_common+0xb2>
 8006104:	f109 0901 	add.w	r9, r9, #1
 8006108:	e7d8      	b.n	80060bc <_printf_common+0x9c>
	...

0800610c <_printf_i>:
 800610c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006110:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006114:	460c      	mov	r4, r1
 8006116:	7e09      	ldrb	r1, [r1, #24]
 8006118:	b085      	sub	sp, #20
 800611a:	296e      	cmp	r1, #110	; 0x6e
 800611c:	4617      	mov	r7, r2
 800611e:	4606      	mov	r6, r0
 8006120:	4698      	mov	r8, r3
 8006122:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006124:	f000 80b3 	beq.w	800628e <_printf_i+0x182>
 8006128:	d822      	bhi.n	8006170 <_printf_i+0x64>
 800612a:	2963      	cmp	r1, #99	; 0x63
 800612c:	d036      	beq.n	800619c <_printf_i+0x90>
 800612e:	d80a      	bhi.n	8006146 <_printf_i+0x3a>
 8006130:	2900      	cmp	r1, #0
 8006132:	f000 80b9 	beq.w	80062a8 <_printf_i+0x19c>
 8006136:	2958      	cmp	r1, #88	; 0x58
 8006138:	f000 8083 	beq.w	8006242 <_printf_i+0x136>
 800613c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006140:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006144:	e032      	b.n	80061ac <_printf_i+0xa0>
 8006146:	2964      	cmp	r1, #100	; 0x64
 8006148:	d001      	beq.n	800614e <_printf_i+0x42>
 800614a:	2969      	cmp	r1, #105	; 0x69
 800614c:	d1f6      	bne.n	800613c <_printf_i+0x30>
 800614e:	6820      	ldr	r0, [r4, #0]
 8006150:	6813      	ldr	r3, [r2, #0]
 8006152:	0605      	lsls	r5, r0, #24
 8006154:	f103 0104 	add.w	r1, r3, #4
 8006158:	d52a      	bpl.n	80061b0 <_printf_i+0xa4>
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	da03      	bge.n	800616a <_printf_i+0x5e>
 8006162:	222d      	movs	r2, #45	; 0x2d
 8006164:	425b      	negs	r3, r3
 8006166:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800616a:	486f      	ldr	r0, [pc, #444]	; (8006328 <_printf_i+0x21c>)
 800616c:	220a      	movs	r2, #10
 800616e:	e039      	b.n	80061e4 <_printf_i+0xd8>
 8006170:	2973      	cmp	r1, #115	; 0x73
 8006172:	f000 809d 	beq.w	80062b0 <_printf_i+0x1a4>
 8006176:	d808      	bhi.n	800618a <_printf_i+0x7e>
 8006178:	296f      	cmp	r1, #111	; 0x6f
 800617a:	d020      	beq.n	80061be <_printf_i+0xb2>
 800617c:	2970      	cmp	r1, #112	; 0x70
 800617e:	d1dd      	bne.n	800613c <_printf_i+0x30>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	f043 0320 	orr.w	r3, r3, #32
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	e003      	b.n	8006192 <_printf_i+0x86>
 800618a:	2975      	cmp	r1, #117	; 0x75
 800618c:	d017      	beq.n	80061be <_printf_i+0xb2>
 800618e:	2978      	cmp	r1, #120	; 0x78
 8006190:	d1d4      	bne.n	800613c <_printf_i+0x30>
 8006192:	2378      	movs	r3, #120	; 0x78
 8006194:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006198:	4864      	ldr	r0, [pc, #400]	; (800632c <_printf_i+0x220>)
 800619a:	e055      	b.n	8006248 <_printf_i+0x13c>
 800619c:	6813      	ldr	r3, [r2, #0]
 800619e:	1d19      	adds	r1, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6011      	str	r1, [r2, #0]
 80061a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ac:	2301      	movs	r3, #1
 80061ae:	e08c      	b.n	80062ca <_printf_i+0x1be>
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6011      	str	r1, [r2, #0]
 80061b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061b8:	bf18      	it	ne
 80061ba:	b21b      	sxthne	r3, r3
 80061bc:	e7cf      	b.n	800615e <_printf_i+0x52>
 80061be:	6813      	ldr	r3, [r2, #0]
 80061c0:	6825      	ldr	r5, [r4, #0]
 80061c2:	1d18      	adds	r0, r3, #4
 80061c4:	6010      	str	r0, [r2, #0]
 80061c6:	0628      	lsls	r0, r5, #24
 80061c8:	d501      	bpl.n	80061ce <_printf_i+0xc2>
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	e002      	b.n	80061d4 <_printf_i+0xc8>
 80061ce:	0668      	lsls	r0, r5, #25
 80061d0:	d5fb      	bpl.n	80061ca <_printf_i+0xbe>
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	4854      	ldr	r0, [pc, #336]	; (8006328 <_printf_i+0x21c>)
 80061d6:	296f      	cmp	r1, #111	; 0x6f
 80061d8:	bf14      	ite	ne
 80061da:	220a      	movne	r2, #10
 80061dc:	2208      	moveq	r2, #8
 80061de:	2100      	movs	r1, #0
 80061e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061e4:	6865      	ldr	r5, [r4, #4]
 80061e6:	60a5      	str	r5, [r4, #8]
 80061e8:	2d00      	cmp	r5, #0
 80061ea:	f2c0 8095 	blt.w	8006318 <_printf_i+0x20c>
 80061ee:	6821      	ldr	r1, [r4, #0]
 80061f0:	f021 0104 	bic.w	r1, r1, #4
 80061f4:	6021      	str	r1, [r4, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d13d      	bne.n	8006276 <_printf_i+0x16a>
 80061fa:	2d00      	cmp	r5, #0
 80061fc:	f040 808e 	bne.w	800631c <_printf_i+0x210>
 8006200:	4665      	mov	r5, ip
 8006202:	2a08      	cmp	r2, #8
 8006204:	d10b      	bne.n	800621e <_printf_i+0x112>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	07db      	lsls	r3, r3, #31
 800620a:	d508      	bpl.n	800621e <_printf_i+0x112>
 800620c:	6923      	ldr	r3, [r4, #16]
 800620e:	6862      	ldr	r2, [r4, #4]
 8006210:	429a      	cmp	r2, r3
 8006212:	bfde      	ittt	le
 8006214:	2330      	movle	r3, #48	; 0x30
 8006216:	f805 3c01 	strble.w	r3, [r5, #-1]
 800621a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800621e:	ebac 0305 	sub.w	r3, ip, r5
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	f8cd 8000 	str.w	r8, [sp]
 8006228:	463b      	mov	r3, r7
 800622a:	aa03      	add	r2, sp, #12
 800622c:	4621      	mov	r1, r4
 800622e:	4630      	mov	r0, r6
 8006230:	f7ff fef6 	bl	8006020 <_printf_common>
 8006234:	3001      	adds	r0, #1
 8006236:	d14d      	bne.n	80062d4 <_printf_i+0x1c8>
 8006238:	f04f 30ff 	mov.w	r0, #4294967295
 800623c:	b005      	add	sp, #20
 800623e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006242:	4839      	ldr	r0, [pc, #228]	; (8006328 <_printf_i+0x21c>)
 8006244:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006248:	6813      	ldr	r3, [r2, #0]
 800624a:	6821      	ldr	r1, [r4, #0]
 800624c:	1d1d      	adds	r5, r3, #4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6015      	str	r5, [r2, #0]
 8006252:	060a      	lsls	r2, r1, #24
 8006254:	d50b      	bpl.n	800626e <_printf_i+0x162>
 8006256:	07ca      	lsls	r2, r1, #31
 8006258:	bf44      	itt	mi
 800625a:	f041 0120 	orrmi.w	r1, r1, #32
 800625e:	6021      	strmi	r1, [r4, #0]
 8006260:	b91b      	cbnz	r3, 800626a <_printf_i+0x15e>
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	f022 0220 	bic.w	r2, r2, #32
 8006268:	6022      	str	r2, [r4, #0]
 800626a:	2210      	movs	r2, #16
 800626c:	e7b7      	b.n	80061de <_printf_i+0xd2>
 800626e:	064d      	lsls	r5, r1, #25
 8006270:	bf48      	it	mi
 8006272:	b29b      	uxthmi	r3, r3
 8006274:	e7ef      	b.n	8006256 <_printf_i+0x14a>
 8006276:	4665      	mov	r5, ip
 8006278:	fbb3 f1f2 	udiv	r1, r3, r2
 800627c:	fb02 3311 	mls	r3, r2, r1, r3
 8006280:	5cc3      	ldrb	r3, [r0, r3]
 8006282:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006286:	460b      	mov	r3, r1
 8006288:	2900      	cmp	r1, #0
 800628a:	d1f5      	bne.n	8006278 <_printf_i+0x16c>
 800628c:	e7b9      	b.n	8006202 <_printf_i+0xf6>
 800628e:	6813      	ldr	r3, [r2, #0]
 8006290:	6825      	ldr	r5, [r4, #0]
 8006292:	6961      	ldr	r1, [r4, #20]
 8006294:	1d18      	adds	r0, r3, #4
 8006296:	6010      	str	r0, [r2, #0]
 8006298:	0628      	lsls	r0, r5, #24
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	d501      	bpl.n	80062a2 <_printf_i+0x196>
 800629e:	6019      	str	r1, [r3, #0]
 80062a0:	e002      	b.n	80062a8 <_printf_i+0x19c>
 80062a2:	066a      	lsls	r2, r5, #25
 80062a4:	d5fb      	bpl.n	800629e <_printf_i+0x192>
 80062a6:	8019      	strh	r1, [r3, #0]
 80062a8:	2300      	movs	r3, #0
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	4665      	mov	r5, ip
 80062ae:	e7b9      	b.n	8006224 <_printf_i+0x118>
 80062b0:	6813      	ldr	r3, [r2, #0]
 80062b2:	1d19      	adds	r1, r3, #4
 80062b4:	6011      	str	r1, [r2, #0]
 80062b6:	681d      	ldr	r5, [r3, #0]
 80062b8:	6862      	ldr	r2, [r4, #4]
 80062ba:	2100      	movs	r1, #0
 80062bc:	4628      	mov	r0, r5
 80062be:	f7f9 ff8f 	bl	80001e0 <memchr>
 80062c2:	b108      	cbz	r0, 80062c8 <_printf_i+0x1bc>
 80062c4:	1b40      	subs	r0, r0, r5
 80062c6:	6060      	str	r0, [r4, #4]
 80062c8:	6863      	ldr	r3, [r4, #4]
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	2300      	movs	r3, #0
 80062ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d2:	e7a7      	b.n	8006224 <_printf_i+0x118>
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	462a      	mov	r2, r5
 80062d8:	4639      	mov	r1, r7
 80062da:	4630      	mov	r0, r6
 80062dc:	47c0      	blx	r8
 80062de:	3001      	adds	r0, #1
 80062e0:	d0aa      	beq.n	8006238 <_printf_i+0x12c>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	079b      	lsls	r3, r3, #30
 80062e6:	d413      	bmi.n	8006310 <_printf_i+0x204>
 80062e8:	68e0      	ldr	r0, [r4, #12]
 80062ea:	9b03      	ldr	r3, [sp, #12]
 80062ec:	4298      	cmp	r0, r3
 80062ee:	bfb8      	it	lt
 80062f0:	4618      	movlt	r0, r3
 80062f2:	e7a3      	b.n	800623c <_printf_i+0x130>
 80062f4:	2301      	movs	r3, #1
 80062f6:	464a      	mov	r2, r9
 80062f8:	4639      	mov	r1, r7
 80062fa:	4630      	mov	r0, r6
 80062fc:	47c0      	blx	r8
 80062fe:	3001      	adds	r0, #1
 8006300:	d09a      	beq.n	8006238 <_printf_i+0x12c>
 8006302:	3501      	adds	r5, #1
 8006304:	68e3      	ldr	r3, [r4, #12]
 8006306:	9a03      	ldr	r2, [sp, #12]
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	42ab      	cmp	r3, r5
 800630c:	dcf2      	bgt.n	80062f4 <_printf_i+0x1e8>
 800630e:	e7eb      	b.n	80062e8 <_printf_i+0x1dc>
 8006310:	2500      	movs	r5, #0
 8006312:	f104 0919 	add.w	r9, r4, #25
 8006316:	e7f5      	b.n	8006304 <_printf_i+0x1f8>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1ac      	bne.n	8006276 <_printf_i+0x16a>
 800631c:	7803      	ldrb	r3, [r0, #0]
 800631e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006322:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006326:	e76c      	b.n	8006202 <_printf_i+0xf6>
 8006328:	08006d21 	.word	0x08006d21
 800632c:	08006d32 	.word	0x08006d32

08006330 <_sbrk_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4c06      	ldr	r4, [pc, #24]	; (800634c <_sbrk_r+0x1c>)
 8006334:	2300      	movs	r3, #0
 8006336:	4605      	mov	r5, r0
 8006338:	4608      	mov	r0, r1
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	f7ff f8a4 	bl	8005488 <_sbrk>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d102      	bne.n	800634a <_sbrk_r+0x1a>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	b103      	cbz	r3, 800634a <_sbrk_r+0x1a>
 8006348:	602b      	str	r3, [r5, #0]
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	20001694 	.word	0x20001694

08006350 <__sread>:
 8006350:	b510      	push	{r4, lr}
 8006352:	460c      	mov	r4, r1
 8006354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006358:	f000 fad6 	bl	8006908 <_read_r>
 800635c:	2800      	cmp	r0, #0
 800635e:	bfab      	itete	ge
 8006360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006362:	89a3      	ldrhlt	r3, [r4, #12]
 8006364:	181b      	addge	r3, r3, r0
 8006366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800636a:	bfac      	ite	ge
 800636c:	6563      	strge	r3, [r4, #84]	; 0x54
 800636e:	81a3      	strhlt	r3, [r4, #12]
 8006370:	bd10      	pop	{r4, pc}

08006372 <__swrite>:
 8006372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006376:	461f      	mov	r7, r3
 8006378:	898b      	ldrh	r3, [r1, #12]
 800637a:	05db      	lsls	r3, r3, #23
 800637c:	4605      	mov	r5, r0
 800637e:	460c      	mov	r4, r1
 8006380:	4616      	mov	r6, r2
 8006382:	d505      	bpl.n	8006390 <__swrite+0x1e>
 8006384:	2302      	movs	r3, #2
 8006386:	2200      	movs	r2, #0
 8006388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800638c:	f000 f9b6 	bl	80066fc <_lseek_r>
 8006390:	89a3      	ldrh	r3, [r4, #12]
 8006392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800639a:	81a3      	strh	r3, [r4, #12]
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	4628      	mov	r0, r5
 80063a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063a6:	f000 b869 	b.w	800647c <_write_r>

080063aa <__sseek>:
 80063aa:	b510      	push	{r4, lr}
 80063ac:	460c      	mov	r4, r1
 80063ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b2:	f000 f9a3 	bl	80066fc <_lseek_r>
 80063b6:	1c43      	adds	r3, r0, #1
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	bf15      	itete	ne
 80063bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063c6:	81a3      	strheq	r3, [r4, #12]
 80063c8:	bf18      	it	ne
 80063ca:	81a3      	strhne	r3, [r4, #12]
 80063cc:	bd10      	pop	{r4, pc}

080063ce <__sclose>:
 80063ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d2:	f000 b8d3 	b.w	800657c <_close_r>
	...

080063d8 <__swbuf_r>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	460e      	mov	r6, r1
 80063dc:	4614      	mov	r4, r2
 80063de:	4605      	mov	r5, r0
 80063e0:	b118      	cbz	r0, 80063ea <__swbuf_r+0x12>
 80063e2:	6983      	ldr	r3, [r0, #24]
 80063e4:	b90b      	cbnz	r3, 80063ea <__swbuf_r+0x12>
 80063e6:	f7ff faa5 	bl	8005934 <__sinit>
 80063ea:	4b21      	ldr	r3, [pc, #132]	; (8006470 <__swbuf_r+0x98>)
 80063ec:	429c      	cmp	r4, r3
 80063ee:	d12a      	bne.n	8006446 <__swbuf_r+0x6e>
 80063f0:	686c      	ldr	r4, [r5, #4]
 80063f2:	69a3      	ldr	r3, [r4, #24]
 80063f4:	60a3      	str	r3, [r4, #8]
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	071a      	lsls	r2, r3, #28
 80063fa:	d52e      	bpl.n	800645a <__swbuf_r+0x82>
 80063fc:	6923      	ldr	r3, [r4, #16]
 80063fe:	b363      	cbz	r3, 800645a <__swbuf_r+0x82>
 8006400:	6923      	ldr	r3, [r4, #16]
 8006402:	6820      	ldr	r0, [r4, #0]
 8006404:	1ac0      	subs	r0, r0, r3
 8006406:	6963      	ldr	r3, [r4, #20]
 8006408:	b2f6      	uxtb	r6, r6
 800640a:	4283      	cmp	r3, r0
 800640c:	4637      	mov	r7, r6
 800640e:	dc04      	bgt.n	800641a <__swbuf_r+0x42>
 8006410:	4621      	mov	r1, r4
 8006412:	4628      	mov	r0, r5
 8006414:	f000 f948 	bl	80066a8 <_fflush_r>
 8006418:	bb28      	cbnz	r0, 8006466 <__swbuf_r+0x8e>
 800641a:	68a3      	ldr	r3, [r4, #8]
 800641c:	3b01      	subs	r3, #1
 800641e:	60a3      	str	r3, [r4, #8]
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	6022      	str	r2, [r4, #0]
 8006426:	701e      	strb	r6, [r3, #0]
 8006428:	6963      	ldr	r3, [r4, #20]
 800642a:	3001      	adds	r0, #1
 800642c:	4283      	cmp	r3, r0
 800642e:	d004      	beq.n	800643a <__swbuf_r+0x62>
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	07db      	lsls	r3, r3, #31
 8006434:	d519      	bpl.n	800646a <__swbuf_r+0x92>
 8006436:	2e0a      	cmp	r6, #10
 8006438:	d117      	bne.n	800646a <__swbuf_r+0x92>
 800643a:	4621      	mov	r1, r4
 800643c:	4628      	mov	r0, r5
 800643e:	f000 f933 	bl	80066a8 <_fflush_r>
 8006442:	b190      	cbz	r0, 800646a <__swbuf_r+0x92>
 8006444:	e00f      	b.n	8006466 <__swbuf_r+0x8e>
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <__swbuf_r+0x9c>)
 8006448:	429c      	cmp	r4, r3
 800644a:	d101      	bne.n	8006450 <__swbuf_r+0x78>
 800644c:	68ac      	ldr	r4, [r5, #8]
 800644e:	e7d0      	b.n	80063f2 <__swbuf_r+0x1a>
 8006450:	4b09      	ldr	r3, [pc, #36]	; (8006478 <__swbuf_r+0xa0>)
 8006452:	429c      	cmp	r4, r3
 8006454:	bf08      	it	eq
 8006456:	68ec      	ldreq	r4, [r5, #12]
 8006458:	e7cb      	b.n	80063f2 <__swbuf_r+0x1a>
 800645a:	4621      	mov	r1, r4
 800645c:	4628      	mov	r0, r5
 800645e:	f000 f81f 	bl	80064a0 <__swsetup_r>
 8006462:	2800      	cmp	r0, #0
 8006464:	d0cc      	beq.n	8006400 <__swbuf_r+0x28>
 8006466:	f04f 37ff 	mov.w	r7, #4294967295
 800646a:	4638      	mov	r0, r7
 800646c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800646e:	bf00      	nop
 8006470:	08006cd0 	.word	0x08006cd0
 8006474:	08006cf0 	.word	0x08006cf0
 8006478:	08006cb0 	.word	0x08006cb0

0800647c <_write_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4c07      	ldr	r4, [pc, #28]	; (800649c <_write_r+0x20>)
 8006480:	4605      	mov	r5, r0
 8006482:	4608      	mov	r0, r1
 8006484:	4611      	mov	r1, r2
 8006486:	2200      	movs	r2, #0
 8006488:	6022      	str	r2, [r4, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	f7fe fb44 	bl	8004b18 <_write>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_write_r+0x1e>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	b103      	cbz	r3, 800649a <_write_r+0x1e>
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20001694 	.word	0x20001694

080064a0 <__swsetup_r>:
 80064a0:	4b32      	ldr	r3, [pc, #200]	; (800656c <__swsetup_r+0xcc>)
 80064a2:	b570      	push	{r4, r5, r6, lr}
 80064a4:	681d      	ldr	r5, [r3, #0]
 80064a6:	4606      	mov	r6, r0
 80064a8:	460c      	mov	r4, r1
 80064aa:	b125      	cbz	r5, 80064b6 <__swsetup_r+0x16>
 80064ac:	69ab      	ldr	r3, [r5, #24]
 80064ae:	b913      	cbnz	r3, 80064b6 <__swsetup_r+0x16>
 80064b0:	4628      	mov	r0, r5
 80064b2:	f7ff fa3f 	bl	8005934 <__sinit>
 80064b6:	4b2e      	ldr	r3, [pc, #184]	; (8006570 <__swsetup_r+0xd0>)
 80064b8:	429c      	cmp	r4, r3
 80064ba:	d10f      	bne.n	80064dc <__swsetup_r+0x3c>
 80064bc:	686c      	ldr	r4, [r5, #4]
 80064be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	0715      	lsls	r5, r2, #28
 80064c6:	d42c      	bmi.n	8006522 <__swsetup_r+0x82>
 80064c8:	06d0      	lsls	r0, r2, #27
 80064ca:	d411      	bmi.n	80064f0 <__swsetup_r+0x50>
 80064cc:	2209      	movs	r2, #9
 80064ce:	6032      	str	r2, [r6, #0]
 80064d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295
 80064da:	e03e      	b.n	800655a <__swsetup_r+0xba>
 80064dc:	4b25      	ldr	r3, [pc, #148]	; (8006574 <__swsetup_r+0xd4>)
 80064de:	429c      	cmp	r4, r3
 80064e0:	d101      	bne.n	80064e6 <__swsetup_r+0x46>
 80064e2:	68ac      	ldr	r4, [r5, #8]
 80064e4:	e7eb      	b.n	80064be <__swsetup_r+0x1e>
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <__swsetup_r+0xd8>)
 80064e8:	429c      	cmp	r4, r3
 80064ea:	bf08      	it	eq
 80064ec:	68ec      	ldreq	r4, [r5, #12]
 80064ee:	e7e6      	b.n	80064be <__swsetup_r+0x1e>
 80064f0:	0751      	lsls	r1, r2, #29
 80064f2:	d512      	bpl.n	800651a <__swsetup_r+0x7a>
 80064f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064f6:	b141      	cbz	r1, 800650a <__swsetup_r+0x6a>
 80064f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064fc:	4299      	cmp	r1, r3
 80064fe:	d002      	beq.n	8006506 <__swsetup_r+0x66>
 8006500:	4630      	mov	r0, r6
 8006502:	f000 f98d 	bl	8006820 <_free_r>
 8006506:	2300      	movs	r3, #0
 8006508:	6363      	str	r3, [r4, #52]	; 0x34
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006510:	81a3      	strh	r3, [r4, #12]
 8006512:	2300      	movs	r3, #0
 8006514:	6063      	str	r3, [r4, #4]
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	f043 0308 	orr.w	r3, r3, #8
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	b94b      	cbnz	r3, 800653a <__swsetup_r+0x9a>
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800652c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006530:	d003      	beq.n	800653a <__swsetup_r+0x9a>
 8006532:	4621      	mov	r1, r4
 8006534:	4630      	mov	r0, r6
 8006536:	f000 f917 	bl	8006768 <__smakebuf_r>
 800653a:	89a2      	ldrh	r2, [r4, #12]
 800653c:	f012 0301 	ands.w	r3, r2, #1
 8006540:	d00c      	beq.n	800655c <__swsetup_r+0xbc>
 8006542:	2300      	movs	r3, #0
 8006544:	60a3      	str	r3, [r4, #8]
 8006546:	6963      	ldr	r3, [r4, #20]
 8006548:	425b      	negs	r3, r3
 800654a:	61a3      	str	r3, [r4, #24]
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	b953      	cbnz	r3, 8006566 <__swsetup_r+0xc6>
 8006550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006554:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006558:	d1ba      	bne.n	80064d0 <__swsetup_r+0x30>
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	0792      	lsls	r2, r2, #30
 800655e:	bf58      	it	pl
 8006560:	6963      	ldrpl	r3, [r4, #20]
 8006562:	60a3      	str	r3, [r4, #8]
 8006564:	e7f2      	b.n	800654c <__swsetup_r+0xac>
 8006566:	2000      	movs	r0, #0
 8006568:	e7f7      	b.n	800655a <__swsetup_r+0xba>
 800656a:	bf00      	nop
 800656c:	20000010 	.word	0x20000010
 8006570:	08006cd0 	.word	0x08006cd0
 8006574:	08006cf0 	.word	0x08006cf0
 8006578:	08006cb0 	.word	0x08006cb0

0800657c <_close_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4c06      	ldr	r4, [pc, #24]	; (8006598 <_close_r+0x1c>)
 8006580:	2300      	movs	r3, #0
 8006582:	4605      	mov	r5, r0
 8006584:	4608      	mov	r0, r1
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	f7fe ff4a 	bl	8005420 <_close>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d102      	bne.n	8006596 <_close_r+0x1a>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	b103      	cbz	r3, 8006596 <_close_r+0x1a>
 8006594:	602b      	str	r3, [r5, #0]
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	20001694 	.word	0x20001694

0800659c <__sflush_r>:
 800659c:	898a      	ldrh	r2, [r1, #12]
 800659e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a2:	4605      	mov	r5, r0
 80065a4:	0710      	lsls	r0, r2, #28
 80065a6:	460c      	mov	r4, r1
 80065a8:	d458      	bmi.n	800665c <__sflush_r+0xc0>
 80065aa:	684b      	ldr	r3, [r1, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	dc05      	bgt.n	80065bc <__sflush_r+0x20>
 80065b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	dc02      	bgt.n	80065bc <__sflush_r+0x20>
 80065b6:	2000      	movs	r0, #0
 80065b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065be:	2e00      	cmp	r6, #0
 80065c0:	d0f9      	beq.n	80065b6 <__sflush_r+0x1a>
 80065c2:	2300      	movs	r3, #0
 80065c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065c8:	682f      	ldr	r7, [r5, #0]
 80065ca:	6a21      	ldr	r1, [r4, #32]
 80065cc:	602b      	str	r3, [r5, #0]
 80065ce:	d032      	beq.n	8006636 <__sflush_r+0x9a>
 80065d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	075a      	lsls	r2, r3, #29
 80065d6:	d505      	bpl.n	80065e4 <__sflush_r+0x48>
 80065d8:	6863      	ldr	r3, [r4, #4]
 80065da:	1ac0      	subs	r0, r0, r3
 80065dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065de:	b10b      	cbz	r3, 80065e4 <__sflush_r+0x48>
 80065e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065e2:	1ac0      	subs	r0, r0, r3
 80065e4:	2300      	movs	r3, #0
 80065e6:	4602      	mov	r2, r0
 80065e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065ea:	6a21      	ldr	r1, [r4, #32]
 80065ec:	4628      	mov	r0, r5
 80065ee:	47b0      	blx	r6
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	d106      	bne.n	8006604 <__sflush_r+0x68>
 80065f6:	6829      	ldr	r1, [r5, #0]
 80065f8:	291d      	cmp	r1, #29
 80065fa:	d848      	bhi.n	800668e <__sflush_r+0xf2>
 80065fc:	4a29      	ldr	r2, [pc, #164]	; (80066a4 <__sflush_r+0x108>)
 80065fe:	40ca      	lsrs	r2, r1
 8006600:	07d6      	lsls	r6, r2, #31
 8006602:	d544      	bpl.n	800668e <__sflush_r+0xf2>
 8006604:	2200      	movs	r2, #0
 8006606:	6062      	str	r2, [r4, #4]
 8006608:	04d9      	lsls	r1, r3, #19
 800660a:	6922      	ldr	r2, [r4, #16]
 800660c:	6022      	str	r2, [r4, #0]
 800660e:	d504      	bpl.n	800661a <__sflush_r+0x7e>
 8006610:	1c42      	adds	r2, r0, #1
 8006612:	d101      	bne.n	8006618 <__sflush_r+0x7c>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b903      	cbnz	r3, 800661a <__sflush_r+0x7e>
 8006618:	6560      	str	r0, [r4, #84]	; 0x54
 800661a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800661c:	602f      	str	r7, [r5, #0]
 800661e:	2900      	cmp	r1, #0
 8006620:	d0c9      	beq.n	80065b6 <__sflush_r+0x1a>
 8006622:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006626:	4299      	cmp	r1, r3
 8006628:	d002      	beq.n	8006630 <__sflush_r+0x94>
 800662a:	4628      	mov	r0, r5
 800662c:	f000 f8f8 	bl	8006820 <_free_r>
 8006630:	2000      	movs	r0, #0
 8006632:	6360      	str	r0, [r4, #52]	; 0x34
 8006634:	e7c0      	b.n	80065b8 <__sflush_r+0x1c>
 8006636:	2301      	movs	r3, #1
 8006638:	4628      	mov	r0, r5
 800663a:	47b0      	blx	r6
 800663c:	1c41      	adds	r1, r0, #1
 800663e:	d1c8      	bne.n	80065d2 <__sflush_r+0x36>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0c5      	beq.n	80065d2 <__sflush_r+0x36>
 8006646:	2b1d      	cmp	r3, #29
 8006648:	d001      	beq.n	800664e <__sflush_r+0xb2>
 800664a:	2b16      	cmp	r3, #22
 800664c:	d101      	bne.n	8006652 <__sflush_r+0xb6>
 800664e:	602f      	str	r7, [r5, #0]
 8006650:	e7b1      	b.n	80065b6 <__sflush_r+0x1a>
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	e7ad      	b.n	80065b8 <__sflush_r+0x1c>
 800665c:	690f      	ldr	r7, [r1, #16]
 800665e:	2f00      	cmp	r7, #0
 8006660:	d0a9      	beq.n	80065b6 <__sflush_r+0x1a>
 8006662:	0793      	lsls	r3, r2, #30
 8006664:	680e      	ldr	r6, [r1, #0]
 8006666:	bf08      	it	eq
 8006668:	694b      	ldreq	r3, [r1, #20]
 800666a:	600f      	str	r7, [r1, #0]
 800666c:	bf18      	it	ne
 800666e:	2300      	movne	r3, #0
 8006670:	eba6 0807 	sub.w	r8, r6, r7
 8006674:	608b      	str	r3, [r1, #8]
 8006676:	f1b8 0f00 	cmp.w	r8, #0
 800667a:	dd9c      	ble.n	80065b6 <__sflush_r+0x1a>
 800667c:	4643      	mov	r3, r8
 800667e:	463a      	mov	r2, r7
 8006680:	6a21      	ldr	r1, [r4, #32]
 8006682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006684:	4628      	mov	r0, r5
 8006686:	47b0      	blx	r6
 8006688:	2800      	cmp	r0, #0
 800668a:	dc06      	bgt.n	800669a <__sflush_r+0xfe>
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	f04f 30ff 	mov.w	r0, #4294967295
 8006698:	e78e      	b.n	80065b8 <__sflush_r+0x1c>
 800669a:	4407      	add	r7, r0
 800669c:	eba8 0800 	sub.w	r8, r8, r0
 80066a0:	e7e9      	b.n	8006676 <__sflush_r+0xda>
 80066a2:	bf00      	nop
 80066a4:	20400001 	.word	0x20400001

080066a8 <_fflush_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	690b      	ldr	r3, [r1, #16]
 80066ac:	4605      	mov	r5, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	b1db      	cbz	r3, 80066ea <_fflush_r+0x42>
 80066b2:	b118      	cbz	r0, 80066bc <_fflush_r+0x14>
 80066b4:	6983      	ldr	r3, [r0, #24]
 80066b6:	b90b      	cbnz	r3, 80066bc <_fflush_r+0x14>
 80066b8:	f7ff f93c 	bl	8005934 <__sinit>
 80066bc:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <_fflush_r+0x48>)
 80066be:	429c      	cmp	r4, r3
 80066c0:	d109      	bne.n	80066d6 <_fflush_r+0x2e>
 80066c2:	686c      	ldr	r4, [r5, #4]
 80066c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c8:	b17b      	cbz	r3, 80066ea <_fflush_r+0x42>
 80066ca:	4621      	mov	r1, r4
 80066cc:	4628      	mov	r0, r5
 80066ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d2:	f7ff bf63 	b.w	800659c <__sflush_r>
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <_fflush_r+0x4c>)
 80066d8:	429c      	cmp	r4, r3
 80066da:	d101      	bne.n	80066e0 <_fflush_r+0x38>
 80066dc:	68ac      	ldr	r4, [r5, #8]
 80066de:	e7f1      	b.n	80066c4 <_fflush_r+0x1c>
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <_fflush_r+0x50>)
 80066e2:	429c      	cmp	r4, r3
 80066e4:	bf08      	it	eq
 80066e6:	68ec      	ldreq	r4, [r5, #12]
 80066e8:	e7ec      	b.n	80066c4 <_fflush_r+0x1c>
 80066ea:	2000      	movs	r0, #0
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
 80066ee:	bf00      	nop
 80066f0:	08006cd0 	.word	0x08006cd0
 80066f4:	08006cf0 	.word	0x08006cf0
 80066f8:	08006cb0 	.word	0x08006cb0

080066fc <_lseek_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4c07      	ldr	r4, [pc, #28]	; (800671c <_lseek_r+0x20>)
 8006700:	4605      	mov	r5, r0
 8006702:	4608      	mov	r0, r1
 8006704:	4611      	mov	r1, r2
 8006706:	2200      	movs	r2, #0
 8006708:	6022      	str	r2, [r4, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7fe feaf 	bl	800546e <_lseek>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_lseek_r+0x1e>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	b103      	cbz	r3, 800671a <_lseek_r+0x1e>
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20001694 	.word	0x20001694

08006720 <__swhatbuf_r>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	460e      	mov	r6, r1
 8006724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006728:	2900      	cmp	r1, #0
 800672a:	b096      	sub	sp, #88	; 0x58
 800672c:	4614      	mov	r4, r2
 800672e:	461d      	mov	r5, r3
 8006730:	da07      	bge.n	8006742 <__swhatbuf_r+0x22>
 8006732:	2300      	movs	r3, #0
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	89b3      	ldrh	r3, [r6, #12]
 8006738:	061a      	lsls	r2, r3, #24
 800673a:	d410      	bmi.n	800675e <__swhatbuf_r+0x3e>
 800673c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006740:	e00e      	b.n	8006760 <__swhatbuf_r+0x40>
 8006742:	466a      	mov	r2, sp
 8006744:	f000 f8f2 	bl	800692c <_fstat_r>
 8006748:	2800      	cmp	r0, #0
 800674a:	dbf2      	blt.n	8006732 <__swhatbuf_r+0x12>
 800674c:	9a01      	ldr	r2, [sp, #4]
 800674e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006752:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006756:	425a      	negs	r2, r3
 8006758:	415a      	adcs	r2, r3
 800675a:	602a      	str	r2, [r5, #0]
 800675c:	e7ee      	b.n	800673c <__swhatbuf_r+0x1c>
 800675e:	2340      	movs	r3, #64	; 0x40
 8006760:	2000      	movs	r0, #0
 8006762:	6023      	str	r3, [r4, #0]
 8006764:	b016      	add	sp, #88	; 0x58
 8006766:	bd70      	pop	{r4, r5, r6, pc}

08006768 <__smakebuf_r>:
 8006768:	898b      	ldrh	r3, [r1, #12]
 800676a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800676c:	079d      	lsls	r5, r3, #30
 800676e:	4606      	mov	r6, r0
 8006770:	460c      	mov	r4, r1
 8006772:	d507      	bpl.n	8006784 <__smakebuf_r+0x1c>
 8006774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	6123      	str	r3, [r4, #16]
 800677c:	2301      	movs	r3, #1
 800677e:	6163      	str	r3, [r4, #20]
 8006780:	b002      	add	sp, #8
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	ab01      	add	r3, sp, #4
 8006786:	466a      	mov	r2, sp
 8006788:	f7ff ffca 	bl	8006720 <__swhatbuf_r>
 800678c:	9900      	ldr	r1, [sp, #0]
 800678e:	4605      	mov	r5, r0
 8006790:	4630      	mov	r0, r6
 8006792:	f7ff f959 	bl	8005a48 <_malloc_r>
 8006796:	b948      	cbnz	r0, 80067ac <__smakebuf_r+0x44>
 8006798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800679c:	059a      	lsls	r2, r3, #22
 800679e:	d4ef      	bmi.n	8006780 <__smakebuf_r+0x18>
 80067a0:	f023 0303 	bic.w	r3, r3, #3
 80067a4:	f043 0302 	orr.w	r3, r3, #2
 80067a8:	81a3      	strh	r3, [r4, #12]
 80067aa:	e7e3      	b.n	8006774 <__smakebuf_r+0xc>
 80067ac:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <__smakebuf_r+0x7c>)
 80067ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	6020      	str	r0, [r4, #0]
 80067b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b8:	81a3      	strh	r3, [r4, #12]
 80067ba:	9b00      	ldr	r3, [sp, #0]
 80067bc:	6163      	str	r3, [r4, #20]
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	6120      	str	r0, [r4, #16]
 80067c2:	b15b      	cbz	r3, 80067dc <__smakebuf_r+0x74>
 80067c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c8:	4630      	mov	r0, r6
 80067ca:	f000 f8c1 	bl	8006950 <_isatty_r>
 80067ce:	b128      	cbz	r0, 80067dc <__smakebuf_r+0x74>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	431d      	orrs	r5, r3
 80067e0:	81a5      	strh	r5, [r4, #12]
 80067e2:	e7cd      	b.n	8006780 <__smakebuf_r+0x18>
 80067e4:	080058fd 	.word	0x080058fd

080067e8 <memmove>:
 80067e8:	4288      	cmp	r0, r1
 80067ea:	b510      	push	{r4, lr}
 80067ec:	eb01 0302 	add.w	r3, r1, r2
 80067f0:	d807      	bhi.n	8006802 <memmove+0x1a>
 80067f2:	1e42      	subs	r2, r0, #1
 80067f4:	4299      	cmp	r1, r3
 80067f6:	d00a      	beq.n	800680e <memmove+0x26>
 80067f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006800:	e7f8      	b.n	80067f4 <memmove+0xc>
 8006802:	4283      	cmp	r3, r0
 8006804:	d9f5      	bls.n	80067f2 <memmove+0xa>
 8006806:	1881      	adds	r1, r0, r2
 8006808:	1ad2      	subs	r2, r2, r3
 800680a:	42d3      	cmn	r3, r2
 800680c:	d100      	bne.n	8006810 <memmove+0x28>
 800680e:	bd10      	pop	{r4, pc}
 8006810:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006814:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006818:	e7f7      	b.n	800680a <memmove+0x22>

0800681a <__malloc_lock>:
 800681a:	4770      	bx	lr

0800681c <__malloc_unlock>:
 800681c:	4770      	bx	lr
	...

08006820 <_free_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4605      	mov	r5, r0
 8006824:	2900      	cmp	r1, #0
 8006826:	d045      	beq.n	80068b4 <_free_r+0x94>
 8006828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800682c:	1f0c      	subs	r4, r1, #4
 800682e:	2b00      	cmp	r3, #0
 8006830:	bfb8      	it	lt
 8006832:	18e4      	addlt	r4, r4, r3
 8006834:	f7ff fff1 	bl	800681a <__malloc_lock>
 8006838:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <_free_r+0x98>)
 800683a:	6813      	ldr	r3, [r2, #0]
 800683c:	4610      	mov	r0, r2
 800683e:	b933      	cbnz	r3, 800684e <_free_r+0x2e>
 8006840:	6063      	str	r3, [r4, #4]
 8006842:	6014      	str	r4, [r2, #0]
 8006844:	4628      	mov	r0, r5
 8006846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800684a:	f7ff bfe7 	b.w	800681c <__malloc_unlock>
 800684e:	42a3      	cmp	r3, r4
 8006850:	d90c      	bls.n	800686c <_free_r+0x4c>
 8006852:	6821      	ldr	r1, [r4, #0]
 8006854:	1862      	adds	r2, r4, r1
 8006856:	4293      	cmp	r3, r2
 8006858:	bf04      	itt	eq
 800685a:	681a      	ldreq	r2, [r3, #0]
 800685c:	685b      	ldreq	r3, [r3, #4]
 800685e:	6063      	str	r3, [r4, #4]
 8006860:	bf04      	itt	eq
 8006862:	1852      	addeq	r2, r2, r1
 8006864:	6022      	streq	r2, [r4, #0]
 8006866:	6004      	str	r4, [r0, #0]
 8006868:	e7ec      	b.n	8006844 <_free_r+0x24>
 800686a:	4613      	mov	r3, r2
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	b10a      	cbz	r2, 8006874 <_free_r+0x54>
 8006870:	42a2      	cmp	r2, r4
 8006872:	d9fa      	bls.n	800686a <_free_r+0x4a>
 8006874:	6819      	ldr	r1, [r3, #0]
 8006876:	1858      	adds	r0, r3, r1
 8006878:	42a0      	cmp	r0, r4
 800687a:	d10b      	bne.n	8006894 <_free_r+0x74>
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	4401      	add	r1, r0
 8006880:	1858      	adds	r0, r3, r1
 8006882:	4282      	cmp	r2, r0
 8006884:	6019      	str	r1, [r3, #0]
 8006886:	d1dd      	bne.n	8006844 <_free_r+0x24>
 8006888:	6810      	ldr	r0, [r2, #0]
 800688a:	6852      	ldr	r2, [r2, #4]
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	4401      	add	r1, r0
 8006890:	6019      	str	r1, [r3, #0]
 8006892:	e7d7      	b.n	8006844 <_free_r+0x24>
 8006894:	d902      	bls.n	800689c <_free_r+0x7c>
 8006896:	230c      	movs	r3, #12
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	e7d3      	b.n	8006844 <_free_r+0x24>
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	1821      	adds	r1, r4, r0
 80068a0:	428a      	cmp	r2, r1
 80068a2:	bf04      	itt	eq
 80068a4:	6811      	ldreq	r1, [r2, #0]
 80068a6:	6852      	ldreq	r2, [r2, #4]
 80068a8:	6062      	str	r2, [r4, #4]
 80068aa:	bf04      	itt	eq
 80068ac:	1809      	addeq	r1, r1, r0
 80068ae:	6021      	streq	r1, [r4, #0]
 80068b0:	605c      	str	r4, [r3, #4]
 80068b2:	e7c7      	b.n	8006844 <_free_r+0x24>
 80068b4:	bd38      	pop	{r3, r4, r5, pc}
 80068b6:	bf00      	nop
 80068b8:	200015a0 	.word	0x200015a0

080068bc <_realloc_r>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	4607      	mov	r7, r0
 80068c0:	4614      	mov	r4, r2
 80068c2:	460e      	mov	r6, r1
 80068c4:	b921      	cbnz	r1, 80068d0 <_realloc_r+0x14>
 80068c6:	4611      	mov	r1, r2
 80068c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068cc:	f7ff b8bc 	b.w	8005a48 <_malloc_r>
 80068d0:	b922      	cbnz	r2, 80068dc <_realloc_r+0x20>
 80068d2:	f7ff ffa5 	bl	8006820 <_free_r>
 80068d6:	4625      	mov	r5, r4
 80068d8:	4628      	mov	r0, r5
 80068da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068dc:	f000 f848 	bl	8006970 <_malloc_usable_size_r>
 80068e0:	42a0      	cmp	r0, r4
 80068e2:	d20f      	bcs.n	8006904 <_realloc_r+0x48>
 80068e4:	4621      	mov	r1, r4
 80068e6:	4638      	mov	r0, r7
 80068e8:	f7ff f8ae 	bl	8005a48 <_malloc_r>
 80068ec:	4605      	mov	r5, r0
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d0f2      	beq.n	80068d8 <_realloc_r+0x1c>
 80068f2:	4631      	mov	r1, r6
 80068f4:	4622      	mov	r2, r4
 80068f6:	f7fe ff91 	bl	800581c <memcpy>
 80068fa:	4631      	mov	r1, r6
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7ff ff8f 	bl	8006820 <_free_r>
 8006902:	e7e9      	b.n	80068d8 <_realloc_r+0x1c>
 8006904:	4635      	mov	r5, r6
 8006906:	e7e7      	b.n	80068d8 <_realloc_r+0x1c>

08006908 <_read_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4c07      	ldr	r4, [pc, #28]	; (8006928 <_read_r+0x20>)
 800690c:	4605      	mov	r5, r0
 800690e:	4608      	mov	r0, r1
 8006910:	4611      	mov	r1, r2
 8006912:	2200      	movs	r2, #0
 8006914:	6022      	str	r2, [r4, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	f7fe fd65 	bl	80053e6 <_read>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_read_r+0x1e>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	b103      	cbz	r3, 8006926 <_read_r+0x1e>
 8006924:	602b      	str	r3, [r5, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	20001694 	.word	0x20001694

0800692c <_fstat_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4c07      	ldr	r4, [pc, #28]	; (800694c <_fstat_r+0x20>)
 8006930:	2300      	movs	r3, #0
 8006932:	4605      	mov	r5, r0
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	f7fe fd7d 	bl	8005438 <_fstat>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d102      	bne.n	8006948 <_fstat_r+0x1c>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	b103      	cbz	r3, 8006948 <_fstat_r+0x1c>
 8006946:	602b      	str	r3, [r5, #0]
 8006948:	bd38      	pop	{r3, r4, r5, pc}
 800694a:	bf00      	nop
 800694c:	20001694 	.word	0x20001694

08006950 <_isatty_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4c06      	ldr	r4, [pc, #24]	; (800696c <_isatty_r+0x1c>)
 8006954:	2300      	movs	r3, #0
 8006956:	4605      	mov	r5, r0
 8006958:	4608      	mov	r0, r1
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	f7fe fd7c 	bl	8005458 <_isatty>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_isatty_r+0x1a>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	b103      	cbz	r3, 800696a <_isatty_r+0x1a>
 8006968:	602b      	str	r3, [r5, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	20001694 	.word	0x20001694

08006970 <_malloc_usable_size_r>:
 8006970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006974:	1f18      	subs	r0, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	bfbc      	itt	lt
 800697a:	580b      	ldrlt	r3, [r1, r0]
 800697c:	18c0      	addlt	r0, r0, r3
 800697e:	4770      	bx	lr

08006980 <_init>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	bf00      	nop
 8006984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006986:	bc08      	pop	{r3}
 8006988:	469e      	mov	lr, r3
 800698a:	4770      	bx	lr

0800698c <_fini>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	bf00      	nop
 8006990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006992:	bc08      	pop	{r3}
 8006994:	469e      	mov	lr, r3
 8006996:	4770      	bx	lr
