
Timer_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d0c  08003d0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d0c  08003d0c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d0c  08003d0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d10  08003d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000070  08003d84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003d84  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d15  00000000  00000000  0003094c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  000331b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d03d  00000000  00000000  00033c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009476  00000000  00000000  00050c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4282  00000000  00000000  0005a0e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003214  00000000  00000000  000fe3e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c34 	.word	0x08003c34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003c34 	.word	0x08003c34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_Init+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_Init+0x28>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 f949 	bl	8000518 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 f808 	bl	800029c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800028c:	f002 ff18 	bl	80030c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_InitTick+0x54>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <HAL_InitTick+0x58>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f961 	bl	8000582 <HAL_SYSTICK_Config>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e00e      	b.n	80002e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d80a      	bhi.n	80002e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002d0:	2200      	movs	r2, #0
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f000 f929 	bl	800052e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_InitTick+0x5c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e000      	b.n	80002e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000008 	.word	0x20000008
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_IncTick+0x20>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4413      	add	r3, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_IncTick+0x24>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	200000b8 	.word	0x200000b8

08000324 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return uwTick;  
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <HAL_GetTick+0x14>)
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	200000b8 	.word	0x200000b8

0800033c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000344:	f7ff ffee 	bl	8000324 <HAL_GetTick>
 8000348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000354:	d005      	beq.n	8000362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Delay+0x40>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4413      	add	r3, r2
 8000360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000362:	bf00      	nop
 8000364:	f7ff ffde 	bl	8000324 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	429a      	cmp	r2, r3
 8000372:	d8f7      	bhi.n	8000364 <HAL_Delay+0x28>
  {
  }
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000004 	.word	0x20000004

08000380 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f003 0307 	and.w	r3, r3, #7
 800038e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <NVIC_SetPriorityGrouping+0x44>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800039c:	4013      	ands	r3, r2
 800039e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003b2:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <NVIC_SetPriorityGrouping+0x44>)
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	60d3      	str	r3, [r2, #12]
}
 80003b8:	bf00      	nop
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <NVIC_GetPriorityGrouping+0x18>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	0a1b      	lsrs	r3, r3, #8
 80003d2:	f003 0307 	and.w	r3, r3, #7
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f003 021f 	and.w	r2, r3, #31
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <NVIC_EnableIRQ+0x30>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	095b      	lsrs	r3, r3, #5
 80003fc:	2001      	movs	r0, #1
 80003fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000e100 	.word	0xe000e100

08000418 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	da0b      	bge.n	8000444 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	b2da      	uxtb	r2, r3
 8000430:	490c      	ldr	r1, [pc, #48]	; (8000464 <NVIC_SetPriority+0x4c>)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	f003 030f 	and.w	r3, r3, #15
 8000438:	3b04      	subs	r3, #4
 800043a:	0112      	lsls	r2, r2, #4
 800043c:	b2d2      	uxtb	r2, r2
 800043e:	440b      	add	r3, r1
 8000440:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000442:	e009      	b.n	8000458 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4907      	ldr	r1, [pc, #28]	; (8000468 <NVIC_SetPriority+0x50>)
 800044a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044e:	0112      	lsls	r2, r2, #4
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	440b      	add	r3, r1
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e000ed00 	.word	0xe000ed00
 8000468:	e000e100 	.word	0xe000e100

0800046c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800046c:	b480      	push	{r7}
 800046e:	b089      	sub	sp, #36	; 0x24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f003 0307 	and.w	r3, r3, #7
 800047e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	f1c3 0307 	rsb	r3, r3, #7
 8000486:	2b04      	cmp	r3, #4
 8000488:	bf28      	it	cs
 800048a:	2304      	movcs	r3, #4
 800048c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	3304      	adds	r3, #4
 8000492:	2b06      	cmp	r3, #6
 8000494:	d902      	bls.n	800049c <NVIC_EncodePriority+0x30>
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	3b03      	subs	r3, #3
 800049a:	e000      	b.n	800049e <NVIC_EncodePriority+0x32>
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	f04f 32ff 	mov.w	r2, #4294967295
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	fa02 f303 	lsl.w	r3, r2, r3
 80004aa:	43da      	mvns	r2, r3
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	401a      	ands	r2, r3
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004b4:	f04f 31ff 	mov.w	r1, #4294967295
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	43d9      	mvns	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004c4:	4313      	orrs	r3, r2
         );
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3724      	adds	r7, #36	; 0x24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3b01      	subs	r3, #1
 80004e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004e4:	d301      	bcc.n	80004ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004e6:	2301      	movs	r3, #1
 80004e8:	e00f      	b.n	800050a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <SysTick_Config+0x40>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004f2:	210f      	movs	r1, #15
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f7ff ff8e 	bl	8000418 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <SysTick_Config+0x40>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <SysTick_Config+0x40>)
 8000504:	2207      	movs	r2, #7
 8000506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	e000e010 	.word	0xe000e010

08000518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f7ff ff2d 	bl	8000380 <NVIC_SetPriorityGrouping>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	4603      	mov	r3, r0
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
 800053a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000540:	f7ff ff42 	bl	80003c8 <NVIC_GetPriorityGrouping>
 8000544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	68b9      	ldr	r1, [r7, #8]
 800054a:	6978      	ldr	r0, [r7, #20]
 800054c:	f7ff ff8e 	bl	800046c <NVIC_EncodePriority>
 8000550:	4602      	mov	r2, r0
 8000552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff5d 	bl	8000418 <NVIC_SetPriority>
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
 800056c:	4603      	mov	r3, r0
 800056e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff35 	bl	80003e4 <NVIC_EnableIRQ>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff ffa2 	bl	80004d4 <SysTick_Config>
 8000590:	4603      	mov	r3, r0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005b2:	e14e      	b.n	8000852 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	2101      	movs	r1, #1
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f000 8140 	beq.w	800084c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d003      	beq.n	80005dc <HAL_GPIO_Init+0x40>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b12      	cmp	r3, #18
 80005da:	d123      	bne.n	8000624 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	08da      	lsrs	r2, r3, #3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3208      	adds	r2, #8
 80005e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f003 0307 	and.w	r3, r3, #7
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	220f      	movs	r2, #15
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	691a      	ldr	r2, [r3, #16]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4313      	orrs	r3, r2
 8000614:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	08da      	lsrs	r2, r3, #3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3208      	adds	r2, #8
 800061e:	6939      	ldr	r1, [r7, #16]
 8000620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	2203      	movs	r2, #3
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	43db      	mvns	r3, r3
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	4013      	ands	r3, r2
 800063a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f003 0203 	and.w	r2, r3, #3
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	4313      	orrs	r3, r2
 8000650:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00b      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d007      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800066c:	2b11      	cmp	r3, #17
 800066e:	d003      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	2b12      	cmp	r3, #18
 8000676:	d130      	bne.n	80006da <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	2203      	movs	r2, #3
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	43db      	mvns	r3, r3
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	4013      	ands	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	68da      	ldr	r2, [r3, #12]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4313      	orrs	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ae:	2201      	movs	r2, #1
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43db      	mvns	r3, r3
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	4013      	ands	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	091b      	lsrs	r3, r3, #4
 80006c4:	f003 0201 	and.w	r2, r3, #1
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	2203      	movs	r2, #3
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	4013      	ands	r3, r2
 80006f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	4313      	orrs	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	2b00      	cmp	r3, #0
 8000714:	f000 809a 	beq.w	800084c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000718:	4b55      	ldr	r3, [pc, #340]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a54      	ldr	r2, [pc, #336]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b52      	ldr	r3, [pc, #328]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000730:	4a50      	ldr	r2, [pc, #320]	; (8000874 <HAL_GPIO_Init+0x2d8>)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	089b      	lsrs	r3, r3, #2
 8000736:	3302      	adds	r3, #2
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	f003 0303 	and.w	r3, r3, #3
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	220f      	movs	r2, #15
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	4013      	ands	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800075a:	d013      	beq.n	8000784 <HAL_GPIO_Init+0x1e8>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a46      	ldr	r2, [pc, #280]	; (8000878 <HAL_GPIO_Init+0x2dc>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d00d      	beq.n	8000780 <HAL_GPIO_Init+0x1e4>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a45      	ldr	r2, [pc, #276]	; (800087c <HAL_GPIO_Init+0x2e0>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d007      	beq.n	800077c <HAL_GPIO_Init+0x1e0>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a44      	ldr	r2, [pc, #272]	; (8000880 <HAL_GPIO_Init+0x2e4>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d101      	bne.n	8000778 <HAL_GPIO_Init+0x1dc>
 8000774:	2303      	movs	r3, #3
 8000776:	e006      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000778:	2305      	movs	r3, #5
 800077a:	e004      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 800077c:	2302      	movs	r3, #2
 800077e:	e002      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000780:	2301      	movs	r3, #1
 8000782:	e000      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000784:	2300      	movs	r3, #0
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	f002 0203 	and.w	r2, r2, #3
 800078c:	0092      	lsls	r2, r2, #2
 800078e:	4093      	lsls	r3, r2
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	4313      	orrs	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000796:	4937      	ldr	r1, [pc, #220]	; (8000874 <HAL_GPIO_Init+0x2d8>)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	3302      	adds	r3, #2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	43db      	mvns	r3, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d003      	beq.n	80007c8 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80007c8:	4a2e      	ldr	r2, [pc, #184]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	43db      	mvns	r3, r3
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	4013      	ands	r3, r2
 80007dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d003      	beq.n	80007f2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	43db      	mvns	r3, r3
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000810:	2b00      	cmp	r3, #0
 8000812:	d003      	beq.n	800081c <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	43db      	mvns	r3, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4313      	orrs	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	fa22 f303 	lsr.w	r3, r2, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	f47f aea9 	bne.w	80005b4 <HAL_GPIO_Init+0x18>
  }
}
 8000862:	bf00      	nop
 8000864:	371c      	adds	r7, #28
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	40010000 	.word	0x40010000
 8000878:	48000400 	.word	0x48000400
 800087c:	48000800 	.word	0x48000800
 8000880:	48000c00 	.word	0x48000c00
 8000884:	40010400 	.word	0x40010400

08000888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	807b      	strh	r3, [r7, #2]
 8000894:	4613      	mov	r3, r2
 8000896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000898:	787b      	ldrb	r3, [r7, #1]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800089e:	887a      	ldrh	r2, [r7, #2]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008a4:	e002      	b.n	80008ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008a6:	887a      	ldrh	r2, [r7, #2]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695a      	ldr	r2, [r3, #20]
 80008c8:	887b      	ldrh	r3, [r7, #2]
 80008ca:	405a      	eors	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	615a      	str	r2, [r3, #20]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	4013      	ands	r3, r2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d006      	beq.n	8000900 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 fb90 	bl	8003020 <HAL_GPIO_EXTI_Callback>
  }
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40010400 	.word	0x40010400

0800090c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000912:	af00      	add	r7, sp, #0
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	f000 beda 	b.w	80016da <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	2b00      	cmp	r3, #0
 8000932:	f000 816e 	beq.w	8000c12 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000936:	4bb5      	ldr	r3, [pc, #724]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 030c 	and.w	r3, r3, #12
 800093e:	2b04      	cmp	r3, #4
 8000940:	d00c      	beq.n	800095c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000942:	4bb2      	ldr	r3, [pc, #712]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f003 030c 	and.w	r3, r3, #12
 800094a:	2b08      	cmp	r3, #8
 800094c:	d15a      	bne.n	8000a04 <HAL_RCC_OscConfig+0xf8>
 800094e:	4baf      	ldr	r3, [pc, #700]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800095a:	d153      	bne.n	8000a04 <HAL_RCC_OscConfig+0xf8>
 800095c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000960:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000964:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000968:	fa93 f3a3 	rbit	r3, r3
 800096c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000970:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000974:	fab3 f383 	clz	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	095b      	lsrs	r3, r3, #5
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b01      	cmp	r3, #1
 8000986:	d102      	bne.n	800098e <HAL_RCC_OscConfig+0x82>
 8000988:	4ba0      	ldr	r3, [pc, #640]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	e015      	b.n	80009ba <HAL_RCC_OscConfig+0xae>
 800098e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000992:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000996:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800099a:	fa93 f3a3 	rbit	r3, r3
 800099e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80009a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009a6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80009aa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80009ae:	fa93 f3a3 	rbit	r3, r3
 80009b2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80009b6:	4b95      	ldr	r3, [pc, #596]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009be:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80009c2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80009c6:	fa92 f2a2 	rbit	r2, r2
 80009ca:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80009ce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80009d2:	fab2 f282 	clz	r2, r2
 80009d6:	b252      	sxtb	r2, r2
 80009d8:	f042 0220 	orr.w	r2, r2, #32
 80009dc:	b252      	sxtb	r2, r2
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	f002 021f 	and.w	r2, r2, #31
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	4013      	ands	r3, r2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f000 810f 	beq.w	8000c10 <HAL_RCC_OscConfig+0x304>
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f040 8109 	bne.w	8000c10 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	f000 be6b 	b.w	80016da <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a0e:	d106      	bne.n	8000a1e <HAL_RCC_OscConfig+0x112>
 8000a10:	4b7e      	ldr	r3, [pc, #504]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a7d      	ldr	r2, [pc, #500]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e030      	b.n	8000a80 <HAL_RCC_OscConfig+0x174>
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10c      	bne.n	8000a42 <HAL_RCC_OscConfig+0x136>
 8000a28:	4b78      	ldr	r3, [pc, #480]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a77      	ldr	r2, [pc, #476]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b75      	ldr	r3, [pc, #468]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a74      	ldr	r2, [pc, #464]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e01e      	b.n	8000a80 <HAL_RCC_OscConfig+0x174>
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a4c:	d10c      	bne.n	8000a68 <HAL_RCC_OscConfig+0x15c>
 8000a4e:	4b6f      	ldr	r3, [pc, #444]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a6e      	ldr	r2, [pc, #440]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	4b6c      	ldr	r3, [pc, #432]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a6b      	ldr	r2, [pc, #428]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e00b      	b.n	8000a80 <HAL_RCC_OscConfig+0x174>
 8000a68:	4b68      	ldr	r3, [pc, #416]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a67      	ldr	r2, [pc, #412]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	4b65      	ldr	r3, [pc, #404]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a64      	ldr	r2, [pc, #400]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a80:	4b62      	ldr	r3, [pc, #392]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a84:	f023 020f 	bic.w	r2, r3, #15
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	495f      	ldr	r1, [pc, #380]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000a90:	4313      	orrs	r3, r2
 8000a92:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d05a      	beq.n	8000b54 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a9e:	f7ff fc41 	bl	8000324 <HAL_GetTick>
 8000aa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aa6:	e00a      	b.n	8000abe <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aa8:	f7ff fc3c 	bl	8000324 <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2b64      	cmp	r3, #100	; 0x64
 8000ab6:	d902      	bls.n	8000abe <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	f000 be0e 	b.w	80016da <HAL_RCC_OscConfig+0xdce>
 8000abe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ac2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000aca:	fa93 f3a3 	rbit	r3, r3
 8000ace:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000ad2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad6:	fab3 f383 	clz	r3, r3
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	095b      	lsrs	r3, r3, #5
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d102      	bne.n	8000af0 <HAL_RCC_OscConfig+0x1e4>
 8000aea:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	e015      	b.n	8000b1c <HAL_RCC_OscConfig+0x210>
 8000af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000afc:	fa93 f3a3 	rbit	r3, r3
 8000b00:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000b0c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000b10:	fa93 f3a3 	rbit	r3, r3
 8000b14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000b18:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b20:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000b24:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000b28:	fa92 f2a2 	rbit	r2, r2
 8000b2c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000b30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b252      	sxtb	r2, r2
 8000b3a:	f042 0220 	orr.w	r2, r2, #32
 8000b3e:	b252      	sxtb	r2, r2
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	f002 021f 	and.w	r2, r2, #31
 8000b46:	2101      	movs	r1, #1
 8000b48:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0aa      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x19c>
 8000b52:	e05e      	b.n	8000c12 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b54:	f7ff fbe6 	bl	8000324 <HAL_GetTick>
 8000b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b5c:	e00a      	b.n	8000b74 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b5e:	f7ff fbe1 	bl	8000324 <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	2b64      	cmp	r3, #100	; 0x64
 8000b6c:	d902      	bls.n	8000b74 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	f000 bdb3 	b.w	80016da <HAL_RCC_OscConfig+0xdce>
 8000b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b78:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000b80:	fa93 f3a3 	rbit	r3, r3
 8000b84:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000b88:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b8c:	fab3 f383 	clz	r3, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	095b      	lsrs	r3, r3, #5
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d102      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x29a>
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	e015      	b.n	8000bd2 <HAL_RCC_OscConfig+0x2c6>
 8000ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000baa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000bb2:	fa93 f3a3 	rbit	r3, r3
 8000bb6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bbe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000bc2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000bc6:	fa93 f3a3 	rbit	r3, r3
 8000bca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_RCC_OscConfig+0x300>)
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bd6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000bda:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000bde:	fa92 f2a2 	rbit	r2, r2
 8000be2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000be6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	b252      	sxtb	r2, r2
 8000bf0:	f042 0220 	orr.w	r2, r2, #32
 8000bf4:	b252      	sxtb	r2, r2
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	f002 021f 	and.w	r2, r2, #31
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000c02:	4013      	ands	r3, r2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1aa      	bne.n	8000b5e <HAL_RCC_OscConfig+0x252>
 8000c08:	e003      	b.n	8000c12 <HAL_RCC_OscConfig+0x306>
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 8170 	beq.w	8000f02 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c22:	4bd0      	ldr	r3, [pc, #832]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00b      	beq.n	8000c46 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c2e:	4bcd      	ldr	r3, [pc, #820]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d16d      	bne.n	8000d16 <HAL_RCC_OscConfig+0x40a>
 8000c3a:	4bca      	ldr	r3, [pc, #808]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d167      	bne.n	8000d16 <HAL_RCC_OscConfig+0x40a>
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000c50:	fa93 f3a3 	rbit	r3, r3
 8000c54:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000c58:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5c:	fab3 f383 	clz	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d102      	bne.n	8000c76 <HAL_RCC_OscConfig+0x36a>
 8000c70:	4bbc      	ldr	r3, [pc, #752]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	e013      	b.n	8000c9e <HAL_RCC_OscConfig+0x392>
 8000c76:	2302      	movs	r3, #2
 8000c78:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c7c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c80:	fa93 f3a3 	rbit	r3, r3
 8000c84:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000c88:	2302      	movs	r3, #2
 8000c8a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000c8e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000c92:	fa93 f3a3 	rbit	r3, r3
 8000c96:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c9a:	4bb2      	ldr	r3, [pc, #712]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000ca4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000ca8:	fa92 f2a2 	rbit	r2, r2
 8000cac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000cb0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	b252      	sxtb	r2, r2
 8000cba:	f042 0220 	orr.w	r2, r2, #32
 8000cbe:	b252      	sxtb	r2, r2
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	f002 021f 	and.w	r2, r2, #31
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d007      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x3d6>
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d002      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f000 bcfc 	b.w	80016da <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce2:	4ba0      	ldr	r3, [pc, #640]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6959      	ldr	r1, [r3, #20]
 8000cf0:	23f8      	movs	r3, #248	; 0xf8
 8000cf2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000d02:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000d06:	fab3 f383 	clz	r3, r3
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	4995      	ldr	r1, [pc, #596]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d14:	e0f5      	b.n	8000f02 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 8085 	beq.w	8000e2c <HAL_RCC_OscConfig+0x520>
 8000d22:	2301      	movs	r3, #1
 8000d24:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d28:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000d2c:	fa93 f3a3 	rbit	r3, r3
 8000d30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000d34:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d38:	fab3 f383 	clz	r3, r3
 8000d3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	461a      	mov	r2, r3
 8000d48:	2301      	movs	r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff faea 	bl	8000324 <HAL_GetTick>
 8000d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d54:	e00a      	b.n	8000d6c <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d56:	f7ff fae5 	bl	8000324 <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d902      	bls.n	8000d6c <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	f000 bcb7 	b.w	80016da <HAL_RCC_OscConfig+0xdce>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d76:	fa93 f3a3 	rbit	r3, r3
 8000d7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000d7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d82:	fab3 f383 	clz	r3, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	095b      	lsrs	r3, r3, #5
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d102      	bne.n	8000d9c <HAL_RCC_OscConfig+0x490>
 8000d96:	4b73      	ldr	r3, [pc, #460]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	e013      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b8>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000da6:	fa93 f3a3 	rbit	r3, r3
 8000daa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000dae:	2302      	movs	r3, #2
 8000db0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000db4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000db8:	fa93 f3a3 	rbit	r3, r3
 8000dbc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000dc0:	4b68      	ldr	r3, [pc, #416]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000dca:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000dce:	fa92 f2a2 	rbit	r2, r2
 8000dd2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000dd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000dda:	fab2 f282 	clz	r2, r2
 8000dde:	b252      	sxtb	r2, r2
 8000de0:	f042 0220 	orr.w	r2, r2, #32
 8000de4:	b252      	sxtb	r2, r2
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	f002 021f 	and.w	r2, r2, #31
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f202 	lsl.w	r2, r1, r2
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0ae      	beq.n	8000d56 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df8:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6959      	ldr	r1, [r3, #20]
 8000e06:	23f8      	movs	r3, #248	; 0xf8
 8000e08:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000e10:	fa93 f3a3 	rbit	r3, r3
 8000e14:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000e18:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000e1c:	fab3 f383 	clz	r3, r3
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	494f      	ldr	r1, [pc, #316]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
 8000e2a:	e06a      	b.n	8000f02 <HAL_RCC_OscConfig+0x5f6>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e32:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e36:	fa93 f3a3 	rbit	r3, r3
 8000e3a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000e3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e42:	fab3 f383 	clz	r3, r3
 8000e46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	461a      	mov	r2, r3
 8000e52:	2300      	movs	r3, #0
 8000e54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fa65 	bl	8000324 <HAL_GetTick>
 8000e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5e:	e00a      	b.n	8000e76 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e60:	f7ff fa60 	bl	8000324 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d902      	bls.n	8000e76 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	f000 bc32 	b.w	80016da <HAL_RCC_OscConfig+0xdce>
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e80:	fa93 f3a3 	rbit	r3, r3
 8000e84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000e88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8c:	fab3 f383 	clz	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d102      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x59a>
 8000ea0:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	e013      	b.n	8000ece <HAL_RCC_OscConfig+0x5c2>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000eb0:	fa93 f3a3 	rbit	r3, r3
 8000eb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000ebe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_RCC_OscConfig+0x658>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	2202      	movs	r2, #2
 8000ed0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000ed4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000ed8:	fa92 f2a2 	rbit	r2, r2
 8000edc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000ee0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000ee4:	fab2 f282 	clz	r2, r2
 8000ee8:	b252      	sxtb	r2, r2
 8000eea:	f042 0220 	orr.w	r2, r2, #32
 8000eee:	b252      	sxtb	r2, r2
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	f002 021f 	and.w	r2, r2, #31
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1ae      	bne.n	8000e60 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0308 	and.w	r3, r3, #8
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80d8 	beq.w	80010c2 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d067      	beq.n	8000fec <HAL_RCC_OscConfig+0x6e0>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000f2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f32:	fab3 f383 	clz	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_RCC_OscConfig+0x65c>)
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2301      	movs	r3, #1
 8000f42:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f44:	f7ff f9ee 	bl	8000324 <HAL_GetTick>
 8000f48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4c:	e00e      	b.n	8000f6c <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f4e:	f7ff f9e9 	bl	8000324 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d906      	bls.n	8000f6c <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e3bb      	b.n	80016da <HAL_RCC_OscConfig+0xdce>
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	10908120 	.word	0x10908120
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f88:	fa93 f2a3 	rbit	r2, r3
 8000f8c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f96:	2202      	movs	r2, #2
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	fa93 f2a3 	rbit	r2, r3
 8000fa4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000fa8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000faa:	4ba5      	ldr	r3, [pc, #660]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 8000fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fae:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	6019      	str	r1, [r3, #0]
 8000fb6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	fa93 f1a3 	rbit	r1, r3
 8000fc0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fc4:	6019      	str	r1, [r3, #0]
  return(result);
 8000fc6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	fab3 f383 	clz	r3, r3
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0b1      	beq.n	8000f4e <HAL_RCC_OscConfig+0x642>
 8000fea:	e06a      	b.n	80010c2 <HAL_RCC_OscConfig+0x7b6>
 8000fec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	fa93 f2a3 	rbit	r2, r3
 8000ffe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001002:	601a      	str	r2, [r3, #0]
  return(result);
 8001004:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001008:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	4b8c      	ldr	r3, [pc, #560]	; (8001244 <HAL_RCC_OscConfig+0x938>)
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	461a      	mov	r2, r3
 8001018:	2300      	movs	r3, #0
 800101a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101c:	f7ff f982 	bl	8000324 <HAL_GetTick>
 8001020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001024:	e009      	b.n	800103a <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001026:	f7ff f97d 	bl	8000324 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e34f      	b.n	80016da <HAL_RCC_OscConfig+0xdce>
 800103a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800103e:	2202      	movs	r2, #2
 8001040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001042:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	fa93 f2a3 	rbit	r2, r3
 800104c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001056:	2202      	movs	r2, #2
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	fa93 f2a3 	rbit	r2, r3
 8001064:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800106e:	2202      	movs	r2, #2
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	fa93 f2a3 	rbit	r2, r3
 800107c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001080:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001082:	4b6f      	ldr	r3, [pc, #444]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 8001084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001086:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800108a:	2102      	movs	r1, #2
 800108c:	6019      	str	r1, [r3, #0]
 800108e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	fa93 f1a3 	rbit	r1, r3
 8001098:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800109c:	6019      	str	r1, [r3, #0]
  return(result);
 800109e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	fab3 f383 	clz	r3, r3
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	4013      	ands	r3, r2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1b1      	bne.n	8001026 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8159 	beq.w	8001384 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d112      	bne.n	800110a <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	4b56      	ldr	r3, [pc, #344]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	4a55      	ldr	r2, [pc, #340]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ee:	61d3      	str	r3, [r2, #28]
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110a:	4b4f      	ldr	r3, [pc, #316]	; (8001248 <HAL_RCC_OscConfig+0x93c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d11a      	bne.n	800114c <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <HAL_RCC_OscConfig+0x93c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a4b      	ldr	r2, [pc, #300]	; (8001248 <HAL_RCC_OscConfig+0x93c>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001122:	f7ff f8ff 	bl	8000324 <HAL_GetTick>
 8001126:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112a:	e009      	b.n	8001140 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112c:	f7ff f8fa 	bl	8000324 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b64      	cmp	r3, #100	; 0x64
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e2cc      	b.n	80016da <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001140:	4b41      	ldr	r3, [pc, #260]	; (8001248 <HAL_RCC_OscConfig+0x93c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0ef      	beq.n	800112c <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x858>
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4a39      	ldr	r2, [pc, #228]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	e02f      	b.n	80011c4 <HAL_RCC_OscConfig+0x8b8>
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x87c>
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a33      	ldr	r2, [pc, #204]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	6213      	str	r3, [r2, #32]
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a30      	ldr	r2, [pc, #192]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 8001180:	f023 0304 	bic.w	r3, r3, #4
 8001184:	6213      	str	r3, [r2, #32]
 8001186:	e01d      	b.n	80011c4 <HAL_RCC_OscConfig+0x8b8>
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b05      	cmp	r3, #5
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x8a0>
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a2a      	ldr	r2, [pc, #168]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a27      	ldr	r2, [pc, #156]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	e00b      	b.n	80011c4 <HAL_RCC_OscConfig+0x8b8>
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a23      	ldr	r2, [pc, #140]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 80011be:	f023 0304 	bic.w	r3, r3, #4
 80011c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d06b      	beq.n	80012a6 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ce:	f7ff f8a9 	bl	8000324 <HAL_GetTick>
 80011d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d8:	f7ff f8a4 	bl	8000324 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e274      	b.n	80016da <HAL_RCC_OscConfig+0xdce>
 80011f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011f4:	2202      	movs	r2, #2
 80011f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	fa93 f2a3 	rbit	r2, r3
 8001202:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800120c:	2202      	movs	r2, #2
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	fa93 f2a3 	rbit	r2, r3
 800121a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800121e:	601a      	str	r2, [r3, #0]
  return(result);
 8001220:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001224:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	095b      	lsrs	r3, r3, #5
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d108      	bne.n	800124c <HAL_RCC_OscConfig+0x940>
 800123a:	4b01      	ldr	r3, [pc, #4]	; (8001240 <HAL_RCC_OscConfig+0x934>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	e013      	b.n	8001268 <HAL_RCC_OscConfig+0x95c>
 8001240:	40021000 	.word	0x40021000
 8001244:	10908120 	.word	0x10908120
 8001248:	40007000 	.word	0x40007000
 800124c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001250:	2202      	movs	r2, #2
 8001252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	fa93 f2a3 	rbit	r2, r3
 800125e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	4bbb      	ldr	r3, [pc, #748]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800126c:	2102      	movs	r1, #2
 800126e:	6011      	str	r1, [r2, #0]
 8001270:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	fa92 f1a2 	rbit	r1, r2
 800127a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800127e:	6011      	str	r1, [r2, #0]
  return(result);
 8001280:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	fab2 f282 	clz	r2, r2
 800128a:	b252      	sxtb	r2, r2
 800128c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001290:	b252      	sxtb	r2, r2
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	f002 021f 	and.w	r2, r2, #31
 8001298:	2101      	movs	r1, #1
 800129a:	fa01 f202 	lsl.w	r2, r1, r2
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d099      	beq.n	80011d8 <HAL_RCC_OscConfig+0x8cc>
 80012a4:	e064      	b.n	8001370 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff f83d 	bl	8000324 <HAL_GetTick>
 80012aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b0:	f7ff f838 	bl	8000324 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e208      	b.n	80016da <HAL_RCC_OscConfig+0xdce>
 80012c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012cc:	2202      	movs	r2, #2
 80012ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	fa93 f2a3 	rbit	r2, r3
 80012da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e4:	2202      	movs	r2, #2
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	fa93 f2a3 	rbit	r2, r3
 80012f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012f6:	601a      	str	r2, [r3, #0]
  return(result);
 80012f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	095b      	lsrs	r3, r3, #5
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d102      	bne.n	8001318 <HAL_RCC_OscConfig+0xa0c>
 8001312:	4b90      	ldr	r3, [pc, #576]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	e00d      	b.n	8001334 <HAL_RCC_OscConfig+0xa28>
 8001318:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800131c:	2202      	movs	r2, #2
 800131e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fa93 f2a3 	rbit	r2, r3
 800132a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	4b88      	ldr	r3, [pc, #544]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001338:	2102      	movs	r1, #2
 800133a:	6011      	str	r1, [r2, #0]
 800133c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	fa92 f1a2 	rbit	r1, r2
 8001346:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800134a:	6011      	str	r1, [r2, #0]
  return(result);
 800134c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	fab2 f282 	clz	r2, r2
 8001356:	b252      	sxtb	r2, r2
 8001358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800135c:	b252      	sxtb	r2, r2
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	f002 021f 	and.w	r2, r2, #31
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d19f      	bne.n	80012b0 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001370:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001374:	2b01      	cmp	r3, #1
 8001376:	d105      	bne.n	8001384 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001378:	4b76      	ldr	r3, [pc, #472]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	4a75      	ldr	r2, [pc, #468]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 800137e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001382:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 81a4 	beq.w	80016d8 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001390:	4b70      	ldr	r3, [pc, #448]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b08      	cmp	r3, #8
 800139a:	f000 819b 	beq.w	80016d4 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	f040 8113 	bne.w	80015d0 <HAL_RCC_OscConfig+0xcc4>
 80013aa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	fa93 f2a3 	rbit	r2, r3
 80013be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013c2:	601a      	str	r2, [r3, #0]
  return(result);
 80013c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ca:	fab3 f383 	clz	r3, r3
 80013ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	461a      	mov	r2, r3
 80013da:	2300      	movs	r3, #0
 80013dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7fe ffa1 	bl	8000324 <HAL_GetTick>
 80013e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e6:	e009      	b.n	80013fc <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e8:	f7fe ff9c 	bl	8000324 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e16e      	b.n	80016da <HAL_RCC_OscConfig+0xdce>
 80013fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001414:	601a      	str	r2, [r3, #0]
  return(result);
 8001416:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800141a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <HAL_RCC_OscConfig+0xb2a>
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	e01b      	b.n	800146e <HAL_RCC_OscConfig+0xb62>
 8001436:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800143a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800143e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	fa93 f2a3 	rbit	r2, r3
 8001464:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001472:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001476:	6011      	str	r1, [r2, #0]
 8001478:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	fa92 f1a2 	rbit	r1, r2
 8001482:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001486:	6011      	str	r1, [r2, #0]
  return(result);
 8001488:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	fab2 f282 	clz	r2, r2
 8001492:	b252      	sxtb	r2, r2
 8001494:	f042 0220 	orr.w	r2, r2, #32
 8001498:	b252      	sxtb	r2, r2
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	f002 021f 	and.w	r2, r2, #31
 80014a0:	2101      	movs	r1, #1
 80014a2:	fa01 f202 	lsl.w	r2, r1, r2
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d19d      	bne.n	80013e8 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	430b      	orrs	r3, r1
 80014c2:	4924      	ldr	r1, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
 80014c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	fa93 f2a3 	rbit	r2, r3
 80014dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014e0:	601a      	str	r2, [r3, #0]
  return(result);
 80014e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014e6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e8:	fab3 f383 	clz	r3, r3
 80014ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	461a      	mov	r2, r3
 80014f8:	2301      	movs	r3, #1
 80014fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7fe ff12 	bl	8000324 <HAL_GetTick>
 8001500:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001504:	e009      	b.n	800151a <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7fe ff0d 	bl	8000324 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0df      	b.n	80016da <HAL_RCC_OscConfig+0xdce>
 800151a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800151e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	fa93 f2a3 	rbit	r2, r3
 800152e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001532:	601a      	str	r2, [r3, #0]
  return(result);
 8001534:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001538:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800153a:	fab3 f383 	clz	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	095b      	lsrs	r3, r3, #5
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d104      	bne.n	8001558 <HAL_RCC_OscConfig+0xc4c>
 800154e:	4b01      	ldr	r3, [pc, #4]	; (8001554 <HAL_RCC_OscConfig+0xc48>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	e01d      	b.n	8001590 <HAL_RCC_OscConfig+0xc84>
 8001554:	40021000 	.word	0x40021000
 8001558:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800155c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	fa93 f2a3 	rbit	r2, r3
 800156c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fa93 f2a3 	rbit	r2, r3
 8001586:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <HAL_RCC_OscConfig+0xdd8>)
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001594:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001598:	6011      	str	r1, [r2, #0]
 800159a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	fa92 f1a2 	rbit	r1, r2
 80015a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80015a8:	6011      	str	r1, [r2, #0]
  return(result);
 80015aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	fab2 f282 	clz	r2, r2
 80015b4:	b252      	sxtb	r2, r2
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	f002 021f 	and.w	r2, r2, #31
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d09b      	beq.n	8001506 <HAL_RCC_OscConfig+0xbfa>
 80015ce:	e083      	b.n	80016d8 <HAL_RCC_OscConfig+0xdcc>
 80015d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fa93 f2a3 	rbit	r2, r3
 80015e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e8:	601a      	str	r2, [r3, #0]
  return(result);
 80015ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ee:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f0:	fab3 f383 	clz	r3, r3
 80015f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	461a      	mov	r2, r3
 8001600:	2300      	movs	r3, #0
 8001602:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7fe fe8e 	bl	8000324 <HAL_GetTick>
 8001608:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160c:	e009      	b.n	8001622 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160e:	f7fe fe89 	bl	8000324 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e05b      	b.n	80016da <HAL_RCC_OscConfig+0xdce>
 8001622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800162a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f2a3 	rbit	r2, r3
 8001636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163a:	601a      	str	r2, [r3, #0]
  return(result);
 800163c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001640:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	095b      	lsrs	r3, r3, #5
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <HAL_RCC_OscConfig+0xd50>
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_RCC_OscConfig+0xdd8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	e01b      	b.n	8001694 <HAL_RCC_OscConfig+0xd88>
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	fa93 f2a3 	rbit	r2, r3
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fa93 f2a3 	rbit	r2, r3
 800168a:	f107 0318 	add.w	r3, r7, #24
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_RCC_OscConfig+0xdd8>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	f107 0214 	add.w	r2, r7, #20
 8001698:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800169c:	6011      	str	r1, [r2, #0]
 800169e:	f107 0214 	add.w	r2, r7, #20
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	fa92 f1a2 	rbit	r1, r2
 80016a8:	f107 0210 	add.w	r2, r7, #16
 80016ac:	6011      	str	r1, [r2, #0]
  return(result);
 80016ae:	f107 0210 	add.w	r2, r7, #16
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	fab2 f282 	clz	r2, r2
 80016b8:	b252      	sxtb	r2, r2
 80016ba:	f042 0220 	orr.w	r2, r2, #32
 80016be:	b252      	sxtb	r2, r2
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	f002 021f 	and.w	r2, r2, #31
 80016c6:	2101      	movs	r1, #1
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d19d      	bne.n	800160e <HAL_RCC_OscConfig+0xd02>
 80016d2:	e001      	b.n	80016d8 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000

080016e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b09e      	sub	sp, #120	; 0x78
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e164      	b.n	80019ca <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b92      	ldr	r3, [pc, #584]	; (800194c <HAL_RCC_ClockConfig+0x264>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d910      	bls.n	8001730 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b8f      	ldr	r3, [pc, #572]	; (800194c <HAL_RCC_ClockConfig+0x264>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 0207 	bic.w	r2, r3, #7
 8001716:	498d      	ldr	r1, [pc, #564]	; (800194c <HAL_RCC_ClockConfig+0x264>)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b8b      	ldr	r3, [pc, #556]	; (800194c <HAL_RCC_ClockConfig+0x264>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e14c      	b.n	80019ca <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b84      	ldr	r3, [pc, #528]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4981      	ldr	r1, [pc, #516]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80df 	beq.w	800191a <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d13d      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xf8>
 8001764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001768:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d102      	bne.n	800178e <HAL_RCC_ClockConfig+0xa6>
 8001788:	4b71      	ldr	r3, [pc, #452]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	e00f      	b.n	80017ae <HAL_RCC_ClockConfig+0xc6>
 800178e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001792:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	667b      	str	r3, [r7, #100]	; 0x64
 800179c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a0:	663b      	str	r3, [r7, #96]	; 0x60
 80017a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017aa:	4b69      	ldr	r3, [pc, #420]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80017b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017b6:	fa92 f2a2 	rbit	r2, r2
 80017ba:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80017bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017be:	fab2 f282 	clz	r2, r2
 80017c2:	b252      	sxtb	r2, r2
 80017c4:	f042 0220 	orr.w	r2, r2, #32
 80017c8:	b252      	sxtb	r2, r2
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	f002 021f 	and.w	r2, r2, #31
 80017d0:	2101      	movs	r1, #1
 80017d2:	fa01 f202 	lsl.w	r2, r1, r2
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d17d      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0f4      	b.n	80019ca <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d13d      	bne.n	8001864 <HAL_RCC_ClockConfig+0x17c>
 80017e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80017f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d102      	bne.n	8001812 <HAL_RCC_ClockConfig+0x12a>
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	e00f      	b.n	8001832 <HAL_RCC_ClockConfig+0x14a>
 8001812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
 8001820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001824:	643b      	str	r3, [r7, #64]	; 0x40
 8001826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800182e:	4b48      	ldr	r3, [pc, #288]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001836:	63ba      	str	r2, [r7, #56]	; 0x38
 8001838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800183a:	fa92 f2a2 	rbit	r2, r2
 800183e:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	b252      	sxtb	r2, r2
 8001848:	f042 0220 	orr.w	r2, r2, #32
 800184c:	b252      	sxtb	r2, r2
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d13b      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0b2      	b.n	80019ca <HAL_RCC_ClockConfig+0x2e2>
 8001864:	2302      	movs	r3, #2
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d102      	bne.n	800188c <HAL_RCC_ClockConfig+0x1a4>
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	e00d      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1c0>
 800188c:	2302      	movs	r3, #2
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
 8001898:	2302      	movs	r3, #2
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2202      	movs	r2, #2
 80018aa:	61ba      	str	r2, [r7, #24]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	fa92 f2a2 	rbit	r2, r2
 80018b2:	617a      	str	r2, [r7, #20]
  return(result);
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	fab2 f282 	clz	r2, r2
 80018ba:	b252      	sxtb	r2, r2
 80018bc:	f042 0220 	orr.w	r2, r2, #32
 80018c0:	b252      	sxtb	r2, r2
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f002 021f 	and.w	r2, r2, #31
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e078      	b.n	80019ca <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 0203 	bic.w	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	491a      	ldr	r1, [pc, #104]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ea:	f7fe fd1b 	bl	8000324 <HAL_GetTick>
 80018ee:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f2:	f7fe fd17 	bl	8000324 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e060      	b.n	80019ca <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_RCC_ClockConfig+0x268>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 020c 	and.w	r2, r3, #12
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	429a      	cmp	r2, r3
 8001918:	d1eb      	bne.n	80018f2 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_RCC_ClockConfig+0x264>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d215      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_RCC_ClockConfig+0x264>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 0207 	bic.w	r2, r3, #7
 8001930:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_RCC_ClockConfig+0x264>)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <HAL_RCC_ClockConfig+0x264>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d006      	beq.n	8001954 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e03f      	b.n	80019ca <HAL_RCC_ClockConfig+0x2e2>
 800194a:	bf00      	nop
 800194c:	40022000 	.word	0x40022000
 8001950:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_RCC_ClockConfig+0x2ec>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4919      	ldr	r1, [pc, #100]	; (80019d4 <HAL_RCC_ClockConfig+0x2ec>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_RCC_ClockConfig+0x2ec>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4911      	ldr	r1, [pc, #68]	; (80019d4 <HAL_RCC_ClockConfig+0x2ec>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001992:	f000 f825 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 8001996:	4601      	mov	r1, r0
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_RCC_ClockConfig+0x2ec>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019a0:	23f0      	movs	r3, #240	; 0xf0
 80019a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <HAL_RCC_ClockConfig+0x2f0>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	fa21 f303 	lsr.w	r3, r1, r3
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_RCC_ClockConfig+0x2f4>)
 80019c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7fe fc6a 	bl	800029c <HAL_InitTick>
  
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3778      	adds	r7, #120	; 0x78
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	08003cc0 	.word	0x08003cc0
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b08b      	sub	sp, #44	; 0x2c
 80019e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80019fa:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x30>
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x36>
 8001a0e:	e03c      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a12:	623b      	str	r3, [r7, #32]
      break;
 8001a14:	e03c      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a1c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001a20:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	607b      	str	r3, [r7, #4]
  return(result);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f003 020f 	and.w	r2, r3, #15
 8001a42:	230f      	movs	r3, #15
 8001a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	e004      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	623b      	str	r3, [r7, #32]
      break;
 8001a88:	e002      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a8c:	623b      	str	r3, [r7, #32]
      break;
 8001a8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a90:	6a3b      	ldr	r3, [r7, #32]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	372c      	adds	r7, #44	; 0x2c
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	007a1200 	.word	0x007a1200
 8001aa8:	08003ca0 	.word	0x08003ca0
 8001aac:	08003cb0 	.word	0x08003cb0
 8001ab0:	003d0900 	.word	0x003d0900

08001ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008

08001acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001ad2:	f7ff ffef 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ae0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ae4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	603b      	str	r3, [r7, #0]
  return(result);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	08003cd0 	.word	0x08003cd0

08001b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001b16:	f7ff ffcd 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001b24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b28:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	603b      	str	r3, [r7, #0]
  return(result);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
 8001b40:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08003cd0 	.word	0x08003cd0

08001b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e01d      	b.n	8001ba2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f001 fac4 	bl	8003108 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f000 fa4e 	bl	8002034 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d122      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d11b      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0202 	mvn.w	r2, #2
 8001c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f9e7 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001c28:	e005      	b.n	8001c36 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f9d9 	bl	8001fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f9ea 	bl	800200a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d122      	bne.n	8001c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d11b      	bne.n	8001c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0204 	mvn.w	r2, #4
 8001c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2202      	movs	r2, #2
 8001c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f9bd 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e005      	b.n	8001c8a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f9af 	bl	8001fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f9c0 	bl	800200a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d122      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d11b      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0208 	mvn.w	r2, #8
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f993 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f985 	bl	8001fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f996 	bl	800200a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d122      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d11b      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0210 	mvn.w	r2, #16
 8001d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f969 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f95b 	bl	8001fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f96c 	bl	800200a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10e      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0201 	mvn.w	r2, #1
 8001d5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f001 f94c 	bl	8002ffc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	2b80      	cmp	r3, #128	; 0x80
 8001d70:	d10e      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7c:	2b80      	cmp	r3, #128	; 0x80
 8001d7e:	d107      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d88:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 face 	bl	800232c <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9e:	d10e      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	2b80      	cmp	r3, #128	; 0x80
 8001dac:	d107      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001db6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fac1 	bl	8002340 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d10e      	bne.n	8001dea <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	d107      	bne.n	8001dea <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001de2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f91a 	bl	800201e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d10e      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0220 	mvn.w	r2, #32
 8001e0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa81 	bl	8002318 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_ConfigClockSource+0x1c>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e0cf      	b.n	8001fda <HAL_TIM_ConfigClockSource+0x1bc>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2202      	movs	r2, #2
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e58:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e5c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e64:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	d07c      	beq.n	8001f70 <HAL_TIM_ConfigClockSource+0x152>
 8001e76:	2b40      	cmp	r3, #64	; 0x40
 8001e78:	d80f      	bhi.n	8001e9a <HAL_TIM_ConfigClockSource+0x7c>
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	f000 808f 	beq.w	8001f9e <HAL_TIM_ConfigClockSource+0x180>
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	d803      	bhi.n	8001e8c <HAL_TIM_ConfigClockSource+0x6e>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8083 	beq.w	8001f90 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8001e8a:	e09d      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	f000 808d 	beq.w	8001fac <HAL_TIM_ConfigClockSource+0x18e>
 8001e92:	2b30      	cmp	r3, #48	; 0x30
 8001e94:	f000 8091 	beq.w	8001fba <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8001e98:	e096      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001e9a:	2b70      	cmp	r3, #112	; 0x70
 8001e9c:	d018      	beq.n	8001ed0 <HAL_TIM_ConfigClockSource+0xb2>
 8001e9e:	2b70      	cmp	r3, #112	; 0x70
 8001ea0:	d804      	bhi.n	8001eac <HAL_TIM_ConfigClockSource+0x8e>
 8001ea2:	2b50      	cmp	r3, #80	; 0x50
 8001ea4:	d044      	beq.n	8001f30 <HAL_TIM_ConfigClockSource+0x112>
 8001ea6:	2b60      	cmp	r3, #96	; 0x60
 8001ea8:	d052      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8001eaa:	e08d      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x9c>
 8001eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb6:	d028      	beq.n	8001f0a <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8001eb8:	e086      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec8:	f023 0307 	bic.w	r3, r3, #7
 8001ecc:	6093      	str	r3, [r2, #8]
    break;
 8001ece:	e07b      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6899      	ldr	r1, [r3, #8]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f000 f9a9 	bl	8002236 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ef6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001efe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	609a      	str	r2, [r3, #8]
    break;
 8001f08:	e05e      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6899      	ldr	r1, [r3, #8]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f000 f98c 	bl	8002236 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f2c:	609a      	str	r2, [r3, #8]
    break;
 8001f2e:	e04b      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f000 f8f3 	bl	8002128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2150      	movs	r1, #80	; 0x50
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 f954 	bl	80021f6 <TIM_ITRx_SetConfig>
    break;
 8001f4e:	e03b      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f000 f916 	bl	800218e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2160      	movs	r1, #96	; 0x60
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f944 	bl	80021f6 <TIM_ITRx_SetConfig>
    break;
 8001f6e:	e02b      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f000 f8d3 	bl	8002128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 f934 	bl	80021f6 <TIM_ITRx_SetConfig>
    break;
 8001f8e:	e01b      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f92d 	bl	80021f6 <TIM_ITRx_SetConfig>
    break;
 8001f9c:	e014      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2110      	movs	r1, #16
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f926 	bl	80021f6 <TIM_ITRx_SetConfig>
    break;
 8001faa:	e00d      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f91f 	bl	80021f6 <TIM_ITRx_SetConfig>
    break;
 8001fb8:	e006      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2130      	movs	r1, #48	; 0x30
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 f918 	bl	80021f6 <TIM_ITRx_SetConfig>
    break;
 8001fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a32      	ldr	r2, [pc, #200]	; (8002114 <TIM_Base_SetConfig+0xe0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <TIM_Base_SetConfig+0x2c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002056:	d003      	beq.n	8002060 <TIM_Base_SetConfig+0x2c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <TIM_Base_SetConfig+0xe4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d108      	bne.n	8002072 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <TIM_Base_SetConfig+0xe0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <TIM_Base_SetConfig+0x6e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002080:	d00f      	beq.n	80020a2 <TIM_Base_SetConfig+0x6e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a24      	ldr	r2, [pc, #144]	; (8002118 <TIM_Base_SetConfig+0xe4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00b      	beq.n	80020a2 <TIM_Base_SetConfig+0x6e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a23      	ldr	r2, [pc, #140]	; (800211c <TIM_Base_SetConfig+0xe8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <TIM_Base_SetConfig+0x6e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a22      	ldr	r2, [pc, #136]	; (8002120 <TIM_Base_SetConfig+0xec>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d003      	beq.n	80020a2 <TIM_Base_SetConfig+0x6e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a21      	ldr	r2, [pc, #132]	; (8002124 <TIM_Base_SetConfig+0xf0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d108      	bne.n	80020b4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <TIM_Base_SetConfig+0xe0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00b      	beq.n	80020f8 <TIM_Base_SetConfig+0xc4>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a0e      	ldr	r2, [pc, #56]	; (800211c <TIM_Base_SetConfig+0xe8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <TIM_Base_SetConfig+0xc4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <TIM_Base_SetConfig+0xec>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0xc4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	; (8002124 <TIM_Base_SetConfig+0xf0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d103      	bne.n	8002100 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	615a      	str	r2, [r3, #20]
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40012c00 	.word	0x40012c00
 8002118:	40000400 	.word	0x40000400
 800211c:	40014000 	.word	0x40014000
 8002120:	40014400 	.word	0x40014400
 8002124:	40014800 	.word	0x40014800

08002128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f023 0201 	bic.w	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800215a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f023 030a 	bic.w	r3, r3, #10
 800216c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	621a      	str	r2, [r3, #32]
}
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800218e:	b480      	push	{r7}
 8002190:	b087      	sub	sp, #28
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f023 0210 	bic.w	r2, r3, #16
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	031b      	lsls	r3, r3, #12
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	621a      	str	r2, [r3, #32]
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	f043 0307 	orr.w	r3, r3, #7
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	609a      	str	r2, [r3, #8]
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002236:	b480      	push	{r7}
 8002238:	b087      	sub	sp, #28
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002254:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	021a      	lsls	r2, r3, #8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	431a      	orrs	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4313      	orrs	r3, r2
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	609a      	str	r2, [r3, #8]
} 
 800226e:	bf00      	nop
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002290:	2302      	movs	r3, #2
 8002292:	e038      	b.n	8002306 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d108      	bne.n	80022c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80022bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022e0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
} 
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40012c00 	.word	0x40012c00

08002318 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e043      	b.n	80023ee <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 feea 	bl	8003154 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8b9 	bl	8002510 <UART_SetConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e022      	b.n	80023ee <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fa13 	bl	80027dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0201 	orr.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fa9a 	bl	8002920 <UART_CheckIdleState>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b088      	sub	sp, #32
 80023fa:	af02      	add	r7, sp, #8
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b20      	cmp	r3, #32
 8002414:	d177      	bne.n	8002506 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_UART_Transmit+0x2c>
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e070      	b.n	8002508 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_UART_Transmit+0x3e>
 8002430:	2302      	movs	r3, #2
 8002432:	e069      	b.n	8002508 <HAL_UART_Transmit+0x112>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2221      	movs	r2, #33	; 0x21
 8002446:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800244a:	f7fd ff6b 	bl	8000324 <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002460:	e034      	b.n	80024cc <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2200      	movs	r2, #0
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa97 	bl	80029b2 <UART_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e03c      	b.n	8002508 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002496:	d111      	bne.n	80024bc <HAL_UART_Transmit+0xc6>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10d      	bne.n	80024bc <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	881a      	ldrh	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b0:	b292      	uxth	r2, r2
 80024b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	3302      	adds	r3, #2
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	e007      	b.n	80024cc <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	60ba      	str	r2, [r7, #8]
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b292      	uxth	r2, r2
 80024ca:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1c4      	bne.n	8002462 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2200      	movs	r2, #0
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fa65 	bl	80029b2 <UART_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e00a      	b.n	8002508 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
  }
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800251c:	2310      	movs	r3, #16
 800251e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002520:	2300      	movs	r3, #0
 8002522:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002524:	2300      	movs	r3, #0
 8002526:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b9f      	ldr	r3, [pc, #636]	; (80027c8 <UART_SetConfig+0x2b8>)
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	430b      	orrs	r3, r1
 8002556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a8e      	ldr	r2, [pc, #568]	; (80027cc <UART_SetConfig+0x2bc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d121      	bne.n	80025dc <UART_SetConfig+0xcc>
 8002598:	4b8d      	ldr	r3, [pc, #564]	; (80027d0 <UART_SetConfig+0x2c0>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d817      	bhi.n	80025d4 <UART_SetConfig+0xc4>
 80025a4:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <UART_SetConfig+0x9c>)
 80025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025aa:	bf00      	nop
 80025ac:	080025bd 	.word	0x080025bd
 80025b0:	080025c9 	.word	0x080025c9
 80025b4:	080025cf 	.word	0x080025cf
 80025b8:	080025c3 	.word	0x080025c3
 80025bc:	2300      	movs	r3, #0
 80025be:	75fb      	strb	r3, [r7, #23]
 80025c0:	e01e      	b.n	8002600 <UART_SetConfig+0xf0>
 80025c2:	2302      	movs	r3, #2
 80025c4:	75fb      	strb	r3, [r7, #23]
 80025c6:	e01b      	b.n	8002600 <UART_SetConfig+0xf0>
 80025c8:	2304      	movs	r3, #4
 80025ca:	75fb      	strb	r3, [r7, #23]
 80025cc:	e018      	b.n	8002600 <UART_SetConfig+0xf0>
 80025ce:	2308      	movs	r3, #8
 80025d0:	75fb      	strb	r3, [r7, #23]
 80025d2:	e015      	b.n	8002600 <UART_SetConfig+0xf0>
 80025d4:	2310      	movs	r3, #16
 80025d6:	75fb      	strb	r3, [r7, #23]
 80025d8:	bf00      	nop
 80025da:	e011      	b.n	8002600 <UART_SetConfig+0xf0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a7c      	ldr	r2, [pc, #496]	; (80027d4 <UART_SetConfig+0x2c4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d102      	bne.n	80025ec <UART_SetConfig+0xdc>
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
 80025ea:	e009      	b.n	8002600 <UART_SetConfig+0xf0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a79      	ldr	r2, [pc, #484]	; (80027d8 <UART_SetConfig+0x2c8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d102      	bne.n	80025fc <UART_SetConfig+0xec>
 80025f6:	2300      	movs	r3, #0
 80025f8:	75fb      	strb	r3, [r7, #23]
 80025fa:	e001      	b.n	8002600 <UART_SetConfig+0xf0>
 80025fc:	2310      	movs	r3, #16
 80025fe:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	d16f      	bne.n	80026ea <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 800260a:	7dfb      	ldrb	r3, [r7, #23]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d857      	bhi.n	80026c0 <UART_SetConfig+0x1b0>
 8002610:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <UART_SetConfig+0x108>)
 8002612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002616:	bf00      	nop
 8002618:	0800263d 	.word	0x0800263d
 800261c:	08002659 	.word	0x08002659
 8002620:	08002675 	.word	0x08002675
 8002624:	080026c1 	.word	0x080026c1
 8002628:	0800268f 	.word	0x0800268f
 800262c:	080026c1 	.word	0x080026c1
 8002630:	080026c1 	.word	0x080026c1
 8002634:	080026c1 	.word	0x080026c1
 8002638:	080026ab 	.word	0x080026ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800263c:	f7ff fa46 	bl	8001acc <HAL_RCC_GetPCLK1Freq>
 8002640:	4603      	mov	r3, r0
 8002642:	005a      	lsls	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	441a      	add	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	82bb      	strh	r3, [r7, #20]
        break;
 8002656:	e036      	b.n	80026c6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002658:	f7ff fa5a 	bl	8001b10 <HAL_RCC_GetPCLK2Freq>
 800265c:	4603      	mov	r3, r0
 800265e:	005a      	lsls	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	441a      	add	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	82bb      	strh	r3, [r7, #20]
        break;
 8002672:	e028      	b.n	80026c6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800267e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6852      	ldr	r2, [r2, #4]
 8002686:	fbb3 f3f2 	udiv	r3, r3, r2
 800268a:	82bb      	strh	r3, [r7, #20]
        break;
 800268c:	e01b      	b.n	80026c6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800268e:	f7ff f9a7 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 8002692:	4603      	mov	r3, r0
 8002694:	005a      	lsls	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	441a      	add	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	82bb      	strh	r3, [r7, #20]
        break;
 80026a8:	e00d      	b.n	80026c6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	82bb      	strh	r3, [r7, #20]
        break;
 80026be:	e002      	b.n	80026c6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	74fb      	strb	r3, [r7, #19]
        break;
 80026c4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80026c6:	8abb      	ldrh	r3, [r7, #20]
 80026c8:	f023 030f 	bic.w	r3, r3, #15
 80026cc:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026ce:	8abb      	ldrh	r3, [r7, #20]
 80026d0:	105b      	asrs	r3, r3, #1
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	b29a      	uxth	r2, r3
 80026da:	897b      	ldrh	r3, [r7, #10]
 80026dc:	4313      	orrs	r3, r2
 80026de:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	897a      	ldrh	r2, [r7, #10]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	e069      	b.n	80027be <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d863      	bhi.n	80027b8 <UART_SetConfig+0x2a8>
 80026f0:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <UART_SetConfig+0x1e8>)
 80026f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f6:	bf00      	nop
 80026f8:	0800271d 	.word	0x0800271d
 80026fc:	0800273d 	.word	0x0800273d
 8002700:	0800275d 	.word	0x0800275d
 8002704:	080027b9 	.word	0x080027b9
 8002708:	0800277d 	.word	0x0800277d
 800270c:	080027b9 	.word	0x080027b9
 8002710:	080027b9 	.word	0x080027b9
 8002714:	080027b9 	.word	0x080027b9
 8002718:	0800279d 	.word	0x0800279d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800271c:	f7ff f9d6 	bl	8001acc <HAL_RCC_GetPCLK1Freq>
 8002720:	4602      	mov	r2, r0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	441a      	add	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60da      	str	r2, [r3, #12]
        break;
 800273a:	e040      	b.n	80027be <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800273c:	f7ff f9e8 	bl	8001b10 <HAL_RCC_GetPCLK2Freq>
 8002740:	4602      	mov	r2, r0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	441a      	add	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60da      	str	r2, [r3, #12]
        break;
 800275a:	e030      	b.n	80027be <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002766:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6852      	ldr	r2, [r2, #4]
 800276e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002772:	b29a      	uxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60da      	str	r2, [r3, #12]
        break;
 800277a:	e020      	b.n	80027be <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800277c:	f7ff f930 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	441a      	add	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60da      	str	r2, [r3, #12]
        break;
 800279a:	e010      	b.n	80027be <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60da      	str	r2, [r3, #12]
        break;
 80027b6:	e002      	b.n	80027be <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	74fb      	strb	r3, [r7, #19]
        break;
 80027bc:	bf00      	nop
    }
  }

  return ret;
 80027be:	7cfb      	ldrb	r3, [r7, #19]

}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	efff69f3 	.word	0xefff69f3
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40004400 	.word	0x40004400
 80027d8:	40004800 	.word	0x40004800

080027dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01a      	beq.n	80028f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028da:	d10a      	bne.n	80028f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]
  }
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af02      	add	r7, sp, #8
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002932:	f7fd fcf7 	bl	8000324 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b08      	cmp	r3, #8
 8002944:	d10e      	bne.n	8002964 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002946:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f82c 	bl	80029b2 <UART_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e022      	b.n	80029aa <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b04      	cmp	r3, #4
 8002970:	d10e      	bne.n	8002990 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002972:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f816 	bl	80029b2 <UART_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e00c      	b.n	80029aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4613      	mov	r3, r2
 80029c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c2:	e02c      	b.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ca:	d028      	beq.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80029d2:	f7fd fca7 	bl	8000324 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d21d      	bcs.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e00f      	b.n	8002a3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69da      	ldr	r2, [r3, #28]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4013      	ands	r3, r2
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	bf0c      	ite	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	2300      	movne	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d0c3      	beq.n	80029c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a4c:	f7fd fc10 	bl	8000270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a50:	f000 f820 	bl	8002a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a54:	f000 f8e0 	bl	8002c18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a58:	f000 f8ae 	bl	8002bb8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002a5c:	f000 f85c 	bl	8002b18 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8002a60:	480b      	ldr	r0, [pc, #44]	; (8002a90 <main+0x48>)
 8002a62:	f7ff f8a2 	bl	8001baa <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2120      	movs	r1, #32
 8002a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a6e:	f7fd ff0b 	bl	8000888 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a76:	f7fd fc61 	bl	800033c <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a82:	f7fd ff01 	bl	8000888 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a8a:	f7fd fc57 	bl	800033c <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a8e:	e7ea      	b.n	8002a66 <main+0x1e>
 8002a90:	200000bc 	.word	0x200000bc

08002a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b090      	sub	sp, #64	; 0x40
 8002a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a9a:	f107 0318 	add.w	r3, r7, #24
 8002a9e:	2228      	movs	r2, #40	; 0x28
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fcb8 	bl	8003418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aba:	2301      	movs	r3, #1
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002abe:	2310      	movs	r3, #16
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002aca:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ad0:	f107 0318 	add.w	r3, r7, #24
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd ff19 	bl	800090c <HAL_RCC_OscConfig>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002ae0:	f000 fae6 	bl	80030b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	2102      	movs	r1, #2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fdf2 	bl	80016e8 <HAL_RCC_ClockConfig>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002b0a:	f000 fad1 	bl	80030b0 <Error_Handler>
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3740      	adds	r7, #64	; 0x40
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b38:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <MX_TIM3_Init+0x9c>)
 8002b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b3e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002b42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002b4a:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b5e:	4814      	ldr	r0, [pc, #80]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b60:	f7fe fff8 	bl	8001b54 <HAL_TIM_Base_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002b6a:	f000 faa1 	bl	80030b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	4619      	mov	r1, r3
 8002b7a:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b7c:	f7ff f94f 	bl	8001e1e <HAL_TIM_ConfigClockSource>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002b86:	f000 fa93 	bl	80030b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4806      	ldr	r0, [pc, #24]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b98:	f7ff fb70 	bl	800227c <HAL_TIMEx_MasterConfigSynchronization>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002ba2:	f000 fa85 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200000bc 	.word	0x200000bc
 8002bb4:	40000400 	.word	0x40000400

08002bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002bbe:	4a15      	ldr	r2, [pc, #84]	; (8002c14 <MX_USART2_UART_Init+0x5c>)
 8002bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002bc4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <MX_USART2_UART_Init+0x58>)
 8002bfc:	f7ff fbaa 	bl	8002354 <HAL_UART_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c06:	f000 fa53 	bl	80030b0 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200000fc 	.word	0x200000fc
 8002c14:	40004400 	.word	0x40004400

08002c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
 8002c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	4a49      	ldr	r2, [pc, #292]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c38:	6153      	str	r3, [r2, #20]
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4a43      	ldr	r2, [pc, #268]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c50:	6153      	str	r3, [r2, #20]
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	4a3d      	ldr	r2, [pc, #244]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c68:	6153      	str	r3, [r2, #20]
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	4a37      	ldr	r2, [pc, #220]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c80:	6153      	str	r3, [r2, #20]
 8002c82:	4b35      	ldr	r3, [pc, #212]	; (8002d58 <MX_GPIO_Init+0x140>)
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2120      	movs	r1, #32
 8002c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c96:	f7fd fdf7 	bl	8000888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ca0:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <MX_GPIO_Init+0x144>)
 8002ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	4619      	mov	r1, r3
 8002cae:	482c      	ldr	r0, [pc, #176]	; (8002d60 <MX_GPIO_Init+0x148>)
 8002cb0:	f7fd fc74 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cce:	f7fd fc65 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pins : S3_Pin S1_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S1_Pin;
 8002cd2:	f241 0310 	movw	r3, #4112	; 0x1010
 8002cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd8:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <MX_GPIO_Init+0x14c>)
 8002cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	481e      	ldr	r0, [pc, #120]	; (8002d60 <MX_GPIO_Init+0x148>)
 8002ce8:	f7fd fc58 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : S2_Pin */
  GPIO_InitStruct.Pin = S2_Pin;
 8002cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <MX_GPIO_Init+0x14c>)
 8002cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d04:	f7fd fc4a 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : S4_Pin */
  GPIO_InitStruct.Pin = S4_Pin;
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d0c:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <MX_GPIO_Init+0x14c>)
 8002d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S4_GPIO_Port, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4813      	ldr	r0, [pc, #76]	; (8002d68 <MX_GPIO_Init+0x150>)
 8002d1c:	f7fd fc3e 	bl	800059c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002d20:	2200      	movs	r2, #0
 8002d22:	2100      	movs	r1, #0
 8002d24:	200a      	movs	r0, #10
 8002d26:	f7fd fc02 	bl	800052e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002d2a:	200a      	movs	r0, #10
 8002d2c:	f7fd fc1b 	bl	8000566 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2100      	movs	r1, #0
 8002d34:	2017      	movs	r0, #23
 8002d36:	f7fd fbfa 	bl	800052e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d3a:	2017      	movs	r0, #23
 8002d3c:	f7fd fc13 	bl	8000566 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2100      	movs	r1, #0
 8002d44:	2028      	movs	r0, #40	; 0x28
 8002d46:	f7fd fbf2 	bl	800052e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d4a:	2028      	movs	r0, #40	; 0x28
 8002d4c:	f7fd fc0b 	bl	8000566 <HAL_NVIC_EnableIRQ>

}
 8002d50:	bf00      	nop
 8002d52:	3728      	adds	r7, #40	; 0x28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	10210000 	.word	0x10210000
 8002d60:	48000800 	.word	0x48000800
 8002d64:	10110000 	.word	0x10110000
 8002d68:	48000400 	.word	0x48000400

08002d6c <clockSecondCounter>:

/* USER CODE BEGIN 4 */
void clockSecondCounter() {
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
	if(second == 59) {
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <clockSecondCounter+0x58>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b3b      	cmp	r3, #59	; 0x3b
 8002d76:	d11a      	bne.n	8002dae <clockSecondCounter+0x42>
		second = 0;
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <clockSecondCounter+0x58>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
		minute ++;
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <clockSecondCounter+0x5c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <clockSecondCounter+0x5c>)
 8002d86:	6013      	str	r3, [r2, #0]
		if(minute == 59) {
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <clockSecondCounter+0x5c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b3b      	cmp	r3, #59	; 0x3b
 8002d8e:	d10e      	bne.n	8002dae <clockSecondCounter+0x42>
			  minute = 0;
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <clockSecondCounter+0x5c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
			  hour ++;
 8002d96:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <clockSecondCounter+0x60>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <clockSecondCounter+0x60>)
 8002d9e:	6013      	str	r3, [r2, #0]
			if(hour == 59) {
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <clockSecondCounter+0x60>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b3b      	cmp	r3, #59	; 0x3b
 8002da6:	d102      	bne.n	8002dae <clockSecondCounter+0x42>
			  hour = 0;
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <clockSecondCounter+0x60>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
			}
		}
	}
	second ++;
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <clockSecondCounter+0x58>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <clockSecondCounter+0x58>)
 8002db6:	6013      	str	r3, [r2, #0]


}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000098 	.word	0x20000098
 8002dc8:	2000009c 	.word	0x2000009c
 8002dcc:	200000a0 	.word	0x200000a0

08002dd0 <addTimerCounter>:

void addTimerCounter() {
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
	  if(clockPositionInvertComma == SECOND_CASE) {
 8002dd4:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <addTimerCounter+0x88>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d111      	bne.n	8002e00 <addTimerCounter+0x30>
		  if(second == 59) {
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <addTimerCounter+0x8c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b3b      	cmp	r3, #59	; 0x3b
 8002de2:	d108      	bne.n	8002df6 <addTimerCounter+0x26>
			second = 0;
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <addTimerCounter+0x8c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
			minute ++;
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <addTimerCounter+0x90>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3301      	adds	r3, #1
 8002df0:	4a1b      	ldr	r2, [pc, #108]	; (8002e60 <addTimerCounter+0x90>)
 8002df2:	6013      	str	r3, [r2, #0]
			return;
 8002df4:	e02b      	b.n	8002e4e <addTimerCounter+0x7e>
		}
		second ++;
 8002df6:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <addTimerCounter+0x8c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <addTimerCounter+0x8c>)
 8002dfe:	6013      	str	r3, [r2, #0]
	  }

	  if(clockPositionInvertComma == MINUTE_CASE) {
 8002e00:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <addTimerCounter+0x88>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d111      	bne.n	8002e2c <addTimerCounter+0x5c>
		  if(minute == 59) {
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <addTimerCounter+0x90>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b3b      	cmp	r3, #59	; 0x3b
 8002e0e:	d108      	bne.n	8002e22 <addTimerCounter+0x52>
			  minute = 0;
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <addTimerCounter+0x90>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
			  hour ++;
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <addTimerCounter+0x94>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <addTimerCounter+0x94>)
 8002e1e:	6013      	str	r3, [r2, #0]
			  return;
 8002e20:	e015      	b.n	8002e4e <addTimerCounter+0x7e>
		  }
		  minute ++;
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <addTimerCounter+0x90>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <addTimerCounter+0x90>)
 8002e2a:	6013      	str	r3, [r2, #0]
	  }

	  if(clockPositionInvertComma == HOUR_CASE) {
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <addTimerCounter+0x88>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10c      	bne.n	8002e4e <addTimerCounter+0x7e>
		  if(hour == 59) {
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <addTimerCounter+0x94>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b3b      	cmp	r3, #59	; 0x3b
 8002e3a:	d103      	bne.n	8002e44 <addTimerCounter+0x74>
			  hour = 0;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <addTimerCounter+0x94>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
			  return;
 8002e42:	e004      	b.n	8002e4e <addTimerCounter+0x7e>
		  }
		  hour ++;
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <addTimerCounter+0x94>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <addTimerCounter+0x94>)
 8002e4c:	6013      	str	r3, [r2, #0]
	  }
  }
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	200000a8 	.word	0x200000a8
 8002e5c:	20000098 	.word	0x20000098
 8002e60:	2000009c 	.word	0x2000009c
 8002e64:	200000a0 	.word	0x200000a0

08002e68 <subTimerCounter>:

void subTimerCounter() {
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
	  if(clockPositionInvertComma == SECOND_CASE) {
 8002e6c:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <subTimerCounter+0x88>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d111      	bne.n	8002e98 <subTimerCounter+0x30>
		  if(second == 0) {
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <subTimerCounter+0x8c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d108      	bne.n	8002e8e <subTimerCounter+0x26>
			second = 59;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <subTimerCounter+0x8c>)
 8002e7e:	223b      	movs	r2, #59	; 0x3b
 8002e80:	601a      	str	r2, [r3, #0]
			minute --;
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <subTimerCounter+0x90>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <subTimerCounter+0x90>)
 8002e8a:	6013      	str	r3, [r2, #0]
			return;
 8002e8c:	e02b      	b.n	8002ee6 <subTimerCounter+0x7e>
		}
		second --;
 8002e8e:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <subTimerCounter+0x8c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <subTimerCounter+0x8c>)
 8002e96:	6013      	str	r3, [r2, #0]
	  }

	  if(clockPositionInvertComma == MINUTE_CASE) {
 8002e98:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <subTimerCounter+0x88>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d111      	bne.n	8002ec4 <subTimerCounter+0x5c>
		  if(minute == 0) {
 8002ea0:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <subTimerCounter+0x90>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d108      	bne.n	8002eba <subTimerCounter+0x52>
			  minute = 59;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <subTimerCounter+0x90>)
 8002eaa:	223b      	movs	r2, #59	; 0x3b
 8002eac:	601a      	str	r2, [r3, #0]
			  hour --;
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <subTimerCounter+0x94>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	4a11      	ldr	r2, [pc, #68]	; (8002efc <subTimerCounter+0x94>)
 8002eb6:	6013      	str	r3, [r2, #0]
			  return;
 8002eb8:	e015      	b.n	8002ee6 <subTimerCounter+0x7e>
		  }
		  minute --;
 8002eba:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <subTimerCounter+0x90>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <subTimerCounter+0x90>)
 8002ec2:	6013      	str	r3, [r2, #0]
	  }

	  if(clockPositionInvertComma == HOUR_CASE) {
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <subTimerCounter+0x88>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10c      	bne.n	8002ee6 <subTimerCounter+0x7e>
		  if(hour == 00) {
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <subTimerCounter+0x94>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d103      	bne.n	8002edc <subTimerCounter+0x74>
			  hour = 59;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <subTimerCounter+0x94>)
 8002ed6:	223b      	movs	r2, #59	; 0x3b
 8002ed8:	601a      	str	r2, [r3, #0]
			  return;
 8002eda:	e004      	b.n	8002ee6 <subTimerCounter+0x7e>
		  }
		  hour --;
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <subTimerCounter+0x94>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	4a06      	ldr	r2, [pc, #24]	; (8002efc <subTimerCounter+0x94>)
 8002ee4:	6013      	str	r3, [r2, #0]
	  }
  }
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	200000a8 	.word	0x200000a8
 8002ef4:	20000098 	.word	0x20000098
 8002ef8:	2000009c 	.word	0x2000009c
 8002efc:	200000a0 	.word	0x200000a0

08002f00 <printSerialConsole>:

void printSerialConsole(){
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af02      	add	r7, sp, #8
	if(menuOption == 0){
 8002f06:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <printSerialConsole+0xcc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <printSerialConsole+0x26>
		sprintf(timer,"%d:%d:%d\r\n", hour, minute, second);
 8002f0e:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <printSerialConsole+0xd0>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <printSerialConsole+0xd4>)
 8002f14:	6819      	ldr	r1, [r3, #0]
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <printSerialConsole+0xd8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	492f      	ldr	r1, [pc, #188]	; (8002fdc <printSerialConsole+0xdc>)
 8002f20:	482f      	ldr	r0, [pc, #188]	; (8002fe0 <printSerialConsole+0xe0>)
 8002f22:	f000 fa81 	bl	8003428 <siprintf>
	}

	if(menuOption == 1){
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <printSerialConsole+0xcc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d13f      	bne.n	8002fae <printSerialConsole+0xae>
		if(clockPositionInvertComma == 0)
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <printSerialConsole+0xe4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <printSerialConsole+0x4e>
			sprintf(timer,"'%d':%d:%d\r\n", hour, minute, second);
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <printSerialConsole+0xd0>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <printSerialConsole+0xd4>)
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	4b26      	ldr	r3, [pc, #152]	; (8002fd8 <printSerialConsole+0xd8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	4928      	ldr	r1, [pc, #160]	; (8002fe8 <printSerialConsole+0xe8>)
 8002f48:	4825      	ldr	r0, [pc, #148]	; (8002fe0 <printSerialConsole+0xe0>)
 8002f4a:	f000 fa6d 	bl	8003428 <siprintf>

		if(clockPositionInvertComma == 1)
 8002f4e:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <printSerialConsole+0xe4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10b      	bne.n	8002f6e <printSerialConsole+0x6e>
			sprintf(timer,"%d:'%d':%d\r\n", hour, minute, second);
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <printSerialConsole+0xd0>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <printSerialConsole+0xd4>)
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <printSerialConsole+0xd8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	460b      	mov	r3, r1
 8002f66:	4921      	ldr	r1, [pc, #132]	; (8002fec <printSerialConsole+0xec>)
 8002f68:	481d      	ldr	r0, [pc, #116]	; (8002fe0 <printSerialConsole+0xe0>)
 8002f6a:	f000 fa5d 	bl	8003428 <siprintf>

		if(clockPositionInvertComma == 2)
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <printSerialConsole+0xe4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d10b      	bne.n	8002f8e <printSerialConsole+0x8e>
			sprintf(timer,"%d:%d:'%d'\r\n", hour, minute, second);
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <printSerialConsole+0xd0>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <printSerialConsole+0xd4>)
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <printSerialConsole+0xd8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	460b      	mov	r3, r1
 8002f86:	491a      	ldr	r1, [pc, #104]	; (8002ff0 <printSerialConsole+0xf0>)
 8002f88:	4815      	ldr	r0, [pc, #84]	; (8002fe0 <printSerialConsole+0xe0>)
 8002f8a:	f000 fa4d 	bl	8003428 <siprintf>

		if(clockPositionInvertComma == 3)
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <printSerialConsole+0xe4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d10b      	bne.n	8002fae <printSerialConsole+0xae>
			sprintf(timer,"%d:%d:'%d'    'START'\r\n", hour, minute, second);
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <printSerialConsole+0xd0>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <printSerialConsole+0xd4>)
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <printSerialConsole+0xd8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4913      	ldr	r1, [pc, #76]	; (8002ff4 <printSerialConsole+0xf4>)
 8002fa8:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <printSerialConsole+0xe0>)
 8002faa:	f000 fa3d 	bl	8003428 <siprintf>
	}

	if (HAL_UART_Transmit(&huart2, (uint8_t*) timer, 12, 100) != HAL_OK) {
 8002fae:	2364      	movs	r3, #100	; 0x64
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	490b      	ldr	r1, [pc, #44]	; (8002fe0 <printSerialConsole+0xe0>)
 8002fb4:	4810      	ldr	r0, [pc, #64]	; (8002ff8 <printSerialConsole+0xf8>)
 8002fb6:	f7ff fa1e 	bl	80023f6 <HAL_UART_Transmit>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <printSerialConsole+0xc4>
		Error_Handler();
 8002fc0:	f000 f876 	bl	80030b0 <Error_Handler>
	}
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200000a4 	.word	0x200000a4
 8002fd0:	200000a0 	.word	0x200000a0
 8002fd4:	2000009c 	.word	0x2000009c
 8002fd8:	20000098 	.word	0x20000098
 8002fdc:	08003c4c 	.word	0x08003c4c
 8002fe0:	2000008c 	.word	0x2000008c
 8002fe4:	200000a8 	.word	0x200000a8
 8002fe8:	08003c58 	.word	0x08003c58
 8002fec:	08003c68 	.word	0x08003c68
 8002ff0:	08003c78 	.word	0x08003c78
 8002ff4:	08003c88 	.word	0x08003c88
 8002ff8:	200000fc 	.word	0x200000fc

08002ffc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	if(menuOption == CLOCK_OPTION)
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_TIM_PeriodElapsedCallback+0x14>
		clockSecondCounter();
 800300c:	f7ff feae 	bl	8002d6c <clockSecondCounter>

	printSerialConsole();
 8003010:	f7ff ff76 	bl	8002f00 <printSerialConsole>

}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200000a4 	.word	0x200000a4

08003020 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	80fb      	strh	r3, [r7, #6]
	/* Inverte o led  */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800302a:	2120      	movs	r1, #32
 800302c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003030:	f7fd fc42 	bl	80008b8 <HAL_GPIO_TogglePin>

	if(GPIO_Pin == S1_Pin){
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303a:	d101      	bne.n	8003040 <HAL_GPIO_EXTI_Callback+0x20>
		addTimerCounter();
 800303c:	f7ff fec8 	bl	8002dd0 <addTimerCounter>
	}

	if(GPIO_Pin == S2_Pin){
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003046:	d101      	bne.n	800304c <HAL_GPIO_EXTI_Callback+0x2c>
		subTimerCounter();
 8003048:	f7ff ff0e 	bl	8002e68 <subTimerCounter>
	}

	if(GPIO_Pin == S3_Pin){
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	2b10      	cmp	r3, #16
 8003050:	d108      	bne.n	8003064 <HAL_GPIO_EXTI_Callback+0x44>
		if(clockPositionInvertComma == 3){
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_GPIO_EXTI_Callback+0x88>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d020      	beq.n	800309c <HAL_GPIO_EXTI_Callback+0x7c>
			return;
		}

		clockPositionInvertComma ++;
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <HAL_GPIO_EXTI_Callback+0x88>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	4a11      	ldr	r2, [pc, #68]	; (80030a8 <HAL_GPIO_EXTI_Callback+0x88>)
 8003062:	6013      	str	r3, [r2, #0]
	}

	if(GPIO_Pin == S4_Pin){
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	2b80      	cmp	r3, #128	; 0x80
 8003068:	d108      	bne.n	800307c <HAL_GPIO_EXTI_Callback+0x5c>
		if(clockPositionInvertComma == 0){
 800306a:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <HAL_GPIO_EXTI_Callback+0x88>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_GPIO_EXTI_Callback+0x80>
			return;
		}

		clockPositionInvertComma --;
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_GPIO_EXTI_Callback+0x88>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3b01      	subs	r3, #1
 8003078:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <HAL_GPIO_EXTI_Callback+0x88>)
 800307a:	6013      	str	r3, [r2, #0]
	}



	if (GPIO_Pin == B1_Pin)
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003082:	d10e      	bne.n	80030a2 <HAL_GPIO_EXTI_Callback+0x82>
	{
		if(menuOption == 0) {
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_GPIO_EXTI_Callback+0x8c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <HAL_GPIO_EXTI_Callback+0x74>
		  menuOption = 1;
 800308c:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_GPIO_EXTI_Callback+0x8c>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e006      	b.n	80030a2 <HAL_GPIO_EXTI_Callback+0x82>
		} else {
		  menuOption = 0;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_GPIO_EXTI_Callback+0x8c>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e002      	b.n	80030a2 <HAL_GPIO_EXTI_Callback+0x82>
			return;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <HAL_GPIO_EXTI_Callback+0x82>
			return;
 80030a0:	bf00      	nop
		}
	}
}
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	200000a8 	.word	0x200000a8
 80030ac:	200000a4 	.word	0x200000a4

080030b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_MspInit+0x44>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <HAL_MspInit+0x44>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6193      	str	r3, [r2, #24]
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <HAL_MspInit+0x44>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_MspInit+0x44>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4a08      	ldr	r2, [pc, #32]	; (8003104 <HAL_MspInit+0x44>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	61d3      	str	r3, [r2, #28]
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_MspInit+0x44>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80030f6:	2007      	movs	r0, #7
 80030f8:	f7fd fa0e 	bl	8000518 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000

08003108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0d      	ldr	r2, [pc, #52]	; (800314c <HAL_TIM_Base_MspInit+0x44>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d113      	bne.n	8003142 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_TIM_Base_MspInit+0x48>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <HAL_TIM_Base_MspInit+0x48>)
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	61d3      	str	r3, [r2, #28]
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_TIM_Base_MspInit+0x48>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	201d      	movs	r0, #29
 8003138:	f7fd f9f9 	bl	800052e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800313c:	201d      	movs	r0, #29
 800313e:	f7fd fa12 	bl	8000566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40000400 	.word	0x40000400
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <HAL_UART_MspInit+0x7c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d128      	bne.n	80031c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_UART_MspInit+0x80>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_UART_MspInit+0x80>)
 800317c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003180:	61d3      	str	r3, [r2, #28]
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_UART_MspInit+0x80>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_UART_MspInit+0x80>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <HAL_UART_MspInit+0x80>)
 8003194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003198:	6153      	str	r3, [r2, #20]
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_UART_MspInit+0x80>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031a6:	230c      	movs	r3, #12
 80031a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b2:	2303      	movs	r3, #3
 80031b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031b6:	2307      	movs	r3, #7
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	4619      	mov	r1, r3
 80031c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c4:	f7fd f9ea 	bl	800059c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031c8:	bf00      	nop
 80031ca:	3728      	adds	r7, #40	; 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40004400 	.word	0x40004400
 80031d4:	40021000 	.word	0x40021000

080031d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ea:	e7fe      	b.n	80031ea <HardFault_Handler+0x4>

080031ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <MemManage_Handler+0x4>

080031f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031f6:	e7fe      	b.n	80031f6 <BusFault_Handler+0x4>

080031f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <UsageFault_Handler+0x4>

080031fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800322c:	f7fd f866 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}

08003234 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003238:	2010      	movs	r0, #16
 800323a:	f7fd fb4f 	bl	80008dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}

08003242 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003246:	2080      	movs	r0, #128	; 0x80
 8003248:	f7fd fb48 	bl	80008dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <TIM3_IRQHandler+0x10>)
 8003256:	f7fe fcc3 	bl	8001be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200000bc 	.word	0x200000bc

08003264 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003268:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800326c:	f7fd fb36 	bl	80008dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003270:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003274:	f7fd fb32 	bl	80008dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003278:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800327c:	f7fd fb2e 	bl	80008dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}

08003284 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <_sbrk+0x50>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <_sbrk+0x16>
		heap_end = &end;
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <_sbrk+0x50>)
 8003296:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <_sbrk+0x54>)
 8003298:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800329a:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <_sbrk+0x50>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <_sbrk+0x50>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	466a      	mov	r2, sp
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d907      	bls.n	80032be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80032ae:	f000 f889 	bl	80033c4 <__errno>
 80032b2:	4602      	mov	r2, r0
 80032b4:	230c      	movs	r3, #12
 80032b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80032b8:	f04f 33ff 	mov.w	r3, #4294967295
 80032bc:	e006      	b.n	80032cc <_sbrk+0x48>
	}

	heap_end += incr;
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <_sbrk+0x50>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	4a03      	ldr	r2, [pc, #12]	; (80032d4 <_sbrk+0x50>)
 80032c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80032ca:	68fb      	ldr	r3, [r7, #12]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200000ac 	.word	0x200000ac
 80032d8:	20000170 	.word	0x20000170

080032dc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <SystemInit+0x84>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	4a1e      	ldr	r2, [pc, #120]	; (8003360 <SystemInit+0x84>)
 80032e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */  RCC->CR |= 0x00000001U;
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <SystemInit+0x88>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <SystemInit+0x88>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <SystemInit+0x88>)
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	4918      	ldr	r1, [pc, #96]	; (8003364 <SystemInit+0x88>)
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <SystemInit+0x8c>)
 8003304:	4013      	ands	r3, r2
 8003306:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003308:	4b16      	ldr	r3, [pc, #88]	; (8003364 <SystemInit+0x88>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a15      	ldr	r2, [pc, #84]	; (8003364 <SystemInit+0x88>)
 800330e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003316:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <SystemInit+0x88>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a11      	ldr	r2, [pc, #68]	; (8003364 <SystemInit+0x88>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <SystemInit+0x88>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <SystemInit+0x88>)
 800332a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800332e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <SystemInit+0x88>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <SystemInit+0x88>)
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <SystemInit+0x88>)
 800333e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003340:	4908      	ldr	r1, [pc, #32]	; (8003364 <SystemInit+0x88>)
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <SystemInit+0x90>)
 8003344:	4013      	ands	r3, r2
 8003346:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <SystemInit+0x88>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <SystemInit+0x84>)
 8003350:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003354:	609a      	str	r2, [r3, #8]
#endif
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000ed00 	.word	0xe000ed00
 8003364:	40021000 	.word	0x40021000
 8003368:	f87fc00c 	.word	0xf87fc00c
 800336c:	ff00fccc 	.word	0xff00fccc

08003370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003374:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003376:	e003      	b.n	8003380 <LoopCopyDataInit>

08003378 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800337a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800337c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800337e:	3104      	adds	r1, #4

08003380 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003380:	480b      	ldr	r0, [pc, #44]	; (80033b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003384:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003386:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003388:	d3f6      	bcc.n	8003378 <CopyDataInit>
	ldr	r2, =_sbss
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800338c:	e002      	b.n	8003394 <LoopFillZerobss>

0800338e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800338e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003390:	f842 3b04 	str.w	r3, [r2], #4

08003394 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <LoopForever+0x16>)
	cmp	r2, r3
 8003396:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003398:	d3f9      	bcc.n	800338e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800339a:	f7ff ff9f 	bl	80032dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800339e:	f000 f817 	bl	80033d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033a2:	f7ff fb51 	bl	8002a48 <main>

080033a6 <LoopForever>:

LoopForever:
    b LoopForever
 80033a6:	e7fe      	b.n	80033a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033a8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80033ac:	08003d14 	.word	0x08003d14
	ldr	r0, =_sdata
 80033b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80033b4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80033b8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80033bc:	20000170 	.word	0x20000170

080033c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033c0:	e7fe      	b.n	80033c0 <ADC1_2_IRQHandler>
	...

080033c4 <__errno>:
 80033c4:	4b01      	ldr	r3, [pc, #4]	; (80033cc <__errno+0x8>)
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	2000000c 	.word	0x2000000c

080033d0 <__libc_init_array>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	4e0d      	ldr	r6, [pc, #52]	; (8003408 <__libc_init_array+0x38>)
 80033d4:	4c0d      	ldr	r4, [pc, #52]	; (800340c <__libc_init_array+0x3c>)
 80033d6:	1ba4      	subs	r4, r4, r6
 80033d8:	10a4      	asrs	r4, r4, #2
 80033da:	2500      	movs	r5, #0
 80033dc:	42a5      	cmp	r5, r4
 80033de:	d109      	bne.n	80033f4 <__libc_init_array+0x24>
 80033e0:	4e0b      	ldr	r6, [pc, #44]	; (8003410 <__libc_init_array+0x40>)
 80033e2:	4c0c      	ldr	r4, [pc, #48]	; (8003414 <__libc_init_array+0x44>)
 80033e4:	f000 fc26 	bl	8003c34 <_init>
 80033e8:	1ba4      	subs	r4, r4, r6
 80033ea:	10a4      	asrs	r4, r4, #2
 80033ec:	2500      	movs	r5, #0
 80033ee:	42a5      	cmp	r5, r4
 80033f0:	d105      	bne.n	80033fe <__libc_init_array+0x2e>
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033f8:	4798      	blx	r3
 80033fa:	3501      	adds	r5, #1
 80033fc:	e7ee      	b.n	80033dc <__libc_init_array+0xc>
 80033fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003402:	4798      	blx	r3
 8003404:	3501      	adds	r5, #1
 8003406:	e7f2      	b.n	80033ee <__libc_init_array+0x1e>
 8003408:	08003d0c 	.word	0x08003d0c
 800340c:	08003d0c 	.word	0x08003d0c
 8003410:	08003d0c 	.word	0x08003d0c
 8003414:	08003d10 	.word	0x08003d10

08003418 <memset>:
 8003418:	4402      	add	r2, r0
 800341a:	4603      	mov	r3, r0
 800341c:	4293      	cmp	r3, r2
 800341e:	d100      	bne.n	8003422 <memset+0xa>
 8003420:	4770      	bx	lr
 8003422:	f803 1b01 	strb.w	r1, [r3], #1
 8003426:	e7f9      	b.n	800341c <memset+0x4>

08003428 <siprintf>:
 8003428:	b40e      	push	{r1, r2, r3}
 800342a:	b500      	push	{lr}
 800342c:	b09c      	sub	sp, #112	; 0x70
 800342e:	ab1d      	add	r3, sp, #116	; 0x74
 8003430:	9002      	str	r0, [sp, #8]
 8003432:	9006      	str	r0, [sp, #24]
 8003434:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003438:	4809      	ldr	r0, [pc, #36]	; (8003460 <siprintf+0x38>)
 800343a:	9107      	str	r1, [sp, #28]
 800343c:	9104      	str	r1, [sp, #16]
 800343e:	4909      	ldr	r1, [pc, #36]	; (8003464 <siprintf+0x3c>)
 8003440:	f853 2b04 	ldr.w	r2, [r3], #4
 8003444:	9105      	str	r1, [sp, #20]
 8003446:	6800      	ldr	r0, [r0, #0]
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	a902      	add	r1, sp, #8
 800344c:	f000 f866 	bl	800351c <_svfiprintf_r>
 8003450:	9b02      	ldr	r3, [sp, #8]
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	b01c      	add	sp, #112	; 0x70
 8003458:	f85d eb04 	ldr.w	lr, [sp], #4
 800345c:	b003      	add	sp, #12
 800345e:	4770      	bx	lr
 8003460:	2000000c 	.word	0x2000000c
 8003464:	ffff0208 	.word	0xffff0208

08003468 <__ssputs_r>:
 8003468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800346c:	688e      	ldr	r6, [r1, #8]
 800346e:	429e      	cmp	r6, r3
 8003470:	4682      	mov	sl, r0
 8003472:	460c      	mov	r4, r1
 8003474:	4690      	mov	r8, r2
 8003476:	4699      	mov	r9, r3
 8003478:	d837      	bhi.n	80034ea <__ssputs_r+0x82>
 800347a:	898a      	ldrh	r2, [r1, #12]
 800347c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003480:	d031      	beq.n	80034e6 <__ssputs_r+0x7e>
 8003482:	6825      	ldr	r5, [r4, #0]
 8003484:	6909      	ldr	r1, [r1, #16]
 8003486:	1a6f      	subs	r7, r5, r1
 8003488:	6965      	ldr	r5, [r4, #20]
 800348a:	2302      	movs	r3, #2
 800348c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003490:	fb95 f5f3 	sdiv	r5, r5, r3
 8003494:	f109 0301 	add.w	r3, r9, #1
 8003498:	443b      	add	r3, r7
 800349a:	429d      	cmp	r5, r3
 800349c:	bf38      	it	cc
 800349e:	461d      	movcc	r5, r3
 80034a0:	0553      	lsls	r3, r2, #21
 80034a2:	d530      	bpl.n	8003506 <__ssputs_r+0x9e>
 80034a4:	4629      	mov	r1, r5
 80034a6:	f000 fb2b 	bl	8003b00 <_malloc_r>
 80034aa:	4606      	mov	r6, r0
 80034ac:	b950      	cbnz	r0, 80034c4 <__ssputs_r+0x5c>
 80034ae:	230c      	movs	r3, #12
 80034b0:	f8ca 3000 	str.w	r3, [sl]
 80034b4:	89a3      	ldrh	r3, [r4, #12]
 80034b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ba:	81a3      	strh	r3, [r4, #12]
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c4:	463a      	mov	r2, r7
 80034c6:	6921      	ldr	r1, [r4, #16]
 80034c8:	f000 faa8 	bl	8003a1c <memcpy>
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d6:	81a3      	strh	r3, [r4, #12]
 80034d8:	6126      	str	r6, [r4, #16]
 80034da:	6165      	str	r5, [r4, #20]
 80034dc:	443e      	add	r6, r7
 80034de:	1bed      	subs	r5, r5, r7
 80034e0:	6026      	str	r6, [r4, #0]
 80034e2:	60a5      	str	r5, [r4, #8]
 80034e4:	464e      	mov	r6, r9
 80034e6:	454e      	cmp	r6, r9
 80034e8:	d900      	bls.n	80034ec <__ssputs_r+0x84>
 80034ea:	464e      	mov	r6, r9
 80034ec:	4632      	mov	r2, r6
 80034ee:	4641      	mov	r1, r8
 80034f0:	6820      	ldr	r0, [r4, #0]
 80034f2:	f000 fa9e 	bl	8003a32 <memmove>
 80034f6:	68a3      	ldr	r3, [r4, #8]
 80034f8:	1b9b      	subs	r3, r3, r6
 80034fa:	60a3      	str	r3, [r4, #8]
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	441e      	add	r6, r3
 8003500:	6026      	str	r6, [r4, #0]
 8003502:	2000      	movs	r0, #0
 8003504:	e7dc      	b.n	80034c0 <__ssputs_r+0x58>
 8003506:	462a      	mov	r2, r5
 8003508:	f000 fb54 	bl	8003bb4 <_realloc_r>
 800350c:	4606      	mov	r6, r0
 800350e:	2800      	cmp	r0, #0
 8003510:	d1e2      	bne.n	80034d8 <__ssputs_r+0x70>
 8003512:	6921      	ldr	r1, [r4, #16]
 8003514:	4650      	mov	r0, sl
 8003516:	f000 faa5 	bl	8003a64 <_free_r>
 800351a:	e7c8      	b.n	80034ae <__ssputs_r+0x46>

0800351c <_svfiprintf_r>:
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003520:	461d      	mov	r5, r3
 8003522:	898b      	ldrh	r3, [r1, #12]
 8003524:	061f      	lsls	r7, r3, #24
 8003526:	b09d      	sub	sp, #116	; 0x74
 8003528:	4680      	mov	r8, r0
 800352a:	460c      	mov	r4, r1
 800352c:	4616      	mov	r6, r2
 800352e:	d50f      	bpl.n	8003550 <_svfiprintf_r+0x34>
 8003530:	690b      	ldr	r3, [r1, #16]
 8003532:	b96b      	cbnz	r3, 8003550 <_svfiprintf_r+0x34>
 8003534:	2140      	movs	r1, #64	; 0x40
 8003536:	f000 fae3 	bl	8003b00 <_malloc_r>
 800353a:	6020      	str	r0, [r4, #0]
 800353c:	6120      	str	r0, [r4, #16]
 800353e:	b928      	cbnz	r0, 800354c <_svfiprintf_r+0x30>
 8003540:	230c      	movs	r3, #12
 8003542:	f8c8 3000 	str.w	r3, [r8]
 8003546:	f04f 30ff 	mov.w	r0, #4294967295
 800354a:	e0c8      	b.n	80036de <_svfiprintf_r+0x1c2>
 800354c:	2340      	movs	r3, #64	; 0x40
 800354e:	6163      	str	r3, [r4, #20]
 8003550:	2300      	movs	r3, #0
 8003552:	9309      	str	r3, [sp, #36]	; 0x24
 8003554:	2320      	movs	r3, #32
 8003556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800355a:	2330      	movs	r3, #48	; 0x30
 800355c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003560:	9503      	str	r5, [sp, #12]
 8003562:	f04f 0b01 	mov.w	fp, #1
 8003566:	4637      	mov	r7, r6
 8003568:	463d      	mov	r5, r7
 800356a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800356e:	b10b      	cbz	r3, 8003574 <_svfiprintf_r+0x58>
 8003570:	2b25      	cmp	r3, #37	; 0x25
 8003572:	d13e      	bne.n	80035f2 <_svfiprintf_r+0xd6>
 8003574:	ebb7 0a06 	subs.w	sl, r7, r6
 8003578:	d00b      	beq.n	8003592 <_svfiprintf_r+0x76>
 800357a:	4653      	mov	r3, sl
 800357c:	4632      	mov	r2, r6
 800357e:	4621      	mov	r1, r4
 8003580:	4640      	mov	r0, r8
 8003582:	f7ff ff71 	bl	8003468 <__ssputs_r>
 8003586:	3001      	adds	r0, #1
 8003588:	f000 80a4 	beq.w	80036d4 <_svfiprintf_r+0x1b8>
 800358c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800358e:	4453      	add	r3, sl
 8003590:	9309      	str	r3, [sp, #36]	; 0x24
 8003592:	783b      	ldrb	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 809d 	beq.w	80036d4 <_svfiprintf_r+0x1b8>
 800359a:	2300      	movs	r3, #0
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035a4:	9304      	str	r3, [sp, #16]
 80035a6:	9307      	str	r3, [sp, #28]
 80035a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035ac:	931a      	str	r3, [sp, #104]	; 0x68
 80035ae:	462f      	mov	r7, r5
 80035b0:	2205      	movs	r2, #5
 80035b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80035b6:	4850      	ldr	r0, [pc, #320]	; (80036f8 <_svfiprintf_r+0x1dc>)
 80035b8:	f7fc fe0a 	bl	80001d0 <memchr>
 80035bc:	9b04      	ldr	r3, [sp, #16]
 80035be:	b9d0      	cbnz	r0, 80035f6 <_svfiprintf_r+0xda>
 80035c0:	06d9      	lsls	r1, r3, #27
 80035c2:	bf44      	itt	mi
 80035c4:	2220      	movmi	r2, #32
 80035c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035ca:	071a      	lsls	r2, r3, #28
 80035cc:	bf44      	itt	mi
 80035ce:	222b      	movmi	r2, #43	; 0x2b
 80035d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035d4:	782a      	ldrb	r2, [r5, #0]
 80035d6:	2a2a      	cmp	r2, #42	; 0x2a
 80035d8:	d015      	beq.n	8003606 <_svfiprintf_r+0xea>
 80035da:	9a07      	ldr	r2, [sp, #28]
 80035dc:	462f      	mov	r7, r5
 80035de:	2000      	movs	r0, #0
 80035e0:	250a      	movs	r5, #10
 80035e2:	4639      	mov	r1, r7
 80035e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035e8:	3b30      	subs	r3, #48	; 0x30
 80035ea:	2b09      	cmp	r3, #9
 80035ec:	d94d      	bls.n	800368a <_svfiprintf_r+0x16e>
 80035ee:	b1b8      	cbz	r0, 8003620 <_svfiprintf_r+0x104>
 80035f0:	e00f      	b.n	8003612 <_svfiprintf_r+0xf6>
 80035f2:	462f      	mov	r7, r5
 80035f4:	e7b8      	b.n	8003568 <_svfiprintf_r+0x4c>
 80035f6:	4a40      	ldr	r2, [pc, #256]	; (80036f8 <_svfiprintf_r+0x1dc>)
 80035f8:	1a80      	subs	r0, r0, r2
 80035fa:	fa0b f000 	lsl.w	r0, fp, r0
 80035fe:	4318      	orrs	r0, r3
 8003600:	9004      	str	r0, [sp, #16]
 8003602:	463d      	mov	r5, r7
 8003604:	e7d3      	b.n	80035ae <_svfiprintf_r+0x92>
 8003606:	9a03      	ldr	r2, [sp, #12]
 8003608:	1d11      	adds	r1, r2, #4
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	9103      	str	r1, [sp, #12]
 800360e:	2a00      	cmp	r2, #0
 8003610:	db01      	blt.n	8003616 <_svfiprintf_r+0xfa>
 8003612:	9207      	str	r2, [sp, #28]
 8003614:	e004      	b.n	8003620 <_svfiprintf_r+0x104>
 8003616:	4252      	negs	r2, r2
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	9207      	str	r2, [sp, #28]
 800361e:	9304      	str	r3, [sp, #16]
 8003620:	783b      	ldrb	r3, [r7, #0]
 8003622:	2b2e      	cmp	r3, #46	; 0x2e
 8003624:	d10c      	bne.n	8003640 <_svfiprintf_r+0x124>
 8003626:	787b      	ldrb	r3, [r7, #1]
 8003628:	2b2a      	cmp	r3, #42	; 0x2a
 800362a:	d133      	bne.n	8003694 <_svfiprintf_r+0x178>
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	1d1a      	adds	r2, r3, #4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	9203      	str	r2, [sp, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	bfb8      	it	lt
 8003638:	f04f 33ff 	movlt.w	r3, #4294967295
 800363c:	3702      	adds	r7, #2
 800363e:	9305      	str	r3, [sp, #20]
 8003640:	4d2e      	ldr	r5, [pc, #184]	; (80036fc <_svfiprintf_r+0x1e0>)
 8003642:	7839      	ldrb	r1, [r7, #0]
 8003644:	2203      	movs	r2, #3
 8003646:	4628      	mov	r0, r5
 8003648:	f7fc fdc2 	bl	80001d0 <memchr>
 800364c:	b138      	cbz	r0, 800365e <_svfiprintf_r+0x142>
 800364e:	2340      	movs	r3, #64	; 0x40
 8003650:	1b40      	subs	r0, r0, r5
 8003652:	fa03 f000 	lsl.w	r0, r3, r0
 8003656:	9b04      	ldr	r3, [sp, #16]
 8003658:	4303      	orrs	r3, r0
 800365a:	3701      	adds	r7, #1
 800365c:	9304      	str	r3, [sp, #16]
 800365e:	7839      	ldrb	r1, [r7, #0]
 8003660:	4827      	ldr	r0, [pc, #156]	; (8003700 <_svfiprintf_r+0x1e4>)
 8003662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003666:	2206      	movs	r2, #6
 8003668:	1c7e      	adds	r6, r7, #1
 800366a:	f7fc fdb1 	bl	80001d0 <memchr>
 800366e:	2800      	cmp	r0, #0
 8003670:	d038      	beq.n	80036e4 <_svfiprintf_r+0x1c8>
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <_svfiprintf_r+0x1e8>)
 8003674:	bb13      	cbnz	r3, 80036bc <_svfiprintf_r+0x1a0>
 8003676:	9b03      	ldr	r3, [sp, #12]
 8003678:	3307      	adds	r3, #7
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	3308      	adds	r3, #8
 8003680:	9303      	str	r3, [sp, #12]
 8003682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003684:	444b      	add	r3, r9
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
 8003688:	e76d      	b.n	8003566 <_svfiprintf_r+0x4a>
 800368a:	fb05 3202 	mla	r2, r5, r2, r3
 800368e:	2001      	movs	r0, #1
 8003690:	460f      	mov	r7, r1
 8003692:	e7a6      	b.n	80035e2 <_svfiprintf_r+0xc6>
 8003694:	2300      	movs	r3, #0
 8003696:	3701      	adds	r7, #1
 8003698:	9305      	str	r3, [sp, #20]
 800369a:	4619      	mov	r1, r3
 800369c:	250a      	movs	r5, #10
 800369e:	4638      	mov	r0, r7
 80036a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036a4:	3a30      	subs	r2, #48	; 0x30
 80036a6:	2a09      	cmp	r2, #9
 80036a8:	d903      	bls.n	80036b2 <_svfiprintf_r+0x196>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0c8      	beq.n	8003640 <_svfiprintf_r+0x124>
 80036ae:	9105      	str	r1, [sp, #20]
 80036b0:	e7c6      	b.n	8003640 <_svfiprintf_r+0x124>
 80036b2:	fb05 2101 	mla	r1, r5, r1, r2
 80036b6:	2301      	movs	r3, #1
 80036b8:	4607      	mov	r7, r0
 80036ba:	e7f0      	b.n	800369e <_svfiprintf_r+0x182>
 80036bc:	ab03      	add	r3, sp, #12
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4622      	mov	r2, r4
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <_svfiprintf_r+0x1ec>)
 80036c4:	a904      	add	r1, sp, #16
 80036c6:	4640      	mov	r0, r8
 80036c8:	f3af 8000 	nop.w
 80036cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036d0:	4681      	mov	r9, r0
 80036d2:	d1d6      	bne.n	8003682 <_svfiprintf_r+0x166>
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	065b      	lsls	r3, r3, #25
 80036d8:	f53f af35 	bmi.w	8003546 <_svfiprintf_r+0x2a>
 80036dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036de:	b01d      	add	sp, #116	; 0x74
 80036e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e4:	ab03      	add	r3, sp, #12
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4622      	mov	r2, r4
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <_svfiprintf_r+0x1ec>)
 80036ec:	a904      	add	r1, sp, #16
 80036ee:	4640      	mov	r0, r8
 80036f0:	f000 f882 	bl	80037f8 <_printf_i>
 80036f4:	e7ea      	b.n	80036cc <_svfiprintf_r+0x1b0>
 80036f6:	bf00      	nop
 80036f8:	08003cd8 	.word	0x08003cd8
 80036fc:	08003cde 	.word	0x08003cde
 8003700:	08003ce2 	.word	0x08003ce2
 8003704:	00000000 	.word	0x00000000
 8003708:	08003469 	.word	0x08003469

0800370c <_printf_common>:
 800370c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003710:	4691      	mov	r9, r2
 8003712:	461f      	mov	r7, r3
 8003714:	688a      	ldr	r2, [r1, #8]
 8003716:	690b      	ldr	r3, [r1, #16]
 8003718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800371c:	4293      	cmp	r3, r2
 800371e:	bfb8      	it	lt
 8003720:	4613      	movlt	r3, r2
 8003722:	f8c9 3000 	str.w	r3, [r9]
 8003726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800372a:	4606      	mov	r6, r0
 800372c:	460c      	mov	r4, r1
 800372e:	b112      	cbz	r2, 8003736 <_printf_common+0x2a>
 8003730:	3301      	adds	r3, #1
 8003732:	f8c9 3000 	str.w	r3, [r9]
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	0699      	lsls	r1, r3, #26
 800373a:	bf42      	ittt	mi
 800373c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003740:	3302      	addmi	r3, #2
 8003742:	f8c9 3000 	strmi.w	r3, [r9]
 8003746:	6825      	ldr	r5, [r4, #0]
 8003748:	f015 0506 	ands.w	r5, r5, #6
 800374c:	d107      	bne.n	800375e <_printf_common+0x52>
 800374e:	f104 0a19 	add.w	sl, r4, #25
 8003752:	68e3      	ldr	r3, [r4, #12]
 8003754:	f8d9 2000 	ldr.w	r2, [r9]
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	42ab      	cmp	r3, r5
 800375c:	dc28      	bgt.n	80037b0 <_printf_common+0xa4>
 800375e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	3300      	adds	r3, #0
 8003766:	bf18      	it	ne
 8003768:	2301      	movne	r3, #1
 800376a:	0692      	lsls	r2, r2, #26
 800376c:	d42d      	bmi.n	80037ca <_printf_common+0xbe>
 800376e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003772:	4639      	mov	r1, r7
 8003774:	4630      	mov	r0, r6
 8003776:	47c0      	blx	r8
 8003778:	3001      	adds	r0, #1
 800377a:	d020      	beq.n	80037be <_printf_common+0xb2>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	68e5      	ldr	r5, [r4, #12]
 8003780:	f8d9 2000 	ldr.w	r2, [r9]
 8003784:	f003 0306 	and.w	r3, r3, #6
 8003788:	2b04      	cmp	r3, #4
 800378a:	bf08      	it	eq
 800378c:	1aad      	subeq	r5, r5, r2
 800378e:	68a3      	ldr	r3, [r4, #8]
 8003790:	6922      	ldr	r2, [r4, #16]
 8003792:	bf0c      	ite	eq
 8003794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003798:	2500      	movne	r5, #0
 800379a:	4293      	cmp	r3, r2
 800379c:	bfc4      	itt	gt
 800379e:	1a9b      	subgt	r3, r3, r2
 80037a0:	18ed      	addgt	r5, r5, r3
 80037a2:	f04f 0900 	mov.w	r9, #0
 80037a6:	341a      	adds	r4, #26
 80037a8:	454d      	cmp	r5, r9
 80037aa:	d11a      	bne.n	80037e2 <_printf_common+0xd6>
 80037ac:	2000      	movs	r0, #0
 80037ae:	e008      	b.n	80037c2 <_printf_common+0xb6>
 80037b0:	2301      	movs	r3, #1
 80037b2:	4652      	mov	r2, sl
 80037b4:	4639      	mov	r1, r7
 80037b6:	4630      	mov	r0, r6
 80037b8:	47c0      	blx	r8
 80037ba:	3001      	adds	r0, #1
 80037bc:	d103      	bne.n	80037c6 <_printf_common+0xba>
 80037be:	f04f 30ff 	mov.w	r0, #4294967295
 80037c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c6:	3501      	adds	r5, #1
 80037c8:	e7c3      	b.n	8003752 <_printf_common+0x46>
 80037ca:	18e1      	adds	r1, r4, r3
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	2030      	movs	r0, #48	; 0x30
 80037d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037d4:	4422      	add	r2, r4
 80037d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037de:	3302      	adds	r3, #2
 80037e0:	e7c5      	b.n	800376e <_printf_common+0x62>
 80037e2:	2301      	movs	r3, #1
 80037e4:	4622      	mov	r2, r4
 80037e6:	4639      	mov	r1, r7
 80037e8:	4630      	mov	r0, r6
 80037ea:	47c0      	blx	r8
 80037ec:	3001      	adds	r0, #1
 80037ee:	d0e6      	beq.n	80037be <_printf_common+0xb2>
 80037f0:	f109 0901 	add.w	r9, r9, #1
 80037f4:	e7d8      	b.n	80037a8 <_printf_common+0x9c>
	...

080037f8 <_printf_i>:
 80037f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003800:	460c      	mov	r4, r1
 8003802:	7e09      	ldrb	r1, [r1, #24]
 8003804:	b085      	sub	sp, #20
 8003806:	296e      	cmp	r1, #110	; 0x6e
 8003808:	4617      	mov	r7, r2
 800380a:	4606      	mov	r6, r0
 800380c:	4698      	mov	r8, r3
 800380e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003810:	f000 80b3 	beq.w	800397a <_printf_i+0x182>
 8003814:	d822      	bhi.n	800385c <_printf_i+0x64>
 8003816:	2963      	cmp	r1, #99	; 0x63
 8003818:	d036      	beq.n	8003888 <_printf_i+0x90>
 800381a:	d80a      	bhi.n	8003832 <_printf_i+0x3a>
 800381c:	2900      	cmp	r1, #0
 800381e:	f000 80b9 	beq.w	8003994 <_printf_i+0x19c>
 8003822:	2958      	cmp	r1, #88	; 0x58
 8003824:	f000 8083 	beq.w	800392e <_printf_i+0x136>
 8003828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800382c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003830:	e032      	b.n	8003898 <_printf_i+0xa0>
 8003832:	2964      	cmp	r1, #100	; 0x64
 8003834:	d001      	beq.n	800383a <_printf_i+0x42>
 8003836:	2969      	cmp	r1, #105	; 0x69
 8003838:	d1f6      	bne.n	8003828 <_printf_i+0x30>
 800383a:	6820      	ldr	r0, [r4, #0]
 800383c:	6813      	ldr	r3, [r2, #0]
 800383e:	0605      	lsls	r5, r0, #24
 8003840:	f103 0104 	add.w	r1, r3, #4
 8003844:	d52a      	bpl.n	800389c <_printf_i+0xa4>
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6011      	str	r1, [r2, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	da03      	bge.n	8003856 <_printf_i+0x5e>
 800384e:	222d      	movs	r2, #45	; 0x2d
 8003850:	425b      	negs	r3, r3
 8003852:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003856:	486f      	ldr	r0, [pc, #444]	; (8003a14 <_printf_i+0x21c>)
 8003858:	220a      	movs	r2, #10
 800385a:	e039      	b.n	80038d0 <_printf_i+0xd8>
 800385c:	2973      	cmp	r1, #115	; 0x73
 800385e:	f000 809d 	beq.w	800399c <_printf_i+0x1a4>
 8003862:	d808      	bhi.n	8003876 <_printf_i+0x7e>
 8003864:	296f      	cmp	r1, #111	; 0x6f
 8003866:	d020      	beq.n	80038aa <_printf_i+0xb2>
 8003868:	2970      	cmp	r1, #112	; 0x70
 800386a:	d1dd      	bne.n	8003828 <_printf_i+0x30>
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	f043 0320 	orr.w	r3, r3, #32
 8003872:	6023      	str	r3, [r4, #0]
 8003874:	e003      	b.n	800387e <_printf_i+0x86>
 8003876:	2975      	cmp	r1, #117	; 0x75
 8003878:	d017      	beq.n	80038aa <_printf_i+0xb2>
 800387a:	2978      	cmp	r1, #120	; 0x78
 800387c:	d1d4      	bne.n	8003828 <_printf_i+0x30>
 800387e:	2378      	movs	r3, #120	; 0x78
 8003880:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003884:	4864      	ldr	r0, [pc, #400]	; (8003a18 <_printf_i+0x220>)
 8003886:	e055      	b.n	8003934 <_printf_i+0x13c>
 8003888:	6813      	ldr	r3, [r2, #0]
 800388a:	1d19      	adds	r1, r3, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6011      	str	r1, [r2, #0]
 8003890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003898:	2301      	movs	r3, #1
 800389a:	e08c      	b.n	80039b6 <_printf_i+0x1be>
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6011      	str	r1, [r2, #0]
 80038a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038a4:	bf18      	it	ne
 80038a6:	b21b      	sxthne	r3, r3
 80038a8:	e7cf      	b.n	800384a <_printf_i+0x52>
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	6825      	ldr	r5, [r4, #0]
 80038ae:	1d18      	adds	r0, r3, #4
 80038b0:	6010      	str	r0, [r2, #0]
 80038b2:	0628      	lsls	r0, r5, #24
 80038b4:	d501      	bpl.n	80038ba <_printf_i+0xc2>
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	e002      	b.n	80038c0 <_printf_i+0xc8>
 80038ba:	0668      	lsls	r0, r5, #25
 80038bc:	d5fb      	bpl.n	80038b6 <_printf_i+0xbe>
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	4854      	ldr	r0, [pc, #336]	; (8003a14 <_printf_i+0x21c>)
 80038c2:	296f      	cmp	r1, #111	; 0x6f
 80038c4:	bf14      	ite	ne
 80038c6:	220a      	movne	r2, #10
 80038c8:	2208      	moveq	r2, #8
 80038ca:	2100      	movs	r1, #0
 80038cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038d0:	6865      	ldr	r5, [r4, #4]
 80038d2:	60a5      	str	r5, [r4, #8]
 80038d4:	2d00      	cmp	r5, #0
 80038d6:	f2c0 8095 	blt.w	8003a04 <_printf_i+0x20c>
 80038da:	6821      	ldr	r1, [r4, #0]
 80038dc:	f021 0104 	bic.w	r1, r1, #4
 80038e0:	6021      	str	r1, [r4, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d13d      	bne.n	8003962 <_printf_i+0x16a>
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	f040 808e 	bne.w	8003a08 <_printf_i+0x210>
 80038ec:	4665      	mov	r5, ip
 80038ee:	2a08      	cmp	r2, #8
 80038f0:	d10b      	bne.n	800390a <_printf_i+0x112>
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	07db      	lsls	r3, r3, #31
 80038f6:	d508      	bpl.n	800390a <_printf_i+0x112>
 80038f8:	6923      	ldr	r3, [r4, #16]
 80038fa:	6862      	ldr	r2, [r4, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	bfde      	ittt	le
 8003900:	2330      	movle	r3, #48	; 0x30
 8003902:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003906:	f105 35ff 	addle.w	r5, r5, #4294967295
 800390a:	ebac 0305 	sub.w	r3, ip, r5
 800390e:	6123      	str	r3, [r4, #16]
 8003910:	f8cd 8000 	str.w	r8, [sp]
 8003914:	463b      	mov	r3, r7
 8003916:	aa03      	add	r2, sp, #12
 8003918:	4621      	mov	r1, r4
 800391a:	4630      	mov	r0, r6
 800391c:	f7ff fef6 	bl	800370c <_printf_common>
 8003920:	3001      	adds	r0, #1
 8003922:	d14d      	bne.n	80039c0 <_printf_i+0x1c8>
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	b005      	add	sp, #20
 800392a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800392e:	4839      	ldr	r0, [pc, #228]	; (8003a14 <_printf_i+0x21c>)
 8003930:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003934:	6813      	ldr	r3, [r2, #0]
 8003936:	6821      	ldr	r1, [r4, #0]
 8003938:	1d1d      	adds	r5, r3, #4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6015      	str	r5, [r2, #0]
 800393e:	060a      	lsls	r2, r1, #24
 8003940:	d50b      	bpl.n	800395a <_printf_i+0x162>
 8003942:	07ca      	lsls	r2, r1, #31
 8003944:	bf44      	itt	mi
 8003946:	f041 0120 	orrmi.w	r1, r1, #32
 800394a:	6021      	strmi	r1, [r4, #0]
 800394c:	b91b      	cbnz	r3, 8003956 <_printf_i+0x15e>
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	f022 0220 	bic.w	r2, r2, #32
 8003954:	6022      	str	r2, [r4, #0]
 8003956:	2210      	movs	r2, #16
 8003958:	e7b7      	b.n	80038ca <_printf_i+0xd2>
 800395a:	064d      	lsls	r5, r1, #25
 800395c:	bf48      	it	mi
 800395e:	b29b      	uxthmi	r3, r3
 8003960:	e7ef      	b.n	8003942 <_printf_i+0x14a>
 8003962:	4665      	mov	r5, ip
 8003964:	fbb3 f1f2 	udiv	r1, r3, r2
 8003968:	fb02 3311 	mls	r3, r2, r1, r3
 800396c:	5cc3      	ldrb	r3, [r0, r3]
 800396e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003972:	460b      	mov	r3, r1
 8003974:	2900      	cmp	r1, #0
 8003976:	d1f5      	bne.n	8003964 <_printf_i+0x16c>
 8003978:	e7b9      	b.n	80038ee <_printf_i+0xf6>
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	6825      	ldr	r5, [r4, #0]
 800397e:	6961      	ldr	r1, [r4, #20]
 8003980:	1d18      	adds	r0, r3, #4
 8003982:	6010      	str	r0, [r2, #0]
 8003984:	0628      	lsls	r0, r5, #24
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	d501      	bpl.n	800398e <_printf_i+0x196>
 800398a:	6019      	str	r1, [r3, #0]
 800398c:	e002      	b.n	8003994 <_printf_i+0x19c>
 800398e:	066a      	lsls	r2, r5, #25
 8003990:	d5fb      	bpl.n	800398a <_printf_i+0x192>
 8003992:	8019      	strh	r1, [r3, #0]
 8003994:	2300      	movs	r3, #0
 8003996:	6123      	str	r3, [r4, #16]
 8003998:	4665      	mov	r5, ip
 800399a:	e7b9      	b.n	8003910 <_printf_i+0x118>
 800399c:	6813      	ldr	r3, [r2, #0]
 800399e:	1d19      	adds	r1, r3, #4
 80039a0:	6011      	str	r1, [r2, #0]
 80039a2:	681d      	ldr	r5, [r3, #0]
 80039a4:	6862      	ldr	r2, [r4, #4]
 80039a6:	2100      	movs	r1, #0
 80039a8:	4628      	mov	r0, r5
 80039aa:	f7fc fc11 	bl	80001d0 <memchr>
 80039ae:	b108      	cbz	r0, 80039b4 <_printf_i+0x1bc>
 80039b0:	1b40      	subs	r0, r0, r5
 80039b2:	6060      	str	r0, [r4, #4]
 80039b4:	6863      	ldr	r3, [r4, #4]
 80039b6:	6123      	str	r3, [r4, #16]
 80039b8:	2300      	movs	r3, #0
 80039ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039be:	e7a7      	b.n	8003910 <_printf_i+0x118>
 80039c0:	6923      	ldr	r3, [r4, #16]
 80039c2:	462a      	mov	r2, r5
 80039c4:	4639      	mov	r1, r7
 80039c6:	4630      	mov	r0, r6
 80039c8:	47c0      	blx	r8
 80039ca:	3001      	adds	r0, #1
 80039cc:	d0aa      	beq.n	8003924 <_printf_i+0x12c>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	079b      	lsls	r3, r3, #30
 80039d2:	d413      	bmi.n	80039fc <_printf_i+0x204>
 80039d4:	68e0      	ldr	r0, [r4, #12]
 80039d6:	9b03      	ldr	r3, [sp, #12]
 80039d8:	4298      	cmp	r0, r3
 80039da:	bfb8      	it	lt
 80039dc:	4618      	movlt	r0, r3
 80039de:	e7a3      	b.n	8003928 <_printf_i+0x130>
 80039e0:	2301      	movs	r3, #1
 80039e2:	464a      	mov	r2, r9
 80039e4:	4639      	mov	r1, r7
 80039e6:	4630      	mov	r0, r6
 80039e8:	47c0      	blx	r8
 80039ea:	3001      	adds	r0, #1
 80039ec:	d09a      	beq.n	8003924 <_printf_i+0x12c>
 80039ee:	3501      	adds	r5, #1
 80039f0:	68e3      	ldr	r3, [r4, #12]
 80039f2:	9a03      	ldr	r2, [sp, #12]
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	42ab      	cmp	r3, r5
 80039f8:	dcf2      	bgt.n	80039e0 <_printf_i+0x1e8>
 80039fa:	e7eb      	b.n	80039d4 <_printf_i+0x1dc>
 80039fc:	2500      	movs	r5, #0
 80039fe:	f104 0919 	add.w	r9, r4, #25
 8003a02:	e7f5      	b.n	80039f0 <_printf_i+0x1f8>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ac      	bne.n	8003962 <_printf_i+0x16a>
 8003a08:	7803      	ldrb	r3, [r0, #0]
 8003a0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a12:	e76c      	b.n	80038ee <_printf_i+0xf6>
 8003a14:	08003ce9 	.word	0x08003ce9
 8003a18:	08003cfa 	.word	0x08003cfa

08003a1c <memcpy>:
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	1e43      	subs	r3, r0, #1
 8003a20:	440a      	add	r2, r1
 8003a22:	4291      	cmp	r1, r2
 8003a24:	d100      	bne.n	8003a28 <memcpy+0xc>
 8003a26:	bd10      	pop	{r4, pc}
 8003a28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a30:	e7f7      	b.n	8003a22 <memcpy+0x6>

08003a32 <memmove>:
 8003a32:	4288      	cmp	r0, r1
 8003a34:	b510      	push	{r4, lr}
 8003a36:	eb01 0302 	add.w	r3, r1, r2
 8003a3a:	d807      	bhi.n	8003a4c <memmove+0x1a>
 8003a3c:	1e42      	subs	r2, r0, #1
 8003a3e:	4299      	cmp	r1, r3
 8003a40:	d00a      	beq.n	8003a58 <memmove+0x26>
 8003a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a46:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a4a:	e7f8      	b.n	8003a3e <memmove+0xc>
 8003a4c:	4283      	cmp	r3, r0
 8003a4e:	d9f5      	bls.n	8003a3c <memmove+0xa>
 8003a50:	1881      	adds	r1, r0, r2
 8003a52:	1ad2      	subs	r2, r2, r3
 8003a54:	42d3      	cmn	r3, r2
 8003a56:	d100      	bne.n	8003a5a <memmove+0x28>
 8003a58:	bd10      	pop	{r4, pc}
 8003a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a62:	e7f7      	b.n	8003a54 <memmove+0x22>

08003a64 <_free_r>:
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	4605      	mov	r5, r0
 8003a68:	2900      	cmp	r1, #0
 8003a6a:	d045      	beq.n	8003af8 <_free_r+0x94>
 8003a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a70:	1f0c      	subs	r4, r1, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bfb8      	it	lt
 8003a76:	18e4      	addlt	r4, r4, r3
 8003a78:	f000 f8d2 	bl	8003c20 <__malloc_lock>
 8003a7c:	4a1f      	ldr	r2, [pc, #124]	; (8003afc <_free_r+0x98>)
 8003a7e:	6813      	ldr	r3, [r2, #0]
 8003a80:	4610      	mov	r0, r2
 8003a82:	b933      	cbnz	r3, 8003a92 <_free_r+0x2e>
 8003a84:	6063      	str	r3, [r4, #4]
 8003a86:	6014      	str	r4, [r2, #0]
 8003a88:	4628      	mov	r0, r5
 8003a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a8e:	f000 b8c8 	b.w	8003c22 <__malloc_unlock>
 8003a92:	42a3      	cmp	r3, r4
 8003a94:	d90c      	bls.n	8003ab0 <_free_r+0x4c>
 8003a96:	6821      	ldr	r1, [r4, #0]
 8003a98:	1862      	adds	r2, r4, r1
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	bf04      	itt	eq
 8003a9e:	681a      	ldreq	r2, [r3, #0]
 8003aa0:	685b      	ldreq	r3, [r3, #4]
 8003aa2:	6063      	str	r3, [r4, #4]
 8003aa4:	bf04      	itt	eq
 8003aa6:	1852      	addeq	r2, r2, r1
 8003aa8:	6022      	streq	r2, [r4, #0]
 8003aaa:	6004      	str	r4, [r0, #0]
 8003aac:	e7ec      	b.n	8003a88 <_free_r+0x24>
 8003aae:	4613      	mov	r3, r2
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	b10a      	cbz	r2, 8003ab8 <_free_r+0x54>
 8003ab4:	42a2      	cmp	r2, r4
 8003ab6:	d9fa      	bls.n	8003aae <_free_r+0x4a>
 8003ab8:	6819      	ldr	r1, [r3, #0]
 8003aba:	1858      	adds	r0, r3, r1
 8003abc:	42a0      	cmp	r0, r4
 8003abe:	d10b      	bne.n	8003ad8 <_free_r+0x74>
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	4401      	add	r1, r0
 8003ac4:	1858      	adds	r0, r3, r1
 8003ac6:	4282      	cmp	r2, r0
 8003ac8:	6019      	str	r1, [r3, #0]
 8003aca:	d1dd      	bne.n	8003a88 <_free_r+0x24>
 8003acc:	6810      	ldr	r0, [r2, #0]
 8003ace:	6852      	ldr	r2, [r2, #4]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	4401      	add	r1, r0
 8003ad4:	6019      	str	r1, [r3, #0]
 8003ad6:	e7d7      	b.n	8003a88 <_free_r+0x24>
 8003ad8:	d902      	bls.n	8003ae0 <_free_r+0x7c>
 8003ada:	230c      	movs	r3, #12
 8003adc:	602b      	str	r3, [r5, #0]
 8003ade:	e7d3      	b.n	8003a88 <_free_r+0x24>
 8003ae0:	6820      	ldr	r0, [r4, #0]
 8003ae2:	1821      	adds	r1, r4, r0
 8003ae4:	428a      	cmp	r2, r1
 8003ae6:	bf04      	itt	eq
 8003ae8:	6811      	ldreq	r1, [r2, #0]
 8003aea:	6852      	ldreq	r2, [r2, #4]
 8003aec:	6062      	str	r2, [r4, #4]
 8003aee:	bf04      	itt	eq
 8003af0:	1809      	addeq	r1, r1, r0
 8003af2:	6021      	streq	r1, [r4, #0]
 8003af4:	605c      	str	r4, [r3, #4]
 8003af6:	e7c7      	b.n	8003a88 <_free_r+0x24>
 8003af8:	bd38      	pop	{r3, r4, r5, pc}
 8003afa:	bf00      	nop
 8003afc:	200000b0 	.word	0x200000b0

08003b00 <_malloc_r>:
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	1ccd      	adds	r5, r1, #3
 8003b04:	f025 0503 	bic.w	r5, r5, #3
 8003b08:	3508      	adds	r5, #8
 8003b0a:	2d0c      	cmp	r5, #12
 8003b0c:	bf38      	it	cc
 8003b0e:	250c      	movcc	r5, #12
 8003b10:	2d00      	cmp	r5, #0
 8003b12:	4606      	mov	r6, r0
 8003b14:	db01      	blt.n	8003b1a <_malloc_r+0x1a>
 8003b16:	42a9      	cmp	r1, r5
 8003b18:	d903      	bls.n	8003b22 <_malloc_r+0x22>
 8003b1a:	230c      	movs	r3, #12
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	2000      	movs	r0, #0
 8003b20:	bd70      	pop	{r4, r5, r6, pc}
 8003b22:	f000 f87d 	bl	8003c20 <__malloc_lock>
 8003b26:	4a21      	ldr	r2, [pc, #132]	; (8003bac <_malloc_r+0xac>)
 8003b28:	6814      	ldr	r4, [r2, #0]
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	b991      	cbnz	r1, 8003b54 <_malloc_r+0x54>
 8003b2e:	4c20      	ldr	r4, [pc, #128]	; (8003bb0 <_malloc_r+0xb0>)
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	b91b      	cbnz	r3, 8003b3c <_malloc_r+0x3c>
 8003b34:	4630      	mov	r0, r6
 8003b36:	f000 f863 	bl	8003c00 <_sbrk_r>
 8003b3a:	6020      	str	r0, [r4, #0]
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f000 f85e 	bl	8003c00 <_sbrk_r>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d124      	bne.n	8003b92 <_malloc_r+0x92>
 8003b48:	230c      	movs	r3, #12
 8003b4a:	6033      	str	r3, [r6, #0]
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f000 f868 	bl	8003c22 <__malloc_unlock>
 8003b52:	e7e4      	b.n	8003b1e <_malloc_r+0x1e>
 8003b54:	680b      	ldr	r3, [r1, #0]
 8003b56:	1b5b      	subs	r3, r3, r5
 8003b58:	d418      	bmi.n	8003b8c <_malloc_r+0x8c>
 8003b5a:	2b0b      	cmp	r3, #11
 8003b5c:	d90f      	bls.n	8003b7e <_malloc_r+0x7e>
 8003b5e:	600b      	str	r3, [r1, #0]
 8003b60:	50cd      	str	r5, [r1, r3]
 8003b62:	18cc      	adds	r4, r1, r3
 8003b64:	4630      	mov	r0, r6
 8003b66:	f000 f85c 	bl	8003c22 <__malloc_unlock>
 8003b6a:	f104 000b 	add.w	r0, r4, #11
 8003b6e:	1d23      	adds	r3, r4, #4
 8003b70:	f020 0007 	bic.w	r0, r0, #7
 8003b74:	1ac3      	subs	r3, r0, r3
 8003b76:	d0d3      	beq.n	8003b20 <_malloc_r+0x20>
 8003b78:	425a      	negs	r2, r3
 8003b7a:	50e2      	str	r2, [r4, r3]
 8003b7c:	e7d0      	b.n	8003b20 <_malloc_r+0x20>
 8003b7e:	428c      	cmp	r4, r1
 8003b80:	684b      	ldr	r3, [r1, #4]
 8003b82:	bf16      	itet	ne
 8003b84:	6063      	strne	r3, [r4, #4]
 8003b86:	6013      	streq	r3, [r2, #0]
 8003b88:	460c      	movne	r4, r1
 8003b8a:	e7eb      	b.n	8003b64 <_malloc_r+0x64>
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	6849      	ldr	r1, [r1, #4]
 8003b90:	e7cc      	b.n	8003b2c <_malloc_r+0x2c>
 8003b92:	1cc4      	adds	r4, r0, #3
 8003b94:	f024 0403 	bic.w	r4, r4, #3
 8003b98:	42a0      	cmp	r0, r4
 8003b9a:	d005      	beq.n	8003ba8 <_malloc_r+0xa8>
 8003b9c:	1a21      	subs	r1, r4, r0
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	f000 f82e 	bl	8003c00 <_sbrk_r>
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	d0cf      	beq.n	8003b48 <_malloc_r+0x48>
 8003ba8:	6025      	str	r5, [r4, #0]
 8003baa:	e7db      	b.n	8003b64 <_malloc_r+0x64>
 8003bac:	200000b0 	.word	0x200000b0
 8003bb0:	200000b4 	.word	0x200000b4

08003bb4 <_realloc_r>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	4607      	mov	r7, r0
 8003bb8:	4614      	mov	r4, r2
 8003bba:	460e      	mov	r6, r1
 8003bbc:	b921      	cbnz	r1, 8003bc8 <_realloc_r+0x14>
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bc4:	f7ff bf9c 	b.w	8003b00 <_malloc_r>
 8003bc8:	b922      	cbnz	r2, 8003bd4 <_realloc_r+0x20>
 8003bca:	f7ff ff4b 	bl	8003a64 <_free_r>
 8003bce:	4625      	mov	r5, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd4:	f000 f826 	bl	8003c24 <_malloc_usable_size_r>
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d20f      	bcs.n	8003bfc <_realloc_r+0x48>
 8003bdc:	4621      	mov	r1, r4
 8003bde:	4638      	mov	r0, r7
 8003be0:	f7ff ff8e 	bl	8003b00 <_malloc_r>
 8003be4:	4605      	mov	r5, r0
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d0f2      	beq.n	8003bd0 <_realloc_r+0x1c>
 8003bea:	4631      	mov	r1, r6
 8003bec:	4622      	mov	r2, r4
 8003bee:	f7ff ff15 	bl	8003a1c <memcpy>
 8003bf2:	4631      	mov	r1, r6
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	f7ff ff35 	bl	8003a64 <_free_r>
 8003bfa:	e7e9      	b.n	8003bd0 <_realloc_r+0x1c>
 8003bfc:	4635      	mov	r5, r6
 8003bfe:	e7e7      	b.n	8003bd0 <_realloc_r+0x1c>

08003c00 <_sbrk_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4c06      	ldr	r4, [pc, #24]	; (8003c1c <_sbrk_r+0x1c>)
 8003c04:	2300      	movs	r3, #0
 8003c06:	4605      	mov	r5, r0
 8003c08:	4608      	mov	r0, r1
 8003c0a:	6023      	str	r3, [r4, #0]
 8003c0c:	f7ff fb3a 	bl	8003284 <_sbrk>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d102      	bne.n	8003c1a <_sbrk_r+0x1a>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	b103      	cbz	r3, 8003c1a <_sbrk_r+0x1a>
 8003c18:	602b      	str	r3, [r5, #0]
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
 8003c1c:	2000016c 	.word	0x2000016c

08003c20 <__malloc_lock>:
 8003c20:	4770      	bx	lr

08003c22 <__malloc_unlock>:
 8003c22:	4770      	bx	lr

08003c24 <_malloc_usable_size_r>:
 8003c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c28:	1f18      	subs	r0, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bfbc      	itt	lt
 8003c2e:	580b      	ldrlt	r3, [r1, r0]
 8003c30:	18c0      	addlt	r0, r0, r3
 8003c32:	4770      	bx	lr

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
